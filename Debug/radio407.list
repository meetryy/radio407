
radio407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d828  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000bebc  0800d9b8  0800d9b8  0001d9b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019874  08019874  000306f4  2**0
                  CONTENTS
  4 .ARM          00000008  08019874  08019874  00029874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801987c  0801987c  000306f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801987c  0801987c  0002987c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019880  08019880  00029880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006f4  20000000  08019884  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000bc80  200006f8  08019f78  000306f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000c378  08019f78  0003c378  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000306f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00044018  00000000  00000000  00030724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009013  00000000  00000000  0007473c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000249ce  00000000  00000000  0007d74f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019e0  00000000  00000000  000a2120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000041d0  00000000  00000000  000a3b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002953f  00000000  00000000  000a7cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009be8  00000000  00000000  000d120f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c1  00000000  00000000  000dadf7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006aa0  00000000  00000000  000daeb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200006f8 	.word	0x200006f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d9a0 	.word	0x0800d9a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200006fc 	.word	0x200006fc
 80001cc:	0800d9a0 	.word	0x0800d9a0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96e 	b.w	8000f3c <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468c      	mov	ip, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8083 	bne.w	8000d8e <__udivmoddi4+0x116>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d947      	bls.n	8000d1e <__udivmoddi4+0xa6>
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b142      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	f1c2 0020 	rsb	r0, r2, #32
 8000c98:	fa24 f000 	lsr.w	r0, r4, r0
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4097      	lsls	r7, r2
 8000ca0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb0:	fa1f fe87 	uxth.w	lr, r7
 8000cb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cca:	f080 8119 	bcs.w	8000f00 <__udivmoddi4+0x288>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8116 	bls.w	8000f00 <__udivmoddi4+0x288>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8105 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f240 8102 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	b11d      	cbz	r5, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c5 4300 	strd	r4, r3, [r5]
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xaa>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d150      	bne.n	8000dcc <__udivmoddi4+0x154>
 8000d2a:	1bcb      	subs	r3, r1, r7
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	2601      	movs	r6, #1
 8000d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb08 f30c 	mul.w	r3, r8, ip
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000d4c:	1879      	adds	r1, r7, r1
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0xe2>
 8000d54:	428b      	cmp	r3, r1
 8000d56:	f200 80e9 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1ac9      	subs	r1, r1, r3
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x10c>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x10a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80d9 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e7bf      	b.n	8000d0e <__udivmoddi4+0x96>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x12e>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80b1 	beq.w	8000efa <__udivmoddi4+0x282>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x1cc>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0x140>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80b8 	bhi.w	8000f28 <__udivmoddi4+0x2b0>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0103 	sbc.w	r1, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0a8      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000dc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd4:	4097      	lsls	r7, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	4330      	orrs	r0, r6
 8000de2:	0c03      	lsrs	r3, r0, #16
 8000de4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000de8:	fa1f f887 	uxth.w	r8, r7
 8000dec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb06 f108 	mul.w	r1, r6, r8
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfe:	d909      	bls.n	8000e14 <__udivmoddi4+0x19c>
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e06:	f080 808d 	bcs.w	8000f24 <__udivmoddi4+0x2ac>
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	f240 808a 	bls.w	8000f24 <__udivmoddi4+0x2ac>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	443b      	add	r3, r7
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b281      	uxth	r1, r0
 8000e18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb00 f308 	mul.w	r3, r0, r8
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x1c4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e32:	d273      	bcs.n	8000f1c <__udivmoddi4+0x2a4>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d971      	bls.n	8000f1c <__udivmoddi4+0x2a4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4439      	add	r1, r7
 8000e3c:	1acb      	subs	r3, r1, r3
 8000e3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e42:	e778      	b.n	8000d36 <__udivmoddi4+0xbe>
 8000e44:	f1c6 0c20 	rsb	ip, r6, #32
 8000e48:	fa03 f406 	lsl.w	r4, r3, r6
 8000e4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e50:	431c      	orrs	r4, r3
 8000e52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e62:	431f      	orrs	r7, r3
 8000e64:	0c3b      	lsrs	r3, r7, #16
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fa1f f884 	uxth.w	r8, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e76:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7a:	458a      	cmp	sl, r1
 8000e7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e80:	fa00 f306 	lsl.w	r3, r0, r6
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x220>
 8000e86:	1861      	adds	r1, r4, r1
 8000e88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e8c:	d248      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	d946      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4421      	add	r1, r4
 8000e98:	eba1 010a 	sub.w	r1, r1, sl
 8000e9c:	b2bf      	uxth	r7, r7
 8000e9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ea6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eaa:	fb00 f808 	mul.w	r8, r0, r8
 8000eae:	45b8      	cmp	r8, r7
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x24a>
 8000eb2:	19e7      	adds	r7, r4, r7
 8000eb4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb8:	d22e      	bcs.n	8000f18 <__udivmoddi4+0x2a0>
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d92c      	bls.n	8000f18 <__udivmoddi4+0x2a0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4427      	add	r7, r4
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	eba7 0708 	sub.w	r7, r7, r8
 8000eca:	fba0 8902 	umull	r8, r9, r0, r2
 8000ece:	454f      	cmp	r7, r9
 8000ed0:	46c6      	mov	lr, r8
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	d31a      	bcc.n	8000f0c <__udivmoddi4+0x294>
 8000ed6:	d017      	beq.n	8000f08 <__udivmoddi4+0x290>
 8000ed8:	b15d      	cbz	r5, 8000ef2 <__udivmoddi4+0x27a>
 8000eda:	ebb3 020e 	subs.w	r2, r3, lr
 8000ede:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ee6:	40f2      	lsrs	r2, r6
 8000ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eec:	40f7      	lsrs	r7, r6
 8000eee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e70b      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6fd      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f08:	4543      	cmp	r3, r8
 8000f0a:	d2e5      	bcs.n	8000ed8 <__udivmoddi4+0x260>
 8000f0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f10:	eb69 0104 	sbc.w	r1, r9, r4
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7df      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e7d2      	b.n	8000ec2 <__udivmoddi4+0x24a>
 8000f1c:	4660      	mov	r0, ip
 8000f1e:	e78d      	b.n	8000e3c <__udivmoddi4+0x1c4>
 8000f20:	4681      	mov	r9, r0
 8000f22:	e7b9      	b.n	8000e98 <__udivmoddi4+0x220>
 8000f24:	4666      	mov	r6, ip
 8000f26:	e775      	b.n	8000e14 <__udivmoddi4+0x19c>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e74a      	b.n	8000dc2 <__udivmoddi4+0x14a>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	4439      	add	r1, r7
 8000f32:	e713      	b.n	8000d5c <__udivmoddi4+0xe4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e724      	b.n	8000d84 <__udivmoddi4+0x10c>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f40:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f42:	2300      	movs	r3, #0
{
 8000f44:	b099      	sub	sp, #100	; 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f46:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 8000f4a:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f4e:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8000f52:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f56:	e9cd 3303 	strd	r3, r3, [sp, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f5a:	4929      	ldr	r1, [pc, #164]	; (8001000 <SystemClock_Config+0xc0>)
 8000f5c:	9300      	str	r3, [sp, #0]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f5e:	9306      	str	r3, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f60:	9302      	str	r3, [sp, #8]
 8000f62:	9305      	str	r3, [sp, #20]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f64:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f66:	4a27      	ldr	r2, [pc, #156]	; (8001004 <SystemClock_Config+0xc4>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f68:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8000f6c:	6408      	str	r0, [r1, #64]	; 0x40
 8000f6e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000f70:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8000f74:	9100      	str	r1, [sp, #0]
 8000f76:	9900      	ldr	r1, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f78:	9301      	str	r3, [sp, #4]
 8000f7a:	6813      	ldr	r3, [r2, #0]
 8000f7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f80:	6013      	str	r3, [r2, #0]
 8000f82:	6813      	ldr	r3, [r2, #0]
 8000f84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f88:	9301      	str	r3, [sp, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f90:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f94:	2202      	movs	r2, #2
 8000f96:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f9a:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8000f9e:	2204      	movs	r2, #4
 8000fa0:	23a8      	movs	r3, #168	; 0xa8
 8000fa2:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 168;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fa6:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fa8:	2202      	movs	r2, #2
 8000faa:	2307      	movs	r3, #7
 8000fac:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fb0:	9901      	ldr	r1, [sp, #4]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb2:	f002 fd0b 	bl	80039cc <HAL_RCC_OscConfig>
 8000fb6:	b108      	cbz	r0, 8000fbc <SystemClock_Config+0x7c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fb8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fba:	e7fe      	b.n	8000fba <SystemClock_Config+0x7a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fbc:	240f      	movs	r4, #15
 8000fbe:	2502      	movs	r5, #2
 8000fc0:	e9cd 4506 	strd	r4, r5, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000fc4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc8:	2400      	movs	r4, #0
 8000fca:	f44f 55a0 	mov.w	r5, #5120	; 0x1400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000fce:	a806      	add	r0, sp, #24
 8000fd0:	2105      	movs	r1, #5
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fd2:	e9cd 4508 	strd	r4, r5, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000fd6:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000fd8:	f002 ff14 	bl	8003e04 <HAL_RCC_ClockConfig>
 8000fdc:	b108      	cbz	r0, 8000fe2 <SystemClock_Config+0xa2>
 8000fde:	b672      	cpsid	i
  while (1)
 8000fe0:	e7fe      	b.n	8000fe0 <SystemClock_Config+0xa0>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000fe2:	2401      	movs	r4, #1
 8000fe4:	25b8      	movs	r5, #184	; 0xb8
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 3;
 8000fe6:	2303      	movs	r3, #3
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fe8:	a802      	add	r0, sp, #8
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000fea:	e9cd 4502 	strd	r4, r5, [sp, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 3;
 8000fee:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ff0:	f002 ffcc 	bl	8003f8c <HAL_RCCEx_PeriphCLKConfig>
 8000ff4:	b108      	cbz	r0, 8000ffa <SystemClock_Config+0xba>
 8000ff6:	b672      	cpsid	i
  while (1)
 8000ff8:	e7fe      	b.n	8000ff8 <SystemClock_Config+0xb8>
}
 8000ffa:	b019      	add	sp, #100	; 0x64
 8000ffc:	bd30      	pop	{r4, r5, pc}
 8000ffe:	bf00      	nop
 8001000:	40023800 	.word	0x40023800
 8001004:	40007000 	.word	0x40007000

08001008 <main>:
{
 8001008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800100c:	ed2d 8b02 	vpush	{d8}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001010:	2400      	movs	r4, #0
{
 8001012:	b08f      	sub	sp, #60	; 0x3c
  HAL_Init();
 8001014:	f000 fdbe 	bl	8001b94 <HAL_Init>
  SystemClock_Config();
 8001018:	f7ff ff92 	bl	8000f40 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101c:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8001020:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001024:	4dad      	ldr	r5, [pc, #692]	; (80012dc <main+0x2d4>)
 8001026:	9403      	str	r4, [sp, #12]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001028:	940c      	str	r4, [sp, #48]	; 0x30
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800102a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 800102c:	48ac      	ldr	r0, [pc, #688]	; (80012e0 <main+0x2d8>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800102e:	f043 0310 	orr.w	r3, r3, #16
 8001032:	632b      	str	r3, [r5, #48]	; 0x30
 8001034:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001036:	f003 0310 	and.w	r3, r3, #16
 800103a:	9303      	str	r3, [sp, #12]
 800103c:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800103e:	9404      	str	r4, [sp, #16]
 8001040:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001042:	f043 0304 	orr.w	r3, r3, #4
 8001046:	632b      	str	r3, [r5, #48]	; 0x30
 8001048:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800104a:	f003 0304 	and.w	r3, r3, #4
 800104e:	9304      	str	r3, [sp, #16]
 8001050:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001052:	9405      	str	r4, [sp, #20]
 8001054:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001056:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800105a:	632b      	str	r3, [r5, #48]	; 0x30
 800105c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800105e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001062:	9305      	str	r3, [sp, #20]
 8001064:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001066:	9406      	str	r4, [sp, #24]
 8001068:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800106a:	f043 0301 	orr.w	r3, r3, #1
 800106e:	632b      	str	r3, [r5, #48]	; 0x30
 8001070:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	9306      	str	r3, [sp, #24]
 8001078:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800107a:	9407      	str	r4, [sp, #28]
 800107c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800107e:	f043 0302 	orr.w	r3, r3, #2
 8001082:	632b      	str	r3, [r5, #48]	; 0x30
 8001084:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8001086:	2201      	movs	r2, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001088:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 800108c:	4611      	mov	r1, r2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800108e:	9307      	str	r3, [sp, #28]
 8001090:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8001092:	f001 fbc3 	bl	800281c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8001096:	4622      	mov	r2, r4
 8001098:	4892      	ldr	r0, [pc, #584]	; (80012e4 <main+0x2dc>)
 800109a:	21c0      	movs	r1, #192	; 0xc0
 800109c:	f001 fbbe 	bl	800281c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, GPIO_PIN_SET);
 80010a0:	4891      	ldr	r0, [pc, #580]	; (80012e8 <main+0x2e0>)
 80010a2:	2201      	movs	r2, #1
 80010a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010a8:	f001 fbb8 	bl	800281c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LCD_DC_Pin|LCD_RST_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 80010ac:	4622      	mov	r2, r4
 80010ae:	488e      	ldr	r0, [pc, #568]	; (80012e8 <main+0x2e0>)
 80010b0:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80010b4:	f001 fbb2 	bl	800281c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010b8:	f04f 0a01 	mov.w	sl, #1
  GPIO_InitStruct.Pin = KEY1_Pin|KEY0_Pin;
 80010bc:	2218      	movs	r2, #24
 80010be:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010c0:	488a      	ldr	r0, [pc, #552]	; (80012ec <main+0x2e4>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010c2:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010c6:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = KEY1_Pin|KEY0_Pin;
 80010c8:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010cc:	f04f 0801 	mov.w	r8, #1
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010d0:	f001 fa8e 	bl	80025f0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010d4:	f04f 0901 	mov.w	r9, #1
 80010d8:	2201      	movs	r2, #1
 80010da:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010dc:	4880      	ldr	r0, [pc, #512]	; (80012e0 <main+0x2d8>)
 80010de:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010e0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 80010e4:	2600      	movs	r6, #0
 80010e6:	2700      	movs	r7, #0
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010e8:	e9cd 8908 	strd	r8, r9, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ec:	f001 fa80 	bl	80025f0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 80010f0:	22c0      	movs	r2, #192	; 0xc0
 80010f2:	2311      	movs	r3, #17
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f4:	487b      	ldr	r0, [pc, #492]	; (80012e4 <main+0x2dc>)
 80010f6:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 80010f8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80010fc:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001100:	f001 fa76 	bl	80025f0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ENC1A_Pin|ENC1B_Pin|ENC2A_Pin|ENC2B_Pin;
 8001104:	4b7a      	ldr	r3, [pc, #488]	; (80012f0 <main+0x2e8>)
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001106:	4879      	ldr	r0, [pc, #484]	; (80012ec <main+0x2e4>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001108:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = ENC1A_Pin|ENC1B_Pin|ENC2A_Pin|ENC2B_Pin;
 800110c:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001110:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = ENC1A_Pin|ENC1B_Pin|ENC2A_Pin|ENC2B_Pin;
 8001112:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001116:	f001 fa6b 	bl	80025f0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CODEC_CS_Pin;
 800111a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800111e:	2301      	movs	r3, #1
 8001120:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(CODEC_CS_GPIO_Port, &GPIO_InitStruct);
 8001124:	4870      	ldr	r0, [pc, #448]	; (80012e8 <main+0x2e0>)
  GPIO_InitStruct.Pin = CODEC_CS_Pin;
 8001126:	2201      	movs	r2, #1
 8001128:	2303      	movs	r3, #3
  HAL_GPIO_Init(CODEC_CS_GPIO_Port, &GPIO_InitStruct);
 800112a:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = CODEC_CS_Pin;
 800112c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(CODEC_CS_GPIO_Port, &GPIO_InitStruct);
 8001130:	f001 fa5e 	bl	80025f0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_CS_Pin;
 8001134:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001138:	2301      	movs	r3, #1
 800113a:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800113e:	486a      	ldr	r0, [pc, #424]	; (80012e8 <main+0x2e0>)
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_CS_Pin;
 8001140:	2200      	movs	r2, #0
 8001142:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001144:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_CS_Pin;
 8001146:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800114a:	f001 fa51 	bl	80025f0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 800114e:	2301      	movs	r3, #1
 8001150:	2280      	movs	r2, #128	; 0x80
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 8001152:	4865      	ldr	r0, [pc, #404]	; (80012e8 <main+0x2e0>)
 8001154:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 8001156:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800115a:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 800115e:	f001 fa47 	bl	80025f0 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001162:	4622      	mov	r2, r4
 8001164:	4621      	mov	r1, r4
 8001166:	2028      	movs	r0, #40	; 0x28
 8001168:	f000 ffbc 	bl	80020e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800116c:	2028      	movs	r0, #40	; 0x28
 800116e:	f000 fff1 	bl	8002154 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001172:	9401      	str	r4, [sp, #4]
 8001174:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001176:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800117a:	632b      	str	r3, [r5, #48]	; 0x30
 800117c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800117e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001182:	9301      	str	r3, [sp, #4]
 8001184:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001186:	9402      	str	r4, [sp, #8]
 8001188:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800118a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800118e:	632b      	str	r3, [r5, #48]	; 0x30
 8001190:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001192:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001196:	4622      	mov	r2, r4
 8001198:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 800119a:	9302      	str	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800119c:	200e      	movs	r0, #14
  __HAL_RCC_DMA1_CLK_ENABLE();
 800119e:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80011a0:	f000 ffa0 	bl	80020e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80011a4:	200e      	movs	r0, #14
 80011a6:	f000 ffd5 	bl	8002154 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80011aa:	4622      	mov	r2, r4
 80011ac:	4621      	mov	r1, r4
 80011ae:	200f      	movs	r0, #15
 80011b0:	f000 ff98 	bl	80020e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80011b4:	200f      	movs	r0, #15
 80011b6:	f000 ffcd 	bl	8002154 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80011ba:	4622      	mov	r2, r4
 80011bc:	4621      	mov	r1, r4
 80011be:	2038      	movs	r0, #56	; 0x38
 80011c0:	f000 ff90 	bl	80020e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80011c4:	2038      	movs	r0, #56	; 0x38
 80011c6:	f000 ffc5 	bl	8002154 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80011ca:	4622      	mov	r2, r4
 80011cc:	4621      	mov	r1, r4
 80011ce:	203b      	movs	r0, #59	; 0x3b
 80011d0:	f000 ff88 	bl	80020e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80011d4:	203b      	movs	r0, #59	; 0x3b
 80011d6:	f000 ffbd 	bl	8002154 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80011da:	4622      	mov	r2, r4
 80011dc:	4621      	mov	r1, r4
 80011de:	2046      	movs	r0, #70	; 0x46
 80011e0:	f000 ff80 	bl	80020e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80011e4:	2046      	movs	r0, #70	; 0x46
 80011e6:	f000 ffb5 	bl	8002154 <HAL_NVIC_EnableIRQ>
  MX_USB_DEVICE_Init();
 80011ea:	f005 fabf 	bl	800676c <MX_USB_DEVICE_Init>
  hspi1.Instance = SPI1;
 80011ee:	4841      	ldr	r0, [pc, #260]	; (80012f4 <main+0x2ec>)
 80011f0:	4b41      	ldr	r3, [pc, #260]	; (80012f8 <main+0x2f0>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011f2:	6084      	str	r4, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011f4:	e9c0 4403 	strd	r4, r4, [r0, #12]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011f8:	e9c0 4407 	strd	r4, r4, [r0, #28]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011fc:	e9c0 4409 	strd	r4, r4, [r0, #36]	; 0x24
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001200:	f44f 7582 	mov.w	r5, #260	; 0x104
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001204:	f44f 7b00 	mov.w	fp, #512	; 0x200
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001208:	6144      	str	r4, [r0, #20]
  hspi1.Init.CRCPolynomial = 10;
 800120a:	240a      	movs	r4, #10
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800120c:	e9c0 3500 	strd	r3, r5, [r0]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001210:	f8c0 b018 	str.w	fp, [r0, #24]
  hspi1.Init.CRCPolynomial = 10;
 8001214:	62c4      	str	r4, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001216:	f002 ffdf 	bl	80041d8 <HAL_SPI_Init>
 800121a:	b108      	cbz	r0, 8001220 <main+0x218>
 800121c:	b672      	cpsid	i
  while (1)
 800121e:	e7fe      	b.n	800121e <main+0x216>
  hi2s2.Instance = SPI2;
 8001220:	4b36      	ldr	r3, [pc, #216]	; (80012fc <main+0x2f4>)
 8001222:	4937      	ldr	r1, [pc, #220]	; (8001300 <main+0x2f8>)
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8001224:	f8c3 a020 	str.w	sl, [r3, #32]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8001228:	e9c3 b001 	strd	fp, r0, [r3, #4]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800122c:	e9c3 0b03 	strd	r0, fp, [r3, #12]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001230:	e9c3 0006 	strd	r0, r0, [r3, #24]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8001234:	f64b 3280 	movw	r2, #48000	; 0xbb80
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8001238:	4618      	mov	r0, r3
  hi2s2.Instance = SPI2;
 800123a:	6019      	str	r1, [r3, #0]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 800123c:	615a      	str	r2, [r3, #20]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800123e:	f001 faff 	bl	8002840 <HAL_I2S_Init>
 8001242:	b108      	cbz	r0, 8001248 <main+0x240>
 8001244:	b672      	cpsid	i
  while (1)
 8001246:	e7fe      	b.n	8001246 <main+0x23e>
  hspi3.Instance = SPI3;
 8001248:	4b2e      	ldr	r3, [pc, #184]	; (8001304 <main+0x2fc>)
 800124a:	f8df c0d0 	ldr.w	ip, [pc, #208]	; 800131c <main+0x314>
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800124e:	6098      	str	r0, [r3, #8]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001250:	e9c3 0004 	strd	r0, r0, [r3, #16]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001254:	e9c3 0008 	strd	r0, r0, [r3, #32]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8001258:	f44f 6100 	mov.w	r1, #2048	; 0x800
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800125c:	2230      	movs	r2, #48	; 0x30
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800125e:	6298      	str	r0, [r3, #40]	; 0x28
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001260:	4618      	mov	r0, r3
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001262:	605d      	str	r5, [r3, #4]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001264:	f8c3 b018 	str.w	fp, [r3, #24]
  hspi3.Init.CRCPolynomial = 10;
 8001268:	62dc      	str	r4, [r3, #44]	; 0x2c
  hspi3.Instance = SPI3;
 800126a:	f8c3 c000 	str.w	ip, [r3]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 800126e:	60d9      	str	r1, [r3, #12]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001270:	61da      	str	r2, [r3, #28]
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001272:	f002 ffb1 	bl	80041d8 <HAL_SPI_Init>
 8001276:	b9a0      	cbnz	r0, 80012a2 <main+0x29a>
  dbgUartPtr = &huart1;
 8001278:	4b23      	ldr	r3, [pc, #140]	; (8001308 <main+0x300>)
 800127a:	4924      	ldr	r1, [pc, #144]	; (800130c <main+0x304>)
  huart1.Instance = USART1;
 800127c:	4a24      	ldr	r2, [pc, #144]	; (8001310 <main+0x308>)
  huart1.Init.Parity = UART_PARITY_NONE;
 800127e:	6118      	str	r0, [r3, #16]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001280:	e9c3 0002 	strd	r0, r0, [r3, #8]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001284:	e9c3 0006 	strd	r0, r0, [r3, #24]
  dbgUartPtr = &huart1;
 8001288:	600b      	str	r3, [r1, #0]
  huart1.Instance = USART1;
 800128a:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800128c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001290:	220c      	movs	r2, #12
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001292:	4618      	mov	r0, r3
  huart1.Init.BaudRate = 115200;
 8001294:	6059      	str	r1, [r3, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001296:	615a      	str	r2, [r3, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001298:	f003 fc68 	bl	8004b6c <HAL_UART_Init>
 800129c:	b118      	cbz	r0, 80012a6 <main+0x29e>
 800129e:	b672      	cpsid	i
  while (1)
 80012a0:	e7fe      	b.n	80012a0 <main+0x298>
 80012a2:	b672      	cpsid	i
 80012a4:	e7fe      	b.n	80012a4 <main+0x29c>
  htim7.Instance = TIM7;
 80012a6:	4c1b      	ldr	r4, [pc, #108]	; (8001314 <main+0x30c>)
 80012a8:	4a1b      	ldr	r2, [pc, #108]	; (8001318 <main+0x310>)
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012aa:	61a0      	str	r0, [r4, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ac:	e9cd 0008 	strd	r0, r0, [sp, #32]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b0:	e9c4 0001 	strd	r0, r0, [r4, #4]
  htim7.Init.Period = 8399;
 80012b4:	f242 03cf 	movw	r3, #8399	; 0x20cf
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80012b8:	4620      	mov	r0, r4
  htim7.Instance = TIM7;
 80012ba:	6022      	str	r2, [r4, #0]
  htim7.Init.Period = 8399;
 80012bc:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80012be:	f003 fa91 	bl	80047e4 <HAL_TIM_Base_Init>
 80012c2:	b108      	cbz	r0, 80012c8 <main+0x2c0>
 80012c4:	b672      	cpsid	i
  while (1)
 80012c6:	e7fe      	b.n	80012c6 <main+0x2be>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80012c8:	4620      	mov	r0, r4
 80012ca:	a908      	add	r1, sp, #32
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012cc:	e9cd 6708 	strd	r6, r7, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80012d0:	f003 fc06 	bl	8004ae0 <HAL_TIMEx_MasterConfigSynchronization>
 80012d4:	b320      	cbz	r0, 8001320 <main+0x318>
 80012d6:	b672      	cpsid	i
  while (1)
 80012d8:	e7fe      	b.n	80012d8 <main+0x2d0>
 80012da:	bf00      	nop
 80012dc:	40023800 	.word	0x40023800
 80012e0:	40020800 	.word	0x40020800
 80012e4:	40020000 	.word	0x40020000
 80012e8:	40020400 	.word	0x40020400
 80012ec:	40021000 	.word	0x40021000
 80012f0:	10310000 	.word	0x10310000
 80012f4:	200086c8 	.word	0x200086c8
 80012f8:	40013000 	.word	0x40013000
 80012fc:	20008888 	.word	0x20008888
 8001300:	40003800 	.word	0x40003800
 8001304:	20008524 	.word	0x20008524
 8001308:	20008624 	.word	0x20008624
 800130c:	20008520 	.word	0x20008520
 8001310:	40011000 	.word	0x40011000
 8001314:	200087e0 	.word	0x200087e0
 8001318:	40001400 	.word	0x40001400
 800131c:	40003c00 	.word	0x40003c00
  hadc1.Instance = ADC1;
 8001320:	4c55      	ldr	r4, [pc, #340]	; (8001478 <main+0x470>)
 8001322:	4a56      	ldr	r2, [pc, #344]	; (800147c <main+0x474>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001324:	60a0      	str	r0, [r4, #8]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001326:	f44f 3340 	mov.w	r3, #196608	; 0x30000
  ADC_ChannelConfTypeDef sConfig = {0};
 800132a:	e9cd 0008 	strd	r0, r0, [sp, #32]
 800132e:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001332:	f884 0020 	strb.w	r0, [r4, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001336:	62e0      	str	r0, [r4, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001338:	60e0      	str	r0, [r4, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800133a:	6160      	str	r0, [r4, #20]
  hadc1.Instance = ADC1;
 800133c:	6022      	str	r2, [r4, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800133e:	6063      	str	r3, [r4, #4]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001340:	4a4f      	ldr	r2, [pc, #316]	; (8001480 <main+0x478>)
  hadc1.Init.ScanConvMode = ENABLE;
 8001342:	f8c4 a010 	str.w	sl, [r4, #16]
  hadc1.Init.NbrOfConversion = 3;
 8001346:	2303      	movs	r3, #3
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001348:	4620      	mov	r0, r4
  hadc1.Init.ContinuousConvMode = ENABLE;
 800134a:	f884 a018 	strb.w	sl, [r4, #24]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800134e:	f884 a030 	strb.w	sl, [r4, #48]	; 0x30
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001352:	62a2      	str	r2, [r4, #40]	; 0x28
  hadc1.Init.NbrOfConversion = 3;
 8001354:	61e3      	str	r3, [r4, #28]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001356:	f000 fc5b 	bl	8001c10 <HAL_ADC_Init>
 800135a:	b108      	cbz	r0, 8001360 <main+0x358>
 800135c:	b672      	cpsid	i
  while (1)
 800135e:	e7fe      	b.n	800135e <main+0x356>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001360:	a908      	add	r1, sp, #32
 8001362:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_1;
 8001364:	e9cd 8908 	strd	r8, r9, [sp, #32]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001368:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800136c:	f000 fdfe 	bl	8001f6c <HAL_ADC_ConfigChannel>
 8001370:	b108      	cbz	r0, 8001376 <main+0x36e>
 8001372:	b672      	cpsid	i
  while (1)
 8001374:	e7fe      	b.n	8001374 <main+0x36c>
  sConfig.Channel = ADC_CHANNEL_2;
 8001376:	2202      	movs	r2, #2
 8001378:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800137a:	a908      	add	r1, sp, #32
 800137c:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_2;
 800137e:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001382:	f000 fdf3 	bl	8001f6c <HAL_ADC_ConfigChannel>
 8001386:	b108      	cbz	r0, 800138c <main+0x384>
 8001388:	b672      	cpsid	i
  while (1)
 800138a:	e7fe      	b.n	800138a <main+0x382>
  sConfig.Channel = ADC_CHANNEL_3;
 800138c:	2203      	movs	r2, #3
 800138e:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001390:	a908      	add	r1, sp, #32
 8001392:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_3;
 8001394:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001398:	f000 fde8 	bl	8001f6c <HAL_ADC_ConfigChannel>
 800139c:	b108      	cbz	r0, 80013a2 <main+0x39a>
 800139e:	b672      	cpsid	i
  while (1)
 80013a0:	e7fe      	b.n	80013a0 <main+0x398>
	HAL_Delay(100);
 80013a2:	2064      	movs	r0, #100	; 0x64
 80013a4:	f000 fc22 	bl	8001bec <HAL_Delay>
	debugInit();
 80013a8:	f008 f81c 	bl	80093e4 <debugInit>
	initHardware();
 80013ac:	f007 fe92 	bl	80090d4 <initHardware>
	dspInit();
 80013b0:	f007 faca 	bl	8008948 <dspInit>
	firInit();
 80013b4:	f007 fcda 	bl	8008d6c <firInit>
	fftInit();
 80013b8:	f007 fcd0 	bl	8008d5c <fftInit>
	debugPrint("init done");
 80013bc:	4831      	ldr	r0, [pc, #196]	; (8001484 <main+0x47c>)
 80013be:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8001498 <main+0x490>
 80013c2:	4d31      	ldr	r5, [pc, #196]	; (8001488 <main+0x480>)
		  debugPrint("%i %i", encoder[ENC_LOWER].delta, encoder[ENC_UPPER].delta);
 80013c4:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 800149c <main+0x494>
	  everythingElseLoad = everythingMs/allBufMs*100.0f;
 80013c8:	ed9f 8a30 	vldr	s16, [pc, #192]	; 800148c <main+0x484>
	debugPrint("init done");
 80013cc:	f007 ff4a 	bl	8009264 <debugPrint>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 80013d0:	482f      	ldr	r0, [pc, #188]	; (8001490 <main+0x488>)
 80013d2:	2201      	movs	r2, #1
 80013d4:	2140      	movs	r1, #64	; 0x40
 80013d6:	f001 fa21 	bl	800281c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 80013da:	2200      	movs	r2, #0
 80013dc:	2180      	movs	r1, #128	; 0x80
 80013de:	482c      	ldr	r0, [pc, #176]	; (8001490 <main+0x488>)
 80013e0:	f001 fa1c 	bl	800281c <HAL_GPIO_WritePin>
	HAL_TIM_Base_Start_IT(&htim7);
 80013e4:	482b      	ldr	r0, [pc, #172]	; (8001494 <main+0x48c>)
 80013e6:	f003 fa8b 	bl	8004900 <HAL_TIM_Base_Start_IT>
	  float everythingMs = ((float)timeAllNow/10.0);
 80013ea:	a721      	add	r7, pc, #132	; (adr r7, 8001470 <main+0x468>)
 80013ec:	e9d7 6700 	ldrd	r6, r7, [r7]
	adcStart();
 80013f0:	f006 fc16 	bl	8007c20 <adcStart>
	dspStartAudio();
 80013f4:	f007 faea 	bl	80089cc <dspStartAudio>
	gfxItemsInit();
 80013f8:	f007 fd1a 	bl	8008e30 <gfxItemsInit>
	uint32_t nextTime = 0;
 80013fc:	2400      	movs	r4, #0
	  dspProc();
 80013fe:	f007 faf3 	bl	80089e8 <dspProc>
	  uint32_t timeAllStart = preciseTimerValue();
 8001402:	f008 f82b 	bl	800945c <preciseTimerValue>
 8001406:	4682      	mov	sl, r0
	  uint32_t timeNow = preciseTimerValue();
 8001408:	f008 f828 	bl	800945c <preciseTimerValue>
	  if (timeNow >= nextTime){
 800140c:	4284      	cmp	r4, r0
 800140e:	d816      	bhi.n	800143e <main+0x436>
		  gfxBarSet(G_BAR_AUDIOLOAD, getAudioLoadPossible());
 8001410:	f007 fc42 	bl	8008c98 <getAudioLoadPossible>
 8001414:	2004      	movs	r0, #4
 8001416:	f007 fd45 	bl	8008ea4 <gfxBarSet>
		  gfxBarSet(G_BAR_ELSELOAD, everythingElseLoad);
 800141a:	ed98 0a00 	vldr	s0, [r8]
 800141e:	2005      	movs	r0, #5
 8001420:	f007 fd40 	bl	8008ea4 <gfxBarSet>
		  btnUpdateFromADC();
 8001424:	f007 fa22 	bl	800886c <btnUpdateFromADC>
		  debugPrint("%i %i", encoder[ENC_LOWER].delta, encoder[ENC_UPPER].delta);
 8001428:	68aa      	ldr	r2, [r5, #8]
 800142a:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800142c:	4648      	mov	r0, r9
 800142e:	f007 ff19 	bl	8009264 <debugPrint>
		  gfxItemsRedraw();
 8001432:	f007 fd79 	bl	8008f28 <gfxItemsRedraw>
	  nextTime = preciseTimerValue() + 1000; // every 100ms
 8001436:	f008 f811 	bl	800945c <preciseTimerValue>
 800143a:	f500 747a 	add.w	r4, r0, #1000	; 0x3e8
	  uint32_t timeAllNow = preciseTimerValue() - timeAllStart;
 800143e:	f008 f80d 	bl	800945c <preciseTimerValue>
 8001442:	eba0 000a 	sub.w	r0, r0, sl
	  float everythingMs = ((float)timeAllNow/10.0);
 8001446:	ee07 0a90 	vmov	s15, r0
 800144a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800144e:	ee17 0a90 	vmov	r0, s15
 8001452:	f7ff f879 	bl	8000548 <__aeabi_f2d>
 8001456:	4632      	mov	r2, r6
 8001458:	463b      	mov	r3, r7
 800145a:	f7ff f8cd 	bl	80005f8 <__aeabi_dmul>
 800145e:	f7ff fba3 	bl	8000ba8 <__aeabi_d2f>
	  everythingElseLoad = everythingMs/allBufMs*100.0f;
 8001462:	ee07 0a90 	vmov	s15, r0
 8001466:	ee67 7a88 	vmul.f32	s15, s15, s16
 800146a:	edc8 7a00 	vstr	s15, [r8]
  {
 800146e:	e7c6      	b.n	80013fe <main+0x3f6>
 8001470:	9999999a 	.word	0x9999999a
 8001474:	3fb99999 	.word	0x3fb99999
 8001478:	200085dc 	.word	0x200085dc
 800147c:	40012000 	.word	0x40012000
 8001480:	0f000001 	.word	0x0f000001
 8001484:	0800d9e0 	.word	0x0800d9e0
 8001488:	200002ac 	.word	0x200002ac
 800148c:	4095bccd 	.word	0x4095bccd
 8001490:	40020000 	.word	0x40020000
 8001494:	200087e0 	.word	0x200087e0
 8001498:	20008464 	.word	0x20008464
 800149c:	0800d9ec 	.word	0x0800d9ec

080014a0 <HAL_ADC_ConvCpltCallback>:
	adcSmoothen();
 80014a0:	f006 bbc8 	b.w	8007c34 <adcSmoothen>

080014a4 <Error_Handler>:
 80014a4:	b672      	cpsid	i
  while (1)
 80014a6:	e7fe      	b.n	80014a6 <Error_Handler+0x2>

080014a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014a8:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014aa:	4b0c      	ldr	r3, [pc, #48]	; (80014dc <HAL_MspInit+0x34>)
 80014ac:	2100      	movs	r1, #0
 80014ae:	9100      	str	r1, [sp, #0]
 80014b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80014b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80014b6:	645a      	str	r2, [r3, #68]	; 0x44
 80014b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80014ba:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80014be:	9200      	str	r2, [sp, #0]
 80014c0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014c2:	9101      	str	r1, [sp, #4]
 80014c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014c6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80014ca:	641a      	str	r2, [r3, #64]	; 0x40
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d2:	9301      	str	r3, [sp, #4]
 80014d4:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014d6:	b002      	add	sp, #8
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	40023800 	.word	0x40023800

080014e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014e0:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 80014e2:	6802      	ldr	r2, [r0, #0]
 80014e4:	4b25      	ldr	r3, [pc, #148]	; (800157c <HAL_ADC_MspInit+0x9c>)
{
 80014e6:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e8:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 80014ea:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ec:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80014f0:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80014f4:	9406      	str	r4, [sp, #24]
  if(hadc->Instance==ADC1)
 80014f6:	d001      	beq.n	80014fc <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80014f8:	b008      	add	sp, #32
 80014fa:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014fc:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8001500:	9400      	str	r4, [sp, #0]
 8001502:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    hdma_adc1.Instance = DMA2_Stream0;
 8001504:	4e1e      	ldr	r6, [pc, #120]	; (8001580 <HAL_ADC_MspInit+0xa0>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001506:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800150a:	645a      	str	r2, [r3, #68]	; 0x44
 800150c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800150e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001512:	9200      	str	r2, [sp, #0]
 8001514:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001516:	9401      	str	r4, [sp, #4]
 8001518:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800151a:	f042 0201 	orr.w	r2, r2, #1
 800151e:	631a      	str	r2, [r3, #48]	; 0x30
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001524:	f003 0301 	and.w	r3, r3, #1
 8001528:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800152a:	220e      	movs	r2, #14
 800152c:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800152e:	a902      	add	r1, sp, #8
 8001530:	4605      	mov	r5, r0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001532:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001534:	4813      	ldr	r0, [pc, #76]	; (8001584 <HAL_ADC_MspInit+0xa4>)
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001536:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153a:	f001 f859 	bl	80025f0 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 800153e:	4b12      	ldr	r3, [pc, #72]	; (8001588 <HAL_ADC_MspInit+0xa8>)
 8001540:	6033      	str	r3, [r6, #0]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001542:	f44f 6080 	mov.w	r0, #1024	; 0x400
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001546:	f44f 6100 	mov.w	r1, #2048	; 0x800
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800154a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800154e:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001552:	6130      	str	r0, [r6, #16]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001554:	4630      	mov	r0, r6
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001556:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800155a:	e9c6 4408 	strd	r4, r4, [r6, #32]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800155e:	e9c6 1205 	strd	r1, r2, [r6, #20]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001562:	6074      	str	r4, [r6, #4]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001564:	61f3      	str	r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001566:	f000 fe1d 	bl	80021a4 <HAL_DMA_Init>
 800156a:	b918      	cbnz	r0, 8001574 <HAL_ADC_MspInit+0x94>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800156c:	63ae      	str	r6, [r5, #56]	; 0x38
 800156e:	63b5      	str	r5, [r6, #56]	; 0x38
}
 8001570:	b008      	add	sp, #32
 8001572:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8001574:	f7ff ff96 	bl	80014a4 <Error_Handler>
 8001578:	e7f8      	b.n	800156c <HAL_ADC_MspInit+0x8c>
 800157a:	bf00      	nop
 800157c:	40012000 	.word	0x40012000
 8001580:	20008668 	.word	0x20008668
 8001584:	40020000 	.word	0x40020000
 8001588:	40026410 	.word	0x40026410

0800158c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800158c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hi2s->Instance==SPI2)
 8001590:	6802      	ldr	r2, [r0, #0]
 8001592:	4b52      	ldr	r3, [pc, #328]	; (80016dc <HAL_I2S_MspInit+0x150>)
{
 8001594:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001596:	2400      	movs	r4, #0
  if(hi2s->Instance==SPI2)
 8001598:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159a:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800159e:	e9cd 4406 	strd	r4, r4, [sp, #24]
 80015a2:	9408      	str	r4, [sp, #32]
  if(hi2s->Instance==SPI2)
 80015a4:	d002      	beq.n	80015ac <HAL_I2S_MspInit+0x20>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80015a6:	b00b      	add	sp, #44	; 0x2c
 80015a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 80015ac:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80015b0:	9401      	str	r4, [sp, #4]
 80015b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    hdma_i2s2_ext_rx.Instance = DMA1_Stream3;
 80015b4:	4e4a      	ldr	r6, [pc, #296]	; (80016e0 <HAL_I2S_MspInit+0x154>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 80015b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80015ba:	641a      	str	r2, [r3, #64]	; 0x40
 80015bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015be:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80015c2:	9201      	str	r2, [sp, #4]
 80015c4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015c6:	9402      	str	r4, [sp, #8]
 80015c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015ca:	f042 0204 	orr.w	r2, r2, #4
 80015ce:	631a      	str	r2, [r3, #48]	; 0x30
 80015d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015d2:	f002 0204 	and.w	r2, r2, #4
 80015d6:	9202      	str	r2, [sp, #8]
 80015d8:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015da:	9403      	str	r4, [sp, #12]
 80015dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015de:	f042 0202 	orr.w	r2, r2, #2
 80015e2:	631a      	str	r2, [r3, #48]	; 0x30
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015ec:	2204      	movs	r2, #4
 80015ee:	2302      	movs	r3, #2
 80015f0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80015f4:	f04f 0800 	mov.w	r8, #0
 80015f8:	f04f 0900 	mov.w	r9, #0
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 80015fc:	2306      	movs	r3, #6
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015fe:	9903      	ldr	r1, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8001600:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001602:	a904      	add	r1, sp, #16
 8001604:	4605      	mov	r5, r0
 8001606:	4837      	ldr	r0, [pc, #220]	; (80016e4 <HAL_I2S_MspInit+0x158>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001608:	2705      	movs	r7, #5
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800160a:	e9cd 8906 	strd	r8, r9, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800160e:	f000 ffef 	bl	80025f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8001612:	2248      	movs	r2, #72	; 0x48
 8001614:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001616:	4833      	ldr	r0, [pc, #204]	; (80016e4 <HAL_I2S_MspInit+0x158>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001618:	9708      	str	r7, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800161a:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 800161c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001620:	e9cd 8906 	strd	r8, r9, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001624:	f000 ffe4 	bl	80025f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001628:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800162c:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800162e:	482e      	ldr	r0, [pc, #184]	; (80016e8 <HAL_I2S_MspInit+0x15c>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001630:	9708      	str	r7, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001632:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001634:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001638:	e9cd 8906 	strd	r8, r9, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800163c:	f000 ffd8 	bl	80025f0 <HAL_GPIO_Init>
    hdma_i2s2_ext_rx.Instance = DMA1_Stream3;
 8001640:	482a      	ldr	r0, [pc, #168]	; (80016ec <HAL_I2S_MspInit+0x160>)
 8001642:	6030      	str	r0, [r6, #0]
    hdma_i2s2_ext_rx.Init.Channel = DMA_CHANNEL_3;
 8001644:	f04f 6ec0 	mov.w	lr, #100663296	; 0x6000000
    hdma_i2s2_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001648:	f44f 6c80 	mov.w	ip, #1024	; 0x400
    hdma_i2s2_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800164c:	f44f 6700 	mov.w	r7, #2048	; 0x800
    hdma_i2s2_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001650:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    hdma_i2s2_ext_rx.Init.Mode = DMA_CIRCULAR;
 8001654:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_i2s2_ext_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001658:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    if (HAL_DMA_Init(&hdma_i2s2_ext_rx) != HAL_OK)
 800165c:	4630      	mov	r0, r6
    hdma_i2s2_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800165e:	e9c6 c704 	strd	ip, r7, [r6, #16]
    hdma_i2s2_ext_rx.Init.Mode = DMA_CIRCULAR;
 8001662:	e9c6 1206 	strd	r1, r2, [r6, #24]
    hdma_i2s2_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001666:	60b4      	str	r4, [r6, #8]
    hdma_i2s2_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001668:	60f4      	str	r4, [r6, #12]
    hdma_i2s2_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800166a:	6274      	str	r4, [r6, #36]	; 0x24
    hdma_i2s2_ext_rx.Init.Channel = DMA_CHANNEL_3;
 800166c:	f8c6 e004 	str.w	lr, [r6, #4]
    hdma_i2s2_ext_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001670:	6233      	str	r3, [r6, #32]
    if (HAL_DMA_Init(&hdma_i2s2_ext_rx) != HAL_OK)
 8001672:	f000 fd97 	bl	80021a4 <HAL_DMA_Init>
 8001676:	bb50      	cbnz	r0, 80016ce <HAL_I2S_MspInit+0x142>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001678:	4c1d      	ldr	r4, [pc, #116]	; (80016f0 <HAL_I2S_MspInit+0x164>)
 800167a:	4b1e      	ldr	r3, [pc, #120]	; (80016f4 <HAL_I2S_MspInit+0x168>)
 800167c:	6023      	str	r3, [r4, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800167e:	2140      	movs	r1, #64	; 0x40
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001680:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001684:	f44f 6000 	mov.w	r0, #2048	; 0x800
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001688:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800168c:	60a1      	str	r1, [r4, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800168e:	6122      	str	r2, [r4, #16]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8001690:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001694:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001698:	6160      	str	r0, [r4, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800169a:	61a3      	str	r3, [r4, #24]
    __HAL_LINKDMA(hi2s,hdmarx,hdma_i2s2_ext_rx);
 800169c:	63ee      	str	r6, [r5, #60]	; 0x3c
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 800169e:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80016a0:	4620      	mov	r0, r4
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80016a2:	e9c4 1207 	strd	r1, r2, [r4, #28]
    __HAL_LINKDMA(hi2s,hdmarx,hdma_i2s2_ext_rx);
 80016a6:	63b5      	str	r5, [r6, #56]	; 0x38
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80016a8:	6063      	str	r3, [r4, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016aa:	60e3      	str	r3, [r4, #12]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016ac:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80016ae:	f000 fd79 	bl	80021a4 <HAL_DMA_Init>
 80016b2:	b978      	cbnz	r0, 80016d4 <HAL_I2S_MspInit+0x148>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80016b4:	2200      	movs	r2, #0
    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 80016b6:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80016b8:	4611      	mov	r1, r2
 80016ba:	2024      	movs	r0, #36	; 0x24
    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 80016bc:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80016be:	f000 fd11 	bl	80020e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80016c2:	2024      	movs	r0, #36	; 0x24
 80016c4:	f000 fd46 	bl	8002154 <HAL_NVIC_EnableIRQ>
}
 80016c8:	b00b      	add	sp, #44	; 0x2c
 80016ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      Error_Handler();
 80016ce:	f7ff fee9 	bl	80014a4 <Error_Handler>
 80016d2:	e7d1      	b.n	8001678 <HAL_I2S_MspInit+0xec>
      Error_Handler();
 80016d4:	f7ff fee6 	bl	80014a4 <Error_Handler>
 80016d8:	e7ec      	b.n	80016b4 <HAL_I2S_MspInit+0x128>
 80016da:	bf00      	nop
 80016dc:	40003800 	.word	0x40003800
 80016e0:	20008720 	.word	0x20008720
 80016e4:	40020800 	.word	0x40020800
 80016e8:	40020400 	.word	0x40020400
 80016ec:	40026058 	.word	0x40026058
 80016f0:	20008780 	.word	0x20008780
 80016f4:	40026070 	.word	0x40026070

080016f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hspi->Instance==SPI1)
 80016fc:	6803      	ldr	r3, [r0, #0]
 80016fe:	4a4d      	ldr	r2, [pc, #308]	; (8001834 <HAL_SPI_MspInit+0x13c>)
{
 8001700:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001702:	2400      	movs	r4, #0
  if(hspi->Instance==SPI1)
 8001704:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001706:	e9cd 4406 	strd	r4, r4, [sp, #24]
 800170a:	e9cd 4408 	strd	r4, r4, [sp, #32]
 800170e:	940a      	str	r4, [sp, #40]	; 0x28
  if(hspi->Instance==SPI1)
 8001710:	d005      	beq.n	800171e <HAL_SPI_MspInit+0x26>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(hspi->Instance==SPI3)
 8001712:	4a49      	ldr	r2, [pc, #292]	; (8001838 <HAL_SPI_MspInit+0x140>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d063      	beq.n	80017e0 <HAL_SPI_MspInit+0xe8>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001718:	b00d      	add	sp, #52	; 0x34
 800171a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 800171e:	4b47      	ldr	r3, [pc, #284]	; (800183c <HAL_SPI_MspInit+0x144>)
 8001720:	9401      	str	r4, [sp, #4]
 8001722:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001724:	4e46      	ldr	r6, [pc, #280]	; (8001840 <HAL_SPI_MspInit+0x148>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001726:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800172a:	645a      	str	r2, [r3, #68]	; 0x44
 800172c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800172e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001732:	9201      	str	r2, [sp, #4]
 8001734:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001736:	9402      	str	r4, [sp, #8]
 8001738:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800173a:	f042 0201 	orr.w	r2, r2, #1
 800173e:	631a      	str	r2, [r3, #48]	; 0x30
 8001740:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001742:	f002 0201 	and.w	r2, r2, #1
 8001746:	9202      	str	r2, [sp, #8]
 8001748:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800174a:	9403      	str	r4, [sp, #12]
 800174c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800174e:	f042 0202 	orr.w	r2, r2, #2
 8001752:	631a      	str	r2, [r3, #48]	; 0x30
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800175c:	2220      	movs	r2, #32
 800175e:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001760:	2705      	movs	r7, #5
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001762:	9903      	ldr	r1, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001764:	970a      	str	r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001766:	f04f 0800 	mov.w	r8, #0
 800176a:	f04f 0903 	mov.w	r9, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176e:	a906      	add	r1, sp, #24
 8001770:	4605      	mov	r5, r0
 8001772:	4834      	ldr	r0, [pc, #208]	; (8001844 <HAL_SPI_MspInit+0x14c>)
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001774:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001778:	e9cd 8908 	strd	r8, r9, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177c:	f000 ff38 	bl	80025f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001780:	2230      	movs	r2, #48	; 0x30
 8001782:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001784:	4830      	ldr	r0, [pc, #192]	; (8001848 <HAL_SPI_MspInit+0x150>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001786:	970a      	str	r7, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001788:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800178a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800178e:	e9cd 8908 	strd	r8, r9, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001792:	f000 ff2d 	bl	80025f0 <HAL_GPIO_Init>
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001796:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 8001850 <HAL_SPI_MspInit+0x158>
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800179a:	60f4      	str	r4, [r6, #12]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800179c:	f04f 67c0 	mov.w	r7, #100663296	; 0x6000000
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017a0:	2140      	movs	r1, #64	; 0x40
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80017a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80017aa:	4630      	mov	r0, r6
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017ac:	e9c6 4405 	strd	r4, r4, [r6, #20]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80017b0:	e9c6 c700 	strd	ip, r7, [r6]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80017b4:	61f4      	str	r4, [r6, #28]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017b6:	6274      	str	r4, [r6, #36]	; 0x24
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017b8:	60b1      	str	r1, [r6, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017ba:	6132      	str	r2, [r6, #16]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80017bc:	6233      	str	r3, [r6, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80017be:	f000 fcf1 	bl	80021a4 <HAL_DMA_Init>
 80017c2:	2800      	cmp	r0, #0
 80017c4:	d133      	bne.n	800182e <HAL_SPI_MspInit+0x136>
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80017c6:	2200      	movs	r2, #0
 80017c8:	4611      	mov	r1, r2
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80017ca:	64ae      	str	r6, [r5, #72]	; 0x48
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80017cc:	2023      	movs	r0, #35	; 0x23
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80017ce:	63b5      	str	r5, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80017d0:	f000 fc88 	bl	80020e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80017d4:	2023      	movs	r0, #35	; 0x23
 80017d6:	f000 fcbd 	bl	8002154 <HAL_NVIC_EnableIRQ>
}
 80017da:	b00d      	add	sp, #52	; 0x34
 80017dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_SPI3_CLK_ENABLE();
 80017e0:	4b16      	ldr	r3, [pc, #88]	; (800183c <HAL_SPI_MspInit+0x144>)
 80017e2:	9404      	str	r4, [sp, #16]
 80017e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017e6:	4819      	ldr	r0, [pc, #100]	; (800184c <HAL_SPI_MspInit+0x154>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 80017e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80017ec:	641a      	str	r2, [r3, #64]	; 0x40
 80017ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017f0:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80017f4:	9204      	str	r2, [sp, #16]
 80017f6:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017f8:	9405      	str	r4, [sp, #20]
 80017fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017fc:	f042 0204 	orr.w	r2, r2, #4
 8001800:	631a      	str	r2, [r3, #48]	; 0x30
 8001802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001804:	f003 0304 	and.w	r3, r3, #4
 8001808:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800180a:	2306      	movs	r3, #6
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800180c:	9a05      	ldr	r2, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800180e:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001810:	2200      	movs	r2, #0
 8001812:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001814:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001816:	f44f 54a0 	mov.w	r4, #5120	; 0x1400
 800181a:	2502      	movs	r5, #2
 800181c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8001820:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001824:	f000 fee4 	bl	80025f0 <HAL_GPIO_Init>
}
 8001828:	b00d      	add	sp, #52	; 0x34
 800182a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      Error_Handler();
 800182e:	f7ff fe39 	bl	80014a4 <Error_Handler>
 8001832:	e7c8      	b.n	80017c6 <HAL_SPI_MspInit+0xce>
 8001834:	40013000 	.word	0x40013000
 8001838:	40003c00 	.word	0x40003c00
 800183c:	40023800 	.word	0x40023800
 8001840:	20008828 	.word	0x20008828
 8001844:	40020000 	.word	0x40020000
 8001848:	40020400 	.word	0x40020400
 800184c:	40020800 	.word	0x40020800
 8001850:	40026458 	.word	0x40026458

08001854 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM7)
 8001854:	4b0e      	ldr	r3, [pc, #56]	; (8001890 <HAL_TIM_Base_MspInit+0x3c>)
 8001856:	6802      	ldr	r2, [r0, #0]
 8001858:	429a      	cmp	r2, r3
 800185a:	d000      	beq.n	800185e <HAL_TIM_Base_MspInit+0xa>
 800185c:	4770      	bx	lr
{
 800185e:	b500      	push	{lr}
 8001860:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001862:	2200      	movs	r2, #0
 8001864:	f503 3309 	add.w	r3, r3, #140288	; 0x22400
 8001868:	9201      	str	r2, [sp, #4]
 800186a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800186c:	f041 0120 	orr.w	r1, r1, #32
 8001870:	6419      	str	r1, [r3, #64]	; 0x40
 8001872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001874:	f003 0320 	and.w	r3, r3, #32
 8001878:	9301      	str	r3, [sp, #4]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800187a:	4611      	mov	r1, r2
 800187c:	2037      	movs	r0, #55	; 0x37
    __HAL_RCC_TIM7_CLK_ENABLE();
 800187e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001880:	f000 fc30 	bl	80020e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001884:	2037      	movs	r0, #55	; 0x37
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001886:	b003      	add	sp, #12
 8001888:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800188c:	f000 bc62 	b.w	8002154 <HAL_NVIC_EnableIRQ>
 8001890:	40001400 	.word	0x40001400

08001894 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001894:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART1)
 8001896:	6802      	ldr	r2, [r0, #0]
 8001898:	4b2a      	ldr	r3, [pc, #168]	; (8001944 <HAL_UART_MspInit+0xb0>)
{
 800189a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189c:	2400      	movs	r4, #0
  if(huart->Instance==USART1)
 800189e:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a0:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80018a4:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80018a8:	9406      	str	r4, [sp, #24]
  if(huart->Instance==USART1)
 80018aa:	d001      	beq.n	80018b0 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80018ac:	b008      	add	sp, #32
 80018ae:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 80018b0:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 80018b4:	9400      	str	r4, [sp, #0]
 80018b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80018b8:	4e23      	ldr	r6, [pc, #140]	; (8001948 <HAL_UART_MspInit+0xb4>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80018ba:	f042 0210 	orr.w	r2, r2, #16
 80018be:	645a      	str	r2, [r3, #68]	; 0x44
 80018c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80018c2:	f002 0210 	and.w	r2, r2, #16
 80018c6:	9200      	str	r2, [sp, #0]
 80018c8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ca:	9401      	str	r4, [sp, #4]
 80018cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018ce:	f042 0201 	orr.w	r2, r2, #1
 80018d2:	631a      	str	r2, [r3, #48]	; 0x30
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80018dc:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80018e0:	2302      	movs	r3, #2
 80018e2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80018e6:	2200      	movs	r2, #0
 80018e8:	2303      	movs	r3, #3
 80018ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ee:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018f0:	2307      	movs	r3, #7
 80018f2:	4605      	mov	r5, r0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f4:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f6:	4815      	ldr	r0, [pc, #84]	; (800194c <HAL_UART_MspInit+0xb8>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018f8:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018fa:	f000 fe79 	bl	80025f0 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80018fe:	4814      	ldr	r0, [pc, #80]	; (8001950 <HAL_UART_MspInit+0xbc>)
 8001900:	6030      	str	r0, [r6, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001902:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001906:	2240      	movs	r2, #64	; 0x40
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001908:	f44f 6380 	mov.w	r3, #1024	; 0x400
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800190c:	4630      	mov	r0, r6
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800190e:	e9c6 4405 	strd	r4, r4, [r6, #20]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001912:	e9c6 4407 	strd	r4, r4, [r6, #28]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001916:	e9c6 1201 	strd	r1, r2, [r6, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800191a:	60f4      	str	r4, [r6, #12]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800191c:	6274      	str	r4, [r6, #36]	; 0x24
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800191e:	6133      	str	r3, [r6, #16]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001920:	f000 fc40 	bl	80021a4 <HAL_DMA_Init>
 8001924:	b958      	cbnz	r0, 800193e <HAL_UART_MspInit+0xaa>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001926:	2200      	movs	r2, #0
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001928:	636e      	str	r6, [r5, #52]	; 0x34
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800192a:	4611      	mov	r1, r2
 800192c:	2025      	movs	r0, #37	; 0x25
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800192e:	63b5      	str	r5, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001930:	f000 fbd8 	bl	80020e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001934:	2025      	movs	r0, #37	; 0x25
 8001936:	f000 fc0d 	bl	8002154 <HAL_NVIC_EnableIRQ>
}
 800193a:	b008      	add	sp, #32
 800193c:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 800193e:	f7ff fdb1 	bl	80014a4 <Error_Handler>
 8001942:	e7f0      	b.n	8001926 <HAL_UART_MspInit+0x92>
 8001944:	40011000 	.word	0x40011000
 8001948:	2000857c 	.word	0x2000857c
 800194c:	40020000 	.word	0x40020000
 8001950:	400264b8 	.word	0x400264b8

08001954 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001954:	e7fe      	b.n	8001954 <NMI_Handler>
 8001956:	bf00      	nop

08001958 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001958:	e7fe      	b.n	8001958 <HardFault_Handler>
 800195a:	bf00      	nop

0800195c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800195c:	e7fe      	b.n	800195c <MemManage_Handler>
 800195e:	bf00      	nop

08001960 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001960:	e7fe      	b.n	8001960 <BusFault_Handler>
 8001962:	bf00      	nop

08001964 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001964:	e7fe      	b.n	8001964 <UsageFault_Handler>
 8001966:	bf00      	nop

08001968 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop

0800196c <DebugMon_Handler>:
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop

08001970 <PendSV_Handler>:
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop

08001974 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001974:	f000 b928 	b.w	8001bc8 <HAL_IncTick>

08001978 <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s2_ext_rx);
 8001978:	4801      	ldr	r0, [pc, #4]	; (8001980 <DMA1_Stream3_IRQHandler+0x8>)
 800197a:	f000 bd45 	b.w	8002408 <HAL_DMA_IRQHandler>
 800197e:	bf00      	nop
 8001980:	20008720 	.word	0x20008720

08001984 <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001984:	4801      	ldr	r0, [pc, #4]	; (800198c <DMA1_Stream4_IRQHandler+0x8>)
 8001986:	f000 bd3f 	b.w	8002408 <HAL_DMA_IRQHandler>
 800198a:	bf00      	nop
 800198c:	20008780 	.word	0x20008780

08001990 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001990:	4801      	ldr	r0, [pc, #4]	; (8001998 <SPI1_IRQHandler+0x8>)
 8001992:	f002 be83 	b.w	800469c <HAL_SPI_IRQHandler>
 8001996:	bf00      	nop
 8001998:	200086c8 	.word	0x200086c8

0800199c <SPI2_IRQHandler>:
void SPI2_IRQHandler(void)
{
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s2);
 800199c:	4801      	ldr	r0, [pc, #4]	; (80019a4 <SPI2_IRQHandler+0x8>)
 800199e:	f000 bfeb 	b.w	8002978 <HAL_I2S_IRQHandler>
 80019a2:	bf00      	nop
 80019a4:	20008888 	.word	0x20008888

080019a8 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80019a8:	4801      	ldr	r0, [pc, #4]	; (80019b0 <USART1_IRQHandler+0x8>)
 80019aa:	f003 b9db 	b.w	8004d64 <HAL_UART_IRQHandler>
 80019ae:	bf00      	nop
 80019b0:	20008624 	.word	0x20008624

080019b4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80019b4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	encInputRoutine();
 80019b6:	f007 f993 	bl	8008ce0 <encInputRoutine>
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80019ba:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80019be:	f000 ff33 	bl	8002828 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80019c2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80019c6:	f000 ff2f 	bl	8002828 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80019ca:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80019ce:	f000 ff2b 	bl	8002828 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80019d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80019d6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80019da:	f000 bf25 	b.w	8002828 <HAL_GPIO_EXTI_IRQHandler>
 80019de:	bf00      	nop

080019e0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80019e0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM7_IRQn 0 */
  preciseTimerIncrease();
 80019e2:	f007 fd41 	bl	8009468 <preciseTimerIncrease>
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80019e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim7);
 80019ea:	4801      	ldr	r0, [pc, #4]	; (80019f0 <TIM7_IRQHandler+0x10>)
 80019ec:	f002 bfce 	b.w	800498c <HAL_TIM_IRQHandler>
 80019f0:	200087e0 	.word	0x200087e0

080019f4 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80019f4:	4801      	ldr	r0, [pc, #4]	; (80019fc <DMA2_Stream0_IRQHandler+0x8>)
 80019f6:	f000 bd07 	b.w	8002408 <HAL_DMA_IRQHandler>
 80019fa:	bf00      	nop
 80019fc:	20008668 	.word	0x20008668

08001a00 <DMA2_Stream3_IRQHandler>:
void DMA2_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001a00:	4801      	ldr	r0, [pc, #4]	; (8001a08 <DMA2_Stream3_IRQHandler+0x8>)
 8001a02:	f000 bd01 	b.w	8002408 <HAL_DMA_IRQHandler>
 8001a06:	bf00      	nop
 8001a08:	20008828 	.word	0x20008828

08001a0c <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001a0c:	4801      	ldr	r0, [pc, #4]	; (8001a14 <OTG_FS_IRQHandler+0x8>)
 8001a0e:	f001 bb4f 	b.w	80030b0 <HAL_PCD_IRQHandler>
 8001a12:	bf00      	nop
 8001a14:	20008ca4 	.word	0x20008ca4

08001a18 <DMA2_Stream7_IRQHandler>:
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */
	uartTxDone = 1;
 8001a18:	4b02      	ldr	r3, [pc, #8]	; (8001a24 <DMA2_Stream7_IRQHandler+0xc>)
  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001a1a:	4803      	ldr	r0, [pc, #12]	; (8001a28 <DMA2_Stream7_IRQHandler+0x10>)
	uartTxDone = 1;
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	701a      	strb	r2, [r3, #0]
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001a20:	f000 bcf2 	b.w	8002408 <HAL_DMA_IRQHandler>
 8001a24:	2000051c 	.word	0x2000051c
 8001a28:	2000857c 	.word	0x2000857c

08001a2c <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001a2c:	2001      	movs	r0, #1
 8001a2e:	4770      	bx	lr

08001a30 <_kill>:

int _kill(int pid, int sig)
{
 8001a30:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001a32:	f008 f97b 	bl	8009d2c <__errno>
 8001a36:	2316      	movs	r3, #22
 8001a38:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001a3a:	f04f 30ff 	mov.w	r0, #4294967295
 8001a3e:	bd08      	pop	{r3, pc}

08001a40 <_exit>:

void _exit (int status)
{
 8001a40:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001a42:	f008 f973 	bl	8009d2c <__errno>
 8001a46:	2316      	movs	r3, #22
 8001a48:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001a4a:	e7fe      	b.n	8001a4a <_exit+0xa>

08001a4c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a4c:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a4e:	1e16      	subs	r6, r2, #0
 8001a50:	dd07      	ble.n	8001a62 <_read+0x16>
 8001a52:	460c      	mov	r4, r1
 8001a54:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8001a56:	f3af 8000 	nop.w
 8001a5a:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a5e:	42a5      	cmp	r5, r4
 8001a60:	d1f9      	bne.n	8001a56 <_read+0xa>
	}

return len;
}
 8001a62:	4630      	mov	r0, r6
 8001a64:	bd70      	pop	{r4, r5, r6, pc}
 8001a66:	bf00      	nop

08001a68 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a68:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a6a:	1e16      	subs	r6, r2, #0
 8001a6c:	dd07      	ble.n	8001a7e <_write+0x16>
 8001a6e:	460c      	mov	r4, r1
 8001a70:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8001a72:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001a76:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a7a:	42ac      	cmp	r4, r5
 8001a7c:	d1f9      	bne.n	8001a72 <_write+0xa>
	}
	return len;
}
 8001a7e:	4630      	mov	r0, r6
 8001a80:	bd70      	pop	{r4, r5, r6, pc}
 8001a82:	bf00      	nop

08001a84 <_close>:

int _close(int file)
{
	return -1;
}
 8001a84:	f04f 30ff 	mov.w	r0, #4294967295
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop

08001a8c <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001a8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a90:	604b      	str	r3, [r1, #4]
	return 0;
}
 8001a92:	2000      	movs	r0, #0
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop

08001a98 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001a98:	2001      	movs	r0, #1
 8001a9a:	4770      	bx	lr

08001a9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001a9c:	2000      	movs	r0, #0
 8001a9e:	4770      	bx	lr

08001aa0 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001aa0:	490c      	ldr	r1, [pc, #48]	; (8001ad4 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001aa2:	4a0d      	ldr	r2, [pc, #52]	; (8001ad8 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 8001aa4:	680b      	ldr	r3, [r1, #0]
{
 8001aa6:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001aa8:	4c0c      	ldr	r4, [pc, #48]	; (8001adc <_sbrk+0x3c>)
 8001aaa:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8001aac:	b12b      	cbz	r3, 8001aba <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aae:	4418      	add	r0, r3
 8001ab0:	4290      	cmp	r0, r2
 8001ab2:	d807      	bhi.n	8001ac4 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001ab4:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001aba:	4b09      	ldr	r3, [pc, #36]	; (8001ae0 <_sbrk+0x40>)
 8001abc:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8001abe:	4418      	add	r0, r3
 8001ac0:	4290      	cmp	r0, r2
 8001ac2:	d9f7      	bls.n	8001ab4 <_sbrk+0x14>
    errno = ENOMEM;
 8001ac4:	f008 f932 	bl	8009d2c <__errno>
 8001ac8:	230c      	movs	r3, #12
 8001aca:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001acc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	bd10      	pop	{r4, pc}
 8001ad4:	20000714 	.word	0x20000714
 8001ad8:	20020000 	.word	0x20020000
 8001adc:	00000400 	.word	0x00000400
 8001ae0:	2000c378 	.word	0x2000c378

08001ae4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ae4:	4a03      	ldr	r2, [pc, #12]	; (8001af4 <SystemInit+0x10>)
 8001ae6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001aea:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001aee:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001af2:	4770      	bx	lr
 8001af4:	e000ed00 	.word	0xe000ed00

08001af8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001af8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b30 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001afc:	480d      	ldr	r0, [pc, #52]	; (8001b34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001afe:	490e      	ldr	r1, [pc, #56]	; (8001b38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b00:	4a0e      	ldr	r2, [pc, #56]	; (8001b3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b04:	e002      	b.n	8001b0c <LoopCopyDataInit>

08001b06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b0a:	3304      	adds	r3, #4

08001b0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b10:	d3f9      	bcc.n	8001b06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b12:	4a0b      	ldr	r2, [pc, #44]	; (8001b40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b14:	4c0b      	ldr	r4, [pc, #44]	; (8001b44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b18:	e001      	b.n	8001b1e <LoopFillZerobss>

08001b1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b1c:	3204      	adds	r2, #4

08001b1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b20:	d3fb      	bcc.n	8001b1a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b22:	f7ff ffdf 	bl	8001ae4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b26:	f008 f907 	bl	8009d38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b2a:	f7ff fa6d 	bl	8001008 <main>
  bx  lr    
 8001b2e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b38:	200006f4 	.word	0x200006f4
  ldr r2, =_sidata
 8001b3c:	08019884 	.word	0x08019884
  ldr r2, =_sbss
 8001b40:	200006f8 	.word	0x200006f8
  ldr r4, =_ebss
 8001b44:	2000c378 	.word	0x2000c378

08001b48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b48:	e7fe      	b.n	8001b48 <ADC_IRQHandler>
	...

08001b4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b4c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b4e:	4a0e      	ldr	r2, [pc, #56]	; (8001b88 <HAL_InitTick+0x3c>)
 8001b50:	4b0e      	ldr	r3, [pc, #56]	; (8001b8c <HAL_InitTick+0x40>)
 8001b52:	7812      	ldrb	r2, [r2, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
{
 8001b56:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b5c:	fbb0 f0f2 	udiv	r0, r0, r2
 8001b60:	fbb3 f0f0 	udiv	r0, r3, r0
 8001b64:	f000 fb04 	bl	8002170 <HAL_SYSTICK_Config>
 8001b68:	b908      	cbnz	r0, 8001b6e <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b6a:	2d0f      	cmp	r5, #15
 8001b6c:	d901      	bls.n	8001b72 <HAL_InitTick+0x26>
    return HAL_ERROR;
 8001b6e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001b70:	bd38      	pop	{r3, r4, r5, pc}
 8001b72:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b74:	4602      	mov	r2, r0
 8001b76:	4629      	mov	r1, r5
 8001b78:	f04f 30ff 	mov.w	r0, #4294967295
 8001b7c:	f000 fab2 	bl	80020e4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b80:	4b03      	ldr	r3, [pc, #12]	; (8001b90 <HAL_InitTick+0x44>)
 8001b82:	4620      	mov	r0, r4
 8001b84:	601d      	str	r5, [r3, #0]
}
 8001b86:	bd38      	pop	{r3, r4, r5, pc}
 8001b88:	20000004 	.word	0x20000004
 8001b8c:	20000000 	.word	0x20000000
 8001b90:	20000008 	.word	0x20000008

08001b94 <HAL_Init>:
{
 8001b94:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b96:	4b0b      	ldr	r3, [pc, #44]	; (8001bc4 <HAL_Init+0x30>)
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b9e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001ba6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bae:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bb0:	2003      	movs	r0, #3
 8001bb2:	f000 fa83 	bl	80020bc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bb6:	2000      	movs	r0, #0
 8001bb8:	f7ff ffc8 	bl	8001b4c <HAL_InitTick>
  HAL_MspInit();
 8001bbc:	f7ff fc74 	bl	80014a8 <HAL_MspInit>
}
 8001bc0:	2000      	movs	r0, #0
 8001bc2:	bd08      	pop	{r3, pc}
 8001bc4:	40023c00 	.word	0x40023c00

08001bc8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001bc8:	4a03      	ldr	r2, [pc, #12]	; (8001bd8 <HAL_IncTick+0x10>)
 8001bca:	4b04      	ldr	r3, [pc, #16]	; (8001bdc <HAL_IncTick+0x14>)
 8001bcc:	6811      	ldr	r1, [r2, #0]
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	440b      	add	r3, r1
 8001bd2:	6013      	str	r3, [r2, #0]
}
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	200088d0 	.word	0x200088d0
 8001bdc:	20000004 	.word	0x20000004

08001be0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001be0:	4b01      	ldr	r3, [pc, #4]	; (8001be8 <HAL_GetTick+0x8>)
 8001be2:	6818      	ldr	r0, [r3, #0]
}
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	200088d0 	.word	0x200088d0

08001bec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bec:	b538      	push	{r3, r4, r5, lr}
 8001bee:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001bf0:	f7ff fff6 	bl	8001be0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bf4:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8001bf6:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8001bf8:	d002      	beq.n	8001c00 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bfa:	4b04      	ldr	r3, [pc, #16]	; (8001c0c <HAL_Delay+0x20>)
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c00:	f7ff ffee 	bl	8001be0 <HAL_GetTick>
 8001c04:	1b43      	subs	r3, r0, r5
 8001c06:	42a3      	cmp	r3, r4
 8001c08:	d3fa      	bcc.n	8001c00 <HAL_Delay+0x14>
  {
  }
}
 8001c0a:	bd38      	pop	{r3, r4, r5, pc}
 8001c0c:	20000004 	.word	0x20000004

08001c10 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c10:	2800      	cmp	r0, #0
 8001c12:	f000 80a0 	beq.w	8001d56 <HAL_ADC_Init+0x146>
{
 8001c16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001c18:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8001c1a:	4604      	mov	r4, r0
 8001c1c:	b13d      	cbz	r5, 8001c2e <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c20:	06db      	lsls	r3, r3, #27
 8001c22:	d50c      	bpl.n	8001c3e <HAL_ADC_Init+0x2e>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001c24:	2300      	movs	r3, #0
 8001c26:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    tmp_hal_status = HAL_ERROR;
 8001c2a:	2001      	movs	r0, #1

  /* Return function status */
  return tmp_hal_status;
}
 8001c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_ADC_MspInit(hadc);
 8001c2e:	f7ff fc57 	bl	80014e0 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8001c32:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c34:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 8001c36:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c3a:	06db      	lsls	r3, r3, #27
 8001c3c:	d4f2      	bmi.n	8001c24 <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 8001c3e:	6c22      	ldr	r2, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001c40:	4948      	ldr	r1, [pc, #288]	; (8001d64 <HAL_ADC_Init+0x154>)
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c42:	6823      	ldr	r3, [r4, #0]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c44:	4d48      	ldr	r5, [pc, #288]	; (8001d68 <HAL_ADC_Init+0x158>)
    ADC_STATE_CLR_SET(hadc->State,
 8001c46:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8001c4a:	f022 0202 	bic.w	r2, r2, #2
 8001c4e:	f042 0202 	orr.w	r2, r2, #2
 8001c52:	6422      	str	r2, [r4, #64]	; 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001c54:	684a      	ldr	r2, [r1, #4]
 8001c56:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001c5a:	604a      	str	r2, [r1, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001c5c:	684a      	ldr	r2, [r1, #4]
 8001c5e:	6860      	ldr	r0, [r4, #4]
 8001c60:	4302      	orrs	r2, r0
 8001c62:	604a      	str	r2, [r1, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c64:	6858      	ldr	r0, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c66:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c68:	68a7      	ldr	r7, [r4, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c6a:	68e6      	ldr	r6, [r4, #12]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c6c:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 8001c70:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c72:	685a      	ldr	r2, [r3, #4]
 8001c74:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001c78:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c7a:	6858      	ldr	r0, [r3, #4]
 8001c7c:	f020 7040 	bic.w	r0, r0, #50331648	; 0x3000000
 8001c80:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c82:	6859      	ldr	r1, [r3, #4]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c84:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c86:	4339      	orrs	r1, r7
 8001c88:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001c8a:	6899      	ldr	r1, [r3, #8]
 8001c8c:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8001c90:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c92:	689a      	ldr	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c94:	42a8      	cmp	r0, r5
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c96:	ea42 0206 	orr.w	r2, r2, r6
 8001c9a:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c9c:	d052      	beq.n	8001d44 <HAL_ADC_Init+0x134>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c9e:	6899      	ldr	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001ca0:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ca2:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8001ca6:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ca8:	689a      	ldr	r2, [r3, #8]
 8001caa:	4310      	orrs	r0, r2
 8001cac:	6098      	str	r0, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001cae:	6899      	ldr	r1, [r3, #8]
 8001cb0:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8001cb4:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001cb6:	689a      	ldr	r2, [r3, #8]
 8001cb8:	432a      	orrs	r2, r5
 8001cba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001cbc:	689a      	ldr	r2, [r3, #8]
 8001cbe:	f022 0202 	bic.w	r2, r2, #2
 8001cc2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001cc4:	689a      	ldr	r2, [r3, #8]
 8001cc6:	7e21      	ldrb	r1, [r4, #24]
 8001cc8:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8001ccc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001cce:	f894 2020 	ldrb.w	r2, [r4, #32]
 8001cd2:	2a00      	cmp	r2, #0
 8001cd4:	d041      	beq.n	8001d5a <HAL_ADC_Init+0x14a>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001cd6:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001cd8:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001cda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001cde:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ce0:	685a      	ldr	r2, [r3, #4]
 8001ce2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001ce6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ce8:	685a      	ldr	r2, [r3, #4]
 8001cea:	3901      	subs	r1, #1
 8001cec:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001cf0:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001cf4:	69e0      	ldr	r0, [r4, #28]
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001cf6:	6965      	ldr	r5, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001cf8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001cfc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001cfe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d00:	3801      	subs	r0, #1
 8001d02:	ea41 5100 	orr.w	r1, r1, r0, lsl #20
 8001d06:	62d9      	str	r1, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001d08:	6899      	ldr	r1, [r3, #8]
 8001d0a:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8001d0e:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001d10:	6899      	ldr	r1, [r3, #8]
 8001d12:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8001d16:	ea41 2142 	orr.w	r1, r1, r2, lsl #9
 8001d1a:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001d1c:	6899      	ldr	r1, [r3, #8]
 8001d1e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8001d22:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001d24:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8001d26:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001d28:	ea42 2285 	orr.w	r2, r2, r5, lsl #10
 8001d2c:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8001d2e:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8001d30:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d32:	f023 0303 	bic.w	r3, r3, #3
 8001d36:	f043 0301 	orr.w	r3, r3, #1
 8001d3a:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8001d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d44:	689a      	ldr	r2, [r3, #8]
 8001d46:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d4a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d4c:	689a      	ldr	r2, [r3, #8]
 8001d4e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d52:	609a      	str	r2, [r3, #8]
 8001d54:	e7b2      	b.n	8001cbc <HAL_ADC_Init+0xac>
    return HAL_ERROR;
 8001d56:	2001      	movs	r0, #1
}
 8001d58:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001d5a:	685a      	ldr	r2, [r3, #4]
 8001d5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d60:	605a      	str	r2, [r3, #4]
 8001d62:	e7c6      	b.n	8001cf2 <HAL_ADC_Init+0xe2>
 8001d64:	40012300 	.word	0x40012300
 8001d68:	0f000001 	.word	0x0f000001

08001d6c <HAL_ADC_Start_DMA>:
{
 8001d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d6e:	4605      	mov	r5, r0
  __HAL_LOCK(hadc);
 8001d70:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
{
 8001d74:	b083      	sub	sp, #12
  __IO uint32_t counter = 0U;
 8001d76:	2400      	movs	r4, #0
  __HAL_LOCK(hadc);
 8001d78:	2801      	cmp	r0, #1
  __IO uint32_t counter = 0U;
 8001d7a:	9401      	str	r4, [sp, #4]
  __HAL_LOCK(hadc);
 8001d7c:	f000 8091 	beq.w	8001ea2 <HAL_ADC_Start_DMA+0x136>
 8001d80:	2301      	movs	r3, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001d82:	682e      	ldr	r6, [r5, #0]
  __HAL_LOCK(hadc);
 8001d84:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001d88:	68b3      	ldr	r3, [r6, #8]
 8001d8a:	07df      	lsls	r7, r3, #31
 8001d8c:	d414      	bmi.n	8001db8 <HAL_ADC_Start_DMA+0x4c>
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d8e:	4b49      	ldr	r3, [pc, #292]	; (8001eb4 <HAL_ADC_Start_DMA+0x148>)
 8001d90:	4c49      	ldr	r4, [pc, #292]	; (8001eb8 <HAL_ADC_Start_DMA+0x14c>)
 8001d92:	6818      	ldr	r0, [r3, #0]
    __HAL_ADC_ENABLE(hadc);
 8001d94:	68b3      	ldr	r3, [r6, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d96:	fba4 4000 	umull	r4, r0, r4, r0
 8001d9a:	0c80      	lsrs	r0, r0, #18
    __HAL_ADC_ENABLE(hadc);
 8001d9c:	f043 0301 	orr.w	r3, r3, #1
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001da0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    __HAL_ADC_ENABLE(hadc);
 8001da4:	60b3      	str	r3, [r6, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001da6:	9001      	str	r0, [sp, #4]
    while(counter != 0U)
 8001da8:	9b01      	ldr	r3, [sp, #4]
 8001daa:	b12b      	cbz	r3, 8001db8 <HAL_ADC_Start_DMA+0x4c>
      counter--;
 8001dac:	9c01      	ldr	r4, [sp, #4]
 8001dae:	3c01      	subs	r4, #1
 8001db0:	9401      	str	r4, [sp, #4]
    while(counter != 0U)
 8001db2:	9801      	ldr	r0, [sp, #4]
 8001db4:	2800      	cmp	r0, #0
 8001db6:	d1f9      	bne.n	8001dac <HAL_ADC_Start_DMA+0x40>
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001db8:	68b3      	ldr	r3, [r6, #8]
 8001dba:	05dc      	lsls	r4, r3, #23
 8001dbc:	d503      	bpl.n	8001dc6 <HAL_ADC_Start_DMA+0x5a>
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001dbe:	68b3      	ldr	r3, [r6, #8]
 8001dc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001dc4:	60b3      	str	r3, [r6, #8]
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001dc6:	68b0      	ldr	r0, [r6, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8001dc8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001dca:	f010 0001 	ands.w	r0, r0, #1
 8001dce:	d04f      	beq.n	8001e70 <HAL_ADC_Start_DMA+0x104>
    ADC_STATE_CLR_SET(hadc->State,
 8001dd0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001dd4:	f023 0301 	bic.w	r3, r3, #1
 8001dd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ddc:	642b      	str	r3, [r5, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001dde:	6873      	ldr	r3, [r6, #4]
 8001de0:	0558      	lsls	r0, r3, #21
 8001de2:	d505      	bpl.n	8001df0 <HAL_ADC_Start_DMA+0x84>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001de4:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8001de6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001dea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001dee:	642b      	str	r3, [r5, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001df0:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001df2:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8001df4:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 8001ed0 <HAL_ADC_Start_DMA+0x164>
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001df8:	4f30      	ldr	r7, [pc, #192]	; (8001ebc <HAL_ADC_Start_DMA+0x150>)
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001dfa:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001dfe:	bf1c      	itt	ne
 8001e00:	6c6b      	ldrne	r3, [r5, #68]	; 0x44
 8001e02:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8001e06:	646b      	str	r3, [r5, #68]	; 0x44
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001e08:	4b2d      	ldr	r3, [pc, #180]	; (8001ec0 <HAL_ADC_Start_DMA+0x154>)
    __HAL_UNLOCK(hadc);   
 8001e0a:	2400      	movs	r4, #0
 8001e0c:	f885 403c 	strb.w	r4, [r5, #60]	; 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001e10:	e9c0 c30f 	strd	ip, r3, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001e14:	f06f 0322 	mvn.w	r3, #34	; 0x22
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001e18:	64c7      	str	r7, [r0, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001e1a:	6033      	str	r3, [r6, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001e1c:	6873      	ldr	r3, [r6, #4]
 8001e1e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001e22:	6073      	str	r3, [r6, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001e24:	68b7      	ldr	r7, [r6, #8]
 8001e26:	f447 7780 	orr.w	r7, r7, #256	; 0x100
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001e2a:	4613      	mov	r3, r2
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001e2c:	60b7      	str	r7, [r6, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001e2e:	460a      	mov	r2, r1
 8001e30:	f106 014c 	add.w	r1, r6, #76	; 0x4c
 8001e34:	f000 fa50 	bl	80022d8 <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001e38:	4b22      	ldr	r3, [pc, #136]	; (8001ec4 <HAL_ADC_Start_DMA+0x158>)
 8001e3a:	6858      	ldr	r0, [r3, #4]
 8001e3c:	f010 001f 	ands.w	r0, r0, #31
 8001e40:	d11f      	bne.n	8001e82 <HAL_ADC_Start_DMA+0x116>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001e42:	682a      	ldr	r2, [r5, #0]
 8001e44:	4920      	ldr	r1, [pc, #128]	; (8001ec8 <HAL_ADC_Start_DMA+0x15c>)
 8001e46:	428a      	cmp	r2, r1
 8001e48:	d009      	beq.n	8001e5e <HAL_ADC_Start_DMA+0xf2>
 8001e4a:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8001e4e:	428a      	cmp	r2, r1
 8001e50:	d02c      	beq.n	8001eac <HAL_ADC_Start_DMA+0x140>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001e52:	491e      	ldr	r1, [pc, #120]	; (8001ecc <HAL_ADC_Start_DMA+0x160>)
 8001e54:	428a      	cmp	r2, r1
 8001e56:	d112      	bne.n	8001e7e <HAL_ADC_Start_DMA+0x112>
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	06db      	lsls	r3, r3, #27
 8001e5c:	d40f      	bmi.n	8001e7e <HAL_ADC_Start_DMA+0x112>
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001e5e:	6890      	ldr	r0, [r2, #8]
 8001e60:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8001e64:	d111      	bne.n	8001e8a <HAL_ADC_Start_DMA+0x11e>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e66:	6893      	ldr	r3, [r2, #8]
 8001e68:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001e6c:	6093      	str	r3, [r2, #8]
 8001e6e:	e006      	b.n	8001e7e <HAL_ADC_Start_DMA+0x112>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e70:	f043 0310 	orr.w	r3, r3, #16
 8001e74:	642b      	str	r3, [r5, #64]	; 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e76:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001e78:	f043 0301 	orr.w	r3, r3, #1
 8001e7c:	646b      	str	r3, [r5, #68]	; 0x44
}
 8001e7e:	b003      	add	sp, #12
 8001e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001e82:	682b      	ldr	r3, [r5, #0]
 8001e84:	4a10      	ldr	r2, [pc, #64]	; (8001ec8 <HAL_ADC_Start_DMA+0x15c>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d002      	beq.n	8001e90 <HAL_ADC_Start_DMA+0x124>
  return HAL_OK;
 8001e8a:	2000      	movs	r0, #0
}
 8001e8c:	b003      	add	sp, #12
 8001e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001e90:	6898      	ldr	r0, [r3, #8]
 8001e92:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8001e96:	d107      	bne.n	8001ea8 <HAL_ADC_Start_DMA+0x13c>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e98:	689a      	ldr	r2, [r3, #8]
 8001e9a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e9e:	609a      	str	r2, [r3, #8]
 8001ea0:	e7ed      	b.n	8001e7e <HAL_ADC_Start_DMA+0x112>
  __HAL_LOCK(hadc);
 8001ea2:	2002      	movs	r0, #2
}
 8001ea4:	b003      	add	sp, #12
 8001ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return HAL_OK;
 8001ea8:	4620      	mov	r0, r4
 8001eaa:	e7e8      	b.n	8001e7e <HAL_ADC_Start_DMA+0x112>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	06d9      	lsls	r1, r3, #27
 8001eb0:	d0d5      	beq.n	8001e5e <HAL_ADC_Start_DMA+0xf2>
 8001eb2:	e7e4      	b.n	8001e7e <HAL_ADC_Start_DMA+0x112>
 8001eb4:	20000000 	.word	0x20000000
 8001eb8:	431bde83 	.word	0x431bde83
 8001ebc:	08001ee9 	.word	0x08001ee9
 8001ec0:	08001ed9 	.word	0x08001ed9
 8001ec4:	40012300 	.word	0x40012300
 8001ec8:	40012000 	.word	0x40012000
 8001ecc:	40012200 	.word	0x40012200
 8001ed0:	08001f01 	.word	0x08001f01

08001ed4 <HAL_ADC_ConvHalfCpltCallback>:
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop

08001ed8 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001ed8:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001eda:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8001edc:	f7ff fffa 	bl	8001ed4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ee0:	bd08      	pop	{r3, pc}
 8001ee2:	bf00      	nop

08001ee4 <HAL_ADC_ErrorCallback>:
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop

08001ee8 <ADC_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ee8:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8001eea:	b508      	push	{r3, lr}
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001eec:	2340      	movs	r3, #64	; 0x40
 8001eee:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001ef0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001ef2:	f043 0304 	orr.w	r3, r3, #4
 8001ef6:	6443      	str	r3, [r0, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001ef8:	f7ff fff4 	bl	8001ee4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001efc:	bd08      	pop	{r3, pc}
 8001efe:	bf00      	nop

08001f00 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f00:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001f02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f04:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 8001f08:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001f0c:	d123      	bne.n	8001f56 <ADC_DMAConvCplt+0x56>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f12:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f14:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f16:	688a      	ldr	r2, [r1, #8]
 8001f18:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8001f1c:	d117      	bne.n	8001f4e <ADC_DMAConvCplt+0x4e>
 8001f1e:	7e1a      	ldrb	r2, [r3, #24]
 8001f20:	b9aa      	cbnz	r2, 8001f4e <ADC_DMAConvCplt+0x4e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001f22:	6aca      	ldr	r2, [r1, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f24:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8001f28:	d002      	beq.n	8001f30 <ADC_DMAConvCplt+0x30>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001f2a:	688a      	ldr	r2, [r1, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001f2c:	0550      	lsls	r0, r2, #21
 8001f2e:	d40e      	bmi.n	8001f4e <ADC_DMAConvCplt+0x4e>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001f30:	684a      	ldr	r2, [r1, #4]
 8001f32:	f022 0220 	bic.w	r2, r2, #32
 8001f36:	604a      	str	r2, [r1, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f3e:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f42:	04d1      	lsls	r1, r2, #19
 8001f44:	d403      	bmi.n	8001f4e <ADC_DMAConvCplt+0x4e>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f48:	f042 0201 	orr.w	r2, r2, #1
 8001f4c:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7ff faa6 	bl	80014a0 <HAL_ADC_ConvCpltCallback>
}
 8001f54:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001f56:	06d2      	lsls	r2, r2, #27
 8001f58:	d404      	bmi.n	8001f64 <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8001f5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f62:	4718      	bx	r3
      HAL_ADC_ErrorCallback(hadc);
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff ffbd 	bl	8001ee4 <HAL_ADC_ErrorCallback>
}
 8001f6a:	bd10      	pop	{r4, pc}

08001f6c <HAL_ADC_ConfigChannel>:
{
 8001f6c:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hadc);
 8001f6e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001f72:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8001f74:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8001f76:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 8001f78:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8001f7a:	f000 8094 	beq.w	80020a6 <HAL_ADC_ConfigChannel+0x13a>
 8001f7e:	2301      	movs	r3, #1
 8001f80:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001f84:	680d      	ldr	r5, [r1, #0]
 8001f86:	2d09      	cmp	r5, #9
 8001f88:	d829      	bhi.n	8001fde <HAL_ADC_ConfigChannel+0x72>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f8a:	6804      	ldr	r4, [r0, #0]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f8c:	688b      	ldr	r3, [r1, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f8e:	6922      	ldr	r2, [r4, #16]
 8001f90:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 8001f94:	2607      	movs	r6, #7
 8001f96:	40be      	lsls	r6, r7
 8001f98:	ea22 0206 	bic.w	r2, r2, r6
 8001f9c:	6122      	str	r2, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f9e:	6922      	ldr	r2, [r4, #16]
 8001fa0:	40bb      	lsls	r3, r7
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	6123      	str	r3, [r4, #16]
  if (sConfig->Rank < 7U)
 8001fa6:	684b      	ldr	r3, [r1, #4]
 8001fa8:	2b06      	cmp	r3, #6
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001faa:	462e      	mov	r6, r5
  if (sConfig->Rank < 7U)
 8001fac:	d82c      	bhi.n	8002008 <HAL_ADC_ConfigChannel+0x9c>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001fae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001fb2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001fb4:	3b05      	subs	r3, #5
 8001fb6:	211f      	movs	r1, #31
 8001fb8:	4099      	lsls	r1, r3
 8001fba:	ea22 0201 	bic.w	r2, r2, r1
 8001fbe:	6362      	str	r2, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001fc0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001fc2:	fa06 f303 	lsl.w	r3, r6, r3
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001fca:	4b39      	ldr	r3, [pc, #228]	; (80020b0 <HAL_ADC_ConfigChannel+0x144>)
 8001fcc:	429c      	cmp	r4, r3
 8001fce:	d02f      	beq.n	8002030 <HAL_ADC_ConfigChannel+0xc4>
  __HAL_UNLOCK(hadc);
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8001fd6:	4618      	mov	r0, r3
}
 8001fd8:	b002      	add	sp, #8
 8001fda:	bcf0      	pop	{r4, r5, r6, r7}
 8001fdc:	4770      	bx	lr
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001fde:	6804      	ldr	r4, [r0, #0]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001fe0:	688b      	ldr	r3, [r1, #8]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001fe2:	68e7      	ldr	r7, [r4, #12]
 8001fe4:	b2ae      	uxth	r6, r5
 8001fe6:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 8001fea:	3a1e      	subs	r2, #30
 8001fec:	f04f 0c07 	mov.w	ip, #7
 8001ff0:	fa0c fc02 	lsl.w	ip, ip, r2
 8001ff4:	ea27 070c 	bic.w	r7, r7, ip
 8001ff8:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001ffa:	68e7      	ldr	r7, [r4, #12]
 8001ffc:	4093      	lsls	r3, r2
 8001ffe:	433b      	orrs	r3, r7
 8002000:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 8002002:	684b      	ldr	r3, [r1, #4]
 8002004:	2b06      	cmp	r3, #6
 8002006:	d9d2      	bls.n	8001fae <HAL_ADC_ConfigChannel+0x42>
  else if (sConfig->Rank < 13U)
 8002008:	2b0c      	cmp	r3, #12
 800200a:	d837      	bhi.n	800207c <HAL_ADC_ConfigChannel+0x110>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800200c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002010:	f1a3 0123 	sub.w	r1, r3, #35	; 0x23
 8002014:	221f      	movs	r2, #31
 8002016:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002018:	408a      	lsls	r2, r1
 800201a:	ea23 0302 	bic.w	r3, r3, r2
 800201e:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002020:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002022:	fa06 f101 	lsl.w	r1, r6, r1
 8002026:	4319      	orrs	r1, r3
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002028:	4b21      	ldr	r3, [pc, #132]	; (80020b0 <HAL_ADC_ConfigChannel+0x144>)
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800202a:	6321      	str	r1, [r4, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800202c:	429c      	cmp	r4, r3
 800202e:	d1cf      	bne.n	8001fd0 <HAL_ADC_ConfigChannel+0x64>
 8002030:	2d12      	cmp	r5, #18
 8002032:	d032      	beq.n	800209a <HAL_ADC_ConfigChannel+0x12e>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002034:	f1a5 0310 	sub.w	r3, r5, #16
 8002038:	2b01      	cmp	r3, #1
 800203a:	d8c9      	bhi.n	8001fd0 <HAL_ADC_ConfigChannel+0x64>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800203c:	4a1d      	ldr	r2, [pc, #116]	; (80020b4 <HAL_ADC_ConfigChannel+0x148>)
 800203e:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002040:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002042:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002046:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002048:	d1c2      	bne.n	8001fd0 <HAL_ADC_ConfigChannel+0x64>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800204a:	4b1b      	ldr	r3, [pc, #108]	; (80020b8 <HAL_ADC_ConfigChannel+0x14c>)
 800204c:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 8002056:	f202 3283 	addw	r2, r2, #899	; 0x383
 800205a:	fba2 2303 	umull	r2, r3, r2, r3
 800205e:	0c9b      	lsrs	r3, r3, #18
 8002060:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8002068:	9b01      	ldr	r3, [sp, #4]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d0b0      	beq.n	8001fd0 <HAL_ADC_ConfigChannel+0x64>
        counter--;
 800206e:	9b01      	ldr	r3, [sp, #4]
 8002070:	3b01      	subs	r3, #1
 8002072:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8002074:	9b01      	ldr	r3, [sp, #4]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1f9      	bne.n	800206e <HAL_ADC_ConfigChannel+0x102>
 800207a:	e7a9      	b.n	8001fd0 <HAL_ADC_ConfigChannel+0x64>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800207c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8002080:	3a41      	subs	r2, #65	; 0x41
 8002082:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002084:	211f      	movs	r1, #31
 8002086:	4091      	lsls	r1, r2
 8002088:	ea23 0301 	bic.w	r3, r3, r1
 800208c:	62e3      	str	r3, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800208e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002090:	fa06 f102 	lsl.w	r1, r6, r2
 8002094:	4319      	orrs	r1, r3
 8002096:	62e1      	str	r1, [r4, #44]	; 0x2c
 8002098:	e797      	b.n	8001fca <HAL_ADC_ConfigChannel+0x5e>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800209a:	4a06      	ldr	r2, [pc, #24]	; (80020b4 <HAL_ADC_ConfigChannel+0x148>)
 800209c:	6853      	ldr	r3, [r2, #4]
 800209e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020a2:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80020a4:	e794      	b.n	8001fd0 <HAL_ADC_ConfigChannel+0x64>
  __HAL_LOCK(hadc);
 80020a6:	2002      	movs	r0, #2
}
 80020a8:	b002      	add	sp, #8
 80020aa:	bcf0      	pop	{r4, r5, r6, r7}
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	40012000 	.word	0x40012000
 80020b4:	40012300 	.word	0x40012300
 80020b8:	20000000 	.word	0x20000000

080020bc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020bc:	4908      	ldr	r1, [pc, #32]	; (80020e0 <HAL_NVIC_SetPriorityGrouping+0x24>)
 80020be:	68ca      	ldr	r2, [r1, #12]
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020c0:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020c2:	0200      	lsls	r0, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020c4:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 80020c8:	4022      	ands	r2, r4
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020ca:	f400 63e0 	and.w	r3, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80020d8:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->AIRCR =  reg_value;
 80020dc:	60cb      	str	r3, [r1, #12]
 80020de:	4770      	bx	lr
 80020e0:	e000ed00 	.word	0xe000ed00

080020e4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020e4:	4b19      	ldr	r3, [pc, #100]	; (800214c <HAL_NVIC_SetPriority+0x68>)
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020ec:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020ee:	f1c3 0507 	rsb	r5, r3, #7
 80020f2:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020f4:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020f8:	bf28      	it	cs
 80020fa:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020fc:	2c06      	cmp	r4, #6
 80020fe:	d919      	bls.n	8002134 <HAL_NVIC_SetPriority+0x50>
 8002100:	3b03      	subs	r3, #3
 8002102:	f04f 34ff 	mov.w	r4, #4294967295
 8002106:	409c      	lsls	r4, r3
 8002108:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800210c:	f04f 34ff 	mov.w	r4, #4294967295
 8002110:	40ac      	lsls	r4, r5
 8002112:	ea21 0104 	bic.w	r1, r1, r4
 8002116:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8002118:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800211a:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 800211e:	db0c      	blt.n	800213a <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002120:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002124:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002128:	0109      	lsls	r1, r1, #4
 800212a:	b2c9      	uxtb	r1, r1
 800212c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002130:	bc30      	pop	{r4, r5}
 8002132:	4770      	bx	lr
 8002134:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002136:	4613      	mov	r3, r2
 8002138:	e7e8      	b.n	800210c <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800213a:	4b05      	ldr	r3, [pc, #20]	; (8002150 <HAL_NVIC_SetPriority+0x6c>)
 800213c:	f000 000f 	and.w	r0, r0, #15
 8002140:	0109      	lsls	r1, r1, #4
 8002142:	4403      	add	r3, r0
 8002144:	b2c9      	uxtb	r1, r1
 8002146:	7619      	strb	r1, [r3, #24]
 8002148:	bc30      	pop	{r4, r5}
 800214a:	4770      	bx	lr
 800214c:	e000ed00 	.word	0xe000ed00
 8002150:	e000ecfc 	.word	0xe000ecfc

08002154 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002154:	2800      	cmp	r0, #0
 8002156:	db07      	blt.n	8002168 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002158:	f000 011f 	and.w	r1, r0, #31
 800215c:	4a03      	ldr	r2, [pc, #12]	; (800216c <HAL_NVIC_EnableIRQ+0x18>)
 800215e:	0940      	lsrs	r0, r0, #5
 8002160:	2301      	movs	r3, #1
 8002162:	408b      	lsls	r3, r1
 8002164:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	e000e100 	.word	0xe000e100

08002170 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002170:	3801      	subs	r0, #1
 8002172:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002176:	d20e      	bcs.n	8002196 <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002178:	4b08      	ldr	r3, [pc, #32]	; (800219c <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800217a:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800217c:	4c08      	ldr	r4, [pc, #32]	; (80021a0 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800217e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002180:	20f0      	movs	r0, #240	; 0xf0
 8002182:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002186:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002188:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800218a:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800218c:	609a      	str	r2, [r3, #8]
   return SysTick_Config(TicksNumb);
}
 800218e:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002192:	6019      	str	r1, [r3, #0]
 8002194:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002196:	2001      	movs	r0, #1
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	e000e010 	.word	0xe000e010
 80021a0:	e000ed00 	.word	0xe000ed00

080021a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021a6:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 80021a8:	f7ff fd1a 	bl	8001be0 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80021ac:	2c00      	cmp	r4, #0
 80021ae:	d054      	beq.n	800225a <HAL_DMA_Init+0xb6>

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80021b0:	6823      	ldr	r3, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 80021b2:	2202      	movs	r2, #2
  __HAL_UNLOCK(hdma);
 80021b4:	2100      	movs	r1, #0
 80021b6:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 80021ba:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	f022 0201 	bic.w	r2, r2, #1
 80021c4:	4605      	mov	r5, r0
 80021c6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021c8:	e005      	b.n	80021d6 <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021ca:	f7ff fd09 	bl	8001be0 <HAL_GetTick>
 80021ce:	1b43      	subs	r3, r0, r5
 80021d0:	2b05      	cmp	r3, #5
 80021d2:	d83b      	bhi.n	800224c <HAL_DMA_Init+0xa8>
 80021d4:	6823      	ldr	r3, [r4, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	07d1      	lsls	r1, r2, #31
 80021da:	d4f6      	bmi.n	80021ca <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021dc:	e9d4 2601 	ldrd	r2, r6, [r4, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021e0:	e9d4 5003 	ldrd	r5, r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021e4:	4332      	orrs	r2, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021e6:	6961      	ldr	r1, [r4, #20]
  tmp = hdma->Instance->CR;
 80021e8:	681f      	ldr	r7, [r3, #0]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021ea:	432a      	orrs	r2, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021ec:	e9d4 6506 	ldrd	r6, r5, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021f0:	4302      	orrs	r2, r0
 80021f2:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 80021f4:	6a20      	ldr	r0, [r4, #32]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80021f6:	4935      	ldr	r1, [pc, #212]	; (80022cc <HAL_DMA_Init+0x128>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021f8:	4332      	orrs	r2, r6
 80021fa:	432a      	orrs	r2, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 80021fc:	4302      	orrs	r2, r0

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021fe:	6a60      	ldr	r0, [r4, #36]	; 0x24
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002200:	4039      	ands	r1, r7
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002202:	2804      	cmp	r0, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002204:	ea41 0102 	orr.w	r1, r1, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002208:	d029      	beq.n	800225e <HAL_DMA_Init+0xba>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800220a:	6019      	str	r1, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800220c:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800220e:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002212:	4310      	orrs	r0, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002214:	b2da      	uxtb	r2, r3
 8002216:	492e      	ldr	r1, [pc, #184]	; (80022d0 <HAL_DMA_Init+0x12c>)
  hdma->Instance->FCR = tmp;
 8002218:	6158      	str	r0, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800221a:	3a10      	subs	r2, #16
 800221c:	fba1 0102 	umull	r0, r1, r1, r2
 8002220:	0909      	lsrs	r1, r1, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002222:	482c      	ldr	r0, [pc, #176]	; (80022d4 <HAL_DMA_Init+0x130>)
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002224:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002228:	5c41      	ldrb	r1, [r0, r1]
 800222a:	65e1      	str	r1, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800222c:	f023 0303 	bic.w	r3, r3, #3
  if (stream_number > 3U)
 8002230:	2a5f      	cmp	r2, #95	; 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002232:	bf88      	it	hi
 8002234:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002236:	223f      	movs	r2, #63	; 0x3f
 8002238:	408a      	lsls	r2, r1
  hdma->State = HAL_DMA_STATE_READY;
 800223a:	2501      	movs	r5, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800223c:	2100      	movs	r1, #0
 800223e:	65a3      	str	r3, [r4, #88]	; 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002240:	609a      	str	r2, [r3, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002242:	6561      	str	r1, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8002244:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
  return HAL_OK;
 8002248:	4608      	mov	r0, r1
}
 800224a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800224c:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800224e:	2220      	movs	r2, #32
 8002250:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002252:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      return HAL_TIMEOUT;
 8002256:	4618      	mov	r0, r3
}
 8002258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800225a:	2001      	movs	r0, #1
}
 800225c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800225e:	e9d4 500b 	ldrd	r5, r0, [r4, #44]	; 0x2c
 8002262:	4328      	orrs	r0, r5
 8002264:	4301      	orrs	r1, r0
    tmp |= hdma->Init.FIFOThreshold;
 8002266:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  hdma->Instance->CR = tmp;  
 8002268:	6019      	str	r1, [r3, #0]
  tmp = hdma->Instance->FCR;
 800226a:	6958      	ldr	r0, [r3, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800226c:	f020 0007 	bic.w	r0, r0, #7
 8002270:	4310      	orrs	r0, r2
    tmp |= hdma->Init.FIFOThreshold;
 8002272:	f040 0004 	orr.w	r0, r0, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002276:	2d00      	cmp	r5, #0
 8002278:	d0cc      	beq.n	8002214 <HAL_DMA_Init+0x70>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800227a:	b17e      	cbz	r6, 800229c <HAL_DMA_Init+0xf8>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800227c:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 8002280:	d012      	beq.n	80022a8 <HAL_DMA_Init+0x104>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002282:	2a02      	cmp	r2, #2
 8002284:	d903      	bls.n	800228e <HAL_DMA_Init+0xea>
 8002286:	2a03      	cmp	r2, #3
 8002288:	d1c4      	bne.n	8002214 <HAL_DMA_Init+0x70>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800228a:	01ea      	lsls	r2, r5, #7
 800228c:	d5c2      	bpl.n	8002214 <HAL_DMA_Init+0x70>
        hdma->State = HAL_DMA_STATE_READY;
 800228e:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002290:	2240      	movs	r2, #64	; 0x40
 8002292:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8002294:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8002298:	4618      	mov	r0, r3
}
 800229a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (tmp)
 800229c:	2a01      	cmp	r2, #1
 800229e:	d011      	beq.n	80022c4 <HAL_DMA_Init+0x120>
 80022a0:	f032 0202 	bics.w	r2, r2, #2
 80022a4:	d1b6      	bne.n	8002214 <HAL_DMA_Init+0x70>
 80022a6:	e7f0      	b.n	800228a <HAL_DMA_Init+0xe6>
    switch (tmp)
 80022a8:	2a03      	cmp	r2, #3
 80022aa:	d8b3      	bhi.n	8002214 <HAL_DMA_Init+0x70>
 80022ac:	a101      	add	r1, pc, #4	; (adr r1, 80022b4 <HAL_DMA_Init+0x110>)
 80022ae:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80022b2:	bf00      	nop
 80022b4:	0800228f 	.word	0x0800228f
 80022b8:	0800228b 	.word	0x0800228b
 80022bc:	0800228f 	.word	0x0800228f
 80022c0:	080022c5 	.word	0x080022c5
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022c4:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 80022c8:	d1a4      	bne.n	8002214 <HAL_DMA_Init+0x70>
 80022ca:	e7e0      	b.n	800228e <HAL_DMA_Init+0xea>
 80022cc:	f010803f 	.word	0xf010803f
 80022d0:	aaaaaaab 	.word	0xaaaaaaab
 80022d4:	0800da0c 	.word	0x0800da0c

080022d8 <HAL_DMA_Start_IT>:
{
 80022d8:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 80022da:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022de:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 80022e0:	2c01      	cmp	r4, #1
 80022e2:	d034      	beq.n	800234e <HAL_DMA_Start_IT+0x76>
  if(HAL_DMA_STATE_READY == hdma->State)
 80022e4:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  __HAL_LOCK(hdma);
 80022e8:	2501      	movs	r5, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 80022ea:	42ac      	cmp	r4, r5
  __HAL_LOCK(hdma);
 80022ec:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80022f0:	d005      	beq.n	80022fe <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);	  
 80022f2:	2300      	movs	r3, #0
 80022f4:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
}
 80022f8:	bcf0      	pop	{r4, r5, r6, r7}
    status = HAL_BUSY;
 80022fa:	2002      	movs	r0, #2
}
 80022fc:	4770      	bx	lr
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80022fe:	6804      	ldr	r4, [r0, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 8002300:	2702      	movs	r7, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002302:	2500      	movs	r5, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8002304:	f880 7035 	strb.w	r7, [r0, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002308:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800230a:	6825      	ldr	r5, [r4, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800230c:	6887      	ldr	r7, [r0, #8]
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800230e:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002312:	2f40      	cmp	r7, #64	; 0x40
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002314:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8002316:	6063      	str	r3, [r4, #4]
    hdma->Instance->PAR = DstAddress;
 8002318:	bf0a      	itet	eq
 800231a:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 800231c:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 800231e:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002320:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = DstAddress;
 8002322:	bf18      	it	ne
 8002324:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002326:	233f      	movs	r3, #63	; 0x3f
 8002328:	408b      	lsls	r3, r1
    if(hdma->XferHalfCpltCallback != NULL)
 800232a:	6c02      	ldr	r2, [r0, #64]	; 0x40
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800232c:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800232e:	6823      	ldr	r3, [r4, #0]
 8002330:	f043 0316 	orr.w	r3, r3, #22
 8002334:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8002336:	b11a      	cbz	r2, 8002340 <HAL_DMA_Start_IT+0x68>
      hdma->Instance->CR  |= DMA_IT_HT;
 8002338:	6823      	ldr	r3, [r4, #0]
 800233a:	f043 0308 	orr.w	r3, r3, #8
 800233e:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8002340:	6823      	ldr	r3, [r4, #0]
 8002342:	f043 0301 	orr.w	r3, r3, #1
 8002346:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002348:	2000      	movs	r0, #0
}
 800234a:	bcf0      	pop	{r4, r5, r6, r7}
 800234c:	4770      	bx	lr
  __HAL_LOCK(hdma);
 800234e:	2002      	movs	r0, #2
}
 8002350:	bcf0      	pop	{r4, r5, r6, r7}
 8002352:	4770      	bx	lr

08002354 <HAL_DMA_Abort>:
{
 8002354:	b570      	push	{r4, r5, r6, lr}
 8002356:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002358:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 800235a:	f7ff fc41 	bl	8001be0 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800235e:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8002362:	2b02      	cmp	r3, #2
 8002364:	d006      	beq.n	8002374 <HAL_DMA_Abort+0x20>
    __HAL_UNLOCK(hdma);
 8002366:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002368:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 800236a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800236e:	6562      	str	r2, [r4, #84]	; 0x54
    return HAL_ERROR;
 8002370:	2001      	movs	r0, #1
}
 8002372:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002374:	6823      	ldr	r3, [r4, #0]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002376:	6c21      	ldr	r1, [r4, #64]	; 0x40
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	f022 0216 	bic.w	r2, r2, #22
 800237e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002380:	695a      	ldr	r2, [r3, #20]
 8002382:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002386:	4605      	mov	r5, r0
 8002388:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800238a:	b331      	cbz	r1, 80023da <HAL_DMA_Abort+0x86>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	f022 0208 	bic.w	r2, r2, #8
 8002392:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	f022 0201 	bic.w	r2, r2, #1
 800239a:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800239c:	e005      	b.n	80023aa <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800239e:	f7ff fc1f 	bl	8001be0 <HAL_GetTick>
 80023a2:	1b43      	subs	r3, r0, r5
 80023a4:	2b05      	cmp	r3, #5
 80023a6:	d80f      	bhi.n	80023c8 <HAL_DMA_Abort+0x74>
 80023a8:	6823      	ldr	r3, [r4, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f013 0301 	ands.w	r3, r3, #1
 80023b0:	d1f5      	bne.n	800239e <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023b2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80023b4:	223f      	movs	r2, #63	; 0x3f
 80023b6:	408a      	lsls	r2, r1
    hdma->State = HAL_DMA_STATE_READY;
 80023b8:	2101      	movs	r1, #1
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023ba:	60b2      	str	r2, [r6, #8]
    __HAL_UNLOCK(hdma);
 80023bc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 80023c0:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
  return HAL_OK;
 80023c4:	4618      	mov	r0, r3
}
 80023c6:	bd70      	pop	{r4, r5, r6, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023c8:	2220      	movs	r2, #32
        __HAL_UNLOCK(hdma);
 80023ca:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023cc:	2003      	movs	r0, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023ce:	6562      	str	r2, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 80023d0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023d4:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80023d8:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023da:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80023dc:	2a00      	cmp	r2, #0
 80023de:	d1d5      	bne.n	800238c <HAL_DMA_Abort+0x38>
 80023e0:	e7d8      	b.n	8002394 <HAL_DMA_Abort+0x40>
 80023e2:	bf00      	nop

080023e4 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023e4:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d003      	beq.n	80023f4 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023ec:	2380      	movs	r3, #128	; 0x80
 80023ee:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80023f0:	2001      	movs	r0, #1
 80023f2:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 80023f4:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80023f6:	2305      	movs	r3, #5
 80023f8:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80023fc:	6813      	ldr	r3, [r2, #0]
 80023fe:	f023 0301 	bic.w	r3, r3, #1
 8002402:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8002404:	2000      	movs	r0, #0
}
 8002406:	4770      	bx	lr

08002408 <HAL_DMA_IRQHandler>:
{
 8002408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800240c:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800240e:	2300      	movs	r3, #0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002410:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __IO uint32_t count = 0U;
 8002412:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002414:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8002416:	6834      	ldr	r4, [r6, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002418:	4971      	ldr	r1, [pc, #452]	; (80025e0 <HAL_DMA_IRQHandler+0x1d8>)
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800241a:	2208      	movs	r2, #8
 800241c:	409a      	lsls	r2, r3
 800241e:	4222      	tst	r2, r4
  uint32_t timeout = SystemCoreClock / 9600U;
 8002420:	680d      	ldr	r5, [r1, #0]
{
 8002422:	4680      	mov	r8, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002424:	d004      	beq.n	8002430 <HAL_DMA_IRQHandler+0x28>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002426:	6801      	ldr	r1, [r0, #0]
 8002428:	680f      	ldr	r7, [r1, #0]
 800242a:	0778      	lsls	r0, r7, #29
 800242c:	f100 808a 	bmi.w	8002544 <HAL_DMA_IRQHandler+0x13c>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002430:	2201      	movs	r2, #1
 8002432:	409a      	lsls	r2, r3
 8002434:	4222      	tst	r2, r4
 8002436:	d004      	beq.n	8002442 <HAL_DMA_IRQHandler+0x3a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002438:	f8d8 1000 	ldr.w	r1, [r8]
 800243c:	6949      	ldr	r1, [r1, #20]
 800243e:	0609      	lsls	r1, r1, #24
 8002440:	d478      	bmi.n	8002534 <HAL_DMA_IRQHandler+0x12c>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002442:	2204      	movs	r2, #4
 8002444:	409a      	lsls	r2, r3
 8002446:	4222      	tst	r2, r4
 8002448:	d004      	beq.n	8002454 <HAL_DMA_IRQHandler+0x4c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800244a:	f8d8 1000 	ldr.w	r1, [r8]
 800244e:	6809      	ldr	r1, [r1, #0]
 8002450:	078f      	lsls	r7, r1, #30
 8002452:	d467      	bmi.n	8002524 <HAL_DMA_IRQHandler+0x11c>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002454:	2210      	movs	r2, #16
 8002456:	409a      	lsls	r2, r3
 8002458:	4222      	tst	r2, r4
 800245a:	d004      	beq.n	8002466 <HAL_DMA_IRQHandler+0x5e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800245c:	f8d8 1000 	ldr.w	r1, [r8]
 8002460:	680f      	ldr	r7, [r1, #0]
 8002462:	0738      	lsls	r0, r7, #28
 8002464:	d449      	bmi.n	80024fa <HAL_DMA_IRQHandler+0xf2>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002466:	2220      	movs	r2, #32
 8002468:	409a      	lsls	r2, r3
 800246a:	4222      	tst	r2, r4
 800246c:	d017      	beq.n	800249e <HAL_DMA_IRQHandler+0x96>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800246e:	f8d8 1000 	ldr.w	r1, [r8]
 8002472:	680c      	ldr	r4, [r1, #0]
 8002474:	06e0      	lsls	r0, r4, #27
 8002476:	d512      	bpl.n	800249e <HAL_DMA_IRQHandler+0x96>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002478:	60b2      	str	r2, [r6, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800247a:	f898 2035 	ldrb.w	r2, [r8, #53]	; 0x35
 800247e:	2a05      	cmp	r2, #5
 8002480:	d073      	beq.n	800256a <HAL_DMA_IRQHandler+0x162>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002482:	680b      	ldr	r3, [r1, #0]
 8002484:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002488:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800248a:	f000 8090 	beq.w	80025ae <HAL_DMA_IRQHandler+0x1a6>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800248e:	0319      	lsls	r1, r3, #12
 8002490:	f140 809b 	bpl.w	80025ca <HAL_DMA_IRQHandler+0x1c2>
        if(hdma->XferCpltCallback != NULL)
 8002494:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 8002498:	b10b      	cbz	r3, 800249e <HAL_DMA_IRQHandler+0x96>
          hdma->XferCpltCallback(hdma);
 800249a:	4640      	mov	r0, r8
 800249c:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800249e:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 80024a2:	b33b      	cbz	r3, 80024f4 <HAL_DMA_IRQHandler+0xec>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80024a4:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 80024a8:	07da      	lsls	r2, r3, #31
 80024aa:	d51b      	bpl.n	80024e4 <HAL_DMA_IRQHandler+0xdc>
      __HAL_DMA_DISABLE(hdma);
 80024ac:	f8d8 2000 	ldr.w	r2, [r8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80024b0:	494c      	ldr	r1, [pc, #304]	; (80025e4 <HAL_DMA_IRQHandler+0x1dc>)
      hdma->State = HAL_DMA_STATE_ABORT;
 80024b2:	2305      	movs	r3, #5
 80024b4:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80024b8:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80024ba:	fba1 1505 	umull	r1, r5, r1, r5
      __HAL_DMA_DISABLE(hdma);
 80024be:	f023 0301 	bic.w	r3, r3, #1
 80024c2:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80024c4:	0aad      	lsrs	r5, r5, #10
      __HAL_DMA_DISABLE(hdma);
 80024c6:	e002      	b.n	80024ce <HAL_DMA_IRQHandler+0xc6>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80024c8:	6813      	ldr	r3, [r2, #0]
 80024ca:	07db      	lsls	r3, r3, #31
 80024cc:	d504      	bpl.n	80024d8 <HAL_DMA_IRQHandler+0xd0>
        if (++count > timeout)
 80024ce:	9b01      	ldr	r3, [sp, #4]
 80024d0:	3301      	adds	r3, #1
 80024d2:	42ab      	cmp	r3, r5
 80024d4:	9301      	str	r3, [sp, #4]
 80024d6:	d9f7      	bls.n	80024c8 <HAL_DMA_IRQHandler+0xc0>
      __HAL_UNLOCK(hdma);
 80024d8:	2200      	movs	r2, #0
      hdma->State = HAL_DMA_STATE_READY;
 80024da:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 80024dc:	f888 2034 	strb.w	r2, [r8, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80024e0:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 80024e4:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 80024e8:	b123      	cbz	r3, 80024f4 <HAL_DMA_IRQHandler+0xec>
      hdma->XferErrorCallback(hdma);
 80024ea:	4640      	mov	r0, r8
}
 80024ec:	b002      	add	sp, #8
 80024ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      hdma->XferErrorCallback(hdma);
 80024f2:	4718      	bx	r3
}
 80024f4:	b002      	add	sp, #8
 80024f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80024fa:	60b2      	str	r2, [r6, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024fc:	680a      	ldr	r2, [r1, #0]
 80024fe:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002502:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002504:	d12a      	bne.n	800255c <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002506:	05d7      	lsls	r7, r2, #23
 8002508:	d403      	bmi.n	8002512 <HAL_DMA_IRQHandler+0x10a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800250a:	680a      	ldr	r2, [r1, #0]
 800250c:	f022 0208 	bic.w	r2, r2, #8
 8002510:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8002512:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 8002516:	2a00      	cmp	r2, #0
 8002518:	d0a5      	beq.n	8002466 <HAL_DMA_IRQHandler+0x5e>
          hdma->XferHalfCpltCallback(hdma);
 800251a:	4640      	mov	r0, r8
 800251c:	4790      	blx	r2
 800251e:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 8002522:	e7a0      	b.n	8002466 <HAL_DMA_IRQHandler+0x5e>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002524:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002526:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 800252a:	f042 0204 	orr.w	r2, r2, #4
 800252e:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 8002532:	e78f      	b.n	8002454 <HAL_DMA_IRQHandler+0x4c>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002534:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002536:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 800253a:	f042 0202 	orr.w	r2, r2, #2
 800253e:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 8002542:	e77e      	b.n	8002442 <HAL_DMA_IRQHandler+0x3a>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002544:	680f      	ldr	r7, [r1, #0]
 8002546:	f027 0704 	bic.w	r7, r7, #4
 800254a:	600f      	str	r7, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800254c:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800254e:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8002552:	f042 0201 	orr.w	r2, r2, #1
 8002556:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 800255a:	e769      	b.n	8002430 <HAL_DMA_IRQHandler+0x28>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800255c:	0312      	lsls	r2, r2, #12
 800255e:	d5d8      	bpl.n	8002512 <HAL_DMA_IRQHandler+0x10a>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002560:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 8002564:	2a00      	cmp	r2, #0
 8002566:	d1d8      	bne.n	800251a <HAL_DMA_IRQHandler+0x112>
 8002568:	e77d      	b.n	8002466 <HAL_DMA_IRQHandler+0x5e>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800256a:	680a      	ldr	r2, [r1, #0]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800256c:	f8d8 4040 	ldr.w	r4, [r8, #64]	; 0x40
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002570:	f022 0216 	bic.w	r2, r2, #22
 8002574:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002576:	694a      	ldr	r2, [r1, #20]
 8002578:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800257c:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800257e:	b354      	cbz	r4, 80025d6 <HAL_DMA_IRQHandler+0x1ce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002580:	680a      	ldr	r2, [r1, #0]
 8002582:	f022 0208 	bic.w	r2, r2, #8
 8002586:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002588:	223f      	movs	r2, #63	; 0x3f
        if(hdma->XferAbortCallback != NULL)
 800258a:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800258e:	fa02 f303 	lsl.w	r3, r2, r3
        __HAL_UNLOCK(hdma);
 8002592:	2400      	movs	r4, #0
        hdma->State = HAL_DMA_STATE_READY;
 8002594:	2201      	movs	r2, #1
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002596:	60b3      	str	r3, [r6, #8]
        __HAL_UNLOCK(hdma);
 8002598:	f888 4034 	strb.w	r4, [r8, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 800259c:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 80025a0:	2900      	cmp	r1, #0
 80025a2:	d0a7      	beq.n	80024f4 <HAL_DMA_IRQHandler+0xec>
          hdma->XferAbortCallback(hdma);
 80025a4:	4640      	mov	r0, r8
}
 80025a6:	b002      	add	sp, #8
 80025a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          hdma->XferAbortCallback(hdma);
 80025ac:	4708      	bx	r1
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025ae:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 80025b2:	f47f af6f 	bne.w	8002494 <HAL_DMA_IRQHandler+0x8c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80025b6:	680a      	ldr	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80025b8:	2401      	movs	r4, #1
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80025ba:	f022 0210 	bic.w	r2, r2, #16
 80025be:	600a      	str	r2, [r1, #0]
          __HAL_UNLOCK(hdma);
 80025c0:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80025c4:	f888 4035 	strb.w	r4, [r8, #53]	; 0x35
 80025c8:	e764      	b.n	8002494 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1CpltCallback != NULL)
 80025ca:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	f47f af63 	bne.w	800249a <HAL_DMA_IRQHandler+0x92>
 80025d4:	e763      	b.n	800249e <HAL_DMA_IRQHandler+0x96>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025d6:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 80025da:	2a00      	cmp	r2, #0
 80025dc:	d1d0      	bne.n	8002580 <HAL_DMA_IRQHandler+0x178>
 80025de:	e7d3      	b.n	8002588 <HAL_DMA_IRQHandler+0x180>
 80025e0:	20000000 	.word	0x20000000
 80025e4:	1b4e81b5 	.word	0x1b4e81b5

080025e8 <HAL_DMA_GetState>:
  return hdma->State;
 80025e8:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop

080025f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025f4:	468b      	mov	fp, r1
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025f6:	f8df a210 	ldr.w	sl, [pc, #528]	; 8002808 <HAL_GPIO_Init+0x218>
 80025fa:	6809      	ldr	r1, [r1, #0]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025fc:	f8df c20c 	ldr.w	ip, [pc, #524]	; 800280c <HAL_GPIO_Init+0x21c>
{
 8002600:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002602:	2300      	movs	r3, #0
 8002604:	46d9      	mov	r9, fp
 8002606:	e003      	b.n	8002610 <HAL_GPIO_Init+0x20>
 8002608:	3301      	adds	r3, #1
 800260a:	2b10      	cmp	r3, #16
 800260c:	f000 8088 	beq.w	8002720 <HAL_GPIO_Init+0x130>
    ioposition = 0x01U << position;
 8002610:	2201      	movs	r2, #1
 8002612:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002614:	ea02 0b01 	and.w	fp, r2, r1
    if(iocurrent == ioposition)
 8002618:	438a      	bics	r2, r1
 800261a:	d1f5      	bne.n	8002608 <HAL_GPIO_Init+0x18>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800261c:	f8d9 5004 	ldr.w	r5, [r9, #4]
 8002620:	f005 0203 	and.w	r2, r5, #3
 8002624:	1e54      	subs	r4, r2, #1
 8002626:	2c01      	cmp	r4, #1
 8002628:	ea4f 0743 	mov.w	r7, r3, lsl #1
 800262c:	d97b      	bls.n	8002726 <HAL_GPIO_Init+0x136>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800262e:	2a03      	cmp	r2, #3
 8002630:	f040 80b9 	bne.w	80027a6 <HAL_GPIO_Init+0x1b6>
 8002634:	40ba      	lsls	r2, r7
 8002636:	43d4      	mvns	r4, r2
 8002638:	9400      	str	r4, [sp, #0]
      temp = GPIOx->MODER;
 800263a:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800263c:	9c00      	ldr	r4, [sp, #0]
 800263e:	403c      	ands	r4, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002640:	4322      	orrs	r2, r4
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002642:	00ee      	lsls	r6, r5, #3
      GPIOx->MODER = temp;
 8002644:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002646:	d5df      	bpl.n	8002608 <HAL_GPIO_Init+0x18>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002648:	2200      	movs	r2, #0
 800264a:	9203      	str	r2, [sp, #12]
 800264c:	f8da 2044 	ldr.w	r2, [sl, #68]	; 0x44
 8002650:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002654:	f8ca 2044 	str.w	r2, [sl, #68]	; 0x44
 8002658:	f8da 2044 	ldr.w	r2, [sl, #68]	; 0x44
 800265c:	f023 0403 	bic.w	r4, r3, #3
 8002660:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8002664:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002668:	f504 349c 	add.w	r4, r4, #79872	; 0x13800
 800266c:	9203      	str	r2, [sp, #12]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800266e:	f003 0603 	and.w	r6, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002672:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002674:	68a7      	ldr	r7, [r4, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002676:	00b6      	lsls	r6, r6, #2
 8002678:	220f      	movs	r2, #15
 800267a:	40b2      	lsls	r2, r6
 800267c:	ea27 0202 	bic.w	r2, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002680:	4f5a      	ldr	r7, [pc, #360]	; (80027ec <HAL_GPIO_Init+0x1fc>)
 8002682:	42b8      	cmp	r0, r7
 8002684:	d020      	beq.n	80026c8 <HAL_GPIO_Init+0xd8>
 8002686:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800268a:	42b8      	cmp	r0, r7
 800268c:	f000 8090 	beq.w	80027b0 <HAL_GPIO_Init+0x1c0>
 8002690:	4f57      	ldr	r7, [pc, #348]	; (80027f0 <HAL_GPIO_Init+0x200>)
 8002692:	42b8      	cmp	r0, r7
 8002694:	f000 8091 	beq.w	80027ba <HAL_GPIO_Init+0x1ca>
 8002698:	4f56      	ldr	r7, [pc, #344]	; (80027f4 <HAL_GPIO_Init+0x204>)
 800269a:	42b8      	cmp	r0, r7
 800269c:	f000 8092 	beq.w	80027c4 <HAL_GPIO_Init+0x1d4>
 80026a0:	4f55      	ldr	r7, [pc, #340]	; (80027f8 <HAL_GPIO_Init+0x208>)
 80026a2:	42b8      	cmp	r0, r7
 80026a4:	f000 8093 	beq.w	80027ce <HAL_GPIO_Init+0x1de>
 80026a8:	4f54      	ldr	r7, [pc, #336]	; (80027fc <HAL_GPIO_Init+0x20c>)
 80026aa:	42b8      	cmp	r0, r7
 80026ac:	f000 8094 	beq.w	80027d8 <HAL_GPIO_Init+0x1e8>
 80026b0:	4f53      	ldr	r7, [pc, #332]	; (8002800 <HAL_GPIO_Init+0x210>)
 80026b2:	42b8      	cmp	r0, r7
 80026b4:	f000 8095 	beq.w	80027e2 <HAL_GPIO_Init+0x1f2>
 80026b8:	4f52      	ldr	r7, [pc, #328]	; (8002804 <HAL_GPIO_Init+0x214>)
 80026ba:	42b8      	cmp	r0, r7
 80026bc:	bf0c      	ite	eq
 80026be:	2707      	moveq	r7, #7
 80026c0:	2708      	movne	r7, #8
 80026c2:	fa07 f606 	lsl.w	r6, r7, r6
 80026c6:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026c8:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 80026ca:	f8dc 2000 	ldr.w	r2, [ip]
        temp &= ~((uint32_t)iocurrent);
 80026ce:	ea6f 060b 	mvn.w	r6, fp
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026d2:	03ec      	lsls	r4, r5, #15
        temp &= ~((uint32_t)iocurrent);
 80026d4:	bf54      	ite	pl
 80026d6:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 80026d8:	ea4b 0202 	orrmi.w	r2, fp, r2
        }
        EXTI->IMR = temp;
 80026dc:	f8cc 2000 	str.w	r2, [ip]

        temp = EXTI->EMR;
 80026e0:	f8dc 4004 	ldr.w	r4, [ip, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026e4:	03aa      	lsls	r2, r5, #14
        temp &= ~((uint32_t)iocurrent);
 80026e6:	bf54      	ite	pl
 80026e8:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80026ea:	ea4b 0404 	orrmi.w	r4, fp, r4
        }
        EXTI->EMR = temp;
 80026ee:	f8cc 4004 	str.w	r4, [ip, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026f2:	f8dc 4008 	ldr.w	r4, [ip, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026f6:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 80026f8:	bf54      	ite	pl
 80026fa:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80026fc:	ea4b 0404 	orrmi.w	r4, fp, r4
        }
        EXTI->RTSR = temp;
 8002700:	f8cc 4008 	str.w	r4, [ip, #8]

        temp = EXTI->FTSR;
 8002704:	f8dc 200c 	ldr.w	r2, [ip, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002708:	02ac      	lsls	r4, r5, #10
  for(position = 0U; position < GPIO_NUMBER; position++)
 800270a:	f103 0301 	add.w	r3, r3, #1
        temp &= ~((uint32_t)iocurrent);
 800270e:	bf54      	ite	pl
 8002710:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 8002712:	ea4b 0202 	orrmi.w	r2, fp, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002716:	2b10      	cmp	r3, #16
        }
        EXTI->FTSR = temp;
 8002718:	f8cc 200c 	str.w	r2, [ip, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800271c:	f47f af78 	bne.w	8002610 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002720:	b005      	add	sp, #20
 8002722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 8002726:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002728:	2403      	movs	r4, #3
 800272a:	40bc      	lsls	r4, r7
 800272c:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002730:	f8d9 600c 	ldr.w	r6, [r9, #12]
 8002734:	40be      	lsls	r6, r7
 8002736:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->OSPEEDR = temp;
 800273a:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 800273c:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002740:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002744:	ea2e 0e0b 	bic.w	lr, lr, fp
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002748:	409e      	lsls	r6, r3
 800274a:	ea46 060e 	orr.w	r6, r6, lr
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800274e:	43e4      	mvns	r4, r4
 8002750:	9400      	str	r4, [sp, #0]
        GPIOx->OTYPER = temp;
 8002752:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 8002754:	68c6      	ldr	r6, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002756:	ea06 0e04 	and.w	lr, r6, r4
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800275a:	f8d9 6008 	ldr.w	r6, [r9, #8]
 800275e:	40be      	lsls	r6, r7
 8002760:	ea46 060e 	orr.w	r6, r6, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002764:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8002766:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002768:	d001      	beq.n	800276e <HAL_GPIO_Init+0x17e>
 800276a:	40ba      	lsls	r2, r7
 800276c:	e765      	b.n	800263a <HAL_GPIO_Init+0x4a>
        temp = GPIOx->AFR[position >> 3U];
 800276e:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 8002772:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002776:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800277a:	f8d8 4020 	ldr.w	r4, [r8, #32]
 800277e:	9401      	str	r4, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002780:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8002784:	240f      	movs	r4, #15
 8002786:	fa04 f60e 	lsl.w	r6, r4, lr
 800278a:	9c01      	ldr	r4, [sp, #4]
 800278c:	ea24 0606 	bic.w	r6, r4, r6
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002790:	f8d9 4010 	ldr.w	r4, [r9, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002794:	9601      	str	r6, [sp, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002796:	fa04 f60e 	lsl.w	r6, r4, lr
 800279a:	9c01      	ldr	r4, [sp, #4]
 800279c:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3U] = temp;
 800279e:	40ba      	lsls	r2, r7
 80027a0:	f8c8 6020 	str.w	r6, [r8, #32]
 80027a4:	e749      	b.n	800263a <HAL_GPIO_Init+0x4a>
 80027a6:	2403      	movs	r4, #3
 80027a8:	40bc      	lsls	r4, r7
 80027aa:	43e4      	mvns	r4, r4
 80027ac:	9400      	str	r4, [sp, #0]
 80027ae:	e7d1      	b.n	8002754 <HAL_GPIO_Init+0x164>
 80027b0:	2701      	movs	r7, #1
 80027b2:	fa07 f606 	lsl.w	r6, r7, r6
 80027b6:	4332      	orrs	r2, r6
 80027b8:	e786      	b.n	80026c8 <HAL_GPIO_Init+0xd8>
 80027ba:	2702      	movs	r7, #2
 80027bc:	fa07 f606 	lsl.w	r6, r7, r6
 80027c0:	4332      	orrs	r2, r6
 80027c2:	e781      	b.n	80026c8 <HAL_GPIO_Init+0xd8>
 80027c4:	2703      	movs	r7, #3
 80027c6:	fa07 f606 	lsl.w	r6, r7, r6
 80027ca:	4332      	orrs	r2, r6
 80027cc:	e77c      	b.n	80026c8 <HAL_GPIO_Init+0xd8>
 80027ce:	2704      	movs	r7, #4
 80027d0:	fa07 f606 	lsl.w	r6, r7, r6
 80027d4:	4332      	orrs	r2, r6
 80027d6:	e777      	b.n	80026c8 <HAL_GPIO_Init+0xd8>
 80027d8:	2705      	movs	r7, #5
 80027da:	fa07 f606 	lsl.w	r6, r7, r6
 80027de:	4332      	orrs	r2, r6
 80027e0:	e772      	b.n	80026c8 <HAL_GPIO_Init+0xd8>
 80027e2:	2706      	movs	r7, #6
 80027e4:	fa07 f606 	lsl.w	r6, r7, r6
 80027e8:	4332      	orrs	r2, r6
 80027ea:	e76d      	b.n	80026c8 <HAL_GPIO_Init+0xd8>
 80027ec:	40020000 	.word	0x40020000
 80027f0:	40020800 	.word	0x40020800
 80027f4:	40020c00 	.word	0x40020c00
 80027f8:	40021000 	.word	0x40021000
 80027fc:	40021400 	.word	0x40021400
 8002800:	40021800 	.word	0x40021800
 8002804:	40021c00 	.word	0x40021c00
 8002808:	40023800 	.word	0x40023800
 800280c:	40013c00 	.word	0x40013c00

08002810 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002810:	6903      	ldr	r3, [r0, #16]
 8002812:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002814:	bf14      	ite	ne
 8002816:	2001      	movne	r0, #1
 8002818:	2000      	moveq	r0, #0
 800281a:	4770      	bx	lr

0800281c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800281c:	b902      	cbnz	r2, 8002820 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800281e:	0409      	lsls	r1, r1, #16
 8002820:	6181      	str	r1, [r0, #24]
  }
}
 8002822:	4770      	bx	lr

08002824 <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop

08002828 <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002828:	4a04      	ldr	r2, [pc, #16]	; (800283c <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800282a:	6951      	ldr	r1, [r2, #20]
 800282c:	4201      	tst	r1, r0
 800282e:	d100      	bne.n	8002832 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8002830:	4770      	bx	lr
{
 8002832:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002834:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002836:	f7ff fff5 	bl	8002824 <HAL_GPIO_EXTI_Callback>
}
 800283a:	bd08      	pop	{r3, pc}
 800283c:	40013c00 	.word	0x40013c00

08002840 <HAL_I2S_Init>:
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002840:	2800      	cmp	r0, #0
 8002842:	f000 8089 	beq.w	8002958 <HAL_I2S_Init+0x118>
{
 8002846:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002848:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800284c:	4604      	mov	r4, r0
 800284e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002852:	2b00      	cmp	r3, #0
 8002854:	d075      	beq.n	8002942 <HAL_I2S_Init+0x102>

  hi2s->State = HAL_I2S_STATE_BUSY;

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002856:	6821      	ldr	r1, [r4, #0]
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002858:	6963      	ldr	r3, [r4, #20]
  hi2s->State = HAL_I2S_STATE_BUSY;
 800285a:	2202      	movs	r2, #2
 800285c:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002860:	69c8      	ldr	r0, [r1, #28]
 8002862:	f420 607b 	bic.w	r0, r0, #4016	; 0xfb0
 8002866:	f020 000f 	bic.w	r0, r0, #15
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800286a:	4293      	cmp	r3, r2
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800286c:	61c8      	str	r0, [r1, #28]
  hi2s->Instance->I2SPR = 0x0002U;
 800286e:	620a      	str	r2, [r1, #32]
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002870:	d065      	beq.n	800293e <HAL_I2S_Init+0xfe>
      /* Packet length is 32 bits */
      packetlength = 32U;
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002872:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002876:	2b00      	cmp	r3, #0
 8002878:	bf0b      	itete	eq
 800287a:	2320      	moveq	r3, #32
 800287c:	2340      	movne	r3, #64	; 0x40
 800287e:	2510      	moveq	r5, #16
 8002880:	2520      	movne	r5, #32
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002882:	2001      	movs	r0, #1
      packetlength = packetlength * 2U;
 8002884:	2a20      	cmp	r2, #32
 8002886:	bf98      	it	ls
 8002888:	461d      	movls	r5, r3
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800288a:	f001 fc1f 	bl	80040cc <HAL_RCCEx_GetPeriphCLKFreq>
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800288e:	6922      	ldr	r2, [r4, #16]
 8002890:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8002894:	d05c      	beq.n	8002950 <HAL_I2S_Init+0x110>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002896:	fbb0 f0f5 	udiv	r0, r0, r5
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800289a:	4931      	ldr	r1, [pc, #196]	; (8002960 <HAL_I2S_Init+0x120>)
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800289c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80028a0:	0043      	lsls	r3, r0, #1
 80028a2:	6960      	ldr	r0, [r4, #20]
 80028a4:	fbb3 f3f0 	udiv	r3, r3, r0
 80028a8:	3305      	adds	r3, #5
    tmp = tmp / 10U;
 80028aa:	fba1 1303 	umull	r1, r3, r1, r3

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80028ae:	0919      	lsrs	r1, r3, #4
    i2sdiv = 2U;
    i2sodd = 0U;
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80028b0:	1e88      	subs	r0, r1, #2
 80028b2:	28fd      	cmp	r0, #253	; 0xfd
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80028b4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80028b8:	d905      	bls.n	80028c6 <HAL_I2S_Init+0x86>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80028ba:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80028bc:	f043 0310 	orr.w	r3, r3, #16
 80028c0:	6463      	str	r3, [r4, #68]	; 0x44
    return  HAL_ERROR;
 80028c2:	2001      	movs	r0, #1

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
  hi2s->State     = HAL_I2S_STATE_READY;

  return HAL_OK;
}
 80028c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028c6:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 80028ca:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80028cc:	68e6      	ldr	r6, [r4, #12]
 80028ce:	69a5      	ldr	r5, [r4, #24]
 80028d0:	4f24      	ldr	r7, [pc, #144]	; (8002964 <HAL_I2S_Init+0x124>)
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80028d2:	4313      	orrs	r3, r2
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80028d4:	e9d4 c001 	ldrd	ip, r0, [r4, #4]
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80028d8:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80028da:	69cb      	ldr	r3, [r1, #28]
 80028dc:	ea4c 0200 	orr.w	r2, ip, r0
 80028e0:	403b      	ands	r3, r7
 80028e2:	4313      	orrs	r3, r2
 80028e4:	4333      	orrs	r3, r6
  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80028e6:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80028e8:	432b      	orrs	r3, r5
 80028ea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80028ee:	2a01      	cmp	r2, #1
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80028f0:	61cb      	str	r3, [r1, #28]
  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80028f2:	d11e      	bne.n	8002932 <HAL_I2S_Init+0xf2>
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80028f4:	4a1c      	ldr	r2, [pc, #112]	; (8002968 <HAL_I2S_Init+0x128>)
 80028f6:	4b1d      	ldr	r3, [pc, #116]	; (800296c <HAL_I2S_Init+0x12c>)
 80028f8:	4291      	cmp	r1, r2
 80028fa:	bf0c      	ite	eq
 80028fc:	4619      	moveq	r1, r3
 80028fe:	f04f 2140 	movne.w	r1, #1073758208	; 0x40004000
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002902:	4a1b      	ldr	r2, [pc, #108]	; (8002970 <HAL_I2S_Init+0x130>)
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002904:	69cb      	ldr	r3, [r1, #28]
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002906:	6362      	str	r2, [r4, #52]	; 0x34
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002908:	401f      	ands	r7, r3
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800290a:	f43c 7200 	bics.w	r2, ip, #512	; 0x200
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800290e:	f04f 0202 	mov.w	r2, #2
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002912:	61cf      	str	r7, [r1, #28]
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002914:	ea40 0006 	orr.w	r0, r0, r6
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002918:	620a      	str	r2, [r1, #32]
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800291a:	bf0c      	ite	eq
 800291c:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8002920:	2300      	movne	r3, #0
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002922:	69ca      	ldr	r2, [r1, #28]
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002924:	4303      	orrs	r3, r0
 8002926:	432b      	orrs	r3, r5
 8002928:	4313      	orrs	r3, r2
 800292a:	b29b      	uxth	r3, r3
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800292c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002930:	61cb      	str	r3, [r1, #28]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002932:	2000      	movs	r0, #0
  hi2s->State     = HAL_I2S_STATE_READY;
 8002934:	2301      	movs	r3, #1
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002936:	6460      	str	r0, [r4, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002938:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 800293c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800293e:	6922      	ldr	r2, [r4, #16]
 8002940:	e7c4      	b.n	80028cc <HAL_I2S_Init+0x8c>
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002942:	4b0c      	ldr	r3, [pc, #48]	; (8002974 <HAL_I2S_Init+0x134>)
    hi2s->Lock = HAL_UNLOCKED;
 8002944:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002948:	6343      	str	r3, [r0, #52]	; 0x34
    HAL_I2S_MspInit(hi2s);
 800294a:	f7fe fe1f 	bl	800158c <HAL_I2S_MspInit>
 800294e:	e782      	b.n	8002856 <HAL_I2S_Init+0x16>
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002950:	68e3      	ldr	r3, [r4, #12]
 8002952:	b11b      	cbz	r3, 800295c <HAL_I2S_Init+0x11c>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002954:	00ad      	lsls	r5, r5, #2
 8002956:	e79e      	b.n	8002896 <HAL_I2S_Init+0x56>
    return HAL_ERROR;
 8002958:	2001      	movs	r0, #1
}
 800295a:	4770      	bx	lr
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800295c:	00ed      	lsls	r5, r5, #3
 800295e:	e79a      	b.n	8002896 <HAL_I2S_Init+0x56>
 8002960:	cccccccd 	.word	0xcccccccd
 8002964:	fffff040 	.word	0xfffff040
 8002968:	40003800 	.word	0x40003800
 800296c:	40003400 	.word	0x40003400
 8002970:	08002d05 	.word	0x08002d05
 8002974:	08002989 	.word	0x08002989

08002978 <HAL_I2S_IRQHandler>:
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 8002978:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800297a:	4718      	bx	r3

0800297c <HAL_I2S_TxCpltCallback>:
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop

08002980 <HAL_I2S_RxCpltCallback>:
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop

08002984 <HAL_I2S_ErrorCallback>:
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop

08002988 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002988:	b510      	push	{r4, lr}
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800298a:	6803      	ldr	r3, [r0, #0]
{
 800298c:	b084      	sub	sp, #16
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800298e:	689a      	ldr	r2, [r3, #8]
 8002990:	9201      	str	r2, [sp, #4]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002992:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8002996:	2a04      	cmp	r2, #4
{
 8002998:	4604      	mov	r4, r0
  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800299a:	d005      	beq.n	80029a8 <I2S_IRQHandler+0x20>
      HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800299c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80029a0:	2b03      	cmp	r3, #3
 80029a2:	d031      	beq.n	8002a08 <I2S_IRQHandler+0x80>
#else
      HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80029a4:	b004      	add	sp, #16
 80029a6:	bd10      	pop	{r4, pc}
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80029a8:	9a01      	ldr	r2, [sp, #4]
 80029aa:	07d1      	lsls	r1, r2, #31
 80029ac:	d50f      	bpl.n	80029ce <I2S_IRQHandler+0x46>
 80029ae:	685a      	ldr	r2, [r3, #4]
 80029b0:	0652      	lsls	r2, r2, #25
 80029b2:	d50c      	bpl.n	80029ce <I2S_IRQHandler+0x46>
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80029b4:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80029b6:	68da      	ldr	r2, [r3, #12]
 80029b8:	f821 2b02 	strh.w	r2, [r1], #2
  hi2s->RxXferCount--;
 80029bc:	8e42      	ldrh	r2, [r0, #50]	; 0x32
  hi2s->pRxBuffPtr++;
 80029be:	62c1      	str	r1, [r0, #44]	; 0x2c
  hi2s->RxXferCount--;
 80029c0:	3a01      	subs	r2, #1
 80029c2:	b292      	uxth	r2, r2
 80029c4:	8642      	strh	r2, [r0, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 80029c6:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 80029c8:	b292      	uxth	r2, r2
 80029ca:	2a00      	cmp	r2, #0
 80029cc:	d04a      	beq.n	8002a64 <I2S_IRQHandler+0xdc>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80029ce:	9b01      	ldr	r3, [sp, #4]
 80029d0:	0659      	lsls	r1, r3, #25
 80029d2:	d5e3      	bpl.n	800299c <I2S_IRQHandler+0x14>
 80029d4:	6823      	ldr	r3, [r4, #0]
 80029d6:	685a      	ldr	r2, [r3, #4]
 80029d8:	0692      	lsls	r2, r2, #26
 80029da:	d5df      	bpl.n	800299c <I2S_IRQHandler+0x14>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80029dc:	685a      	ldr	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80029de:	2100      	movs	r1, #0
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80029e0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80029e4:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80029e6:	9102      	str	r1, [sp, #8]
 80029e8:	68da      	ldr	r2, [r3, #12]
 80029ea:	9202      	str	r2, [sp, #8]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	9302      	str	r3, [sp, #8]
      hi2s->State = HAL_I2S_STATE_READY;
 80029f0:	2301      	movs	r3, #1
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80029f2:	9a02      	ldr	r2, [sp, #8]
      hi2s->State = HAL_I2S_STATE_READY;
 80029f4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80029f8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80029fa:	f043 0302 	orr.w	r3, r3, #2
 80029fe:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8002a00:	4620      	mov	r0, r4
 8002a02:	f7ff ffbf 	bl	8002984 <HAL_I2S_ErrorCallback>
 8002a06:	e7c9      	b.n	800299c <I2S_IRQHandler+0x14>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002a08:	9b01      	ldr	r3, [sp, #4]
 8002a0a:	079b      	lsls	r3, r3, #30
 8002a0c:	d50f      	bpl.n	8002a2e <I2S_IRQHandler+0xa6>
 8002a0e:	6823      	ldr	r3, [r4, #0]
 8002a10:	685a      	ldr	r2, [r3, #4]
 8002a12:	0610      	lsls	r0, r2, #24
 8002a14:	d50b      	bpl.n	8002a2e <I2S_IRQHandler+0xa6>
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002a16:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002a18:	f831 2b02 	ldrh.w	r2, [r1], #2
 8002a1c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002a1e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  hi2s->pTxBuffPtr++;
 8002a20:	6261      	str	r1, [r4, #36]	; 0x24
  hi2s->TxXferCount--;
 8002a22:	3a01      	subs	r2, #1
 8002a24:	b292      	uxth	r2, r2
 8002a26:	8562      	strh	r2, [r4, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 8002a28:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002a2a:	b292      	uxth	r2, r2
 8002a2c:	b322      	cbz	r2, 8002a78 <I2S_IRQHandler+0xf0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002a2e:	9b01      	ldr	r3, [sp, #4]
 8002a30:	0719      	lsls	r1, r3, #28
 8002a32:	d5b7      	bpl.n	80029a4 <I2S_IRQHandler+0x1c>
 8002a34:	6823      	ldr	r3, [r4, #0]
 8002a36:	685a      	ldr	r2, [r3, #4]
 8002a38:	0692      	lsls	r2, r2, #26
 8002a3a:	d5b3      	bpl.n	80029a4 <I2S_IRQHandler+0x1c>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a3c:	685a      	ldr	r2, [r3, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002a3e:	2100      	movs	r1, #0
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a40:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002a44:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002a46:	9103      	str	r1, [sp, #12]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	9303      	str	r3, [sp, #12]
      hi2s->State = HAL_I2S_STATE_READY;
 8002a4c:	2301      	movs	r3, #1
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002a4e:	9a03      	ldr	r2, [sp, #12]
      hi2s->State = HAL_I2S_STATE_READY;
 8002a50:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002a54:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002a56:	f043 0304 	orr.w	r3, r3, #4
 8002a5a:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8002a5c:	4620      	mov	r0, r4
 8002a5e:	f7ff ff91 	bl	8002984 <HAL_I2S_ErrorCallback>
}
 8002a62:	e79f      	b.n	80029a4 <I2S_IRQHandler+0x1c>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a64:	685a      	ldr	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8002a66:	2101      	movs	r1, #1
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a68:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002a6c:	605a      	str	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8002a6e:	f880 1041 	strb.w	r1, [r0, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 8002a72:	f7ff ff85 	bl	8002980 <HAL_I2S_RxCpltCallback>
 8002a76:	e7aa      	b.n	80029ce <I2S_IRQHandler+0x46>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a78:	685a      	ldr	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8002a7a:	2101      	movs	r1, #1
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a7c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002a80:	605a      	str	r2, [r3, #4]
    HAL_I2S_TxCpltCallback(hi2s);
 8002a82:	4620      	mov	r0, r4
    hi2s->State = HAL_I2S_STATE_READY;
 8002a84:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 8002a88:	f7ff ff78 	bl	800297c <HAL_I2S_TxCpltCallback>
 8002a8c:	e7cf      	b.n	8002a2e <I2S_IRQHandler+0xa6>
 8002a8e:	bf00      	nop

08002a90 <I2SEx_TxRxDMAError>:
  * @param  hdma DMA handle
  * @retval None
  */
static void I2SEx_TxRxDMAError(DMA_HandleTypeDef *hdma)
{
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a90:	6b80      	ldr	r0, [r0, #56]	; 0x38

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
  CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002a92:	4b0f      	ldr	r3, [pc, #60]	; (8002ad0 <I2SEx_TxRxDMAError+0x40>)
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002a94:	6802      	ldr	r2, [r0, #0]
{
 8002a96:	b410      	push	{r4}
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002a98:	6851      	ldr	r1, [r2, #4]
  CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002a9a:	4c0e      	ldr	r4, [pc, #56]	; (8002ad4 <I2SEx_TxRxDMAError+0x44>)
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002a9c:	f021 0103 	bic.w	r1, r1, #3
  CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002aa0:	42a2      	cmp	r2, r4
 8002aa2:	bf18      	it	ne
 8002aa4:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002aa8:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002aaa:	685a      	ldr	r2, [r3, #4]

  hi2s->TxXferCount = 0U;
 8002aac:	2100      	movs	r1, #0
  hi2s->RxXferCount = 0U;

  hi2s->State = HAL_I2S_STATE_READY;
 8002aae:	2401      	movs	r4, #1
  CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002ab0:	f022 0203 	bic.w	r2, r2, #3
 8002ab4:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8002ab6:	8541      	strh	r1, [r0, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8002ab8:	8641      	strh	r1, [r0, #50]	; 0x32
  hi2s->State = HAL_I2S_STATE_READY;
 8002aba:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002abe:	6c43      	ldr	r3, [r0, #68]	; 0x44
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002ac0:	f85d 4b04 	ldr.w	r4, [sp], #4
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002ac4:	f043 0308 	orr.w	r3, r3, #8
 8002ac8:	6443      	str	r3, [r0, #68]	; 0x44
  HAL_I2S_ErrorCallback(hi2s);
 8002aca:	f7ff bf5b 	b.w	8002984 <HAL_I2S_ErrorCallback>
 8002ace:	bf00      	nop
 8002ad0:	40003400 	.word	0x40003400
 8002ad4:	40003800 	.word	0x40003800

08002ad8 <HAL_I2SEx_TransmitReceive_DMA>:
{
 8002ad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hi2s->State != HAL_I2S_STATE_READY)
 8002adc:	f890 7041 	ldrb.w	r7, [r0, #65]	; 0x41
 8002ae0:	2f01      	cmp	r7, #1
{
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	4604      	mov	r4, r0
  if (hi2s->State != HAL_I2S_STATE_READY)
 8002ae6:	d172      	bne.n	8002bce <HAL_I2SEx_TransmitReceive_DMA+0xf6>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002ae8:	460d      	mov	r5, r1
 8002aea:	b2f8      	uxtb	r0, r7
 8002aec:	2900      	cmp	r1, #0
 8002aee:	d072      	beq.n	8002bd6 <HAL_I2SEx_TransmitReceive_DMA+0xfe>
 8002af0:	4616      	mov	r6, r2
 8002af2:	2a00      	cmp	r2, #0
 8002af4:	d06f      	beq.n	8002bd6 <HAL_I2SEx_TransmitReceive_DMA+0xfe>
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d06d      	beq.n	8002bd6 <HAL_I2SEx_TransmitReceive_DMA+0xfe>
  __HAL_LOCK(hi2s);
 8002afa:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8002afe:	2a01      	cmp	r2, #1
 8002b00:	f000 80ac 	beq.w	8002c5c <HAL_I2SEx_TransmitReceive_DMA+0x184>
  tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002b04:	6822      	ldr	r2, [r4, #0]
  __HAL_LOCK(hi2s);
 8002b06:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002b0a:	69d0      	ldr	r0, [r2, #28]
  hi2s->pTxBuffPtr = pTxData;
 8002b0c:	6261      	str	r1, [r4, #36]	; 0x24
  tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002b0e:	f000 0007 	and.w	r0, r0, #7
  if ((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 8002b12:	2803      	cmp	r0, #3
  hi2s->pRxBuffPtr = pRxData;
 8002b14:	62e6      	str	r6, [r4, #44]	; 0x2c
  if ((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 8002b16:	f000 809a 	beq.w	8002c4e <HAL_I2SEx_TransmitReceive_DMA+0x176>
 8002b1a:	2805      	cmp	r0, #5
 8002b1c:	f000 8097 	beq.w	8002c4e <HAL_I2SEx_TransmitReceive_DMA+0x176>
    hi2s->TxXferSize  = Size;
 8002b20:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8002b22:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2s->RxXferSize  = Size;
 8002b24:	8623      	strh	r3, [r4, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8002b26:	8663      	strh	r3, [r4, #50]	; 0x32
  hi2s->hdmatx->XferHalfCpltCallback  = NULL;
 8002b28:	e9d4 ce0e 	ldrd	ip, lr, [r4, #56]	; 0x38
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002b2c:	2300      	movs	r3, #0
  hi2s->State     = HAL_I2S_STATE_BUSY_TX_RX;
 8002b2e:	2105      	movs	r1, #5
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002b30:	6463      	str	r3, [r4, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_BUSY_TX_RX;
 8002b32:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  tmp1 = hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG;
 8002b36:	69d7      	ldr	r7, [r2, #28]
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_TxRxDMAHalfCplt;
 8002b38:	494d      	ldr	r1, [pc, #308]	; (8002c70 <HAL_I2SEx_TransmitReceive_DMA+0x198>)
 8002b3a:	f8ce 1040 	str.w	r1, [lr, #64]	; 0x40
  hi2s->hdmarx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 8002b3e:	484d      	ldr	r0, [pc, #308]	; (8002c74 <HAL_I2SEx_TransmitReceive_DMA+0x19c>)
  hi2s->hdmarx->XferErrorCallback = I2SEx_TxRxDMAError;
 8002b40:	494d      	ldr	r1, [pc, #308]	; (8002c78 <HAL_I2SEx_TransmitReceive_DMA+0x1a0>)
 8002b42:	f8ce 104c 	str.w	r1, [lr, #76]	; 0x4c
  hi2s->hdmarx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 8002b46:	f8ce 003c 	str.w	r0, [lr, #60]	; 0x3c
  hi2s->hdmatx->XferErrorCallback = I2SEx_TxRxDMAError;
 8002b4a:	f8cc 104c 	str.w	r1, [ip, #76]	; 0x4c
  if ((tmp1 == I2S_MODE_MASTER_TX) || (tmp1 == I2S_MODE_SLAVE_TX))
 8002b4e:	05f9      	lsls	r1, r7, #23
  hi2s->hdmatx->XferCpltCallback  = NULL;
 8002b50:	e9cc 330f 	strd	r3, r3, [ip, #60]	; 0x3c
  if ((tmp1 == I2S_MODE_MASTER_TX) || (tmp1 == I2S_MODE_SLAVE_TX))
 8002b54:	d544      	bpl.n	8002be0 <HAL_I2SEx_TransmitReceive_DMA+0x108>
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8002b56:	69d1      	ldr	r1, [r2, #28]
 8002b58:	f401 7140 	and.w	r1, r1, #768	; 0x300
 8002b5c:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 8002b60:	d07e      	beq.n	8002c60 <HAL_I2SEx_TransmitReceive_DMA+0x188>
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, hi2s->TxXferSize);
 8002b62:	f8df 811c 	ldr.w	r8, [pc, #284]	; 8002c80 <HAL_I2SEx_TransmitReceive_DMA+0x1a8>
 8002b66:	4f45      	ldr	r7, [pc, #276]	; (8002c7c <HAL_I2SEx_TransmitReceive_DMA+0x1a4>)
 8002b68:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002b6a:	4542      	cmp	r2, r8
 8002b6c:	bf0c      	ite	eq
 8002b6e:	463a      	moveq	r2, r7
 8002b70:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 8002b74:	4629      	mov	r1, r5
 8002b76:	4660      	mov	r0, ip
 8002b78:	320c      	adds	r2, #12
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	f7ff fbac 	bl	80022d8 <HAL_DMA_Start_IT>
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8002b80:	6821      	ldr	r1, [r4, #0]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8002b82:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8002b84:	4541      	cmp	r1, r8
 8002b86:	bf0c      	ite	eq
 8002b88:	463d      	moveq	r5, r7
 8002b8a:	f04f 2540 	movne.w	r5, #1073758208	; 0x40004000
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8002b8e:	4632      	mov	r2, r6
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8002b90:	686b      	ldr	r3, [r5, #4]
 8002b92:	f043 0302 	orr.w	r3, r3, #2
 8002b96:	606b      	str	r3, [r5, #4]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8002b98:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8002b9a:	310c      	adds	r1, #12
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	f7ff fb9b 	bl	80022d8 <HAL_DMA_Start_IT>
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002ba2:	6823      	ldr	r3, [r4, #0]
 8002ba4:	685a      	ldr	r2, [r3, #4]
 8002ba6:	f042 0201 	orr.w	r2, r2, #1
 8002baa:	605a      	str	r2, [r3, #4]
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8002bac:	69d8      	ldr	r0, [r3, #28]
 8002bae:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 8002bb2:	d113      	bne.n	8002bdc <HAL_I2SEx_TransmitReceive_DMA+0x104>
      __HAL_I2SEXT_ENABLE(hi2s);
 8002bb4:	4543      	cmp	r3, r8
 8002bb6:	bf18      	it	ne
 8002bb8:	f04f 2740 	movne.w	r7, #1073758208	; 0x40004000
 8002bbc:	69fa      	ldr	r2, [r7, #28]
 8002bbe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002bc2:	61fa      	str	r2, [r7, #28]
      __HAL_I2S_ENABLE(hi2s);
 8002bc4:	69da      	ldr	r2, [r3, #28]
 8002bc6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002bca:	61da      	str	r2, [r3, #28]
 8002bcc:	e000      	b.n	8002bd0 <HAL_I2SEx_TransmitReceive_DMA+0xf8>
    errorcode = HAL_BUSY;
 8002bce:	2002      	movs	r0, #2
  __HAL_UNLOCK(hi2s);
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8002bd6:	b002      	add	sp, #8
 8002bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002bdc:	2000      	movs	r0, #0
 8002bde:	e7f7      	b.n	8002bd0 <HAL_I2SEx_TransmitReceive_DMA+0xf8>
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8002be0:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8002c80 <HAL_I2SEx_TransmitReceive_DMA+0x1a8>
 8002be4:	4f25      	ldr	r7, [pc, #148]	; (8002c7c <HAL_I2SEx_TransmitReceive_DMA+0x1a4>)
 8002be6:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8002be8:	4542      	cmp	r2, r8
 8002bea:	bf0c      	ite	eq
 8002bec:	4639      	moveq	r1, r7
 8002bee:	f04f 2140 	movne.w	r1, #1073758208	; 0x40004000
 8002bf2:	4670      	mov	r0, lr
 8002bf4:	4632      	mov	r2, r6
 8002bf6:	310c      	adds	r1, #12
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	f7ff fb6d 	bl	80022d8 <HAL_DMA_Start_IT>
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8002bfe:	6822      	ldr	r2, [r4, #0]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 8002c00:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8002c02:	4542      	cmp	r2, r8
 8002c04:	bf0c      	ite	eq
 8002c06:	463e      	moveq	r6, r7
 8002c08:	f04f 2640 	movne.w	r6, #1073758208	; 0x40004000
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 8002c0c:	4629      	mov	r1, r5
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8002c0e:	6873      	ldr	r3, [r6, #4]
 8002c10:	f043 0301 	orr.w	r3, r3, #1
 8002c14:	6073      	str	r3, [r6, #4]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 8002c16:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002c18:	320c      	adds	r2, #12
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	f7ff fb5c 	bl	80022d8 <HAL_DMA_Start_IT>
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002c20:	6823      	ldr	r3, [r4, #0]
 8002c22:	685a      	ldr	r2, [r3, #4]
 8002c24:	f042 0202 	orr.w	r2, r2, #2
 8002c28:	605a      	str	r2, [r3, #4]
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8002c2a:	69d8      	ldr	r0, [r3, #28]
 8002c2c:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 8002c30:	d1d4      	bne.n	8002bdc <HAL_I2SEx_TransmitReceive_DMA+0x104>
      __HAL_I2SEXT_ENABLE(hi2s);
 8002c32:	4543      	cmp	r3, r8
 8002c34:	bf0c      	ite	eq
 8002c36:	463a      	moveq	r2, r7
 8002c38:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 8002c3c:	69d1      	ldr	r1, [r2, #28]
 8002c3e:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8002c42:	61d1      	str	r1, [r2, #28]
      __HAL_I2S_ENABLE(hi2s);
 8002c44:	69da      	ldr	r2, [r3, #28]
 8002c46:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c4a:	61da      	str	r2, [r3, #28]
 8002c4c:	e7c0      	b.n	8002bd0 <HAL_I2SEx_TransmitReceive_DMA+0xf8>
    hi2s->TxXferSize  = (Size << 1U);
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8002c54:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2s->RxXferSize  = (Size << 1U);
 8002c56:	8623      	strh	r3, [r4, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8002c58:	8663      	strh	r3, [r4, #50]	; 0x32
 8002c5a:	e765      	b.n	8002b28 <HAL_I2SEx_TransmitReceive_DMA+0x50>
  __HAL_LOCK(hi2s);
 8002c5c:	2002      	movs	r0, #2
 8002c5e:	e7ba      	b.n	8002bd6 <HAL_I2SEx_TransmitReceive_DMA+0xfe>
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002c60:	9301      	str	r3, [sp, #4]
 8002c62:	68d3      	ldr	r3, [r2, #12]
 8002c64:	9301      	str	r3, [sp, #4]
 8002c66:	6893      	ldr	r3, [r2, #8]
 8002c68:	9301      	str	r3, [sp, #4]
 8002c6a:	9b01      	ldr	r3, [sp, #4]
 8002c6c:	e779      	b.n	8002b62 <HAL_I2SEx_TransmitReceive_DMA+0x8a>
 8002c6e:	bf00      	nop
 8002c70:	08002c85 	.word	0x08002c85
 8002c74:	08002c91 	.word	0x08002c91
 8002c78:	08002a91 	.word	0x08002a91
 8002c7c:	40003400 	.word	0x40003400
 8002c80:	40003800 	.word	0x40003800

08002c84 <I2SEx_TxRxDMAHalfCplt>:
{
 8002c84:	b508      	push	{r3, lr}
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 8002c86:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8002c88:	f006 f81e 	bl	8008cc8 <HAL_I2SEx_TxRxHalfCpltCallback>
}
 8002c8c:	bd08      	pop	{r3, pc}
 8002c8e:	bf00      	nop

08002c90 <I2SEx_TxRxDMACplt>:
  if (hdma->Init.Mode == DMA_NORMAL)
 8002c90:	69c3      	ldr	r3, [r0, #28]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c92:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8002c94:	b510      	push	{r4, lr}
  if (hdma->Init.Mode == DMA_NORMAL)
 8002c96:	b9f3      	cbnz	r3, 8002cd6 <I2SEx_TxRxDMACplt+0x46>
    if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8002c98:	6803      	ldr	r3, [r0, #0]
 8002c9a:	69da      	ldr	r2, [r3, #28]
 8002c9c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002ca0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8002ca4:	d003      	beq.n	8002cae <I2SEx_TxRxDMACplt+0x1e>
        ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 8002ca6:	69da      	ldr	r2, [r3, #28]
    if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8002ca8:	f412 7f40 	tst.w	r2, #768	; 0x300
 8002cac:	d116      	bne.n	8002cdc <I2SEx_TxRxDMACplt+0x4c>
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8002cae:	4913      	ldr	r1, [pc, #76]	; (8002cfc <I2SEx_TxRxDMACplt+0x6c>)
 8002cb0:	4a13      	ldr	r2, [pc, #76]	; (8002d00 <I2SEx_TxRxDMACplt+0x70>)
 8002cb2:	428b      	cmp	r3, r1
 8002cb4:	bf18      	it	ne
 8002cb6:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 8002cba:	6851      	ldr	r1, [r2, #4]
 8002cbc:	f021 0101 	bic.w	r1, r1, #1
 8002cc0:	6051      	str	r1, [r2, #4]
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002cc2:	685a      	ldr	r2, [r3, #4]
 8002cc4:	f022 0202 	bic.w	r2, r2, #2
 8002cc8:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8002cca:	2300      	movs	r3, #0
    hi2s->State = HAL_I2S_STATE_READY;
 8002ccc:	2201      	movs	r2, #1
    hi2s->RxXferCount = 0U;
 8002cce:	8643      	strh	r3, [r0, #50]	; 0x32
    hi2s->TxXferCount = 0U;
 8002cd0:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8002cd2:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002cd6:	f005 ffed 	bl	8008cb4 <HAL_I2SEx_TxRxCpltCallback>
}
 8002cda:	bd10      	pop	{r4, pc}
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002cdc:	6859      	ldr	r1, [r3, #4]
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8002cde:	4c07      	ldr	r4, [pc, #28]	; (8002cfc <I2SEx_TxRxDMACplt+0x6c>)
 8002ce0:	4a07      	ldr	r2, [pc, #28]	; (8002d00 <I2SEx_TxRxDMACplt+0x70>)
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002ce2:	f021 0101 	bic.w	r1, r1, #1
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8002ce6:	42a3      	cmp	r3, r4
 8002ce8:	bf18      	it	ne
 8002cea:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002cee:	6059      	str	r1, [r3, #4]
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8002cf0:	6853      	ldr	r3, [r2, #4]
 8002cf2:	f023 0302 	bic.w	r3, r3, #2
 8002cf6:	6053      	str	r3, [r2, #4]
 8002cf8:	e7e7      	b.n	8002cca <I2SEx_TxRxDMACplt+0x3a>
 8002cfa:	bf00      	nop
 8002cfc:	40003800 	.word	0x40003800
 8002d00:	40003400 	.word	0x40003400

08002d04 <HAL_I2SEx_FullDuplex_IRQHandler>:
{
 8002d04:	b530      	push	{r4, r5, lr}
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002d06:	4a92      	ldr	r2, [pc, #584]	; (8002f50 <HAL_I2SEx_FullDuplex_IRQHandler+0x24c>)
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002d08:	6805      	ldr	r5, [r0, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002d0a:	4b92      	ldr	r3, [pc, #584]	; (8002f54 <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002d0c:	68a9      	ldr	r1, [r5, #8]
{
 8002d0e:	b087      	sub	sp, #28
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002d10:	4295      	cmp	r5, r2
 8002d12:	bf18      	it	ne
 8002d14:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002d18:	9100      	str	r1, [sp, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002d1a:	6899      	ldr	r1, [r3, #8]
 8002d1c:	9101      	str	r1, [sp, #4]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002d1e:	6869      	ldr	r1, [r5, #4]
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002d20:	6842      	ldr	r2, [r0, #4]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002d22:	9102      	str	r1, [sp, #8]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002d24:	6859      	ldr	r1, [r3, #4]
 8002d26:	9103      	str	r1, [sp, #12]
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002d28:	f432 7200 	bics.w	r2, r2, #512	; 0x200
{
 8002d2c:	4604      	mov	r4, r0
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002d2e:	d075      	beq.n	8002e1c <HAL_I2SEx_FullDuplex_IRQHandler+0x118>
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002d30:	9a01      	ldr	r2, [sp, #4]
 8002d32:	0791      	lsls	r1, r2, #30
 8002d34:	d51a      	bpl.n	8002d6c <HAL_I2SEx_FullDuplex_IRQHandler+0x68>
 8002d36:	9a03      	ldr	r2, [sp, #12]
 8002d38:	0612      	lsls	r2, r2, #24
 8002d3a:	d517      	bpl.n	8002d6c <HAL_I2SEx_FullDuplex_IRQHandler+0x68>
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002d3c:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8002d3e:	1c91      	adds	r1, r2, #2
 8002d40:	8812      	ldrh	r2, [r2, #0]
 8002d42:	6241      	str	r1, [r0, #36]	; 0x24
 8002d44:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002d46:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8002d48:	3a01      	subs	r2, #1
 8002d4a:	b292      	uxth	r2, r2
 8002d4c:	8542      	strh	r2, [r0, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002d4e:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8002d50:	b292      	uxth	r2, r2
 8002d52:	b95a      	cbnz	r2, 8002d6c <HAL_I2SEx_FullDuplex_IRQHandler+0x68>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d54:	685a      	ldr	r2, [r3, #4]
 8002d56:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002d5a:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002d5c:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	b923      	cbnz	r3, 8002d6c <HAL_I2SEx_FullDuplex_IRQHandler+0x68>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002d62:	2301      	movs	r3, #1
 8002d64:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002d68:	f005 ffa4 	bl	8008cb4 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002d6c:	9b00      	ldr	r3, [sp, #0]
 8002d6e:	07db      	lsls	r3, r3, #31
 8002d70:	d51c      	bpl.n	8002dac <HAL_I2SEx_FullDuplex_IRQHandler+0xa8>
 8002d72:	9b02      	ldr	r3, [sp, #8]
 8002d74:	065d      	lsls	r5, r3, #25
 8002d76:	d519      	bpl.n	8002dac <HAL_I2SEx_FullDuplex_IRQHandler+0xa8>
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002d78:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002d7a:	6822      	ldr	r2, [r4, #0]
 8002d7c:	1c98      	adds	r0, r3, #2
 8002d7e:	68d1      	ldr	r1, [r2, #12]
 8002d80:	62e0      	str	r0, [r4, #44]	; 0x2c
 8002d82:	8019      	strh	r1, [r3, #0]
  hi2s->RxXferCount--;
 8002d84:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8002d86:	3b01      	subs	r3, #1
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	8663      	strh	r3, [r4, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002d8c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	b963      	cbnz	r3, 8002dac <HAL_I2SEx_FullDuplex_IRQHandler+0xa8>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d92:	6853      	ldr	r3, [r2, #4]
 8002d94:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8002d98:	6053      	str	r3, [r2, #4]

    if (hi2s->TxXferCount == 0U)
 8002d9a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	b92b      	cbnz	r3, 8002dac <HAL_I2SEx_FullDuplex_IRQHandler+0xa8>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002da0:	2301      	movs	r3, #1
 8002da2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002da6:	4620      	mov	r0, r4
 8002da8:	f005 ff84 	bl	8008cb4 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002dac:	9b00      	ldr	r3, [sp, #0]
 8002dae:	0658      	lsls	r0, r3, #25
 8002db0:	d51b      	bpl.n	8002dea <HAL_I2SEx_FullDuplex_IRQHandler+0xe6>
 8002db2:	9b02      	ldr	r3, [sp, #8]
 8002db4:	0699      	lsls	r1, r3, #26
 8002db6:	d518      	bpl.n	8002dea <HAL_I2SEx_FullDuplex_IRQHandler+0xe6>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002db8:	6822      	ldr	r2, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002dba:	4865      	ldr	r0, [pc, #404]	; (8002f50 <HAL_I2SEx_FullDuplex_IRQHandler+0x24c>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002dbc:	6851      	ldr	r1, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002dbe:	4b65      	ldr	r3, [pc, #404]	; (8002f54 <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002dc0:	f021 0160 	bic.w	r1, r1, #96	; 0x60
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002dc4:	4282      	cmp	r2, r0
 8002dc6:	bf18      	it	ne
 8002dc8:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002dcc:	6051      	str	r1, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002dce:	685a      	ldr	r2, [r3, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8002dd0:	2101      	movs	r1, #1
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002dd2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002dd6:	605a      	str	r2, [r3, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8002dd8:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002ddc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002dde:	f043 0302 	orr.w	r3, r3, #2
 8002de2:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8002de4:	4620      	mov	r0, r4
 8002de6:	f7ff fdcd 	bl	8002984 <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002dea:	9b01      	ldr	r3, [sp, #4]
 8002dec:	071a      	lsls	r2, r3, #28
 8002dee:	d56e      	bpl.n	8002ece <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
 8002df0:	9b03      	ldr	r3, [sp, #12]
 8002df2:	069b      	lsls	r3, r3, #26
 8002df4:	d56b      	bpl.n	8002ece <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002df6:	6822      	ldr	r2, [r4, #0]
 8002df8:	4955      	ldr	r1, [pc, #340]	; (8002f50 <HAL_I2SEx_FullDuplex_IRQHandler+0x24c>)
 8002dfa:	4b56      	ldr	r3, [pc, #344]	; (8002f54 <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
 8002dfc:	428a      	cmp	r2, r1
 8002dfe:	bf18      	it	ne
 8002e00:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
      hi2s->State = HAL_I2S_STATE_READY;
 8002e04:	2001      	movs	r0, #1
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e06:	6859      	ldr	r1, [r3, #4]
 8002e08:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
 8002e0c:	6059      	str	r1, [r3, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002e0e:	6853      	ldr	r3, [r2, #4]
 8002e10:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8002e14:	6053      	str	r3, [r2, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8002e16:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
 8002e1a:	e04e      	b.n	8002eba <HAL_I2SEx_FullDuplex_IRQHandler+0x1b6>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002e1c:	9b00      	ldr	r3, [sp, #0]
 8002e1e:	079a      	lsls	r2, r3, #30
 8002e20:	d502      	bpl.n	8002e28 <HAL_I2SEx_FullDuplex_IRQHandler+0x124>
 8002e22:	9b02      	ldr	r3, [sp, #8]
 8002e24:	061b      	lsls	r3, r3, #24
 8002e26:	d454      	bmi.n	8002ed2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1ce>
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002e28:	9b01      	ldr	r3, [sp, #4]
 8002e2a:	07d8      	lsls	r0, r3, #31
 8002e2c:	d502      	bpl.n	8002e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x130>
 8002e2e:	9b03      	ldr	r3, [sp, #12]
 8002e30:	0659      	lsls	r1, r3, #25
 8002e32:	d469      	bmi.n	8002f08 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002e34:	9b01      	ldr	r3, [sp, #4]
 8002e36:	065a      	lsls	r2, r3, #25
 8002e38:	d522      	bpl.n	8002e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x17c>
 8002e3a:	9b03      	ldr	r3, [sp, #12]
 8002e3c:	069b      	lsls	r3, r3, #26
 8002e3e:	d51f      	bpl.n	8002e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x17c>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002e40:	6823      	ldr	r3, [r4, #0]
 8002e42:	4943      	ldr	r1, [pc, #268]	; (8002f50 <HAL_I2SEx_FullDuplex_IRQHandler+0x24c>)
 8002e44:	4a43      	ldr	r2, [pc, #268]	; (8002f54 <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
 8002e46:	428b      	cmp	r3, r1
 8002e48:	bf18      	it	ne
 8002e4a:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002e4e:	2000      	movs	r0, #0
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002e50:	6851      	ldr	r1, [r2, #4]
 8002e52:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8002e56:	6051      	str	r1, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e58:	685a      	ldr	r2, [r3, #4]
 8002e5a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e5e:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002e60:	9004      	str	r0, [sp, #16]
 8002e62:	68da      	ldr	r2, [r3, #12]
 8002e64:	9204      	str	r2, [sp, #16]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	9304      	str	r3, [sp, #16]
      hi2s->State = HAL_I2S_STATE_READY;
 8002e6a:	2301      	movs	r3, #1
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002e6c:	9a04      	ldr	r2, [sp, #16]
      hi2s->State = HAL_I2S_STATE_READY;
 8002e6e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002e72:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002e74:	f043 0302 	orr.w	r3, r3, #2
 8002e78:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8002e7a:	4620      	mov	r0, r4
 8002e7c:	f7ff fd82 	bl	8002984 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002e80:	9b00      	ldr	r3, [sp, #0]
 8002e82:	071d      	lsls	r5, r3, #28
 8002e84:	d523      	bpl.n	8002ece <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
 8002e86:	9b02      	ldr	r3, [sp, #8]
 8002e88:	0698      	lsls	r0, r3, #26
 8002e8a:	d520      	bpl.n	8002ece <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e8c:	6823      	ldr	r3, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002e8e:	4830      	ldr	r0, [pc, #192]	; (8002f50 <HAL_I2SEx_FullDuplex_IRQHandler+0x24c>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e90:	6859      	ldr	r1, [r3, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002e92:	4a30      	ldr	r2, [pc, #192]	; (8002f54 <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e94:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002e98:	4283      	cmp	r3, r0
 8002e9a:	bf18      	it	ne
 8002e9c:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ea0:	6059      	str	r1, [r3, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ea2:	6851      	ldr	r1, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002ea4:	2000      	movs	r0, #0
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ea6:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8002eaa:	6051      	str	r1, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002eac:	9005      	str	r0, [sp, #20]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	9305      	str	r3, [sp, #20]
      hi2s->State = HAL_I2S_STATE_READY;
 8002eb2:	2301      	movs	r3, #1
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002eb4:	9a05      	ldr	r2, [sp, #20]
      hi2s->State = HAL_I2S_STATE_READY;
 8002eb6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002eba:	6c63      	ldr	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8002ebc:	4620      	mov	r0, r4
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002ebe:	f043 0304 	orr.w	r3, r3, #4
 8002ec2:	6463      	str	r3, [r4, #68]	; 0x44
}
 8002ec4:	b007      	add	sp, #28
 8002ec6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      HAL_I2S_ErrorCallback(hi2s);
 8002eca:	f7ff bd5b 	b.w	8002984 <HAL_I2S_ErrorCallback>
}
 8002ece:	b007      	add	sp, #28
 8002ed0:	bd30      	pop	{r4, r5, pc}
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002ed2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002ed4:	1c9a      	adds	r2, r3, #2
 8002ed6:	881b      	ldrh	r3, [r3, #0]
 8002ed8:	6242      	str	r2, [r0, #36]	; 0x24
 8002eda:	60eb      	str	r3, [r5, #12]
  hi2s->TxXferCount--;
 8002edc:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	8543      	strh	r3, [r0, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 8002ee4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d19d      	bne.n	8002e28 <HAL_I2SEx_FullDuplex_IRQHandler+0x124>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002eec:	686b      	ldr	r3, [r5, #4]
 8002eee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ef2:	606b      	str	r3, [r5, #4]
    if (hi2s->RxXferCount == 0U)
 8002ef4:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d195      	bne.n	8002e28 <HAL_I2SEx_FullDuplex_IRQHandler+0x124>
      hi2s->State = HAL_I2S_STATE_READY;
 8002efc:	2301      	movs	r3, #1
 8002efe:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002f02:	f005 fed7 	bl	8008cb4 <HAL_I2SEx_TxRxCpltCallback>
 8002f06:	e78f      	b.n	8002e28 <HAL_I2SEx_FullDuplex_IRQHandler+0x124>
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002f08:	6820      	ldr	r0, [r4, #0]
 8002f0a:	4911      	ldr	r1, [pc, #68]	; (8002f50 <HAL_I2SEx_FullDuplex_IRQHandler+0x24c>)
 8002f0c:	4a11      	ldr	r2, [pc, #68]	; (8002f54 <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
 8002f0e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002f10:	4288      	cmp	r0, r1
 8002f12:	bf18      	it	ne
 8002f14:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 8002f18:	1c98      	adds	r0, r3, #2
 8002f1a:	68d1      	ldr	r1, [r2, #12]
 8002f1c:	62e0      	str	r0, [r4, #44]	; 0x2c
 8002f1e:	8019      	strh	r1, [r3, #0]
  hi2s->RxXferCount--;
 8002f20:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8002f22:	3b01      	subs	r3, #1
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	8663      	strh	r3, [r4, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002f28:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d181      	bne.n	8002e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x130>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002f30:	6853      	ldr	r3, [r2, #4]
 8002f32:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8002f36:	6053      	str	r3, [r2, #4]

    if (hi2s->TxXferCount == 0U)
 8002f38:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	f47f af79 	bne.w	8002e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x130>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002f42:	2301      	movs	r3, #1
 8002f44:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002f48:	4620      	mov	r0, r4
 8002f4a:	f005 feb3 	bl	8008cb4 <HAL_I2SEx_TxRxCpltCallback>
 8002f4e:	e771      	b.n	8002e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x130>
 8002f50:	40003800 	.word	0x40003800
 8002f54:	40003400 	.word	0x40003400

08002f58 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f5a:	b08b      	sub	sp, #44	; 0x2c
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002f5c:	2800      	cmp	r0, #0
 8002f5e:	f000 8083 	beq.w	8003068 <HAL_PCD_Init+0x110>
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002f62:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
  USBx = hpcd->Instance;
 8002f66:	6804      	ldr	r4, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002f68:	4605      	mov	r5, r0
 8002f6a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d074      	beq.n	800305c <HAL_PCD_Init+0x104>
 8002f72:	4620      	mov	r0, r4
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002f74:	2303      	movs	r3, #3
 8002f76:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002f7a:	6be3      	ldr	r3, [r4, #60]	; 0x3c

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f7c:	462e      	mov	r6, r5
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002f7e:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    hpcd->Init.dma_enable = 0U;
 8002f82:	bf08      	it	eq
 8002f84:	612b      	streq	r3, [r5, #16]
  __HAL_PCD_DISABLE(hpcd);
 8002f86:	f002 f905 	bl	8005194 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f8a:	f856 cb10 	ldr.w	ip, [r6], #16
 8002f8e:	4637      	mov	r7, r6
 8002f90:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8002f92:	466c      	mov	r4, sp
 8002f94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f96:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8002f98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f9a:	e897 0003 	ldmia.w	r7, {r0, r1}
 8002f9e:	e884 0003 	stmia.w	r4, {r0, r1}
 8002fa2:	1d2f      	adds	r7, r5, #4
 8002fa4:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8002fa8:	4660      	mov	r0, ip
 8002faa:	f002 f809 	bl	8004fc0 <USB_CoreInit>
 8002fae:	4604      	mov	r4, r0
 8002fb0:	b130      	cbz	r0, 8002fc0 <HAL_PCD_Init+0x68>

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
    return HAL_ERROR;
 8002fb2:	2401      	movs	r4, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002fb4:	2302      	movs	r3, #2
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8002fb6:	4620      	mov	r0, r4
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002fb8:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
}
 8002fbc:	b00b      	add	sp, #44	; 0x2c
 8002fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002fc0:	4601      	mov	r1, r0
 8002fc2:	6828      	ldr	r0, [r5, #0]
 8002fc4:	f002 f8ee 	bl	80051a4 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fc8:	6868      	ldr	r0, [r5, #4]
 8002fca:	b358      	cbz	r0, 8003024 <HAL_PCD_Init+0xcc>
 8002fcc:	4622      	mov	r2, r4
    hpcd->IN_ep[i].is_in = 1U;
 8002fce:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002fd2:	4621      	mov	r1, r4
    hpcd->IN_ep[i].is_in = 1U;
 8002fd4:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 8002fd8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fdc:	f102 0c01 	add.w	ip, r2, #1
    hpcd->IN_ep[i].num = i;
 8002fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002fe4:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fe8:	fa5f f28c 	uxtb.w	r2, ip
 8002fec:	4282      	cmp	r2, r0
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002fee:	e9c3 1111 	strd	r1, r1, [r3, #68]	; 0x44
    hpcd->IN_ep[i].is_in = 1U;
 8002ff2:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ff6:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ffa:	6519      	str	r1, [r3, #80]	; 0x50
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ffc:	d3ea      	bcc.n	8002fd4 <HAL_PCD_Init+0x7c>
    hpcd->OUT_ep[i].is_in = 0U;
 8002ffe:	2200      	movs	r2, #0
 8003000:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 8003004:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003008:	1c61      	adds	r1, r4, #1
    hpcd->OUT_ep[i].num = i;
 800300a:	f883 41fc 	strb.w	r4, [r3, #508]	; 0x1fc
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800300e:	b2cc      	uxtb	r4, r1
 8003010:	4284      	cmp	r4, r0
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003012:	e9c3 2281 	strd	r2, r2, [r3, #516]	; 0x204
    hpcd->OUT_ep[i].is_in = 0U;
 8003016:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800301a:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
    hpcd->OUT_ep[i].xfer_len = 0U;
 800301e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003022:	d3ed      	bcc.n	8003000 <HAL_PCD_Init+0xa8>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003024:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003026:	466c      	mov	r4, sp
 8003028:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800302a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800302c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800302e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8003032:	e884 0003 	stmia.w	r4, {r0, r1}
 8003036:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800303a:	6828      	ldr	r0, [r5, #0]
 800303c:	f002 f8ca 	bl	80051d4 <USB_DevInit>
 8003040:	4604      	mov	r4, r0
 8003042:	2800      	cmp	r0, #0
 8003044:	d1b5      	bne.n	8002fb2 <HAL_PCD_Init+0x5a>
  hpcd->State = HAL_PCD_STATE_READY;
 8003046:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8003048:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
  (void)USB_DevDisconnect(hpcd->Instance);
 800304c:	6828      	ldr	r0, [r5, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 800304e:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 8003052:	f002 fcd3 	bl	80059fc <USB_DevDisconnect>
}
 8003056:	4620      	mov	r0, r4
 8003058:	b00b      	add	sp, #44	; 0x2c
 800305a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 800305c:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 8003060:	f003 fcb6 	bl	80069d0 <HAL_PCD_MspInit>
 8003064:	6828      	ldr	r0, [r5, #0]
 8003066:	e785      	b.n	8002f74 <HAL_PCD_Init+0x1c>
    return HAL_ERROR;
 8003068:	2401      	movs	r4, #1
}
 800306a:	4620      	mov	r0, r4
 800306c:	b00b      	add	sp, #44	; 0x2c
 800306e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003070 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003070:	b510      	push	{r4, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  __HAL_LOCK(hpcd);
 8003072:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8003076:	2b01      	cmp	r3, #1
{
 8003078:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800307a:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 800307c:	d016      	beq.n	80030ac <HAL_PCD_Start+0x3c>

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800307e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  __HAL_LOCK(hpcd);
 8003080:	2201      	movs	r2, #1
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003082:	4293      	cmp	r3, r2
  __HAL_LOCK(hpcd);
 8003084:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003088:	d008      	beq.n	800309c <HAL_PCD_Start+0x2c>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }

  __HAL_PCD_ENABLE(hpcd);
 800308a:	f002 f87b 	bl	8005184 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800308e:	6820      	ldr	r0, [r4, #0]
 8003090:	f002 fca6 	bl	80059e0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003094:	2000      	movs	r0, #0
 8003096:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc

  return HAL_OK;
}
 800309a:	bd10      	pop	{r4, pc}
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800309c:	69a3      	ldr	r3, [r4, #24]
 800309e:	4293      	cmp	r3, r2
 80030a0:	d0f3      	beq.n	800308a <HAL_PCD_Start+0x1a>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80030a2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80030a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030a8:	6383      	str	r3, [r0, #56]	; 0x38
 80030aa:	e7ee      	b.n	800308a <HAL_PCD_Start+0x1a>
  __HAL_LOCK(hpcd);
 80030ac:	2002      	movs	r0, #2
}
 80030ae:	bd10      	pop	{r4, pc}

080030b0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80030b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030b4:	6806      	ldr	r6, [r0, #0]
{
 80030b6:	b087      	sub	sp, #28
 80030b8:	4604      	mov	r4, r0
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80030ba:	4630      	mov	r0, r6
 80030bc:	f002 fcde 	bl	8005a7c <USB_GetMode>
 80030c0:	b110      	cbz	r0, 80030c8 <HAL_PCD_IRQHandler+0x18>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
    }
  }
}
 80030c2:	b007      	add	sp, #28
 80030c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80030c8:	4683      	mov	fp, r0
 80030ca:	6820      	ldr	r0, [r4, #0]
 80030cc:	f002 fca4 	bl	8005a18 <USB_ReadInterrupts>
 80030d0:	2800      	cmp	r0, #0
 80030d2:	d0f6      	beq.n	80030c2 <HAL_PCD_IRQHandler+0x12>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80030d4:	6820      	ldr	r0, [r4, #0]
 80030d6:	f002 fc9f 	bl	8005a18 <USB_ReadInterrupts>
 80030da:	f010 0f02 	tst.w	r0, #2
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80030de:	6820      	ldr	r0, [r4, #0]
 80030e0:	bf1e      	ittt	ne
 80030e2:	6943      	ldrne	r3, [r0, #20]
 80030e4:	f003 0302 	andne.w	r3, r3, #2
 80030e8:	6143      	strne	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80030ea:	f002 fc95 	bl	8005a18 <USB_ReadInterrupts>
 80030ee:	f010 0f10 	tst.w	r0, #16
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80030f2:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80030f4:	d012      	beq.n	800311c <HAL_PCD_IRQHandler+0x6c>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80030f6:	6983      	ldr	r3, [r0, #24]
 80030f8:	f023 0310 	bic.w	r3, r3, #16
 80030fc:	6183      	str	r3, [r0, #24]
      temp = USBx->GRXSTSP;
 80030fe:	6a35      	ldr	r5, [r6, #32]
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003100:	f3c5 4343 	ubfx	r3, r5, #17, #4
 8003104:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003106:	f005 070f 	and.w	r7, r5, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800310a:	f000 824f 	beq.w	80035ac <HAL_PCD_IRQHandler+0x4fc>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800310e:	2b06      	cmp	r3, #6
 8003110:	f000 81a8 	beq.w	8003464 <HAL_PCD_IRQHandler+0x3b4>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003114:	6983      	ldr	r3, [r0, #24]
 8003116:	f043 0310 	orr.w	r3, r3, #16
 800311a:	6183      	str	r3, [r0, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800311c:	f002 fc7c 	bl	8005a18 <USB_ReadInterrupts>
 8003120:	f410 2f00 	tst.w	r0, #524288	; 0x80000
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003124:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003126:	f040 80c0 	bne.w	80032aa <HAL_PCD_IRQHandler+0x1fa>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800312a:	f002 fc75 	bl	8005a18 <USB_ReadInterrupts>
 800312e:	f410 2f80 	tst.w	r0, #262144	; 0x40000
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003132:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003134:	d15a      	bne.n	80031ec <HAL_PCD_IRQHandler+0x13c>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003136:	f002 fc6f 	bl	8005a18 <USB_ReadInterrupts>
 800313a:	2800      	cmp	r0, #0
 800313c:	db42      	blt.n	80031c4 <HAL_PCD_IRQHandler+0x114>
 800313e:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003140:	f002 fc6a 	bl	8005a18 <USB_ReadInterrupts>
 8003144:	0501      	lsls	r1, r0, #20
 8003146:	d432      	bmi.n	80031ae <HAL_PCD_IRQHandler+0xfe>
 8003148:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800314a:	f002 fc65 	bl	8005a18 <USB_ReadInterrupts>
 800314e:	04c3      	lsls	r3, r0, #19
 8003150:	f100 8125 	bmi.w	800339e <HAL_PCD_IRQHandler+0x2ee>
 8003154:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003156:	f002 fc5f 	bl	8005a18 <USB_ReadInterrupts>
 800315a:	f410 5f00 	tst.w	r0, #8192	; 0x2000
      (void)USB_ActivateSetup(hpcd->Instance);
 800315e:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003160:	f040 8106 	bne.w	8003370 <HAL_PCD_IRQHandler+0x2c0>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003164:	f002 fc58 	bl	8005a18 <USB_ReadInterrupts>
 8003168:	0707      	lsls	r7, r0, #28
 800316a:	f100 80f8 	bmi.w	800335e <HAL_PCD_IRQHandler+0x2ae>
 800316e:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003170:	f002 fc52 	bl	8005a18 <USB_ReadInterrupts>
 8003174:	02c6      	lsls	r6, r0, #11
 8003176:	f100 80e8 	bmi.w	800334a <HAL_PCD_IRQHandler+0x29a>
 800317a:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800317c:	f002 fc4c 	bl	8005a18 <USB_ReadInterrupts>
 8003180:	0285      	lsls	r5, r0, #10
 8003182:	f100 80d8 	bmi.w	8003336 <HAL_PCD_IRQHandler+0x286>
 8003186:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003188:	f002 fc46 	bl	8005a18 <USB_ReadInterrupts>
 800318c:	0040      	lsls	r0, r0, #1
 800318e:	f100 80c9 	bmi.w	8003324 <HAL_PCD_IRQHandler+0x274>
 8003192:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003194:	f002 fc40 	bl	8005a18 <USB_ReadInterrupts>
 8003198:	0741      	lsls	r1, r0, #29
 800319a:	d592      	bpl.n	80030c2 <HAL_PCD_IRQHandler+0x12>
      temp = hpcd->Instance->GOTGINT;
 800319c:	6823      	ldr	r3, [r4, #0]
 800319e:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80031a0:	076a      	lsls	r2, r5, #29
 80031a2:	f100 8225 	bmi.w	80035f0 <HAL_PCD_IRQHandler+0x540>
      hpcd->Instance->GOTGINT |= temp;
 80031a6:	685a      	ldr	r2, [r3, #4]
 80031a8:	432a      	orrs	r2, r5
 80031aa:	605a      	str	r2, [r3, #4]
 80031ac:	e789      	b.n	80030c2 <HAL_PCD_IRQHandler+0x12>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80031ae:	f8d6 3808 	ldr.w	r3, [r6, #2056]	; 0x808
 80031b2:	07da      	lsls	r2, r3, #31
 80031b4:	f100 8218 	bmi.w	80035e8 <HAL_PCD_IRQHandler+0x538>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80031b8:	6820      	ldr	r0, [r4, #0]
 80031ba:	6943      	ldr	r3, [r0, #20]
 80031bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031c0:	6143      	str	r3, [r0, #20]
 80031c2:	e7c2      	b.n	800314a <HAL_PCD_IRQHandler+0x9a>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80031c4:	f8d6 3804 	ldr.w	r3, [r6, #2052]	; 0x804
 80031c8:	f023 0301 	bic.w	r3, r3, #1
 80031cc:	f8c6 3804 	str.w	r3, [r6, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 80031d0:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	f000 813e 	beq.w	8003456 <HAL_PCD_IRQHandler+0x3a6>
        HAL_PCD_ResumeCallback(hpcd);
 80031da:	4620      	mov	r0, r4
 80031dc:	f003 fc88 	bl	8006af0 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80031e0:	6820      	ldr	r0, [r4, #0]
 80031e2:	6943      	ldr	r3, [r0, #20]
 80031e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80031e8:	6143      	str	r3, [r0, #20]
 80031ea:	e7a9      	b.n	8003140 <HAL_PCD_IRQHandler+0x90>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80031ec:	f002 fc20 	bl	8005a30 <USB_ReadDevAllInEpInterrupt>
      while (ep_intr != 0U)
 80031f0:	4681      	mov	r9, r0
 80031f2:	6820      	ldr	r0, [r4, #0]
 80031f4:	f1b9 0f00 	cmp.w	r9, #0
 80031f8:	d09d      	beq.n	8003136 <HAL_PCD_IRQHandler+0x86>
 80031fa:	f506 6310 	add.w	r3, r6, #2304	; 0x900
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80031fe:	e9cd 3602 	strd	r3, r6, [sp, #8]
 8003202:	4625      	mov	r5, r4
      epnum = 0U;
 8003204:	f04f 0a00 	mov.w	sl, #0
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003208:	f8cd b010 	str.w	fp, [sp, #16]
 800320c:	e007      	b.n	800321e <HAL_PCD_IRQHandler+0x16e>
      while (ep_intr != 0U)
 800320e:	ea5f 0959 	movs.w	r9, r9, lsr #1
        epnum++;
 8003212:	f10a 0a01 	add.w	sl, sl, #1
      while (ep_intr != 0U)
 8003216:	f105 051c 	add.w	r5, r5, #28
 800321a:	f000 8138 	beq.w	800348e <HAL_PCD_IRQHandler+0x3de>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800321e:	f019 0f01 	tst.w	r9, #1
 8003222:	d0f4      	beq.n	800320e <HAL_PCD_IRQHandler+0x15e>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003224:	fa5f f78a 	uxtb.w	r7, sl
 8003228:	4639      	mov	r1, r7
 800322a:	f002 fc13 	bl	8005a54 <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800322e:	07c3      	lsls	r3, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003230:	4606      	mov	r6, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003232:	d519      	bpl.n	8003268 <HAL_PCD_IRQHandler+0x1b8>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003234:	9b03      	ldr	r3, [sp, #12]
            if (hpcd->Init.dma_enable == 1U)
 8003236:	6921      	ldr	r1, [r4, #16]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003238:	f8d3 0834 	ldr.w	r0, [r3, #2100]	; 0x834
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800323c:	f04f 0c01 	mov.w	ip, #1
 8003240:	f00a 020f 	and.w	r2, sl, #15
 8003244:	fa0c f202 	lsl.w	r2, ip, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003248:	ea20 0002 	bic.w	r0, r0, r2
 800324c:	9a02      	ldr	r2, [sp, #8]
 800324e:	f8c3 0834 	str.w	r0, [r3, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003252:	eb02 124a 	add.w	r2, r2, sl, lsl #5
            if (hpcd->Init.dma_enable == 1U)
 8003256:	4561      	cmp	r1, ip
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003258:	f8c2 c008 	str.w	ip, [r2, #8]
            if (hpcd->Init.dma_enable == 1U)
 800325c:	f000 81cd 	beq.w	80035fa <HAL_PCD_IRQHandler+0x54a>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003260:	4639      	mov	r1, r7
 8003262:	4620      	mov	r0, r4
 8003264:	f003 fc08 	bl	8006a78 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003268:	0730      	lsls	r0, r6, #28
 800326a:	d504      	bpl.n	8003276 <HAL_PCD_IRQHandler+0x1c6>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800326c:	9b02      	ldr	r3, [sp, #8]
 800326e:	eb03 134a 	add.w	r3, r3, sl, lsl #5
 8003272:	2208      	movs	r2, #8
 8003274:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003276:	06f1      	lsls	r1, r6, #27
 8003278:	d504      	bpl.n	8003284 <HAL_PCD_IRQHandler+0x1d4>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800327a:	9b02      	ldr	r3, [sp, #8]
 800327c:	eb03 134a 	add.w	r3, r3, sl, lsl #5
 8003280:	2210      	movs	r2, #16
 8003282:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003284:	0672      	lsls	r2, r6, #25
 8003286:	d504      	bpl.n	8003292 <HAL_PCD_IRQHandler+0x1e2>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003288:	9b02      	ldr	r3, [sp, #8]
 800328a:	eb03 134a 	add.w	r3, r3, sl, lsl #5
 800328e:	2240      	movs	r2, #64	; 0x40
 8003290:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003292:	07b3      	lsls	r3, r6, #30
 8003294:	d504      	bpl.n	80032a0 <HAL_PCD_IRQHandler+0x1f0>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003296:	9b02      	ldr	r3, [sp, #8]
 8003298:	eb03 134a 	add.w	r3, r3, sl, lsl #5
 800329c:	2202      	movs	r2, #2
 800329e:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80032a0:	0630      	lsls	r0, r6, #24
 80032a2:	f100 8135 	bmi.w	8003510 <HAL_PCD_IRQHandler+0x460>
 80032a6:	6820      	ldr	r0, [r4, #0]
 80032a8:	e7b1      	b.n	800320e <HAL_PCD_IRQHandler+0x15e>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80032aa:	f002 fbb9 	bl	8005a20 <USB_ReadDevAllOutEpInterrupt>
      while (ep_intr != 0U)
 80032ae:	4605      	mov	r5, r0
 80032b0:	6820      	ldr	r0, [r4, #0]
 80032b2:	2d00      	cmp	r5, #0
 80032b4:	f43f af39 	beq.w	800312a <HAL_PCD_IRQHandler+0x7a>
 80032b8:	f506 6330 	add.w	r3, r6, #2816	; 0xb00
 80032bc:	f504 7901 	add.w	r9, r4, #516	; 0x204
      epnum = 0U;
 80032c0:	2700      	movs	r7, #0
 80032c2:	9602      	str	r6, [sp, #8]
 80032c4:	469a      	mov	sl, r3
 80032c6:	e006      	b.n	80032d6 <HAL_PCD_IRQHandler+0x226>
      while (ep_intr != 0U)
 80032c8:	086d      	lsrs	r5, r5, #1
        epnum++;
 80032ca:	f107 0701 	add.w	r7, r7, #1
      while (ep_intr != 0U)
 80032ce:	f109 091c 	add.w	r9, r9, #28
 80032d2:	f000 80da 	beq.w	800348a <HAL_PCD_IRQHandler+0x3da>
        if ((ep_intr & 0x1U) != 0U)
 80032d6:	07e9      	lsls	r1, r5, #31
 80032d8:	d5f6      	bpl.n	80032c8 <HAL_PCD_IRQHandler+0x218>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80032da:	b2fe      	uxtb	r6, r7
 80032dc:	4631      	mov	r1, r6
 80032de:	f002 fbaf 	bl	8005a40 <USB_ReadDevOutEPInterrupt>
 80032e2:	4680      	mov	r8, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80032e4:	f018 0f01 	tst.w	r8, #1
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032e8:	6820      	ldr	r0, [r4, #0]
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80032ea:	f040 80f0 	bne.w	80034ce <HAL_PCD_IRQHandler+0x41e>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80032ee:	f018 0f08 	tst.w	r8, #8
 80032f2:	f040 80cf 	bne.w	8003494 <HAL_PCD_IRQHandler+0x3e4>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80032f6:	f018 0f10 	tst.w	r8, #16
 80032fa:	d003      	beq.n	8003304 <HAL_PCD_IRQHandler+0x254>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80032fc:	eb0a 1347 	add.w	r3, sl, r7, lsl #5
 8003300:	2210      	movs	r2, #16
 8003302:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003304:	f018 0f20 	tst.w	r8, #32
 8003308:	d003      	beq.n	8003312 <HAL_PCD_IRQHandler+0x262>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800330a:	eb0a 1347 	add.w	r3, sl, r7, lsl #5
 800330e:	2220      	movs	r2, #32
 8003310:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003312:	f418 5f00 	tst.w	r8, #8192	; 0x2000
 8003316:	d0d7      	beq.n	80032c8 <HAL_PCD_IRQHandler+0x218>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003318:	eb0a 1347 	add.w	r3, sl, r7, lsl #5
 800331c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003320:	609a      	str	r2, [r3, #8]
 8003322:	e7d1      	b.n	80032c8 <HAL_PCD_IRQHandler+0x218>
      HAL_PCD_ConnectCallback(hpcd);
 8003324:	4620      	mov	r0, r4
 8003326:	f003 fbef 	bl	8006b08 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800332a:	6820      	ldr	r0, [r4, #0]
 800332c:	6943      	ldr	r3, [r0, #20]
 800332e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003332:	6143      	str	r3, [r0, #20]
 8003334:	e72e      	b.n	8003194 <HAL_PCD_IRQHandler+0xe4>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003336:	4620      	mov	r0, r4
 8003338:	2100      	movs	r1, #0
 800333a:	f003 fbdd 	bl	8006af8 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800333e:	6820      	ldr	r0, [r4, #0]
 8003340:	6943      	ldr	r3, [r0, #20]
 8003342:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003346:	6143      	str	r3, [r0, #20]
 8003348:	e71e      	b.n	8003188 <HAL_PCD_IRQHandler+0xd8>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800334a:	4620      	mov	r0, r4
 800334c:	2100      	movs	r1, #0
 800334e:	f003 fbd7 	bl	8006b00 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003352:	6820      	ldr	r0, [r4, #0]
 8003354:	6943      	ldr	r3, [r0, #20]
 8003356:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800335a:	6143      	str	r3, [r0, #20]
 800335c:	e70e      	b.n	800317c <HAL_PCD_IRQHandler+0xcc>
      HAL_PCD_SOFCallback(hpcd);
 800335e:	4620      	mov	r0, r4
 8003360:	f003 fb94 	bl	8006a8c <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003364:	6820      	ldr	r0, [r4, #0]
 8003366:	6943      	ldr	r3, [r0, #20]
 8003368:	f003 0308 	and.w	r3, r3, #8
 800336c:	6143      	str	r3, [r0, #20]
 800336e:	e6ff      	b.n	8003170 <HAL_PCD_IRQHandler+0xc0>
      (void)USB_ActivateSetup(hpcd->Instance);
 8003370:	f002 fb88 	bl	8005a84 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003374:	6820      	ldr	r0, [r4, #0]
 8003376:	f002 f827 	bl	80053c8 <USB_GetDevSpeed>
 800337a:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800337c:	6825      	ldr	r5, [r4, #0]
 800337e:	f000 fddf 	bl	8003f40 <HAL_RCC_GetHCLKFreq>
 8003382:	7b22      	ldrb	r2, [r4, #12]
 8003384:	4601      	mov	r1, r0
 8003386:	4628      	mov	r0, r5
 8003388:	f001 fe84 	bl	8005094 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 800338c:	4620      	mov	r0, r4
 800338e:	f003 fb81 	bl	8006a94 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003392:	6820      	ldr	r0, [r4, #0]
 8003394:	6943      	ldr	r3, [r0, #20]
 8003396:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800339a:	6143      	str	r3, [r0, #20]
 800339c:	e6e2      	b.n	8003164 <HAL_PCD_IRQHandler+0xb4>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800339e:	f8d6 3804 	ldr.w	r3, [r6, #2052]	; 0x804
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80033a2:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80033a4:	f023 0301 	bic.w	r3, r3, #1
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80033a8:	2110      	movs	r1, #16
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80033aa:	f8c6 3804 	str.w	r3, [r6, #2052]	; 0x804
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80033ae:	f001 fff9 	bl	80053a4 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033b2:	6860      	ldr	r0, [r4, #4]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80033b4:	f506 6500 	add.w	r5, r6, #2048	; 0x800
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033b8:	b300      	cbz	r0, 80033fc <HAL_PCD_IRQHandler+0x34c>
 80033ba:	f506 6310 	add.w	r3, r6, #2304	; 0x900
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80033be:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 80033c2:	6099      	str	r1, [r3, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80033ca:	601a      	str	r2, [r3, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80033d2:	601a      	str	r2, [r3, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80033d4:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80033d8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80033dc:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80033e0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80033e4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033e8:	f10b 0b01 	add.w	fp, fp, #1
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80033ec:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033f0:	4583      	cmp	fp, r0
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80033f2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033f6:	f103 0320 	add.w	r3, r3, #32
 80033fa:	d1e2      	bne.n	80033c2 <HAL_PCD_IRQHandler+0x312>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80033fc:	69eb      	ldr	r3, [r5, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80033fe:	6b22      	ldr	r2, [r4, #48]	; 0x30
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003400:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003404:	61eb      	str	r3, [r5, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003406:	b9da      	cbnz	r2, 8003440 <HAL_PCD_IRQHandler+0x390>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003408:	696b      	ldr	r3, [r5, #20]
 800340a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800340e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003412:	616b      	str	r3, [r5, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003414:	692b      	ldr	r3, [r5, #16]
 8003416:	f043 030b 	orr.w	r3, r3, #11
 800341a:	612b      	str	r3, [r5, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800341c:	f8d6 3800 	ldr.w	r3, [r6, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003420:	7c21      	ldrb	r1, [r4, #16]
 8003422:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003424:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003428:	f8c6 3800 	str.w	r3, [r6, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800342c:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8003430:	f002 fb38 	bl	8005aa4 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003434:	6820      	ldr	r0, [r4, #0]
 8003436:	6943      	ldr	r3, [r0, #20]
 8003438:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800343c:	6143      	str	r3, [r0, #20]
 800343e:	e68a      	b.n	8003156 <HAL_PCD_IRQHandler+0xa6>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003440:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 8003444:	f043 030b 	orr.w	r3, r3, #11
 8003448:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800344c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800344e:	f043 030b 	orr.w	r3, r3, #11
 8003452:	646b      	str	r3, [r5, #68]	; 0x44
 8003454:	e7e2      	b.n	800341c <HAL_PCD_IRQHandler+0x36c>
        hpcd->LPM_State = LPM_L0;
 8003456:	2100      	movs	r1, #0
 8003458:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800345c:	4620      	mov	r0, r4
 800345e:	f000 fab3 	bl	80039c8 <HAL_PCDEx_LPM_Callback>
 8003462:	e6bd      	b.n	80031e0 <HAL_PCD_IRQHandler+0x130>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003464:	2208      	movs	r2, #8
 8003466:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 800346a:	4630      	mov	r0, r6
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800346c:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003470:	f002 fa3a 	bl	80058e8 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003474:	eb04 0287 	add.w	r2, r4, r7, lsl #2
 8003478:	f3c5 130a 	ubfx	r3, r5, #4, #11
 800347c:	f8d2 1214 	ldr.w	r1, [r2, #532]	; 0x214
 8003480:	6820      	ldr	r0, [r4, #0]
 8003482:	440b      	add	r3, r1
 8003484:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 8003488:	e644      	b.n	8003114 <HAL_PCD_IRQHandler+0x64>
 800348a:	9e02      	ldr	r6, [sp, #8]
 800348c:	e64d      	b.n	800312a <HAL_PCD_IRQHandler+0x7a>
 800348e:	e9dd 6b03 	ldrd	r6, fp, [sp, #12]
 8003492:	e650      	b.n	8003136 <HAL_PCD_IRQHandler+0x86>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003494:	eb0a 1347 	add.w	r3, sl, r7, lsl #5
 8003498:	2208      	movs	r2, #8
 800349a:	609a      	str	r2, [r3, #8]
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800349c:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800349e:	eb00 1347 	add.w	r3, r0, r7, lsl #5

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034a2:	488c      	ldr	r0, [pc, #560]	; (80036d4 <HAL_PCD_IRQHandler+0x624>)
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80034a4:	f8d3 1b08 	ldr.w	r1, [r3, #2824]	; 0xb08
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034a8:	4282      	cmp	r2, r0
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80034aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034ae:	f240 80b6 	bls.w	800361e <HAL_PCD_IRQHandler+0x56e>
 80034b2:	040a      	lsls	r2, r1, #16
 80034b4:	d502      	bpl.n	80034bc <HAL_PCD_IRQHandler+0x40c>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034b6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80034ba:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80034bc:	4620      	mov	r0, r4
 80034be:	f003 facb 	bl	8006a58 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80034c2:	6921      	ldr	r1, [r4, #16]
 80034c4:	2901      	cmp	r1, #1
 80034c6:	f000 80d6 	beq.w	8003676 <HAL_PCD_IRQHandler+0x5c6>
 80034ca:	6820      	ldr	r0, [r4, #0]
 80034cc:	e713      	b.n	80032f6 <HAL_PCD_IRQHandler+0x246>
  if (hpcd->Init.dma_enable == 1U)
 80034ce:	f8d4 c010 	ldr.w	ip, [r4, #16]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80034d2:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
 80034d6:	eb0a 1147 	add.w	r1, sl, r7, lsl #5
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80034da:	2301      	movs	r3, #1
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80034dc:	eb02 1247 	add.w	r2, r2, r7, lsl #5
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80034e0:	608b      	str	r3, [r1, #8]
  if (hpcd->Init.dma_enable == 1U)
 80034e2:	f1bc 0f01 	cmp.w	ip, #1
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80034e6:	6c03      	ldr	r3, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80034e8:	f8d2 e008 	ldr.w	lr, [r2, #8]
  if (hpcd->Init.dma_enable == 1U)
 80034ec:	f000 809c 	beq.w	8003628 <HAL_PCD_IRQHandler+0x578>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80034f0:	4979      	ldr	r1, [pc, #484]	; (80036d8 <HAL_PCD_IRQHandler+0x628>)
 80034f2:	428b      	cmp	r3, r1
 80034f4:	f000 80af 	beq.w	8003656 <HAL_PCD_IRQHandler+0x5a6>
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80034f8:	b927      	cbnz	r7, 8003504 <HAL_PCD_IRQHandler+0x454>
 80034fa:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 80034fe:	2a00      	cmp	r2, #0
 8003500:	f000 80e2 	beq.w	80036c8 <HAL_PCD_IRQHandler+0x618>
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003504:	4620      	mov	r0, r4
 8003506:	4631      	mov	r1, r6
 8003508:	f003 faac 	bl	8006a64 <HAL_PCD_DataOutStageCallback>
 800350c:	6820      	ldr	r0, [r4, #0]
 800350e:	e6ee      	b.n	80032ee <HAL_PCD_IRQHandler+0x23e>
  if (ep->xfer_count > ep->xfer_len)
 8003510:	e9d5 1314 	ldrd	r1, r3, [r5, #80]	; 0x50
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003514:	f8d4 8000 	ldr.w	r8, [r4]
  if (ep->xfer_count > ep->xfer_len)
 8003518:	428b      	cmp	r3, r1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800351a:	4640      	mov	r0, r8
  if (ep->xfer_count > ep->xfer_len)
 800351c:	f63f ae77 	bhi.w	800320e <HAL_PCD_IRQHandler+0x15e>
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003520:	f508 6b10 	add.w	fp, r8, #2304	; 0x900
  len32b = (len + 3U) / 4U;
 8003524:	6c6a      	ldr	r2, [r5, #68]	; 0x44
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003526:	f8cd 8014 	str.w	r8, [sp, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800352a:	eb0b 1b4a 	add.w	fp, fp, sl, lsl #5
  len = ep->xfer_len - ep->xfer_count;
 800352e:	eba1 0c03 	sub.w	ip, r1, r3
  len32b = (len + 3U) / 4U;
 8003532:	4562      	cmp	r2, ip
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003534:	f8db 6018 	ldr.w	r6, [fp, #24]
  len32b = (len + 3U) / 4U;
 8003538:	bf28      	it	cs
 800353a:	4662      	movcs	r2, ip
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800353c:	b2b6      	uxth	r6, r6
  len32b = (len + 3U) / 4U;
 800353e:	3203      	adds	r2, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003540:	ebb6 0f92 	cmp.w	r6, r2, lsr #2
 8003544:	d21b      	bcs.n	800357e <HAL_PCD_IRQHandler+0x4ce>
 8003546:	e082      	b.n	800364e <HAL_PCD_IRQHandler+0x59e>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003548:	b1f9      	cbz	r1, 800358a <HAL_PCD_IRQHandler+0x4da>
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800354a:	e9d5 3111 	ldrd	r3, r1, [r5, #68]	; 0x44
 800354e:	429e      	cmp	r6, r3
 8003550:	bf28      	it	cs
 8003552:	461e      	movcs	r6, r3
 8003554:	f894 c010 	ldrb.w	ip, [r4, #16]
 8003558:	f8cd c000 	str.w	ip, [sp]
 800355c:	b2b3      	uxth	r3, r6
 800355e:	f002 f9ad 	bl	80058bc <USB_WritePacket>
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003562:	f8db 2018 	ldr.w	r2, [fp, #24]
    ep->xfer_buff  += len;
 8003566:	6ca9      	ldr	r1, [r5, #72]	; 0x48
    ep->xfer_count += len;
 8003568:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    ep->xfer_buff  += len;
 800356a:	4431      	add	r1, r6
    ep->xfer_count += len;
 800356c:	4433      	add	r3, r6
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800356e:	b292      	uxth	r2, r2
    len32b = (len + 3U) / 4U;
 8003570:	3603      	adds	r6, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003572:	ebb2 0f96 	cmp.w	r2, r6, lsr #2
    ep->xfer_buff  += len;
 8003576:	64a9      	str	r1, [r5, #72]	; 0x48
    ep->xfer_count += len;
 8003578:	656b      	str	r3, [r5, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800357a:	d364      	bcc.n	8003646 <HAL_PCD_IRQHandler+0x596>
 800357c:	6d29      	ldr	r1, [r5, #80]	; 0x50
 800357e:	428b      	cmp	r3, r1
    len = ep->xfer_len - ep->xfer_count;
 8003580:	eba1 0603 	sub.w	r6, r1, r3
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003584:	463a      	mov	r2, r7
 8003586:	4640      	mov	r0, r8
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003588:	d3de      	bcc.n	8003548 <HAL_PCD_IRQHandler+0x498>
 800358a:	f8d4 8000 	ldr.w	r8, [r4]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800358e:	9b05      	ldr	r3, [sp, #20]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003590:	2001      	movs	r0, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003592:	f503 6100 	add.w	r1, r3, #2048	; 0x800
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003596:	f00a 020f 	and.w	r2, sl, #15
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800359a:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800359e:	fa00 f202 	lsl.w	r2, r0, r2
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80035a2:	ea23 0302 	bic.w	r3, r3, r2
 80035a6:	4640      	mov	r0, r8
 80035a8:	634b      	str	r3, [r1, #52]	; 0x34
 80035aa:	e630      	b.n	800320e <HAL_PCD_IRQHandler+0x15e>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80035ac:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80035b0:	421d      	tst	r5, r3
 80035b2:	f43f adaf 	beq.w	8003114 <HAL_PCD_IRQHandler+0x64>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80035b6:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
 80035ba:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 80035be:	f3c5 120a 	ubfx	r2, r5, #4, #11
 80035c2:	f8d7 1208 	ldr.w	r1, [r7, #520]	; 0x208
 80035c6:	4630      	mov	r0, r6
 80035c8:	f002 f98e 	bl	80058e8 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80035cc:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80035d0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80035d4:	6820      	ldr	r0, [r4, #0]
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80035d6:	f3c5 150a 	ubfx	r5, r5, #4, #11
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80035da:	442a      	add	r2, r5
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80035dc:	442b      	add	r3, r5
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80035de:	f8c7 2208 	str.w	r2, [r7, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80035e2:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 80035e6:	e595      	b.n	8003114 <HAL_PCD_IRQHandler+0x64>
        HAL_PCD_SuspendCallback(hpcd);
 80035e8:	4620      	mov	r0, r4
 80035ea:	f003 fa69 	bl	8006ac0 <HAL_PCD_SuspendCallback>
 80035ee:	e5e3      	b.n	80031b8 <HAL_PCD_IRQHandler+0x108>
        HAL_PCD_DisconnectCallback(hpcd);
 80035f0:	4620      	mov	r0, r4
 80035f2:	f003 fa8d 	bl	8006b10 <HAL_PCD_DisconnectCallback>
 80035f6:	6823      	ldr	r3, [r4, #0]
 80035f8:	e5d5      	b.n	80031a6 <HAL_PCD_IRQHandler+0xf6>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80035fa:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
 80035fe:	4413      	add	r3, r2
 8003600:	64ab      	str	r3, [r5, #72]	; 0x48
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003602:	f1ba 0f00 	cmp.w	sl, #0
 8003606:	f47f ae2b 	bne.w	8003260 <HAL_PCD_IRQHandler+0x1b0>
 800360a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800360c:	2b00      	cmp	r3, #0
 800360e:	f47f ae27 	bne.w	8003260 <HAL_PCD_IRQHandler+0x1b0>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003612:	6820      	ldr	r0, [r4, #0]
 8003614:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8003618:	f002 fa44 	bl	8005aa4 <USB_EP0_OutStart>
 800361c:	e620      	b.n	8003260 <HAL_PCD_IRQHandler+0x1b0>
  HAL_PCD_SetupStageCallback(hpcd);
 800361e:	4620      	mov	r0, r4
 8003620:	f003 fa1a 	bl	8006a58 <HAL_PCD_SetupStageCallback>
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003624:	6820      	ldr	r0, [r4, #0]
 8003626:	e666      	b.n	80032f6 <HAL_PCD_IRQHandler+0x246>
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003628:	f01e 0f08 	tst.w	lr, #8
 800362c:	d01d      	beq.n	800366a <HAL_PCD_IRQHandler+0x5ba>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800362e:	4929      	ldr	r1, [pc, #164]	; (80036d4 <HAL_PCD_IRQHandler+0x624>)
 8003630:	428b      	cmp	r3, r1
 8003632:	f67f ae5c 	bls.w	80032ee <HAL_PCD_IRQHandler+0x23e>
 8003636:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
 800363a:	f43f ae58 	beq.w	80032ee <HAL_PCD_IRQHandler+0x23e>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800363e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003642:	6093      	str	r3, [r2, #8]
 8003644:	e653      	b.n	80032ee <HAL_PCD_IRQHandler+0x23e>
 8003646:	f8d4 8000 	ldr.w	r8, [r4]
 800364a:	6d29      	ldr	r1, [r5, #80]	; 0x50
 800364c:	4640      	mov	r0, r8
  if (ep->xfer_len <= ep->xfer_count)
 800364e:	428b      	cmp	r3, r1
 8003650:	f4ff addd 	bcc.w	800320e <HAL_PCD_IRQHandler+0x15e>
 8003654:	e79b      	b.n	800358e <HAL_PCD_IRQHandler+0x4de>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003656:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
 800365a:	d1f0      	bne.n	800363e <HAL_PCD_IRQHandler+0x58e>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800365c:	f01e 0f20 	tst.w	lr, #32
 8003660:	f43f af50 	beq.w	8003504 <HAL_PCD_IRQHandler+0x454>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003664:	2120      	movs	r1, #32
 8003666:	6091      	str	r1, [r2, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003668:	e74c      	b.n	8003504 <HAL_PCD_IRQHandler+0x454>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800366a:	f01e 0f20 	tst.w	lr, #32
 800366e:	d008      	beq.n	8003682 <HAL_PCD_IRQHandler+0x5d2>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003670:	2320      	movs	r3, #32
 8003672:	6093      	str	r3, [r2, #8]
 8003674:	e63b      	b.n	80032ee <HAL_PCD_IRQHandler+0x23e>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003676:	6820      	ldr	r0, [r4, #0]
 8003678:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800367c:	f002 fa12 	bl	8005aa4 <USB_EP0_OutStart>
 8003680:	e723      	b.n	80034ca <HAL_PCD_IRQHandler+0x41a>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003682:	f01e 0f28 	tst.w	lr, #40	; 0x28
 8003686:	f47f ae32 	bne.w	80032ee <HAL_PCD_IRQHandler+0x23e>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800368a:	4912      	ldr	r1, [pc, #72]	; (80036d4 <HAL_PCD_IRQHandler+0x624>)
 800368c:	428b      	cmp	r3, r1
 800368e:	d902      	bls.n	8003696 <HAL_PCD_IRQHandler+0x5e6>
 8003690:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
 8003694:	d1d3      	bne.n	800363e <HAL_PCD_IRQHandler+0x58e>
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003696:	e9d9 3100 	ldrd	r3, r1, [r9]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800369a:	6912      	ldr	r2, [r2, #16]
 800369c:	f3c2 0212 	ubfx	r2, r2, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80036a0:	1a9a      	subs	r2, r3, r2
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80036a2:	4419      	add	r1, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80036a4:	f8c9 2010 	str.w	r2, [r9, #16]
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80036a8:	f8c9 1004 	str.w	r1, [r9, #4]
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80036ac:	2f00      	cmp	r7, #0
 80036ae:	f47f af29 	bne.w	8003504 <HAL_PCD_IRQHandler+0x454>
 80036b2:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 80036b6:	2a00      	cmp	r2, #0
 80036b8:	f47f af24 	bne.w	8003504 <HAL_PCD_IRQHandler+0x454>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80036bc:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80036c0:	2101      	movs	r1, #1
 80036c2:	f002 f9ef 	bl	8005aa4 <USB_EP0_OutStart>
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80036c6:	e71d      	b.n	8003504 <HAL_PCD_IRQHandler+0x454>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80036c8:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80036cc:	4639      	mov	r1, r7
 80036ce:	f002 f9e9 	bl	8005aa4 <USB_EP0_OutStart>
 80036d2:	e717      	b.n	8003504 <HAL_PCD_IRQHandler+0x454>
 80036d4:	4f54300a 	.word	0x4f54300a
 80036d8:	4f54310a 	.word	0x4f54310a

080036dc <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 80036dc:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 80036e0:	2a01      	cmp	r2, #1
 80036e2:	d00d      	beq.n	8003700 <HAL_PCD_SetAddress+0x24>
{
 80036e4:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 80036e6:	2201      	movs	r2, #1
 80036e8:	4604      	mov	r4, r0
  hpcd->USB_Address = address;
 80036ea:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
  __HAL_LOCK(hpcd);
 80036ee:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80036f2:	6800      	ldr	r0, [r0, #0]
 80036f4:	f002 f964 	bl	80059c0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80036f8:	2000      	movs	r0, #0
 80036fa:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 80036fe:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8003700:	2002      	movs	r0, #2
}
 8003702:	4770      	bx	lr

08003704 <HAL_PCD_EP_Open>:
{
 8003704:	b570      	push	{r4, r5, r6, lr}
 8003706:	f001 050f 	and.w	r5, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 800370a:	f011 0f80 	tst.w	r1, #128	; 0x80
    ep->is_in = 1U;
 800370e:	ebc5 01c5 	rsb	r1, r5, r5, lsl #3
{
 8003712:	4606      	mov	r6, r0
    ep->is_in = 1U;
 8003714:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003718:	f04f 041c 	mov.w	r4, #28
  if ((ep_addr & 0x80U) == 0x80U)
 800371c:	d11e      	bne.n	800375c <HAL_PCD_EP_Open+0x58>
    ep->is_in = 0U;
 800371e:	2000      	movs	r0, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003720:	fb04 6405 	mla	r4, r4, r5, r6
    ep->is_in = 0U;
 8003724:	f881 01fd 	strb.w	r0, [r1, #509]	; 0x1fd
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003728:	f504 71fe 	add.w	r1, r4, #508	; 0x1fc
  if (ep->is_in != 0U)
 800372c:	7848      	ldrb	r0, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800372e:	700d      	strb	r5, [r1, #0]
  ep->maxpacket = ep_mps;
 8003730:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;
 8003732:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8003734:	b100      	cbz	r0, 8003738 <HAL_PCD_EP_Open+0x34>
    ep->tx_fifo_num = ep->num;
 8003736:	80cd      	strh	r5, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 8003738:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 800373a:	bf04      	itt	eq
 800373c:	2300      	moveq	r3, #0
 800373e:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8003740:	f896 33bc 	ldrb.w	r3, [r6, #956]	; 0x3bc
 8003744:	2b01      	cmp	r3, #1
 8003746:	d011      	beq.n	800376c <HAL_PCD_EP_Open+0x68>
 8003748:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800374a:	6830      	ldr	r0, [r6, #0]
  __HAL_LOCK(hpcd);
 800374c:	f886 33bc 	strb.w	r3, [r6, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003750:	f001 fe46 	bl	80053e0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003754:	2000      	movs	r0, #0
 8003756:	f886 03bc 	strb.w	r0, [r6, #956]	; 0x3bc
}
 800375a:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 1U;
 800375c:	2001      	movs	r0, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800375e:	fb04 6405 	mla	r4, r4, r5, r6
    ep->is_in = 1U;
 8003762:	f881 003d 	strb.w	r0, [r1, #61]	; 0x3d
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003766:	f104 013c 	add.w	r1, r4, #60	; 0x3c
    ep->is_in = 1U;
 800376a:	e7df      	b.n	800372c <HAL_PCD_EP_Open+0x28>
  __HAL_LOCK(hpcd);
 800376c:	2002      	movs	r0, #2
}
 800376e:	bd70      	pop	{r4, r5, r6, pc}

08003770 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 8003770:	f001 030f 	and.w	r3, r1, #15
    ep->is_in = 1U;
 8003774:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
  if ((ep_addr & 0x80U) == 0x80U)
 8003778:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 800377c:	b510      	push	{r4, lr}
    ep->is_in = 1U;
 800377e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
{
 8003782:	4604      	mov	r4, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003784:	f04f 011c 	mov.w	r1, #28
  if ((ep_addr & 0x80U) == 0x80U)
 8003788:	d115      	bne.n	80037b6 <HAL_PCD_EP_Close+0x46>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800378a:	fb01 4103 	mla	r1, r1, r3, r4
 800378e:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 8003792:	2000      	movs	r0, #0
 8003794:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003798:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800379a:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d014      	beq.n	80037cc <HAL_PCD_EP_Close+0x5c>
 80037a2:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80037a4:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80037a6:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80037aa:	f001 fe65 	bl	8005478 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80037ae:	2000      	movs	r0, #0
 80037b0:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 80037b4:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037b6:	fb01 4103 	mla	r1, r1, r3, r4
 80037ba:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 80037bc:	2001      	movs	r0, #1
 80037be:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  ep->num   = ep_addr & EP_ADDR_MSK;
 80037c2:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 80037c4:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d1ea      	bne.n	80037a2 <HAL_PCD_EP_Close+0x32>
 80037cc:	2002      	movs	r0, #2
}
 80037ce:	bd10      	pop	{r4, pc}

080037d0 <HAL_PCD_EP_Receive>:
{
 80037d0:	b538      	push	{r3, r4, r5, lr}
 80037d2:	f001 050f 	and.w	r5, r1, #15
  ep->xfer_buff = pBuf;
 80037d6:	ebc5 04c5 	rsb	r4, r5, r5, lsl #3
 80037da:	eb00 0484 	add.w	r4, r0, r4, lsl #2
  ep->xfer_count = 0U;
 80037de:	2100      	movs	r1, #0
  ep->xfer_buff = pBuf;
 80037e0:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_count = 0U;
 80037e4:	f8c4 1214 	str.w	r1, [r4, #532]	; 0x214
  ep->is_in = 0U;
 80037e8:	f884 11fd 	strb.w	r1, [r4, #509]	; 0x1fd
  ep->xfer_len = len;
 80037ec:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->num = ep_addr & EP_ADDR_MSK;
 80037f0:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc
  if (hpcd->Init.dma_enable == 1U)
 80037f4:	6903      	ldr	r3, [r0, #16]
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037f6:	211c      	movs	r1, #28
 80037f8:	fb01 0105 	mla	r1, r1, r5, r0
  if (hpcd->Init.dma_enable == 1U)
 80037fc:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 80037fe:	bf08      	it	eq
 8003800:	f8c4 220c 	streq.w	r2, [r4, #524]	; 0x20c
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003804:	6800      	ldr	r0, [r0, #0]
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003806:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800380a:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800380c:	b91d      	cbnz	r5, 8003816 <HAL_PCD_EP_Receive+0x46>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800380e:	f001 ffab 	bl	8005768 <USB_EP0StartXfer>
}
 8003812:	2000      	movs	r0, #0
 8003814:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003816:	f001 fe91 	bl	800553c <USB_EPStartXfer>
}
 800381a:	2000      	movs	r0, #0
 800381c:	bd38      	pop	{r3, r4, r5, pc}
 800381e:	bf00      	nop

08003820 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003820:	f001 010f 	and.w	r1, r1, #15
 8003824:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8003828:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 800382c:	f8d1 0214 	ldr.w	r0, [r1, #532]	; 0x214
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop

08003834 <HAL_PCD_EP_Transmit>:
{
 8003834:	b570      	push	{r4, r5, r6, lr}
 8003836:	f001 050f 	and.w	r5, r1, #15
  ep->xfer_buff = pBuf;
 800383a:	ebc5 04c5 	rsb	r4, r5, r5, lsl #3
 800383e:	eb00 0484 	add.w	r4, r0, r4, lsl #2
  ep->is_in = 1U;
 8003842:	2101      	movs	r1, #1
  ep->xfer_count = 0U;
 8003844:	2600      	movs	r6, #0
  ep->xfer_buff = pBuf;
 8003846:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->is_in = 1U;
 8003848:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  ep->xfer_len = len;
 800384c:	6523      	str	r3, [r4, #80]	; 0x50
  ep->num = ep_addr & EP_ADDR_MSK;
 800384e:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  ep->xfer_count = 0U;
 8003852:	6566      	str	r6, [r4, #84]	; 0x54
  if (hpcd->Init.dma_enable == 1U)
 8003854:	6903      	ldr	r3, [r0, #16]
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003856:	211c      	movs	r1, #28
 8003858:	fb01 0105 	mla	r1, r1, r5, r0
  if (hpcd->Init.dma_enable == 1U)
 800385c:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 800385e:	bf08      	it	eq
 8003860:	64e2      	streq	r2, [r4, #76]	; 0x4c
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003862:	6800      	ldr	r0, [r0, #0]
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003864:	313c      	adds	r1, #60	; 0x3c
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003866:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003868:	b91d      	cbnz	r5, 8003872 <HAL_PCD_EP_Transmit+0x3e>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800386a:	f001 ff7d 	bl	8005768 <USB_EP0StartXfer>
}
 800386e:	2000      	movs	r0, #0
 8003870:	bd70      	pop	{r4, r5, r6, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003872:	f001 fe63 	bl	800553c <USB_EPStartXfer>
}
 8003876:	2000      	movs	r0, #0
 8003878:	bd70      	pop	{r4, r5, r6, pc}
 800387a:	bf00      	nop

0800387c <HAL_PCD_EP_SetStall>:
{
 800387c:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800387e:	6843      	ldr	r3, [r0, #4]
 8003880:	f001 050f 	and.w	r5, r1, #15
 8003884:	429d      	cmp	r5, r3
 8003886:	d833      	bhi.n	80038f0 <HAL_PCD_EP_SetStall+0x74>
  if ((0x80U & ep_addr) == 0x80U)
 8003888:	060b      	lsls	r3, r1, #24
 800388a:	4604      	mov	r4, r0
 800388c:	d41c      	bmi.n	80038c8 <HAL_PCD_EP_SetStall+0x4c>
    ep->is_in = 0U;
 800388e:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8003892:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->OUT_ep[ep_addr];
 8003896:	201c      	movs	r0, #28
 8003898:	fb00 4101 	mla	r1, r0, r1, r4
    ep->is_in = 0U;
 800389c:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 800389e:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 80038a2:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  ep->is_stall = 1U;
 80038a6:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 80038a8:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 80038aa:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 80038ac:	f894 23bc 	ldrb.w	r2, [r4, #956]	; 0x3bc
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d01b      	beq.n	80038ec <HAL_PCD_EP_SetStall+0x70>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80038b4:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80038b6:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80038ba:	f002 f827 	bl	800590c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80038be:	b1cd      	cbz	r5, 80038f4 <HAL_PCD_EP_SetStall+0x78>
  __HAL_UNLOCK(hpcd);
 80038c0:	2000      	movs	r0, #0
 80038c2:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 80038c6:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 1U;
 80038c8:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038cc:	211c      	movs	r1, #28
 80038ce:	fb01 0105 	mla	r1, r1, r5, r0
    ep->is_in = 1U;
 80038d2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80038d6:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038d8:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 80038da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  ep->is_stall = 1U;
 80038de:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 80038e0:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 80038e2:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 80038e4:	f894 23bc 	ldrb.w	r2, [r4, #956]	; 0x3bc
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d1e3      	bne.n	80038b4 <HAL_PCD_EP_SetStall+0x38>
 80038ec:	2002      	movs	r0, #2
}
 80038ee:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80038f0:	2001      	movs	r0, #1
}
 80038f2:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80038f4:	7c21      	ldrb	r1, [r4, #16]
 80038f6:	6820      	ldr	r0, [r4, #0]
 80038f8:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80038fc:	f002 f8d2 	bl	8005aa4 <USB_EP0_OutStart>
 8003900:	e7de      	b.n	80038c0 <HAL_PCD_EP_SetStall+0x44>
 8003902:	bf00      	nop

08003904 <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003904:	6842      	ldr	r2, [r0, #4]
{
 8003906:	b538      	push	{r3, r4, r5, lr}
 8003908:	f001 030f 	and.w	r3, r1, #15
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800390c:	4293      	cmp	r3, r2
 800390e:	d830      	bhi.n	8003972 <HAL_PCD_EP_ClrStall+0x6e>
    ep->is_in = 1U;
 8003910:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
  if ((0x80U & ep_addr) == 0x80U)
 8003914:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003918:	4604      	mov	r4, r0
    ep->is_in = 1U;
 800391a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800391e:	f04f 011c 	mov.w	r1, #28
  if ((0x80U & ep_addr) == 0x80U)
 8003922:	d117      	bne.n	8003954 <HAL_PCD_EP_ClrStall+0x50>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003924:	fb01 4103 	mla	r1, r1, r3, r4
 8003928:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 800392c:	2000      	movs	r0, #0
  ep->is_stall = 0U;
 800392e:	2500      	movs	r5, #0
    ep->is_in = 0U;
 8003930:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 8003934:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 8003936:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8003938:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800393c:	2b01      	cmp	r3, #1
 800393e:	d016      	beq.n	800396e <HAL_PCD_EP_ClrStall+0x6a>
 8003940:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003942:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8003944:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003948:	f002 f80e 	bl	8005968 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800394c:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
  return HAL_OK;
 8003950:	4628      	mov	r0, r5
}
 8003952:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003954:	fb01 4103 	mla	r1, r1, r3, r4
 8003958:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 800395a:	2001      	movs	r0, #1
  ep->is_stall = 0U;
 800395c:	2500      	movs	r5, #0
    ep->is_in = 1U;
 800395e:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 8003962:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 8003964:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8003966:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800396a:	2b01      	cmp	r3, #1
 800396c:	d1e8      	bne.n	8003940 <HAL_PCD_EP_ClrStall+0x3c>
 800396e:	2002      	movs	r0, #2
}
 8003970:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003972:	2001      	movs	r0, #1
}
 8003974:	bd38      	pop	{r3, r4, r5, pc}
 8003976:	bf00      	nop

08003978 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003978:	b430      	push	{r4, r5}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800397a:	6805      	ldr	r5, [r0, #0]
 800397c:	6a6b      	ldr	r3, [r5, #36]	; 0x24

  if (fifo == 0U)
 800397e:	b929      	cbnz	r1, 800398c <HAL_PCDEx_SetTxFiFo+0x14>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003980:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003984:	62ab      	str	r3, [r5, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 8003986:	2000      	movs	r0, #0
 8003988:	bc30      	pop	{r4, r5}
 800398a:	4770      	bx	lr
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800398c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 800398e:	1e4c      	subs	r4, r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003990:	eb03 4010 	add.w	r0, r3, r0, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8003994:	d00b      	beq.n	80039ae <HAL_PCDEx_SetTxFiFo+0x36>
 8003996:	2300      	movs	r3, #0
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003998:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800399c:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    for (i = 0U; i < (fifo - 1U); i++)
 80039a0:	3301      	adds	r3, #1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80039a2:	6849      	ldr	r1, [r1, #4]
    for (i = 0U; i < (fifo - 1U); i++)
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	42a3      	cmp	r3, r4
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80039a8:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80039ac:	d3f4      	bcc.n	8003998 <HAL_PCDEx_SetTxFiFo+0x20>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80039ae:	3440      	adds	r4, #64	; 0x40
 80039b0:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 80039b4:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80039b8:	6060      	str	r0, [r4, #4]
}
 80039ba:	2000      	movs	r0, #0
 80039bc:	bc30      	pop	{r4, r5}
 80039be:	4770      	bx	lr

080039c0 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 80039c0:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 80039c2:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 80039c4:	6259      	str	r1, [r3, #36]	; 0x24
}
 80039c6:	4770      	bx	lr

080039c8 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop

080039cc <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039cc:	2800      	cmp	r0, #0
 80039ce:	f000 81a5 	beq.w	8003d1c <HAL_RCC_OscConfig+0x350>
{
 80039d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039d6:	6803      	ldr	r3, [r0, #0]
 80039d8:	07dd      	lsls	r5, r3, #31
{
 80039da:	b082      	sub	sp, #8
 80039dc:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039de:	d52f      	bpl.n	8003a40 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039e0:	49ac      	ldr	r1, [pc, #688]	; (8003c94 <HAL_RCC_OscConfig+0x2c8>)
 80039e2:	688a      	ldr	r2, [r1, #8]
 80039e4:	f002 020c 	and.w	r2, r2, #12
 80039e8:	2a04      	cmp	r2, #4
 80039ea:	f000 80ec 	beq.w	8003bc6 <HAL_RCC_OscConfig+0x1fa>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039ee:	688a      	ldr	r2, [r1, #8]
 80039f0:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039f4:	2a08      	cmp	r2, #8
 80039f6:	f000 80e2 	beq.w	8003bbe <HAL_RCC_OscConfig+0x1f2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039fa:	6863      	ldr	r3, [r4, #4]
 80039fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a00:	f000 80eb 	beq.w	8003bda <HAL_RCC_OscConfig+0x20e>
 8003a04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a08:	f000 8178 	beq.w	8003cfc <HAL_RCC_OscConfig+0x330>
 8003a0c:	4da1      	ldr	r5, [pc, #644]	; (8003c94 <HAL_RCC_OscConfig+0x2c8>)
 8003a0e:	682a      	ldr	r2, [r5, #0]
 8003a10:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003a14:	602a      	str	r2, [r5, #0]
 8003a16:	682a      	ldr	r2, [r5, #0]
 8003a18:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003a1c:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	f040 80e0 	bne.w	8003be4 <HAL_RCC_OscConfig+0x218>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a24:	f7fe f8dc 	bl	8001be0 <HAL_GetTick>
 8003a28:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a2a:	e005      	b.n	8003a38 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a2c:	f7fe f8d8 	bl	8001be0 <HAL_GetTick>
 8003a30:	1b80      	subs	r0, r0, r6
 8003a32:	2864      	cmp	r0, #100	; 0x64
 8003a34:	f200 8100 	bhi.w	8003c38 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a38:	682b      	ldr	r3, [r5, #0]
 8003a3a:	039b      	lsls	r3, r3, #14
 8003a3c:	d4f6      	bmi.n	8003a2c <HAL_RCC_OscConfig+0x60>
 8003a3e:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a40:	079f      	lsls	r7, r3, #30
 8003a42:	d528      	bpl.n	8003a96 <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a44:	4a93      	ldr	r2, [pc, #588]	; (8003c94 <HAL_RCC_OscConfig+0x2c8>)
 8003a46:	6891      	ldr	r1, [r2, #8]
 8003a48:	f011 0f0c 	tst.w	r1, #12
 8003a4c:	f000 8090 	beq.w	8003b70 <HAL_RCC_OscConfig+0x1a4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a50:	6891      	ldr	r1, [r2, #8]
 8003a52:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a56:	2908      	cmp	r1, #8
 8003a58:	f000 8086 	beq.w	8003b68 <HAL_RCC_OscConfig+0x19c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a5c:	68e3      	ldr	r3, [r4, #12]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	f000 8106 	beq.w	8003c70 <HAL_RCC_OscConfig+0x2a4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a64:	4b8c      	ldr	r3, [pc, #560]	; (8003c98 <HAL_RCC_OscConfig+0x2cc>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a66:	4e8b      	ldr	r6, [pc, #556]	; (8003c94 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_ENABLE();
 8003a68:	2201      	movs	r2, #1
 8003a6a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003a6c:	f7fe f8b8 	bl	8001be0 <HAL_GetTick>
 8003a70:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a72:	e005      	b.n	8003a80 <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a74:	f7fe f8b4 	bl	8001be0 <HAL_GetTick>
 8003a78:	1b40      	subs	r0, r0, r5
 8003a7a:	2802      	cmp	r0, #2
 8003a7c:	f200 80dc 	bhi.w	8003c38 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a80:	6833      	ldr	r3, [r6, #0]
 8003a82:	0798      	lsls	r0, r3, #30
 8003a84:	d5f6      	bpl.n	8003a74 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a86:	6833      	ldr	r3, [r6, #0]
 8003a88:	6922      	ldr	r2, [r4, #16]
 8003a8a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003a8e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003a92:	6033      	str	r3, [r6, #0]
 8003a94:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a96:	071a      	lsls	r2, r3, #28
 8003a98:	d452      	bmi.n	8003b40 <HAL_RCC_OscConfig+0x174>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a9a:	0758      	lsls	r0, r3, #29
 8003a9c:	d52f      	bpl.n	8003afe <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a9e:	4a7d      	ldr	r2, [pc, #500]	; (8003c94 <HAL_RCC_OscConfig+0x2c8>)
 8003aa0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003aa2:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8003aa6:	d07e      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x1da>
    FlagStatus       pwrclkchanged = RESET;
 8003aa8:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aaa:	4e7c      	ldr	r6, [pc, #496]	; (8003c9c <HAL_RCC_OscConfig+0x2d0>)
 8003aac:	6833      	ldr	r3, [r6, #0]
 8003aae:	05d9      	lsls	r1, r3, #23
 8003ab0:	f140 80b2 	bpl.w	8003c18 <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ab4:	68a3      	ldr	r3, [r4, #8]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	f000 80c2 	beq.w	8003c40 <HAL_RCC_OscConfig+0x274>
 8003abc:	2b05      	cmp	r3, #5
 8003abe:	f000 812f 	beq.w	8003d20 <HAL_RCC_OscConfig+0x354>
 8003ac2:	4e74      	ldr	r6, [pc, #464]	; (8003c94 <HAL_RCC_OscConfig+0x2c8>)
 8003ac4:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8003ac6:	f022 0201 	bic.w	r2, r2, #1
 8003aca:	6732      	str	r2, [r6, #112]	; 0x70
 8003acc:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8003ace:	f022 0204 	bic.w	r2, r2, #4
 8003ad2:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	f040 80b8 	bne.w	8003c4a <HAL_RCC_OscConfig+0x27e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ada:	f7fe f881 	bl	8001be0 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ade:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003ae2:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ae4:	e005      	b.n	8003af2 <HAL_RCC_OscConfig+0x126>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ae6:	f7fe f87b 	bl	8001be0 <HAL_GetTick>
 8003aea:	1bc0      	subs	r0, r0, r7
 8003aec:	4540      	cmp	r0, r8
 8003aee:	f200 80a3 	bhi.w	8003c38 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003af2:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8003af4:	0798      	lsls	r0, r3, #30
 8003af6:	d4f6      	bmi.n	8003ae6 <HAL_RCC_OscConfig+0x11a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003af8:	2d00      	cmp	r5, #0
 8003afa:	f040 8109 	bne.w	8003d10 <HAL_RCC_OscConfig+0x344>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003afe:	69a0      	ldr	r0, [r4, #24]
 8003b00:	b1d0      	cbz	r0, 8003b38 <HAL_RCC_OscConfig+0x16c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b02:	4d64      	ldr	r5, [pc, #400]	; (8003c94 <HAL_RCC_OscConfig+0x2c8>)
 8003b04:	68ab      	ldr	r3, [r5, #8]
 8003b06:	f003 030c 	and.w	r3, r3, #12
 8003b0a:	2b08      	cmp	r3, #8
 8003b0c:	f000 80cc 	beq.w	8003ca8 <HAL_RCC_OscConfig+0x2dc>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b10:	4b63      	ldr	r3, [pc, #396]	; (8003ca0 <HAL_RCC_OscConfig+0x2d4>)
 8003b12:	2200      	movs	r2, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b14:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8003b16:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b18:	f000 810c 	beq.w	8003d34 <HAL_RCC_OscConfig+0x368>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b1c:	f7fe f860 	bl	8001be0 <HAL_GetTick>

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b20:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8003b22:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b24:	e005      	b.n	8003b32 <HAL_RCC_OscConfig+0x166>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b26:	f7fe f85b 	bl	8001be0 <HAL_GetTick>
 8003b2a:	1b40      	subs	r0, r0, r5
 8003b2c:	2802      	cmp	r0, #2
 8003b2e:	f200 8083 	bhi.w	8003c38 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b32:	6823      	ldr	r3, [r4, #0]
 8003b34:	019b      	lsls	r3, r3, #6
 8003b36:	d4f6      	bmi.n	8003b26 <HAL_RCC_OscConfig+0x15a>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8003b38:	2000      	movs	r0, #0
}
 8003b3a:	b002      	add	sp, #8
 8003b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b40:	6963      	ldr	r3, [r4, #20]
 8003b42:	b303      	cbz	r3, 8003b86 <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_LSI_ENABLE();
 8003b44:	4b57      	ldr	r3, [pc, #348]	; (8003ca4 <HAL_RCC_OscConfig+0x2d8>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b46:	4e53      	ldr	r6, [pc, #332]	; (8003c94 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_ENABLE();
 8003b48:	2201      	movs	r2, #1
 8003b4a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8003b4c:	f7fe f848 	bl	8001be0 <HAL_GetTick>
 8003b50:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b52:	e004      	b.n	8003b5e <HAL_RCC_OscConfig+0x192>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b54:	f7fe f844 	bl	8001be0 <HAL_GetTick>
 8003b58:	1b40      	subs	r0, r0, r5
 8003b5a:	2802      	cmp	r0, #2
 8003b5c:	d86c      	bhi.n	8003c38 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b5e:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8003b60:	079b      	lsls	r3, r3, #30
 8003b62:	d5f7      	bpl.n	8003b54 <HAL_RCC_OscConfig+0x188>
 8003b64:	6823      	ldr	r3, [r4, #0]
 8003b66:	e798      	b.n	8003a9a <HAL_RCC_OscConfig+0xce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b68:	6852      	ldr	r2, [r2, #4]
 8003b6a:	0256      	lsls	r6, r2, #9
 8003b6c:	f53f af76 	bmi.w	8003a5c <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b70:	4a48      	ldr	r2, [pc, #288]	; (8003c94 <HAL_RCC_OscConfig+0x2c8>)
 8003b72:	6812      	ldr	r2, [r2, #0]
 8003b74:	0795      	lsls	r5, r2, #30
 8003b76:	d543      	bpl.n	8003c00 <HAL_RCC_OscConfig+0x234>
 8003b78:	68e2      	ldr	r2, [r4, #12]
 8003b7a:	2a01      	cmp	r2, #1
 8003b7c:	d040      	beq.n	8003c00 <HAL_RCC_OscConfig+0x234>
        return HAL_ERROR;
 8003b7e:	2001      	movs	r0, #1
}
 8003b80:	b002      	add	sp, #8
 8003b82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8003b86:	4a47      	ldr	r2, [pc, #284]	; (8003ca4 <HAL_RCC_OscConfig+0x2d8>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b88:	4e42      	ldr	r6, [pc, #264]	; (8003c94 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_DISABLE();
 8003b8a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003b8c:	f7fe f828 	bl	8001be0 <HAL_GetTick>
 8003b90:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b92:	e004      	b.n	8003b9e <HAL_RCC_OscConfig+0x1d2>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b94:	f7fe f824 	bl	8001be0 <HAL_GetTick>
 8003b98:	1b40      	subs	r0, r0, r5
 8003b9a:	2802      	cmp	r0, #2
 8003b9c:	d84c      	bhi.n	8003c38 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b9e:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8003ba0:	079f      	lsls	r7, r3, #30
 8003ba2:	d4f7      	bmi.n	8003b94 <HAL_RCC_OscConfig+0x1c8>
 8003ba4:	e7de      	b.n	8003b64 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ba6:	9301      	str	r3, [sp, #4]
 8003ba8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003baa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bae:	6413      	str	r3, [r2, #64]	; 0x40
 8003bb0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bb6:	9301      	str	r3, [sp, #4]
 8003bb8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003bba:	2501      	movs	r5, #1
 8003bbc:	e775      	b.n	8003aaa <HAL_RCC_OscConfig+0xde>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bbe:	684a      	ldr	r2, [r1, #4]
 8003bc0:	0250      	lsls	r0, r2, #9
 8003bc2:	f57f af1a 	bpl.w	80039fa <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bc6:	4a33      	ldr	r2, [pc, #204]	; (8003c94 <HAL_RCC_OscConfig+0x2c8>)
 8003bc8:	6812      	ldr	r2, [r2, #0]
 8003bca:	0391      	lsls	r1, r2, #14
 8003bcc:	f57f af38 	bpl.w	8003a40 <HAL_RCC_OscConfig+0x74>
 8003bd0:	6862      	ldr	r2, [r4, #4]
 8003bd2:	2a00      	cmp	r2, #0
 8003bd4:	f47f af34 	bne.w	8003a40 <HAL_RCC_OscConfig+0x74>
 8003bd8:	e7d1      	b.n	8003b7e <HAL_RCC_OscConfig+0x1b2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bda:	4a2e      	ldr	r2, [pc, #184]	; (8003c94 <HAL_RCC_OscConfig+0x2c8>)
 8003bdc:	6813      	ldr	r3, [r2, #0]
 8003bde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003be2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003be4:	f7fd fffc 	bl	8001be0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003be8:	4e2a      	ldr	r6, [pc, #168]	; (8003c94 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8003bea:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bec:	e004      	b.n	8003bf8 <HAL_RCC_OscConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bee:	f7fd fff7 	bl	8001be0 <HAL_GetTick>
 8003bf2:	1b40      	subs	r0, r0, r5
 8003bf4:	2864      	cmp	r0, #100	; 0x64
 8003bf6:	d81f      	bhi.n	8003c38 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bf8:	6833      	ldr	r3, [r6, #0]
 8003bfa:	039a      	lsls	r2, r3, #14
 8003bfc:	d5f7      	bpl.n	8003bee <HAL_RCC_OscConfig+0x222>
 8003bfe:	e71e      	b.n	8003a3e <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c00:	4924      	ldr	r1, [pc, #144]	; (8003c94 <HAL_RCC_OscConfig+0x2c8>)
 8003c02:	6920      	ldr	r0, [r4, #16]
 8003c04:	680a      	ldr	r2, [r1, #0]
 8003c06:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8003c0a:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8003c0e:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c10:	071a      	lsls	r2, r3, #28
 8003c12:	f57f af42 	bpl.w	8003a9a <HAL_RCC_OscConfig+0xce>
 8003c16:	e793      	b.n	8003b40 <HAL_RCC_OscConfig+0x174>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c18:	6833      	ldr	r3, [r6, #0]
 8003c1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c1e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003c20:	f7fd ffde 	bl	8001be0 <HAL_GetTick>
 8003c24:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c26:	6833      	ldr	r3, [r6, #0]
 8003c28:	05da      	lsls	r2, r3, #23
 8003c2a:	f53f af43 	bmi.w	8003ab4 <HAL_RCC_OscConfig+0xe8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c2e:	f7fd ffd7 	bl	8001be0 <HAL_GetTick>
 8003c32:	1bc0      	subs	r0, r0, r7
 8003c34:	2802      	cmp	r0, #2
 8003c36:	d9f6      	bls.n	8003c26 <HAL_RCC_OscConfig+0x25a>
            return HAL_TIMEOUT;
 8003c38:	2003      	movs	r0, #3
}
 8003c3a:	b002      	add	sp, #8
 8003c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c40:	4a14      	ldr	r2, [pc, #80]	; (8003c94 <HAL_RCC_OscConfig+0x2c8>)
 8003c42:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8003c44:	f043 0301 	orr.w	r3, r3, #1
 8003c48:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8003c4a:	f7fd ffc9 	bl	8001be0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c4e:	4f11      	ldr	r7, [pc, #68]	; (8003c94 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8003c50:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c52:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c56:	e004      	b.n	8003c62 <HAL_RCC_OscConfig+0x296>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c58:	f7fd ffc2 	bl	8001be0 <HAL_GetTick>
 8003c5c:	1b80      	subs	r0, r0, r6
 8003c5e:	4540      	cmp	r0, r8
 8003c60:	d8ea      	bhi.n	8003c38 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c64:	079b      	lsls	r3, r3, #30
 8003c66:	d5f7      	bpl.n	8003c58 <HAL_RCC_OscConfig+0x28c>
    if(pwrclkchanged == SET)
 8003c68:	2d00      	cmp	r5, #0
 8003c6a:	f43f af48 	beq.w	8003afe <HAL_RCC_OscConfig+0x132>
 8003c6e:	e04f      	b.n	8003d10 <HAL_RCC_OscConfig+0x344>
        __HAL_RCC_HSI_DISABLE();
 8003c70:	4a09      	ldr	r2, [pc, #36]	; (8003c98 <HAL_RCC_OscConfig+0x2cc>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c72:	4e08      	ldr	r6, [pc, #32]	; (8003c94 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_DISABLE();
 8003c74:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003c76:	f7fd ffb3 	bl	8001be0 <HAL_GetTick>
 8003c7a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c7c:	e004      	b.n	8003c88 <HAL_RCC_OscConfig+0x2bc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c7e:	f7fd ffaf 	bl	8001be0 <HAL_GetTick>
 8003c82:	1b40      	subs	r0, r0, r5
 8003c84:	2802      	cmp	r0, #2
 8003c86:	d8d7      	bhi.n	8003c38 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c88:	6833      	ldr	r3, [r6, #0]
 8003c8a:	0799      	lsls	r1, r3, #30
 8003c8c:	d4f7      	bmi.n	8003c7e <HAL_RCC_OscConfig+0x2b2>
 8003c8e:	6823      	ldr	r3, [r4, #0]
 8003c90:	e701      	b.n	8003a96 <HAL_RCC_OscConfig+0xca>
 8003c92:	bf00      	nop
 8003c94:	40023800 	.word	0x40023800
 8003c98:	42470000 	.word	0x42470000
 8003c9c:	40007000 	.word	0x40007000
 8003ca0:	42470060 	.word	0x42470060
 8003ca4:	42470e80 	.word	0x42470e80
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ca8:	2801      	cmp	r0, #1
 8003caa:	f43f af46 	beq.w	8003b3a <HAL_RCC_OscConfig+0x16e>
        pll_config = RCC->PLLCFGR;
 8003cae:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cb0:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cb2:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cb6:	4291      	cmp	r1, r2
 8003cb8:	f47f af61 	bne.w	8003b7e <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cbc:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cbe:	f003 013f 	and.w	r1, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cc2:	4291      	cmp	r1, r2
 8003cc4:	f47f af5b 	bne.w	8003b7e <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cc8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003cca:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8003cce:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cd0:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8003cd4:	f47f af53 	bne.w	8003b7e <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cd8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003cda:	0852      	lsrs	r2, r2, #1
 8003cdc:	3a01      	subs	r2, #1
 8003cde:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ce2:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8003ce6:	f47f af4a 	bne.w	8003b7e <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003cea:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003cec:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cf0:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
            return HAL_TIMEOUT;
 8003cf4:	bf14      	ite	ne
 8003cf6:	2001      	movne	r0, #1
 8003cf8:	2000      	moveq	r0, #0
 8003cfa:	e71e      	b.n	8003b3a <HAL_RCC_OscConfig+0x16e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cfc:	4b24      	ldr	r3, [pc, #144]	; (8003d90 <HAL_RCC_OscConfig+0x3c4>)
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003d04:	601a      	str	r2, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003d0c:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d0e:	e769      	b.n	8003be4 <HAL_RCC_OscConfig+0x218>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d10:	4a1f      	ldr	r2, [pc, #124]	; (8003d90 <HAL_RCC_OscConfig+0x3c4>)
 8003d12:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003d14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d18:	6413      	str	r3, [r2, #64]	; 0x40
 8003d1a:	e6f0      	b.n	8003afe <HAL_RCC_OscConfig+0x132>
    return HAL_ERROR;
 8003d1c:	2001      	movs	r0, #1
}
 8003d1e:	4770      	bx	lr
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d20:	4b1b      	ldr	r3, [pc, #108]	; (8003d90 <HAL_RCC_OscConfig+0x3c4>)
 8003d22:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d24:	f042 0204 	orr.w	r2, r2, #4
 8003d28:	671a      	str	r2, [r3, #112]	; 0x70
 8003d2a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d2c:	f042 0201 	orr.w	r2, r2, #1
 8003d30:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d32:	e78a      	b.n	8003c4a <HAL_RCC_OscConfig+0x27e>
        tickstart = HAL_GetTick();
 8003d34:	f7fd ff54 	bl	8001be0 <HAL_GetTick>
 8003d38:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d3a:	e005      	b.n	8003d48 <HAL_RCC_OscConfig+0x37c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d3c:	f7fd ff50 	bl	8001be0 <HAL_GetTick>
 8003d40:	1b80      	subs	r0, r0, r6
 8003d42:	2802      	cmp	r0, #2
 8003d44:	f63f af78 	bhi.w	8003c38 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d48:	682b      	ldr	r3, [r5, #0]
 8003d4a:	0199      	lsls	r1, r3, #6
 8003d4c:	d4f6      	bmi.n	8003d3c <HAL_RCC_OscConfig+0x370>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d4e:	e9d4 3607 	ldrd	r3, r6, [r4, #28]
 8003d52:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 8003d56:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003d58:	4333      	orrs	r3, r6
 8003d5a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8003d5e:	0852      	lsrs	r2, r2, #1
 8003d60:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003d64:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8003d66:	490b      	ldr	r1, [pc, #44]	; (8003d94 <HAL_RCC_OscConfig+0x3c8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d68:	4e09      	ldr	r6, [pc, #36]	; (8003d90 <HAL_RCC_OscConfig+0x3c4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8003d6e:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d70:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003d72:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 8003d74:	f7fd ff34 	bl	8001be0 <HAL_GetTick>
 8003d78:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d7a:	e005      	b.n	8003d88 <HAL_RCC_OscConfig+0x3bc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d7c:	f7fd ff30 	bl	8001be0 <HAL_GetTick>
 8003d80:	1b00      	subs	r0, r0, r4
 8003d82:	2802      	cmp	r0, #2
 8003d84:	f63f af58 	bhi.w	8003c38 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d88:	6833      	ldr	r3, [r6, #0]
 8003d8a:	019a      	lsls	r2, r3, #6
 8003d8c:	d5f6      	bpl.n	8003d7c <HAL_RCC_OscConfig+0x3b0>
 8003d8e:	e6d3      	b.n	8003b38 <HAL_RCC_OscConfig+0x16c>
 8003d90:	40023800 	.word	0x40023800
 8003d94:	42470060 	.word	0x42470060

08003d98 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d98:	4917      	ldr	r1, [pc, #92]	; (8003df8 <HAL_RCC_GetSysClockFreq+0x60>)
{
 8003d9a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d9c:	688b      	ldr	r3, [r1, #8]
 8003d9e:	f003 030c 	and.w	r3, r3, #12
 8003da2:	2b04      	cmp	r3, #4
 8003da4:	d01b      	beq.n	8003dde <HAL_RCC_GetSysClockFreq+0x46>
 8003da6:	2b08      	cmp	r3, #8
 8003da8:	d117      	bne.n	8003dda <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003daa:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003dac:	684b      	ldr	r3, [r1, #4]
 8003dae:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003db2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003db6:	d114      	bne.n	8003de2 <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003db8:	6849      	ldr	r1, [r1, #4]
 8003dba:	4810      	ldr	r0, [pc, #64]	; (8003dfc <HAL_RCC_GetSysClockFreq+0x64>)
 8003dbc:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003dc0:	fba1 0100 	umull	r0, r1, r1, r0
 8003dc4:	f7fc ff40 	bl	8000c48 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003dc8:	4b0b      	ldr	r3, [pc, #44]	; (8003df8 <HAL_RCC_GetSysClockFreq+0x60>)
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8003dd4:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003dd8:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8003dda:	4808      	ldr	r0, [pc, #32]	; (8003dfc <HAL_RCC_GetSysClockFreq+0x64>)
}
 8003ddc:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003dde:	4808      	ldr	r0, [pc, #32]	; (8003e00 <HAL_RCC_GetSysClockFreq+0x68>)
}
 8003de0:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003de2:	684b      	ldr	r3, [r1, #4]
 8003de4:	4806      	ldr	r0, [pc, #24]	; (8003e00 <HAL_RCC_GetSysClockFreq+0x68>)
 8003de6:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8003dea:	fba3 0100 	umull	r0, r1, r3, r0
 8003dee:	2300      	movs	r3, #0
 8003df0:	f7fc ff2a 	bl	8000c48 <__aeabi_uldivmod>
 8003df4:	e7e8      	b.n	8003dc8 <HAL_RCC_GetSysClockFreq+0x30>
 8003df6:	bf00      	nop
 8003df8:	40023800 	.word	0x40023800
 8003dfc:	00f42400 	.word	0x00f42400
 8003e00:	007a1200 	.word	0x007a1200

08003e04 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8003e04:	2800      	cmp	r0, #0
 8003e06:	f000 8087 	beq.w	8003f18 <HAL_RCC_ClockConfig+0x114>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e0a:	4a48      	ldr	r2, [pc, #288]	; (8003f2c <HAL_RCC_ClockConfig+0x128>)
 8003e0c:	6813      	ldr	r3, [r2, #0]
 8003e0e:	f003 0307 	and.w	r3, r3, #7
 8003e12:	428b      	cmp	r3, r1
{
 8003e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e18:	460d      	mov	r5, r1
 8003e1a:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e1c:	d209      	bcs.n	8003e32 <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e1e:	b2cb      	uxtb	r3, r1
 8003e20:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e22:	6813      	ldr	r3, [r2, #0]
 8003e24:	f003 0307 	and.w	r3, r3, #7
 8003e28:	428b      	cmp	r3, r1
 8003e2a:	d002      	beq.n	8003e32 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8003e2c:	2001      	movs	r0, #1
}
 8003e2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e32:	6823      	ldr	r3, [r4, #0]
 8003e34:	0798      	lsls	r0, r3, #30
 8003e36:	d514      	bpl.n	8003e62 <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e38:	0759      	lsls	r1, r3, #29
 8003e3a:	d504      	bpl.n	8003e46 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e3c:	493c      	ldr	r1, [pc, #240]	; (8003f30 <HAL_RCC_ClockConfig+0x12c>)
 8003e3e:	688a      	ldr	r2, [r1, #8]
 8003e40:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8003e44:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e46:	071a      	lsls	r2, r3, #28
 8003e48:	d504      	bpl.n	8003e54 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e4a:	4939      	ldr	r1, [pc, #228]	; (8003f30 <HAL_RCC_ClockConfig+0x12c>)
 8003e4c:	688a      	ldr	r2, [r1, #8]
 8003e4e:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8003e52:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e54:	4936      	ldr	r1, [pc, #216]	; (8003f30 <HAL_RCC_ClockConfig+0x12c>)
 8003e56:	68a0      	ldr	r0, [r4, #8]
 8003e58:	688a      	ldr	r2, [r1, #8]
 8003e5a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003e5e:	4302      	orrs	r2, r0
 8003e60:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e62:	07df      	lsls	r7, r3, #31
 8003e64:	d521      	bpl.n	8003eaa <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e66:	6862      	ldr	r2, [r4, #4]
 8003e68:	2a01      	cmp	r2, #1
 8003e6a:	d057      	beq.n	8003f1c <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e6c:	1e93      	subs	r3, r2, #2
 8003e6e:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e70:	4b2f      	ldr	r3, [pc, #188]	; (8003f30 <HAL_RCC_ClockConfig+0x12c>)
 8003e72:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e74:	d94d      	bls.n	8003f12 <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e76:	0799      	lsls	r1, r3, #30
 8003e78:	d5d8      	bpl.n	8003e2c <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e7a:	4e2d      	ldr	r6, [pc, #180]	; (8003f30 <HAL_RCC_ClockConfig+0x12c>)
 8003e7c:	68b3      	ldr	r3, [r6, #8]
 8003e7e:	f023 0303 	bic.w	r3, r3, #3
 8003e82:	4313      	orrs	r3, r2
 8003e84:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8003e86:	f7fd feab 	bl	8001be0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e8a:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8003e8e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e90:	e004      	b.n	8003e9c <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e92:	f7fd fea5 	bl	8001be0 <HAL_GetTick>
 8003e96:	1bc0      	subs	r0, r0, r7
 8003e98:	4540      	cmp	r0, r8
 8003e9a:	d844      	bhi.n	8003f26 <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e9c:	68b3      	ldr	r3, [r6, #8]
 8003e9e:	6862      	ldr	r2, [r4, #4]
 8003ea0:	f003 030c 	and.w	r3, r3, #12
 8003ea4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003ea8:	d1f3      	bne.n	8003e92 <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003eaa:	4a20      	ldr	r2, [pc, #128]	; (8003f2c <HAL_RCC_ClockConfig+0x128>)
 8003eac:	6813      	ldr	r3, [r2, #0]
 8003eae:	f003 0307 	and.w	r3, r3, #7
 8003eb2:	42ab      	cmp	r3, r5
 8003eb4:	d906      	bls.n	8003ec4 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eb6:	b2eb      	uxtb	r3, r5
 8003eb8:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eba:	6813      	ldr	r3, [r2, #0]
 8003ebc:	f003 0307 	and.w	r3, r3, #7
 8003ec0:	42ab      	cmp	r3, r5
 8003ec2:	d1b3      	bne.n	8003e2c <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ec4:	6823      	ldr	r3, [r4, #0]
 8003ec6:	075a      	lsls	r2, r3, #29
 8003ec8:	d506      	bpl.n	8003ed8 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003eca:	4919      	ldr	r1, [pc, #100]	; (8003f30 <HAL_RCC_ClockConfig+0x12c>)
 8003ecc:	68e0      	ldr	r0, [r4, #12]
 8003ece:	688a      	ldr	r2, [r1, #8]
 8003ed0:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8003ed4:	4302      	orrs	r2, r0
 8003ed6:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ed8:	071b      	lsls	r3, r3, #28
 8003eda:	d507      	bpl.n	8003eec <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003edc:	4a14      	ldr	r2, [pc, #80]	; (8003f30 <HAL_RCC_ClockConfig+0x12c>)
 8003ede:	6921      	ldr	r1, [r4, #16]
 8003ee0:	6893      	ldr	r3, [r2, #8]
 8003ee2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003ee6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003eea:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003eec:	f7ff ff54 	bl	8003d98 <HAL_RCC_GetSysClockFreq>
 8003ef0:	4a0f      	ldr	r2, [pc, #60]	; (8003f30 <HAL_RCC_ClockConfig+0x12c>)
 8003ef2:	4c10      	ldr	r4, [pc, #64]	; (8003f34 <HAL_RCC_ClockConfig+0x130>)
 8003ef4:	6892      	ldr	r2, [r2, #8]
 8003ef6:	4910      	ldr	r1, [pc, #64]	; (8003f38 <HAL_RCC_ClockConfig+0x134>)
 8003ef8:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8003efc:	4603      	mov	r3, r0
 8003efe:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 8003f00:	480e      	ldr	r0, [pc, #56]	; (8003f3c <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f02:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 8003f04:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f06:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 8003f08:	f7fd fe20 	bl	8001b4c <HAL_InitTick>
  return HAL_OK;
 8003f0c:	2000      	movs	r0, #0
}
 8003f0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f12:	0198      	lsls	r0, r3, #6
 8003f14:	d4b1      	bmi.n	8003e7a <HAL_RCC_ClockConfig+0x76>
 8003f16:	e789      	b.n	8003e2c <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8003f18:	2001      	movs	r0, #1
}
 8003f1a:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f1c:	4b04      	ldr	r3, [pc, #16]	; (8003f30 <HAL_RCC_ClockConfig+0x12c>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	039e      	lsls	r6, r3, #14
 8003f22:	d4aa      	bmi.n	8003e7a <HAL_RCC_ClockConfig+0x76>
 8003f24:	e782      	b.n	8003e2c <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 8003f26:	2003      	movs	r0, #3
 8003f28:	e781      	b.n	8003e2e <HAL_RCC_ClockConfig+0x2a>
 8003f2a:	bf00      	nop
 8003f2c:	40023c00 	.word	0x40023c00
 8003f30:	40023800 	.word	0x40023800
 8003f34:	0800d9f4 	.word	0x0800d9f4
 8003f38:	20000000 	.word	0x20000000
 8003f3c:	20000008 	.word	0x20000008

08003f40 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8003f40:	4b01      	ldr	r3, [pc, #4]	; (8003f48 <HAL_RCC_GetHCLKFreq+0x8>)
}
 8003f42:	6818      	ldr	r0, [r3, #0]
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	20000000 	.word	0x20000000

08003f4c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f4c:	4b04      	ldr	r3, [pc, #16]	; (8003f60 <HAL_RCC_GetPCLK1Freq+0x14>)
 8003f4e:	4a05      	ldr	r2, [pc, #20]	; (8003f64 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003f50:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8003f52:	4905      	ldr	r1, [pc, #20]	; (8003f68 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f54:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003f58:	6808      	ldr	r0, [r1, #0]
 8003f5a:	5cd3      	ldrb	r3, [r2, r3]
}
 8003f5c:	40d8      	lsrs	r0, r3
 8003f5e:	4770      	bx	lr
 8003f60:	40023800 	.word	0x40023800
 8003f64:	0800da04 	.word	0x0800da04
 8003f68:	20000000 	.word	0x20000000

08003f6c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003f6c:	4b04      	ldr	r3, [pc, #16]	; (8003f80 <HAL_RCC_GetPCLK2Freq+0x14>)
 8003f6e:	4a05      	ldr	r2, [pc, #20]	; (8003f84 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003f70:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8003f72:	4905      	ldr	r1, [pc, #20]	; (8003f88 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003f74:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8003f78:	6808      	ldr	r0, [r1, #0]
 8003f7a:	5cd3      	ldrb	r3, [r2, r3]
}
 8003f7c:	40d8      	lsrs	r0, r3
 8003f7e:	4770      	bx	lr
 8003f80:	40023800 	.word	0x40023800
 8003f84:	0800da04 	.word	0x0800da04
 8003f88:	20000000 	.word	0x20000000

08003f8c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f8c:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003f8e:	6803      	ldr	r3, [r0, #0]
 8003f90:	f013 0f05 	tst.w	r3, #5
{
 8003f94:	b083      	sub	sp, #12
 8003f96:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003f98:	d105      	bne.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x1a>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f9a:	f013 0302 	ands.w	r3, r3, #2
 8003f9e:	d13b      	bne.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x8c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003fa0:	4618      	mov	r0, r3
}
 8003fa2:	b003      	add	sp, #12
 8003fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 8003fa6:	4b45      	ldr	r3, [pc, #276]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003fa8:	4e45      	ldr	r6, [pc, #276]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
    __HAL_RCC_PLLI2S_DISABLE();
 8003faa:	2200      	movs	r2, #0
 8003fac:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003fae:	f7fd fe17 	bl	8001be0 <HAL_GetTick>
 8003fb2:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003fb4:	e004      	b.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x34>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003fb6:	f7fd fe13 	bl	8001be0 <HAL_GetTick>
 8003fba:	1b43      	subs	r3, r0, r5
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d828      	bhi.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x86>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003fc0:	6833      	ldr	r3, [r6, #0]
 8003fc2:	011f      	lsls	r7, r3, #4
 8003fc4:	d4f7      	bmi.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x2a>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003fc6:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
    __HAL_RCC_PLLI2S_ENABLE();
 8003fca:	4a3c      	ldr	r2, [pc, #240]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003fcc:	4f3c      	ldr	r7, [pc, #240]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003fce:	071b      	lsls	r3, r3, #28
 8003fd0:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    __HAL_RCC_PLLI2S_ENABLE();
 8003fd4:	2101      	movs	r1, #1
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003fd6:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8003fda:	6011      	str	r1, [r2, #0]
    tickstart = HAL_GetTick();
 8003fdc:	f7fd fe00 	bl	8001be0 <HAL_GetTick>
 8003fe0:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003fe2:	e004      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x62>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003fe4:	f7fd fdfc 	bl	8001be0 <HAL_GetTick>
 8003fe8:	1b40      	subs	r0, r0, r5
 8003fea:	2802      	cmp	r0, #2
 8003fec:	d811      	bhi.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x86>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	0118      	lsls	r0, r3, #4
 8003ff2:	d5f7      	bpl.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8003ff4:	6823      	ldr	r3, [r4, #0]
 8003ff6:	e7d0      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0xe>
        tickstart = HAL_GetTick();
 8003ff8:	f7fd fdf2 	bl	8001be0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ffc:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8004000:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004002:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004004:	079b      	lsls	r3, r3, #30
 8004006:	d43a      	bmi.n	800407e <HAL_RCCEx_PeriphCLKConfig+0xf2>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004008:	f7fd fdea 	bl	8001be0 <HAL_GetTick>
 800400c:	1b80      	subs	r0, r0, r6
 800400e:	42b8      	cmp	r0, r7
 8004010:	d9f7      	bls.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x76>
        return HAL_TIMEOUT;
 8004012:	2003      	movs	r0, #3
}
 8004014:	b003      	add	sp, #12
 8004016:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8004018:	4b29      	ldr	r3, [pc, #164]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
    PWR->CR |= PWR_CR_DBP;
 800401a:	4d2a      	ldr	r5, [pc, #168]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x138>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800401c:	2200      	movs	r2, #0
 800401e:	9201      	str	r2, [sp, #4]
 8004020:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004022:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004026:	641a      	str	r2, [r3, #64]	; 0x40
 8004028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800402e:	9301      	str	r3, [sp, #4]
 8004030:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8004032:	682b      	ldr	r3, [r5, #0]
 8004034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004038:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800403a:	f7fd fdd1 	bl	8001be0 <HAL_GetTick>
 800403e:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004040:	e004      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0xc0>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004042:	f7fd fdcd 	bl	8001be0 <HAL_GetTick>
 8004046:	1b83      	subs	r3, r0, r6
 8004048:	2b02      	cmp	r3, #2
 800404a:	d8e2      	bhi.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x86>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800404c:	682b      	ldr	r3, [r5, #0]
 800404e:	05d9      	lsls	r1, r3, #23
 8004050:	d5f7      	bpl.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004052:	4d1b      	ldr	r5, [pc, #108]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004054:	68e3      	ldr	r3, [r4, #12]
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004056:	6f2a      	ldr	r2, [r5, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004058:	f412 7240 	ands.w	r2, r2, #768	; 0x300
 800405c:	d010      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800405e:	f403 7140 	and.w	r1, r3, #768	; 0x300
 8004062:	4291      	cmp	r1, r2
 8004064:	d00e      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004066:	6f2b      	ldr	r3, [r5, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8004068:	4a17      	ldr	r2, [pc, #92]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800406a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800406e:	2001      	movs	r0, #1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004070:	2100      	movs	r1, #0
      __HAL_RCC_BACKUPRESET_FORCE();
 8004072:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004074:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 8004076:	672b      	str	r3, [r5, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004078:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800407a:	07da      	lsls	r2, r3, #31
 800407c:	d4bc      	bmi.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 800407e:	68e3      	ldr	r3, [r4, #12]
 8004080:	f403 7240 	and.w	r2, r3, #768	; 0x300
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004084:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8004088:	d00d      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x11a>
 800408a:	490d      	ldr	r1, [pc, #52]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800408c:	688a      	ldr	r2, [r1, #8]
 800408e:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8004092:	608a      	str	r2, [r1, #8]
 8004094:	4a0a      	ldr	r2, [pc, #40]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004096:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8004098:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800409c:	430b      	orrs	r3, r1
  return HAL_OK;
 800409e:	2000      	movs	r0, #0
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040a0:	6713      	str	r3, [r2, #112]	; 0x70
}
 80040a2:	b003      	add	sp, #12
 80040a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040a6:	4806      	ldr	r0, [pc, #24]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80040a8:	6882      	ldr	r2, [r0, #8]
 80040aa:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80040ae:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 80040b2:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 80040b6:	430a      	orrs	r2, r1
 80040b8:	6082      	str	r2, [r0, #8]
 80040ba:	e7eb      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x108>
 80040bc:	42470068 	.word	0x42470068
 80040c0:	40023800 	.word	0x40023800
 80040c4:	40007000 	.word	0x40007000
 80040c8:	42470e40 	.word	0x42470e40

080040cc <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 80040cc:	2801      	cmp	r0, #1
 80040ce:	d001      	beq.n	80040d4 <HAL_RCCEx_GetPeriphCLKFreq+0x8>
 80040d0:	2000      	movs	r0, #0
      }
      break;
    }
  }
  return frequency;
}
 80040d2:	4770      	bx	lr
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80040d4:	4b0d      	ldr	r3, [pc, #52]	; (800410c <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 80040d6:	689a      	ldr	r2, [r3, #8]
      switch (srcclk)
 80040d8:	0211      	lsls	r1, r2, #8
 80040da:	d4f9      	bmi.n	80040d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80040dc:	685a      	ldr	r2, [r3, #4]
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80040de:	685b      	ldr	r3, [r3, #4]
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80040e0:	0252      	lsls	r2, r2, #9
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80040e2:	bf4c      	ite	mi
 80040e4:	480a      	ldrmi	r0, [pc, #40]	; (8004110 <HAL_RCCEx_GetPeriphCLKFreq+0x44>)
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80040e6:	480b      	ldrpl	r0, [pc, #44]	; (8004114 <HAL_RCCEx_GetPeriphCLKFreq+0x48>)
 80040e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040ec:	fbb0 f0f3 	udiv	r0, r0, r3
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80040f0:	4b06      	ldr	r3, [pc, #24]	; (800410c <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 80040f2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80040f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80040fa:	f3c2 1288 	ubfx	r2, r2, #6, #9
 80040fe:	fb00 f002 	mul.w	r0, r0, r2
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004102:	f3c3 7302 	ubfx	r3, r3, #28, #3
 8004106:	fbb0 f0f3 	udiv	r0, r0, r3
          break;
 800410a:	4770      	bx	lr
 800410c:	40023800 	.word	0x40023800
 8004110:	007a1200 	.word	0x007a1200
 8004114:	00f42400 	.word	0x00f42400

08004118 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8004118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800411c:	b082      	sub	sp, #8
 800411e:	4698      	mov	r8, r3
 8004120:	4616      	mov	r6, r2
 8004122:	460c      	mov	r4, r1
 8004124:	4607      	mov	r7, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004126:	f7fd fd5b 	bl	8001be0 <HAL_GetTick>
 800412a:	44b0      	add	r8, r6
 800412c:	eba8 0500 	sub.w	r5, r8, r0
  tmp_tickstart = HAL_GetTick();
 8004130:	f7fd fd56 	bl	8001be0 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004134:	4b27      	ldr	r3, [pc, #156]	; (80041d4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xbc>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 800413c:	fb05 f303 	mul.w	r3, r5, r3
  tmp_tickstart = HAL_GetTick();
 8004140:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004142:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004144:	1c73      	adds	r3, r6, #1
 8004146:	6839      	ldr	r1, [r7, #0]
 8004148:	d107      	bne.n	800415a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x42>
 800414a:	688b      	ldr	r3, [r1, #8]
 800414c:	ea34 0303 	bics.w	r3, r4, r3
 8004150:	d0fb      	beq.n	800414a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x32>
      }
      count--;
    }
  }

  return HAL_OK;
 8004152:	2000      	movs	r0, #0
}
 8004154:	b002      	add	sp, #8
 8004156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800415a:	688b      	ldr	r3, [r1, #8]
 800415c:	ea34 0303 	bics.w	r3, r4, r3
 8004160:	d1f7      	bne.n	8004152 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x3a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004162:	f7fd fd3d 	bl	8001be0 <HAL_GetTick>
 8004166:	eba0 0308 	sub.w	r3, r0, r8
 800416a:	42ab      	cmp	r3, r5
 800416c:	d208      	bcs.n	8004180 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x68>
      if(count == 0U)
 800416e:	9a01      	ldr	r2, [sp, #4]
      count--;
 8004170:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8004172:	2a00      	cmp	r2, #0
      count--;
 8004174:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8004178:	bf08      	it	eq
 800417a:	2500      	moveq	r5, #0
      count--;
 800417c:	9301      	str	r3, [sp, #4]
 800417e:	e7e1      	b.n	8004144 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2c>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004180:	e9d7 3100 	ldrd	r3, r1, [r7]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004184:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004186:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800418a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800418e:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004190:	d014      	beq.n	80041bc <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa4>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004192:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004194:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8004198:	d007      	beq.n	80041aa <SPI_WaitFlagStateUntilTimeout.constprop.0+0x92>
        hspi->State = HAL_SPI_STATE_READY;
 800419a:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 800419c:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 800419e:	f887 2051 	strb.w	r2, [r7, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80041a2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 80041a6:	2003      	movs	r0, #3
 80041a8:	e7d4      	b.n	8004154 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x3c>
          SPI_RESET_CRC(hspi);
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041b0:	601a      	str	r2, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041b8:	601a      	str	r2, [r3, #0]
 80041ba:	e7ee      	b.n	800419a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x82>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041bc:	68ba      	ldr	r2, [r7, #8]
 80041be:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80041c2:	d002      	beq.n	80041ca <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb2>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041c4:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80041c8:	d1e3      	bne.n	8004192 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x7a>
          __HAL_SPI_DISABLE(hspi);
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041d0:	601a      	str	r2, [r3, #0]
 80041d2:	e7de      	b.n	8004192 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x7a>
 80041d4:	20000000 	.word	0x20000000

080041d8 <HAL_SPI_Init>:
  if (hspi == NULL)
 80041d8:	2800      	cmp	r0, #0
 80041da:	d05b      	beq.n	8004294 <HAL_SPI_Init+0xbc>
{
 80041dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80041de:	6a47      	ldr	r7, [r0, #36]	; 0x24
 80041e0:	4604      	mov	r4, r0
 80041e2:	2f00      	cmp	r7, #0
 80041e4:	d046      	beq.n	8004274 <HAL_SPI_Init+0x9c>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80041e6:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80041e8:	e9c0 3304 	strd	r3, r3, [r0, #16]
  if (hspi->State == HAL_SPI_STATE_RESET)
 80041ec:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041f0:	2000      	movs	r0, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 80041f2:	f002 01ff 	and.w	r1, r2, #255	; 0xff
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041f6:	62a0      	str	r0, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80041f8:	2a00      	cmp	r2, #0
 80041fa:	d041      	beq.n	8004280 <HAL_SPI_Init+0xa8>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80041fc:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8004200:	68e1      	ldr	r1, [r4, #12]
 8004202:	69a6      	ldr	r6, [r4, #24]
 8004204:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004208:	f405 4504 	and.w	r5, r5, #33792	; 0x8400
 800420c:	6923      	ldr	r3, [r4, #16]
 800420e:	432a      	orrs	r2, r5
 8004210:	f401 6100 	and.w	r1, r1, #2048	; 0x800
 8004214:	430a      	orrs	r2, r1
 8004216:	f003 0102 	and.w	r1, r3, #2
 800421a:	6963      	ldr	r3, [r4, #20]
 800421c:	430a      	orrs	r2, r1
 800421e:	f003 0301 	and.w	r3, r3, #1
 8004222:	431a      	orrs	r2, r3
 8004224:	69e3      	ldr	r3, [r4, #28]
  __HAL_SPI_DISABLE(hspi);
 8004226:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004228:	f003 0e38 	and.w	lr, r3, #56	; 0x38
 800422c:	f406 7300 	and.w	r3, r6, #512	; 0x200
 8004230:	4313      	orrs	r3, r2
  hspi->State = HAL_SPI_STATE_BUSY;
 8004232:	2202      	movs	r2, #2
 8004234:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004238:	6a22      	ldr	r2, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800423a:	0c35      	lsrs	r5, r6, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800423c:	ea43 030e 	orr.w	r3, r3, lr
 8004240:	f002 0680 	and.w	r6, r2, #128	; 0x80
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004244:	f005 0204 	and.w	r2, r5, #4
  __HAL_SPI_DISABLE(hspi);
 8004248:	680d      	ldr	r5, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800424a:	f007 0710 	and.w	r7, r7, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800424e:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004250:	433a      	orrs	r2, r7
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004252:	4303      	orrs	r3, r0
  __HAL_SPI_DISABLE(hspi);
 8004254:	f025 0540 	bic.w	r5, r5, #64	; 0x40
 8004258:	600d      	str	r5, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800425a:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800425c:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800425e:	69cb      	ldr	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004260:	2200      	movs	r2, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004262:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 8004266:	2501      	movs	r5, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004268:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800426a:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800426c:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
  return HAL_OK;
 8004270:	4610      	mov	r0, r2
}
 8004272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004274:	6843      	ldr	r3, [r0, #4]
 8004276:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800427a:	d0b7      	beq.n	80041ec <HAL_SPI_Init+0x14>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800427c:	61c7      	str	r7, [r0, #28]
 800427e:	e7b5      	b.n	80041ec <HAL_SPI_Init+0x14>
    HAL_SPI_MspInit(hspi);
 8004280:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8004282:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8004286:	f7fd fa37 	bl	80016f8 <HAL_SPI_MspInit>
 800428a:	e9d4 7309 	ldrd	r7, r3, [r4, #36]	; 0x24
 800428e:	f403 5000 	and.w	r0, r3, #8192	; 0x2000
 8004292:	e7b3      	b.n	80041fc <HAL_SPI_Init+0x24>
    return HAL_ERROR;
 8004294:	2001      	movs	r0, #1
}
 8004296:	4770      	bx	lr

08004298 <HAL_SPI_Transmit>:
{
 8004298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800429c:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 800429e:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
 80042a2:	2801      	cmp	r0, #1
{
 80042a4:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 80042a6:	f000 8086 	beq.w	80043b6 <HAL_SPI_Transmit+0x11e>
 80042aa:	461d      	mov	r5, r3
 80042ac:	2301      	movs	r3, #1
 80042ae:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 80042b2:	4688      	mov	r8, r1
 80042b4:	4617      	mov	r7, r2
 80042b6:	f7fd fc93 	bl	8001be0 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 80042ba:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80042be:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 80042c0:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80042c2:	b2d8      	uxtb	r0, r3
 80042c4:	d009      	beq.n	80042da <HAL_SPI_Transmit+0x42>
    errorcode = HAL_BUSY;
 80042c6:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 80042c8:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 80042ca:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 80042cc:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80042d0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80042d4:	b002      	add	sp, #8
 80042d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 80042da:	f1b8 0f00 	cmp.w	r8, #0
 80042de:	d0f3      	beq.n	80042c8 <HAL_SPI_Transmit+0x30>
 80042e0:	2f00      	cmp	r7, #0
 80042e2:	d0f1      	beq.n	80042c8 <HAL_SPI_Transmit+0x30>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042e4:	68a2      	ldr	r2, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 80042e6:	6820      	ldr	r0, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80042e8:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80042ec:	2303      	movs	r3, #3
 80042ee:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042f2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042f6:	f04f 0300 	mov.w	r3, #0
 80042fa:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 80042fc:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 8004300:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004302:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004304:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004306:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004308:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800430a:	f000 8085 	beq.w	8004418 <HAL_SPI_Transmit+0x180>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800430e:	6802      	ldr	r2, [r0, #0]
 8004310:	0652      	lsls	r2, r2, #25
    __HAL_SPI_DISABLE(hspi);
 8004312:	4603      	mov	r3, r0
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004314:	d403      	bmi.n	800431e <HAL_SPI_Transmit+0x86>
    __HAL_SPI_ENABLE(hspi);
 8004316:	6802      	ldr	r2, [r0, #0]
 8004318:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800431c:	6002      	str	r2, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800431e:	68e2      	ldr	r2, [r4, #12]
 8004320:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8004324:	d04b      	beq.n	80043be <HAL_SPI_Transmit+0x126>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004326:	6863      	ldr	r3, [r4, #4]
 8004328:	2b00      	cmp	r3, #0
 800432a:	f000 8097 	beq.w	800445c <HAL_SPI_Transmit+0x1c4>
 800432e:	2f01      	cmp	r7, #1
 8004330:	f000 8094 	beq.w	800445c <HAL_SPI_Transmit+0x1c4>
    while (hspi->TxXferCount > 0U)
 8004334:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004336:	b29b      	uxth	r3, r3
 8004338:	b1ab      	cbz	r3, 8004366 <HAL_SPI_Transmit+0xce>
 800433a:	1c68      	adds	r0, r5, #1
 800433c:	f040 8083 	bne.w	8004446 <HAL_SPI_Transmit+0x1ae>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004340:	6823      	ldr	r3, [r4, #0]
 8004342:	689a      	ldr	r2, [r3, #8]
 8004344:	0791      	lsls	r1, r2, #30
 8004346:	f140 8094 	bpl.w	8004472 <HAL_SPI_Transmit+0x1da>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800434a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800434c:	7812      	ldrb	r2, [r2, #0]
 800434e:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8004350:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004352:	6b23      	ldr	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004354:	3a01      	subs	r2, #1
 8004356:	b292      	uxth	r2, r2
 8004358:	86e2      	strh	r2, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 800435a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800435c:	3301      	adds	r3, #1
    while (hspi->TxXferCount > 0U)
 800435e:	b292      	uxth	r2, r2
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004360:	6323      	str	r3, [r4, #48]	; 0x30
    while (hspi->TxXferCount > 0U)
 8004362:	2a00      	cmp	r2, #0
 8004364:	d1ec      	bne.n	8004340 <HAL_SPI_Transmit+0xa8>
 8004366:	6861      	ldr	r1, [r4, #4]
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004368:	4b5b      	ldr	r3, [pc, #364]	; (80044d8 <HAL_SPI_Transmit+0x240>)
 800436a:	4a5c      	ldr	r2, [pc, #368]	; (80044dc <HAL_SPI_Transmit+0x244>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	fba2 2303 	umull	r2, r3, r2, r3
 8004372:	0d5b      	lsrs	r3, r3, #21
 8004374:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004378:	fb02 f303 	mul.w	r3, r2, r3
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800437c:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004380:	9301      	str	r3, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004382:	d107      	bne.n	8004394 <HAL_SPI_Transmit+0xfc>
 8004384:	e098      	b.n	80044b8 <HAL_SPI_Transmit+0x220>
    {
      if (count == 0U)
      {
        break;
      }
      count--;
 8004386:	9b01      	ldr	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004388:	6822      	ldr	r2, [r4, #0]
      count--;
 800438a:	3b01      	subs	r3, #1
 800438c:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800438e:	6893      	ldr	r3, [r2, #8]
 8004390:	061b      	lsls	r3, r3, #24
 8004392:	d502      	bpl.n	800439a <HAL_SPI_Transmit+0x102>
      if (count == 0U)
 8004394:	9b01      	ldr	r3, [sp, #4]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1f5      	bne.n	8004386 <HAL_SPI_Transmit+0xee>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800439a:	68a3      	ldr	r3, [r4, #8]
 800439c:	b933      	cbnz	r3, 80043ac <HAL_SPI_Transmit+0x114>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800439e:	6822      	ldr	r2, [r4, #0]
 80043a0:	9300      	str	r3, [sp, #0]
 80043a2:	68d3      	ldr	r3, [r2, #12]
 80043a4:	9300      	str	r3, [sp, #0]
 80043a6:	6893      	ldr	r3, [r2, #8]
 80043a8:	9300      	str	r3, [sp, #0]
 80043aa:	9b00      	ldr	r3, [sp, #0]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043ac:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 80043ae:	3800      	subs	r0, #0
 80043b0:	bf18      	it	ne
 80043b2:	2001      	movne	r0, #1
error:
 80043b4:	e788      	b.n	80042c8 <HAL_SPI_Transmit+0x30>
  __HAL_LOCK(hspi);
 80043b6:	2002      	movs	r0, #2
}
 80043b8:	b002      	add	sp, #8
 80043ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043be:	6861      	ldr	r1, [r4, #4]
 80043c0:	2900      	cmp	r1, #0
 80043c2:	d176      	bne.n	80044b2 <HAL_SPI_Transmit+0x21a>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043c4:	4647      	mov	r7, r8
 80043c6:	f837 2b02 	ldrh.w	r2, [r7], #2
 80043ca:	60c2      	str	r2, [r0, #12]
      hspi->TxXferCount--;
 80043cc:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80043ce:	6327      	str	r7, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80043d0:	3a01      	subs	r2, #1
 80043d2:	b292      	uxth	r2, r2
 80043d4:	86e2      	strh	r2, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80043d6:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80043d8:	b292      	uxth	r2, r2
 80043da:	2a00      	cmp	r2, #0
 80043dc:	d0c4      	beq.n	8004368 <HAL_SPI_Transmit+0xd0>
 80043de:	1c6a      	adds	r2, r5, #1
 80043e0:	d15e      	bne.n	80044a0 <HAL_SPI_Transmit+0x208>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80043e2:	6883      	ldr	r3, [r0, #8]
 80043e4:	079f      	lsls	r7, r3, #30
 80043e6:	d50f      	bpl.n	8004408 <HAL_SPI_Transmit+0x170>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043e8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80043ea:	f832 3b02 	ldrh.w	r3, [r2], #2
 80043ee:	60c3      	str	r3, [r0, #12]
        hspi->TxXferCount--;
 80043f0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043f2:	6322      	str	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80043f4:	3b01      	subs	r3, #1
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80043fa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d0b1      	beq.n	8004366 <HAL_SPI_Transmit+0xce>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004402:	6883      	ldr	r3, [r0, #8]
 8004404:	079f      	lsls	r7, r3, #30
 8004406:	d4ef      	bmi.n	80043e8 <HAL_SPI_Transmit+0x150>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004408:	f7fd fbea 	bl	8001be0 <HAL_GetTick>
    while (hspi->TxXferCount > 0U)
 800440c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800440e:	b29b      	uxth	r3, r3
 8004410:	2b00      	cmp	r3, #0
 8004412:	d0a8      	beq.n	8004366 <HAL_SPI_Transmit+0xce>
 8004414:	6820      	ldr	r0, [r4, #0]
 8004416:	e7e4      	b.n	80043e2 <HAL_SPI_Transmit+0x14a>
    __HAL_SPI_DISABLE(hspi);
 8004418:	6803      	ldr	r3, [r0, #0]
 800441a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800441e:	6003      	str	r3, [r0, #0]
    SPI_1LINE_TX(hspi);
 8004420:	6803      	ldr	r3, [r0, #0]
 8004422:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004426:	6003      	str	r3, [r0, #0]
 8004428:	e771      	b.n	800430e <HAL_SPI_Transmit+0x76>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800442a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800442c:	7812      	ldrb	r2, [r2, #0]
 800442e:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8004430:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004432:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004434:	3b01      	subs	r3, #1
 8004436:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004438:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 800443a:	86e3      	strh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800443c:	6322      	str	r2, [r4, #48]	; 0x30
    while (hspi->TxXferCount > 0U)
 800443e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004440:	b29b      	uxth	r3, r3
 8004442:	2b00      	cmp	r3, #0
 8004444:	d08f      	beq.n	8004366 <HAL_SPI_Transmit+0xce>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004446:	6823      	ldr	r3, [r4, #0]
 8004448:	689a      	ldr	r2, [r3, #8]
 800444a:	0792      	lsls	r2, r2, #30
 800444c:	d4ed      	bmi.n	800442a <HAL_SPI_Transmit+0x192>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800444e:	f7fd fbc7 	bl	8001be0 <HAL_GetTick>
 8004452:	1b80      	subs	r0, r0, r6
 8004454:	42a8      	cmp	r0, r5
 8004456:	d3f2      	bcc.n	800443e <HAL_SPI_Transmit+0x1a6>
          errorcode = HAL_TIMEOUT;
 8004458:	2003      	movs	r0, #3
 800445a:	e735      	b.n	80042c8 <HAL_SPI_Transmit+0x30>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800445c:	f898 3000 	ldrb.w	r3, [r8]
 8004460:	7303      	strb	r3, [r0, #12]
      hspi->TxXferCount--;
 8004462:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004464:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004466:	3b01      	subs	r3, #1
 8004468:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800446a:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 800446c:	86e3      	strh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800446e:	6322      	str	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004470:	e760      	b.n	8004334 <HAL_SPI_Transmit+0x9c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004472:	f7fd fbb5 	bl	8001be0 <HAL_GetTick>
    while (hspi->TxXferCount > 0U)
 8004476:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004478:	b29b      	uxth	r3, r3
 800447a:	2b00      	cmp	r3, #0
 800447c:	f47f af60 	bne.w	8004340 <HAL_SPI_Transmit+0xa8>
 8004480:	e771      	b.n	8004366 <HAL_SPI_Transmit+0xce>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004482:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004484:	f832 1b02 	ldrh.w	r1, [r2], #2
 8004488:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount--;
 800448a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800448c:	6322      	str	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800448e:	3b01      	subs	r3, #1
 8004490:	b29b      	uxth	r3, r3
 8004492:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8004494:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004496:	b29b      	uxth	r3, r3
 8004498:	2b00      	cmp	r3, #0
 800449a:	f43f af64 	beq.w	8004366 <HAL_SPI_Transmit+0xce>
 800449e:	6823      	ldr	r3, [r4, #0]
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80044a0:	689a      	ldr	r2, [r3, #8]
 80044a2:	0791      	lsls	r1, r2, #30
 80044a4:	d4ed      	bmi.n	8004482 <HAL_SPI_Transmit+0x1ea>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044a6:	f7fd fb9b 	bl	8001be0 <HAL_GetTick>
 80044aa:	1b80      	subs	r0, r0, r6
 80044ac:	42a8      	cmp	r0, r5
 80044ae:	d3f1      	bcc.n	8004494 <HAL_SPI_Transmit+0x1fc>
 80044b0:	e7d2      	b.n	8004458 <HAL_SPI_Transmit+0x1c0>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044b2:	2f01      	cmp	r7, #1
 80044b4:	d18f      	bne.n	80043d6 <HAL_SPI_Transmit+0x13e>
 80044b6:	e785      	b.n	80043c4 <HAL_SPI_Transmit+0x12c>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80044b8:	4633      	mov	r3, r6
 80044ba:	462a      	mov	r2, r5
 80044bc:	2180      	movs	r1, #128	; 0x80
 80044be:	4620      	mov	r0, r4
 80044c0:	f7ff fe2a 	bl	8004118 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 80044c4:	2800      	cmp	r0, #0
 80044c6:	f43f af68 	beq.w	800439a <HAL_SPI_Transmit+0x102>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044ca:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044cc:	2220      	movs	r2, #32
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044ce:	4313      	orrs	r3, r2
 80044d0:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044d2:	6562      	str	r2, [r4, #84]	; 0x54
 80044d4:	e761      	b.n	800439a <HAL_SPI_Transmit+0x102>
 80044d6:	bf00      	nop
 80044d8:	20000000 	.word	0x20000000
 80044dc:	165e9f81 	.word	0x165e9f81

080044e0 <HAL_SPI_Transmit_DMA>:
{
 80044e0:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hspi);
 80044e2:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d057      	beq.n	800459a <HAL_SPI_Transmit_DMA+0xba>
  if (hspi->State != HAL_SPI_STATE_READY)
 80044ea:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 80044ee:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 80044f0:	2001      	movs	r0, #1
  if (hspi->State != HAL_SPI_STATE_READY)
 80044f2:	4283      	cmp	r3, r0
 80044f4:	b2dd      	uxtb	r5, r3
  __HAL_LOCK(hspi);
 80044f6:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
  if (hspi->State != HAL_SPI_STATE_READY)
 80044fa:	d005      	beq.n	8004508 <HAL_SPI_Transmit_DMA+0x28>
    errorcode = HAL_BUSY;
 80044fc:	2502      	movs	r5, #2
  __HAL_UNLOCK(hspi);
 80044fe:	2300      	movs	r3, #0
 8004500:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8004504:	4628      	mov	r0, r5
 8004506:	bd70      	pop	{r4, r5, r6, pc}
  if ((pData == NULL) || (Size == 0U))
 8004508:	2900      	cmp	r1, #0
 800450a:	d0f8      	beq.n	80044fe <HAL_SPI_Transmit_DMA+0x1e>
 800450c:	2a00      	cmp	r2, #0
 800450e:	d0f6      	beq.n	80044fe <HAL_SPI_Transmit_DMA+0x1e>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004510:	68a0      	ldr	r0, [r4, #8]
  hspi->TxXferSize  = Size;
 8004512:	86a2      	strh	r2, [r4, #52]	; 0x34
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004514:	2303      	movs	r3, #3
 8004516:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800451a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800451e:	f04f 0300 	mov.w	r3, #0
 8004522:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8004524:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 8004528:	86e2      	strh	r2, [r4, #54]	; 0x36
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800452a:	6321      	str	r1, [r4, #48]	; 0x30
    __HAL_SPI_DISABLE(hspi);
 800452c:	6822      	ldr	r2, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800452e:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004530:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004532:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004534:	d028      	beq.n	8004588 <HAL_SPI_Transmit_DMA+0xa8>
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004536:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8004538:	4e19      	ldr	r6, [pc, #100]	; (80045a0 <HAL_SPI_Transmit_DMA+0xc0>)
                                 hspi->TxXferCount))
 800453a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800453c:	6406      	str	r6, [r0, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800453e:	4e19      	ldr	r6, [pc, #100]	; (80045a4 <HAL_SPI_Transmit_DMA+0xc4>)
 8004540:	63c6      	str	r6, [r0, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004542:	4e19      	ldr	r6, [pc, #100]	; (80045a8 <HAL_SPI_Transmit_DMA+0xc8>)
 8004544:	64c6      	str	r6, [r0, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback = NULL;
 8004546:	2600      	movs	r6, #0
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004548:	320c      	adds	r2, #12
  hspi->hdmatx->XferAbortCallback = NULL;
 800454a:	6506      	str	r6, [r0, #80]	; 0x50
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800454c:	b29b      	uxth	r3, r3
 800454e:	f7fd fec3 	bl	80022d8 <HAL_DMA_Start_IT>
 8004552:	b988      	cbnz	r0, 8004578 <HAL_SPI_Transmit_DMA+0x98>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004554:	6823      	ldr	r3, [r4, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	0652      	lsls	r2, r2, #25
 800455a:	d403      	bmi.n	8004564 <HAL_SPI_Transmit_DMA+0x84>
    __HAL_SPI_ENABLE(hspi);
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004562:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004564:	685a      	ldr	r2, [r3, #4]
 8004566:	f042 0220 	orr.w	r2, r2, #32
 800456a:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800456c:	685a      	ldr	r2, [r3, #4]
 800456e:	f042 0202 	orr.w	r2, r2, #2
 8004572:	605a      	str	r2, [r3, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004574:	2500      	movs	r5, #0
 8004576:	e7c2      	b.n	80044fe <HAL_SPI_Transmit_DMA+0x1e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004578:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 800457a:	2201      	movs	r2, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800457c:	f043 0310 	orr.w	r3, r3, #16
 8004580:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 8004582:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
    goto error;
 8004586:	e7ba      	b.n	80044fe <HAL_SPI_Transmit_DMA+0x1e>
    __HAL_SPI_DISABLE(hspi);
 8004588:	6813      	ldr	r3, [r2, #0]
 800458a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800458e:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8004590:	6813      	ldr	r3, [r2, #0]
 8004592:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004596:	6013      	str	r3, [r2, #0]
 8004598:	e7cd      	b.n	8004536 <HAL_SPI_Transmit_DMA+0x56>
  __HAL_LOCK(hspi);
 800459a:	2502      	movs	r5, #2
}
 800459c:	4628      	mov	r0, r5
 800459e:	bd70      	pop	{r4, r5, r6, pc}
 80045a0:	080045b5 	.word	0x080045b5
 80045a4:	080045e9 	.word	0x080045e9
 80045a8:	080045c5 	.word	0x080045c5

080045ac <HAL_SPI_TxCpltCallback>:
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop

080045b0 <HAL_SPI_TxHalfCpltCallback>:
 80045b0:	4770      	bx	lr
 80045b2:	bf00      	nop

080045b4 <SPI_DMAHalfTransmitCplt>:
{
 80045b4:	b508      	push	{r3, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 80045b6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80045b8:	f7ff fffa 	bl	80045b0 <HAL_SPI_TxHalfCpltCallback>
}
 80045bc:	bd08      	pop	{r3, pc}
 80045be:	bf00      	nop

080045c0 <HAL_SPI_ErrorCallback>:
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop

080045c4 <SPI_DMAError>:
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80045c4:	6b80      	ldr	r0, [r0, #56]	; 0x38
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80045c6:	6802      	ldr	r2, [r0, #0]
{
 80045c8:	b508      	push	{r3, lr}
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80045ca:	6853      	ldr	r3, [r2, #4]
 80045cc:	f023 0303 	bic.w	r3, r3, #3
 80045d0:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80045d2:	6d43      	ldr	r3, [r0, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80045d4:	2101      	movs	r1, #1
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80045d6:	f043 0310 	orr.w	r3, r3, #16
 80045da:	6543      	str	r3, [r0, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80045dc:	f880 1051 	strb.w	r1, [r0, #81]	; 0x51
  HAL_SPI_ErrorCallback(hspi);
 80045e0:	f7ff ffee 	bl	80045c0 <HAL_SPI_ErrorCallback>
}
 80045e4:	bd08      	pop	{r3, pc}
 80045e6:	bf00      	nop

080045e8 <SPI_DMATransmitCplt>:
{
 80045e8:	b570      	push	{r4, r5, r6, lr}
 80045ea:	4605      	mov	r5, r0
 80045ec:	b082      	sub	sp, #8
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80045ee:	6b84      	ldr	r4, [r0, #56]	; 0x38
  tickstart = HAL_GetTick();
 80045f0:	f7fd faf6 	bl	8001be0 <HAL_GetTick>
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80045f4:	682b      	ldr	r3, [r5, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	05d2      	lsls	r2, r2, #23
 80045fa:	d42e      	bmi.n	800465a <SPI_DMATransmitCplt+0x72>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80045fc:	6822      	ldr	r2, [r4, #0]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80045fe:	4b25      	ldr	r3, [pc, #148]	; (8004694 <SPI_DMATransmitCplt+0xac>)
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004600:	6855      	ldr	r5, [r2, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004602:	6819      	ldr	r1, [r3, #0]
 8004604:	4b24      	ldr	r3, [pc, #144]	; (8004698 <SPI_DMATransmitCplt+0xb0>)
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004606:	f025 0520 	bic.w	r5, r5, #32
 800460a:	6055      	str	r5, [r2, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800460c:	6856      	ldr	r6, [r2, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800460e:	fba3 3101 	umull	r3, r1, r3, r1
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004612:	6863      	ldr	r3, [r4, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004614:	0d49      	lsrs	r1, r1, #21
 8004616:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800461a:	f026 0602 	bic.w	r6, r6, #2
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800461e:	fb05 f101 	mul.w	r1, r5, r1
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004622:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004626:	6056      	str	r6, [r2, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004628:	9101      	str	r1, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800462a:	d121      	bne.n	8004670 <SPI_DMATransmitCplt+0x88>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800462c:	4603      	mov	r3, r0
 800462e:	2264      	movs	r2, #100	; 0x64
 8004630:	2180      	movs	r1, #128	; 0x80
 8004632:	4620      	mov	r0, r4
 8004634:	f7ff fd70 	bl	8004118 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8004638:	bb18      	cbnz	r0, 8004682 <SPI_DMATransmitCplt+0x9a>
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800463a:	68a3      	ldr	r3, [r4, #8]
 800463c:	b933      	cbnz	r3, 800464c <SPI_DMATransmitCplt+0x64>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800463e:	6822      	ldr	r2, [r4, #0]
 8004640:	9300      	str	r3, [sp, #0]
 8004642:	68d3      	ldr	r3, [r2, #12]
 8004644:	9300      	str	r3, [sp, #0]
 8004646:	6893      	ldr	r3, [r2, #8]
 8004648:	9300      	str	r3, [sp, #0]
 800464a:	9b00      	ldr	r3, [sp, #0]
    hspi->State = HAL_SPI_STATE_READY;
 800464c:	2301      	movs	r3, #1
    hspi->TxXferCount = 0U;
 800464e:	2200      	movs	r2, #0
 8004650:	86e2      	strh	r2, [r4, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8004652:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004656:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004658:	b973      	cbnz	r3, 8004678 <SPI_DMATransmitCplt+0x90>
  HAL_SPI_TxCpltCallback(hspi);
 800465a:	4620      	mov	r0, r4
 800465c:	f7ff ffa6 	bl	80045ac <HAL_SPI_TxCpltCallback>
}
 8004660:	b002      	add	sp, #8
 8004662:	bd70      	pop	{r4, r5, r6, pc}
      count--;
 8004664:	9b01      	ldr	r3, [sp, #4]
 8004666:	3b01      	subs	r3, #1
 8004668:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800466a:	6893      	ldr	r3, [r2, #8]
 800466c:	061b      	lsls	r3, r3, #24
 800466e:	d5e4      	bpl.n	800463a <SPI_DMATransmitCplt+0x52>
      if (count == 0U)
 8004670:	9b01      	ldr	r3, [sp, #4]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d1f6      	bne.n	8004664 <SPI_DMATransmitCplt+0x7c>
 8004676:	e7e0      	b.n	800463a <SPI_DMATransmitCplt+0x52>
      HAL_SPI_ErrorCallback(hspi);
 8004678:	4620      	mov	r0, r4
 800467a:	f7ff ffa1 	bl	80045c0 <HAL_SPI_ErrorCallback>
}
 800467e:	b002      	add	sp, #8
 8004680:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004682:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004684:	f043 0320 	orr.w	r3, r3, #32
 8004688:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800468a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800468c:	f043 0320 	orr.w	r3, r3, #32
 8004690:	6563      	str	r3, [r4, #84]	; 0x54
 8004692:	e7d2      	b.n	800463a <SPI_DMATransmitCplt+0x52>
 8004694:	20000000 	.word	0x20000000
 8004698:	165e9f81 	.word	0x165e9f81

0800469c <HAL_SPI_IRQHandler>:
{
 800469c:	b530      	push	{r4, r5, lr}
  uint32_t itsource = hspi->Instance->CR2;
 800469e:	6802      	ldr	r2, [r0, #0]
 80046a0:	6851      	ldr	r1, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 80046a2:	6893      	ldr	r3, [r2, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80046a4:	f013 0f40 	tst.w	r3, #64	; 0x40
{
 80046a8:	b085      	sub	sp, #20
 80046aa:	4604      	mov	r4, r0
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80046ac:	f3c3 1580 	ubfx	r5, r3, #6, #1
 80046b0:	d105      	bne.n	80046be <HAL_SPI_IRQHandler+0x22>
 80046b2:	f013 0f01 	tst.w	r3, #1
 80046b6:	d002      	beq.n	80046be <HAL_SPI_IRQHandler+0x22>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80046b8:	f011 0f40 	tst.w	r1, #64	; 0x40
 80046bc:	d17a      	bne.n	80047b4 <HAL_SPI_IRQHandler+0x118>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80046be:	0798      	lsls	r0, r3, #30
 80046c0:	d501      	bpl.n	80046c6 <HAL_SPI_IRQHandler+0x2a>
 80046c2:	0608      	lsls	r0, r1, #24
 80046c4:	d470      	bmi.n	80047a8 <HAL_SPI_IRQHandler+0x10c>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80046c6:	f013 0f20 	tst.w	r3, #32
 80046ca:	f3c3 1040 	ubfx	r0, r3, #5, #1
 80046ce:	d049      	beq.n	8004764 <HAL_SPI_IRQHandler+0xc8>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80046d0:	0688      	lsls	r0, r1, #26
 80046d2:	d545      	bpl.n	8004760 <HAL_SPI_IRQHandler+0xc4>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80046d4:	b175      	cbz	r5, 80046f4 <HAL_SPI_IRQHandler+0x58>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80046d6:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 80046da:	2803      	cmp	r0, #3
 80046dc:	d06c      	beq.n	80047b8 <HAL_SPI_IRQHandler+0x11c>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80046de:	6d60      	ldr	r0, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046e0:	2500      	movs	r5, #0
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80046e2:	f040 0004 	orr.w	r0, r0, #4
 80046e6:	6560      	str	r0, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046e8:	9500      	str	r5, [sp, #0]
 80046ea:	68d0      	ldr	r0, [r2, #12]
 80046ec:	9000      	str	r0, [sp, #0]
 80046ee:	6890      	ldr	r0, [r2, #8]
 80046f0:	9000      	str	r0, [sp, #0]
 80046f2:	9800      	ldr	r0, [sp, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80046f4:	6d60      	ldr	r0, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80046f6:	2500      	movs	r5, #0
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80046f8:	f040 0001 	orr.w	r0, r0, #1
 80046fc:	6560      	str	r0, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80046fe:	9502      	str	r5, [sp, #8]
 8004700:	6890      	ldr	r0, [r2, #8]
 8004702:	9002      	str	r0, [sp, #8]
 8004704:	6810      	ldr	r0, [r2, #0]
 8004706:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 800470a:	6010      	str	r0, [r2, #0]
 800470c:	9802      	ldr	r0, [sp, #8]
 800470e:	f3c3 2300 	ubfx	r3, r3, #8, #1
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004712:	2b00      	cmp	r3, #0
 8004714:	d13e      	bne.n	8004794 <HAL_SPI_IRQHandler+0xf8>
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004716:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004718:	b313      	cbz	r3, 8004760 <HAL_SPI_IRQHandler+0xc4>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800471a:	6853      	ldr	r3, [r2, #4]
 800471c:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8004720:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8004722:	2001      	movs	r0, #1
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004724:	078b      	lsls	r3, r1, #30
      hspi->State = HAL_SPI_STATE_READY;
 8004726:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800472a:	d04d      	beq.n	80047c8 <HAL_SPI_IRQHandler+0x12c>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800472c:	6853      	ldr	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 800472e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004730:	f023 0303 	bic.w	r3, r3, #3
 8004734:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 8004736:	b140      	cbz	r0, 800474a <HAL_SPI_IRQHandler+0xae>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004738:	4b25      	ldr	r3, [pc, #148]	; (80047d0 <HAL_SPI_IRQHandler+0x134>)
 800473a:	6503      	str	r3, [r0, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800473c:	f7fd fe52 	bl	80023e4 <HAL_DMA_Abort_IT>
 8004740:	b118      	cbz	r0, 800474a <HAL_SPI_IRQHandler+0xae>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004742:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004744:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004748:	6563      	str	r3, [r4, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800474a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800474c:	b140      	cbz	r0, 8004760 <HAL_SPI_IRQHandler+0xc4>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800474e:	4b20      	ldr	r3, [pc, #128]	; (80047d0 <HAL_SPI_IRQHandler+0x134>)
 8004750:	6503      	str	r3, [r0, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004752:	f7fd fe47 	bl	80023e4 <HAL_DMA_Abort_IT>
 8004756:	b118      	cbz	r0, 8004760 <HAL_SPI_IRQHandler+0xc4>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004758:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800475a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800475e:	6563      	str	r3, [r4, #84]	; 0x54
}
 8004760:	b005      	add	sp, #20
 8004762:	bd30      	pop	{r4, r5, pc}
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004764:	b195      	cbz	r5, 800478c <HAL_SPI_IRQHandler+0xf0>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004766:	068d      	lsls	r5, r1, #26
 8004768:	d5fa      	bpl.n	8004760 <HAL_SPI_IRQHandler+0xc4>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800476a:	f894 5051 	ldrb.w	r5, [r4, #81]	; 0x51
 800476e:	2d03      	cmp	r5, #3
 8004770:	d022      	beq.n	80047b8 <HAL_SPI_IRQHandler+0x11c>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004772:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8004774:	f045 0504 	orr.w	r5, r5, #4
 8004778:	6565      	str	r5, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800477a:	9000      	str	r0, [sp, #0]
 800477c:	68d0      	ldr	r0, [r2, #12]
 800477e:	9000      	str	r0, [sp, #0]
 8004780:	6890      	ldr	r0, [r2, #8]
 8004782:	9000      	str	r0, [sp, #0]
 8004784:	9800      	ldr	r0, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004786:	f3c3 2300 	ubfx	r3, r3, #8, #1
 800478a:	e7c2      	b.n	8004712 <HAL_SPI_IRQHandler+0x76>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800478c:	05dd      	lsls	r5, r3, #23
 800478e:	d5e7      	bpl.n	8004760 <HAL_SPI_IRQHandler+0xc4>
 8004790:	068b      	lsls	r3, r1, #26
 8004792:	d5e5      	bpl.n	8004760 <HAL_SPI_IRQHandler+0xc4>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004794:	6d63      	ldr	r3, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004796:	2000      	movs	r0, #0
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004798:	f043 0308 	orr.w	r3, r3, #8
 800479c:	6563      	str	r3, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800479e:	9003      	str	r0, [sp, #12]
 80047a0:	6893      	ldr	r3, [r2, #8]
 80047a2:	9303      	str	r3, [sp, #12]
 80047a4:	9b03      	ldr	r3, [sp, #12]
 80047a6:	e7b6      	b.n	8004716 <HAL_SPI_IRQHandler+0x7a>
    hspi->TxISR(hspi);
 80047a8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80047aa:	4620      	mov	r0, r4
}
 80047ac:	b005      	add	sp, #20
 80047ae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    hspi->TxISR(hspi);
 80047b2:	4718      	bx	r3
    hspi->RxISR(hspi);
 80047b4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80047b6:	e7f9      	b.n	80047ac <HAL_SPI_IRQHandler+0x110>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047b8:	2300      	movs	r3, #0
 80047ba:	9301      	str	r3, [sp, #4]
 80047bc:	68d3      	ldr	r3, [r2, #12]
 80047be:	9301      	str	r3, [sp, #4]
 80047c0:	6893      	ldr	r3, [r2, #8]
 80047c2:	9301      	str	r3, [sp, #4]
 80047c4:	9b01      	ldr	r3, [sp, #4]
        return;
 80047c6:	e7cb      	b.n	8004760 <HAL_SPI_IRQHandler+0xc4>
        HAL_SPI_ErrorCallback(hspi);
 80047c8:	4620      	mov	r0, r4
 80047ca:	f7ff fef9 	bl	80045c0 <HAL_SPI_ErrorCallback>
 80047ce:	e7c7      	b.n	8004760 <HAL_SPI_IRQHandler+0xc4>
 80047d0:	080047d5 	.word	0x080047d5

080047d4 <SPI_DMAAbortOnError>:
{
 80047d4:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80047d6:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = 0U;
 80047d8:	2300      	movs	r3, #0
 80047da:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80047dc:	86c3      	strh	r3, [r0, #54]	; 0x36
  HAL_SPI_ErrorCallback(hspi);
 80047de:	f7ff feef 	bl	80045c0 <HAL_SPI_ErrorCallback>
}
 80047e2:	bd08      	pop	{r3, pc}

080047e4 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047e4:	2800      	cmp	r0, #0
 80047e6:	f000 8087 	beq.w	80048f8 <HAL_TIM_Base_Init+0x114>
{
 80047ea:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047ec:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80047f0:	4604      	mov	r4, r0
 80047f2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d079      	beq.n	80048ee <HAL_TIM_Base_Init+0x10a>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047fa:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047fc:	493f      	ldr	r1, [pc, #252]	; (80048fc <HAL_TIM_Base_Init+0x118>)
  htim->State = HAL_TIM_STATE_BUSY;
 80047fe:	2302      	movs	r3, #2
 8004800:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004804:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8004806:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004808:	d05d      	beq.n	80048c6 <HAL_TIM_Base_Init+0xe2>
 800480a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800480e:	d031      	beq.n	8004874 <HAL_TIM_Base_Init+0x90>
 8004810:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 8004814:	428a      	cmp	r2, r1
 8004816:	d02d      	beq.n	8004874 <HAL_TIM_Base_Init+0x90>
 8004818:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800481c:	428a      	cmp	r2, r1
 800481e:	d029      	beq.n	8004874 <HAL_TIM_Base_Init+0x90>
 8004820:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004824:	428a      	cmp	r2, r1
 8004826:	d025      	beq.n	8004874 <HAL_TIM_Base_Init+0x90>
 8004828:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 800482c:	428a      	cmp	r2, r1
 800482e:	d04a      	beq.n	80048c6 <HAL_TIM_Base_Init+0xe2>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004830:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 8004834:	428a      	cmp	r2, r1
 8004836:	d021      	beq.n	800487c <HAL_TIM_Base_Init+0x98>
 8004838:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800483c:	428a      	cmp	r2, r1
 800483e:	d01d      	beq.n	800487c <HAL_TIM_Base_Init+0x98>
 8004840:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004844:	428a      	cmp	r2, r1
 8004846:	d019      	beq.n	800487c <HAL_TIM_Base_Init+0x98>
 8004848:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 800484c:	428a      	cmp	r2, r1
 800484e:	d015      	beq.n	800487c <HAL_TIM_Base_Init+0x98>
 8004850:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004854:	428a      	cmp	r2, r1
 8004856:	d011      	beq.n	800487c <HAL_TIM_Base_Init+0x98>
 8004858:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800485c:	428a      	cmp	r2, r1
 800485e:	d00d      	beq.n	800487c <HAL_TIM_Base_Init+0x98>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004860:	69a5      	ldr	r5, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004862:	68e0      	ldr	r0, [r4, #12]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004864:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004866:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800486a:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800486c:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800486e:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004870:	6291      	str	r1, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004872:	e010      	b.n	8004896 <HAL_TIM_Base_Init+0xb2>
    tmpcr1 |= Structure->CounterMode;
 8004874:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800487a:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800487c:	6925      	ldr	r5, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800487e:	69a1      	ldr	r1, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004880:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004882:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004886:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004888:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800488c:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 800488e:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8004890:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004892:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004894:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004896:	2301      	movs	r3, #1
 8004898:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800489a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800489e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80048a2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80048a6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80048aa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048ae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80048b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048b6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80048ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80048be:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80048c2:	2000      	movs	r0, #0
}
 80048c4:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 80048c6:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048c8:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048ca:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80048d0:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 80048d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048d6:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048dc:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 80048de:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048e0:	68e3      	ldr	r3, [r4, #12]
 80048e2:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80048e4:	6863      	ldr	r3, [r4, #4]
 80048e6:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80048e8:	6963      	ldr	r3, [r4, #20]
 80048ea:	6313      	str	r3, [r2, #48]	; 0x30
 80048ec:	e7d3      	b.n	8004896 <HAL_TIM_Base_Init+0xb2>
    htim->Lock = HAL_UNLOCKED;
 80048ee:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80048f2:	f7fc ffaf 	bl	8001854 <HAL_TIM_Base_MspInit>
 80048f6:	e780      	b.n	80047fa <HAL_TIM_Base_Init+0x16>
    return HAL_ERROR;
 80048f8:	2001      	movs	r0, #1
}
 80048fa:	4770      	bx	lr
 80048fc:	40010000 	.word	0x40010000

08004900 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004900:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004904:	2b01      	cmp	r3, #1
 8004906:	d12f      	bne.n	8004968 <HAL_TIM_Base_Start_IT+0x68>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004908:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800490a:	4919      	ldr	r1, [pc, #100]	; (8004970 <HAL_TIM_Base_Start_IT+0x70>)
  htim->State = HAL_TIM_STATE_BUSY;
 800490c:	2202      	movs	r2, #2
 800490e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004912:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004914:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004916:	f042 0201 	orr.w	r2, r2, #1
 800491a:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800491c:	d019      	beq.n	8004952 <HAL_TIM_Base_Start_IT+0x52>
 800491e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004922:	d016      	beq.n	8004952 <HAL_TIM_Base_Start_IT+0x52>
 8004924:	4a13      	ldr	r2, [pc, #76]	; (8004974 <HAL_TIM_Base_Start_IT+0x74>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d013      	beq.n	8004952 <HAL_TIM_Base_Start_IT+0x52>
 800492a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800492e:	4293      	cmp	r3, r2
 8004930:	d00f      	beq.n	8004952 <HAL_TIM_Base_Start_IT+0x52>
 8004932:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004936:	4293      	cmp	r3, r2
 8004938:	d00b      	beq.n	8004952 <HAL_TIM_Base_Start_IT+0x52>
 800493a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800493e:	4293      	cmp	r3, r2
 8004940:	d007      	beq.n	8004952 <HAL_TIM_Base_Start_IT+0x52>
 8004942:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8004946:	4293      	cmp	r3, r2
 8004948:	d003      	beq.n	8004952 <HAL_TIM_Base_Start_IT+0x52>
 800494a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800494e:	4293      	cmp	r3, r2
 8004950:	d104      	bne.n	800495c <HAL_TIM_Base_Start_IT+0x5c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004952:	689a      	ldr	r2, [r3, #8]
 8004954:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004958:	2a06      	cmp	r2, #6
 800495a:	d007      	beq.n	800496c <HAL_TIM_Base_Start_IT+0x6c>
    __HAL_TIM_ENABLE(htim);
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	f042 0201 	orr.w	r2, r2, #1
 8004962:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004964:	2000      	movs	r0, #0
 8004966:	4770      	bx	lr
    return HAL_ERROR;
 8004968:	2001      	movs	r0, #1
 800496a:	4770      	bx	lr
  return HAL_OK;
 800496c:	2000      	movs	r0, #0
}
 800496e:	4770      	bx	lr
 8004970:	40010000 	.word	0x40010000
 8004974:	40000400 	.word	0x40000400

08004978 <HAL_TIM_PeriodElapsedCallback>:
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop

0800497c <HAL_TIM_OC_DelayElapsedCallback>:
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop

08004980 <HAL_TIM_IC_CaptureCallback>:
 8004980:	4770      	bx	lr
 8004982:	bf00      	nop

08004984 <HAL_TIM_PWM_PulseFinishedCallback>:
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop

08004988 <HAL_TIM_TriggerCallback>:
 8004988:	4770      	bx	lr
 800498a:	bf00      	nop

0800498c <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800498c:	6803      	ldr	r3, [r0, #0]
 800498e:	691a      	ldr	r2, [r3, #16]
 8004990:	0791      	lsls	r1, r2, #30
{
 8004992:	b510      	push	{r4, lr}
 8004994:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004996:	d502      	bpl.n	800499e <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004998:	68da      	ldr	r2, [r3, #12]
 800499a:	0792      	lsls	r2, r2, #30
 800499c:	d45f      	bmi.n	8004a5e <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800499e:	691a      	ldr	r2, [r3, #16]
 80049a0:	0750      	lsls	r0, r2, #29
 80049a2:	d502      	bpl.n	80049aa <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80049a4:	68da      	ldr	r2, [r3, #12]
 80049a6:	0751      	lsls	r1, r2, #29
 80049a8:	d446      	bmi.n	8004a38 <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80049aa:	691a      	ldr	r2, [r3, #16]
 80049ac:	0712      	lsls	r2, r2, #28
 80049ae:	d502      	bpl.n	80049b6 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80049b0:	68da      	ldr	r2, [r3, #12]
 80049b2:	0710      	lsls	r0, r2, #28
 80049b4:	d42e      	bmi.n	8004a14 <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80049b6:	691a      	ldr	r2, [r3, #16]
 80049b8:	06d2      	lsls	r2, r2, #27
 80049ba:	d502      	bpl.n	80049c2 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80049bc:	68da      	ldr	r2, [r3, #12]
 80049be:	06d0      	lsls	r0, r2, #27
 80049c0:	d418      	bmi.n	80049f4 <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049c2:	691a      	ldr	r2, [r3, #16]
 80049c4:	07d1      	lsls	r1, r2, #31
 80049c6:	d502      	bpl.n	80049ce <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049c8:	68da      	ldr	r2, [r3, #12]
 80049ca:	07d2      	lsls	r2, r2, #31
 80049cc:	d45d      	bmi.n	8004a8a <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80049ce:	691a      	ldr	r2, [r3, #16]
 80049d0:	0610      	lsls	r0, r2, #24
 80049d2:	d502      	bpl.n	80049da <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049d4:	68da      	ldr	r2, [r3, #12]
 80049d6:	0611      	lsls	r1, r2, #24
 80049d8:	d45f      	bmi.n	8004a9a <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80049da:	691a      	ldr	r2, [r3, #16]
 80049dc:	0652      	lsls	r2, r2, #25
 80049de:	d502      	bpl.n	80049e6 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80049e0:	68da      	ldr	r2, [r3, #12]
 80049e2:	0650      	lsls	r0, r2, #25
 80049e4:	d461      	bmi.n	8004aaa <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80049e6:	691a      	ldr	r2, [r3, #16]
 80049e8:	0691      	lsls	r1, r2, #26
 80049ea:	d502      	bpl.n	80049f2 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80049ec:	68da      	ldr	r2, [r3, #12]
 80049ee:	0692      	lsls	r2, r2, #26
 80049f0:	d443      	bmi.n	8004a7a <HAL_TIM_IRQHandler+0xee>
}
 80049f2:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80049f4:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049f8:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80049fa:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049fc:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049fe:	69db      	ldr	r3, [r3, #28]
 8004a00:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8004a04:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a06:	d064      	beq.n	8004ad2 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8004a08:	f7ff ffba 	bl	8004980 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	6823      	ldr	r3, [r4, #0]
 8004a10:	7722      	strb	r2, [r4, #28]
 8004a12:	e7d6      	b.n	80049c2 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a14:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a18:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a1a:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a1c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a1e:	69db      	ldr	r3, [r3, #28]
 8004a20:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8004a22:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a24:	d152      	bne.n	8004acc <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a26:	f7ff ffa9 	bl	800497c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a2a:	4620      	mov	r0, r4
 8004a2c:	f7ff ffaa 	bl	8004984 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a30:	2200      	movs	r2, #0
 8004a32:	6823      	ldr	r3, [r4, #0]
 8004a34:	7722      	strb	r2, [r4, #28]
 8004a36:	e7be      	b.n	80049b6 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a38:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a3c:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a3e:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a40:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a42:	699b      	ldr	r3, [r3, #24]
 8004a44:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8004a48:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a4a:	d13c      	bne.n	8004ac6 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a4c:	f7ff ff96 	bl	800497c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a50:	4620      	mov	r0, r4
 8004a52:	f7ff ff97 	bl	8004984 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a56:	2200      	movs	r2, #0
 8004a58:	6823      	ldr	r3, [r4, #0]
 8004a5a:	7722      	strb	r2, [r4, #28]
 8004a5c:	e7a5      	b.n	80049aa <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a5e:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a62:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a64:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a66:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a68:	699b      	ldr	r3, [r3, #24]
 8004a6a:	079b      	lsls	r3, r3, #30
 8004a6c:	d025      	beq.n	8004aba <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8004a6e:	f7ff ff87 	bl	8004980 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a72:	2200      	movs	r2, #0
 8004a74:	6823      	ldr	r3, [r4, #0]
 8004a76:	7722      	strb	r2, [r4, #28]
 8004a78:	e791      	b.n	800499e <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a7a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8004a7e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a80:	611a      	str	r2, [r3, #16]
}
 8004a82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8004a86:	f000 b86d 	b.w	8004b64 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a8a:	f06f 0201 	mvn.w	r2, #1
 8004a8e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a90:	4620      	mov	r0, r4
 8004a92:	f7ff ff71 	bl	8004978 <HAL_TIM_PeriodElapsedCallback>
 8004a96:	6823      	ldr	r3, [r4, #0]
 8004a98:	e799      	b.n	80049ce <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a9a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a9e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004aa0:	4620      	mov	r0, r4
 8004aa2:	f000 f861 	bl	8004b68 <HAL_TIMEx_BreakCallback>
 8004aa6:	6823      	ldr	r3, [r4, #0]
 8004aa8:	e797      	b.n	80049da <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004aaa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004aae:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004ab0:	4620      	mov	r0, r4
 8004ab2:	f7ff ff69 	bl	8004988 <HAL_TIM_TriggerCallback>
 8004ab6:	6823      	ldr	r3, [r4, #0]
 8004ab8:	e795      	b.n	80049e6 <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aba:	f7ff ff5f 	bl	800497c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004abe:	4620      	mov	r0, r4
 8004ac0:	f7ff ff60 	bl	8004984 <HAL_TIM_PWM_PulseFinishedCallback>
 8004ac4:	e7d5      	b.n	8004a72 <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 8004ac6:	f7ff ff5b 	bl	8004980 <HAL_TIM_IC_CaptureCallback>
 8004aca:	e7c4      	b.n	8004a56 <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 8004acc:	f7ff ff58 	bl	8004980 <HAL_TIM_IC_CaptureCallback>
 8004ad0:	e7ae      	b.n	8004a30 <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ad2:	f7ff ff53 	bl	800497c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ad6:	4620      	mov	r0, r4
 8004ad8:	f7ff ff54 	bl	8004984 <HAL_TIM_PWM_PulseFinishedCallback>
 8004adc:	e796      	b.n	8004a0c <HAL_TIM_IRQHandler+0x80>
 8004ade:	bf00      	nop

08004ae0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ae0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d036      	beq.n	8004b56 <HAL_TIMEx_MasterConfigSynchronization+0x76>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ae8:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004aea:	2202      	movs	r2, #2
{
 8004aec:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8004aee:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8004af2:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004af4:	680c      	ldr	r4, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004af6:	4d19      	ldr	r5, [pc, #100]	; (8004b5c <HAL_TIMEx_MasterConfigSynchronization+0x7c>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8004af8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004afc:	4322      	orrs	r2, r4
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004afe:	42ab      	cmp	r3, r5
  tmpsmcr = htim->Instance->SMCR;
 8004b00:	689c      	ldr	r4, [r3, #8]
  htim->Instance->CR2 = tmpcr2;
 8004b02:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b04:	d019      	beq.n	8004b3a <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 8004b06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b0a:	d016      	beq.n	8004b3a <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 8004b0c:	4a14      	ldr	r2, [pc, #80]	; (8004b60 <HAL_TIMEx_MasterConfigSynchronization+0x80>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d013      	beq.n	8004b3a <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 8004b12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d00f      	beq.n	8004b3a <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 8004b1a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d00b      	beq.n	8004b3a <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 8004b22:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d007      	beq.n	8004b3a <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 8004b2a:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d003      	beq.n	8004b3a <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 8004b32:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d104      	bne.n	8004b44 <HAL_TIMEx_MasterConfigSynchronization+0x64>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b3a:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b3c:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b40:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b42:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8004b44:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8004b46:	2201      	movs	r2, #1
 8004b48:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004b4c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8004b50:	bc30      	pop	{r4, r5}
  return HAL_OK;
 8004b52:	4618      	mov	r0, r3
}
 8004b54:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004b56:	2002      	movs	r0, #2
}
 8004b58:	4770      	bx	lr
 8004b5a:	bf00      	nop
 8004b5c:	40010000 	.word	0x40010000
 8004b60:	40000400 	.word	0x40000400

08004b64 <HAL_TIMEx_CommutCallback>:
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop

08004b68 <HAL_TIMEx_BreakCallback>:
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop

08004b6c <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b6c:	2800      	cmp	r0, #0
 8004b6e:	f000 8090 	beq.w	8004c92 <HAL_UART_Init+0x126>
{
 8004b72:	b570      	push	{r4, r5, r6, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b74:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004b78:	4604      	mov	r4, r0
 8004b7a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	f000 8082 	beq.w	8004c88 <HAL_UART_Init+0x11c>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b84:	6823      	ldr	r3, [r4, #0]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b86:	6926      	ldr	r6, [r4, #16]
  huart->gState = HAL_UART_STATE_BUSY;
 8004b88:	2224      	movs	r2, #36	; 0x24
 8004b8a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8004b8e:	68d8      	ldr	r0, [r3, #12]
 8004b90:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b94:	e9d4 2502 	ldrd	r2, r5, [r4, #8]
  __HAL_UART_DISABLE(huart);
 8004b98:	60d8      	str	r0, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b9a:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b9c:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b9e:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8004ba2:	4329      	orrs	r1, r5
 8004ba4:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 8004ba6:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ba8:	6965      	ldr	r5, [r4, #20]
 8004baa:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR1,
 8004bac:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004bb0:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8004bb2:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004bb6:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8004bb8:	430a      	orrs	r2, r1
 8004bba:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004bbc:	695a      	ldr	r2, [r3, #20]
 8004bbe:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004bc0:	4935      	ldr	r1, [pc, #212]	; (8004c98 <HAL_UART_Init+0x12c>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004bc2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004bc6:	4302      	orrs	r2, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004bc8:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004bca:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004bcc:	d035      	beq.n	8004c3a <HAL_UART_Init+0xce>
 8004bce:	4a33      	ldr	r2, [pc, #204]	; (8004c9c <HAL_UART_Init+0x130>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d032      	beq.n	8004c3a <HAL_UART_Init+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004bd4:	f7ff f9ba 	bl	8003f4c <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bd8:	69e3      	ldr	r3, [r4, #28]
 8004bda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bde:	d032      	beq.n	8004c46 <HAL_UART_Init+0xda>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004be0:	6863      	ldr	r3, [r4, #4]
 8004be2:	4e2f      	ldr	r6, [pc, #188]	; (8004ca0 <HAL_UART_Init+0x134>)
 8004be4:	2119      	movs	r1, #25
 8004be6:	009a      	lsls	r2, r3, #2
 8004be8:	fba0 0101 	umull	r0, r1, r0, r1
 8004bec:	0f9b      	lsrs	r3, r3, #30
 8004bee:	f7fc f82b 	bl	8000c48 <__aeabi_uldivmod>
 8004bf2:	fba6 2500 	umull	r2, r5, r6, r0
 8004bf6:	096d      	lsrs	r5, r5, #5
 8004bf8:	2164      	movs	r1, #100	; 0x64
 8004bfa:	fb01 0215 	mls	r2, r1, r5, r0
 8004bfe:	0112      	lsls	r2, r2, #4
 8004c00:	3232      	adds	r2, #50	; 0x32
 8004c02:	6823      	ldr	r3, [r4, #0]
 8004c04:	fba6 1202 	umull	r1, r2, r6, r2
 8004c08:	012d      	lsls	r5, r5, #4
 8004c0a:	eb05 1252 	add.w	r2, r5, r2, lsr #5
 8004c0e:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c10:	691a      	ldr	r2, [r3, #16]
 8004c12:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c16:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c18:	695a      	ldr	r2, [r3, #20]
 8004c1a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c1e:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8004c20:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c22:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8004c24:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 8004c26:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c2a:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c2c:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004c2e:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004c32:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  return HAL_OK;
 8004c36:	4628      	mov	r0, r5
}
 8004c38:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c3a:	f7ff f997 	bl	8003f6c <HAL_RCC_GetPCLK2Freq>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c3e:	69e3      	ldr	r3, [r4, #28]
 8004c40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c44:	d1cc      	bne.n	8004be0 <HAL_UART_Init+0x74>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c46:	6862      	ldr	r2, [r4, #4]
 8004c48:	4e15      	ldr	r6, [pc, #84]	; (8004ca0 <HAL_UART_Init+0x134>)
 8004c4a:	1892      	adds	r2, r2, r2
 8004c4c:	f04f 0300 	mov.w	r3, #0
 8004c50:	f04f 0119 	mov.w	r1, #25
 8004c54:	415b      	adcs	r3, r3
 8004c56:	fba0 0101 	umull	r0, r1, r0, r1
 8004c5a:	f7fb fff5 	bl	8000c48 <__aeabi_uldivmod>
 8004c5e:	fba6 2100 	umull	r2, r1, r6, r0
 8004c62:	094d      	lsrs	r5, r1, #5
 8004c64:	2164      	movs	r1, #100	; 0x64
 8004c66:	fb01 0215 	mls	r2, r1, r5, r0
 8004c6a:	00d2      	lsls	r2, r2, #3
 8004c6c:	3232      	adds	r2, #50	; 0x32
 8004c6e:	fba6 1202 	umull	r1, r2, r6, r2
 8004c72:	f3c2 1142 	ubfx	r1, r2, #5, #3
 8004c76:	0912      	lsrs	r2, r2, #4
 8004c78:	6823      	ldr	r3, [r4, #0]
 8004c7a:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 8004c7e:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8004c82:	440a      	add	r2, r1
 8004c84:	609a      	str	r2, [r3, #8]
 8004c86:	e7c3      	b.n	8004c10 <HAL_UART_Init+0xa4>
    huart->Lock = HAL_UNLOCKED;
 8004c88:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8004c8c:	f7fc fe02 	bl	8001894 <HAL_UART_MspInit>
 8004c90:	e778      	b.n	8004b84 <HAL_UART_Init+0x18>
    return HAL_ERROR;
 8004c92:	2001      	movs	r0, #1
}
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop
 8004c98:	40011000 	.word	0x40011000
 8004c9c:	40011400 	.word	0x40011400
 8004ca0:	51eb851f 	.word	0x51eb851f

08004ca4 <HAL_UART_TxCpltCallback>:
 8004ca4:	4770      	bx	lr
 8004ca6:	bf00      	nop

08004ca8 <HAL_UART_RxCpltCallback>:
 8004ca8:	4770      	bx	lr
 8004caa:	bf00      	nop

08004cac <HAL_UART_ErrorCallback>:
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop

08004cb0 <UART_DMAAbortOnError>:
{
 8004cb0:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cb2:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004cb8:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8004cba:	f7ff fff7 	bl	8004cac <HAL_UART_ErrorCallback>
}
 8004cbe:	bd08      	pop	{r3, pc}

08004cc0 <HAL_UARTEx_RxEventCallback>:
}
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop

08004cc4 <UART_Receive_IT.part.0>:
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cc4:	6883      	ldr	r3, [r0, #8]
 8004cc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8004cca:	b510      	push	{r4, lr}
 8004ccc:	4604      	mov	r4, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cce:	d02f      	beq.n	8004d30 <UART_Receive_IT.part.0+0x6c>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004cd0:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004cd2:	b333      	cbz	r3, 8004d22 <UART_Receive_IT.part.0+0x5e>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004cd4:	6823      	ldr	r3, [r4, #0]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cdc:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8004cde:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	62a3      	str	r3, [r4, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8004ce4:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	85e3      	strh	r3, [r4, #46]	; 0x2e
 8004cec:	b9bb      	cbnz	r3, 8004d1e <UART_Receive_IT.part.0+0x5a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004cee:	6823      	ldr	r3, [r4, #0]
 8004cf0:	68da      	ldr	r2, [r3, #12]
 8004cf2:	f022 0220 	bic.w	r2, r2, #32
 8004cf6:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004cf8:	68da      	ldr	r2, [r3, #12]
 8004cfa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004cfe:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004d00:	695a      	ldr	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8004d02:	2120      	movs	r1, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004d04:	f022 0201 	bic.w	r2, r2, #1
 8004d08:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8004d0a:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d0e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004d10:	2a01      	cmp	r2, #1
 8004d12:	d01d      	beq.n	8004d50 <UART_Receive_IT.part.0+0x8c>
       HAL_UART_RxCpltCallback(huart);
 8004d14:	4620      	mov	r0, r4
 8004d16:	f7ff ffc7 	bl	8004ca8 <HAL_UART_RxCpltCallback>
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	6323      	str	r3, [r4, #48]	; 0x30
}
 8004d1e:	2000      	movs	r0, #0
 8004d20:	bd10      	pop	{r4, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004d22:	6923      	ldr	r3, [r4, #16]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d1d5      	bne.n	8004cd4 <UART_Receive_IT.part.0+0x10>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d28:	6823      	ldr	r3, [r4, #0]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	7013      	strb	r3, [r2, #0]
 8004d2e:	e7d6      	b.n	8004cde <UART_Receive_IT.part.0+0x1a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d30:	6903      	ldr	r3, [r0, #16]
 8004d32:	b943      	cbnz	r3, 8004d46 <UART_Receive_IT.part.0+0x82>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d34:	6802      	ldr	r2, [r0, #0]
 8004d36:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004d38:	6852      	ldr	r2, [r2, #4]
 8004d3a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d3e:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 8004d42:	6283      	str	r3, [r0, #40]	; 0x28
 8004d44:	e7ce      	b.n	8004ce4 <UART_Receive_IT.part.0+0x20>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d46:	6823      	ldr	r3, [r4, #0]
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004d48:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	7013      	strb	r3, [r2, #0]
 8004d4e:	e7c6      	b.n	8004cde <UART_Receive_IT.part.0+0x1a>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d50:	68da      	ldr	r2, [r3, #12]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d52:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d54:	f022 0210 	bic.w	r2, r2, #16
 8004d58:	60da      	str	r2, [r3, #12]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d5a:	4620      	mov	r0, r4
 8004d5c:	f7ff ffb0 	bl	8004cc0 <HAL_UARTEx_RxEventCallback>
 8004d60:	e7db      	b.n	8004d1a <UART_Receive_IT.part.0+0x56>
 8004d62:	bf00      	nop

08004d64 <HAL_UART_IRQHandler>:
{
 8004d64:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004d66:	6803      	ldr	r3, [r0, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d6a:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d6c:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8004d6e:	0716      	lsls	r6, r2, #28
{
 8004d70:	b082      	sub	sp, #8
 8004d72:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8004d74:	d14f      	bne.n	8004e16 <HAL_UART_IRQHandler+0xb2>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d76:	0696      	lsls	r6, r2, #26
 8004d78:	d502      	bpl.n	8004d80 <HAL_UART_IRQHandler+0x1c>
 8004d7a:	068d      	lsls	r5, r1, #26
 8004d7c:	f100 8091 	bmi.w	8004ea2 <HAL_UART_IRQHandler+0x13e>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d80:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004d82:	2801      	cmp	r0, #1
 8004d84:	d00b      	beq.n	8004d9e <HAL_UART_IRQHandler+0x3a>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004d86:	0616      	lsls	r6, r2, #24
 8004d88:	d502      	bpl.n	8004d90 <HAL_UART_IRQHandler+0x2c>
 8004d8a:	060d      	lsls	r5, r1, #24
 8004d8c:	f100 8093 	bmi.w	8004eb6 <HAL_UART_IRQHandler+0x152>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004d90:	0650      	lsls	r0, r2, #25
 8004d92:	d502      	bpl.n	8004d9a <HAL_UART_IRQHandler+0x36>
 8004d94:	064a      	lsls	r2, r1, #25
 8004d96:	f100 80ac 	bmi.w	8004ef2 <HAL_UART_IRQHandler+0x18e>
}
 8004d9a:	b002      	add	sp, #8
 8004d9c:	bd70      	pop	{r4, r5, r6, pc}
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004d9e:	06d5      	lsls	r5, r2, #27
 8004da0:	d5f1      	bpl.n	8004d86 <HAL_UART_IRQHandler+0x22>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004da2:	06c8      	lsls	r0, r1, #27
 8004da4:	d5ef      	bpl.n	8004d86 <HAL_UART_IRQHandler+0x22>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004da6:	2100      	movs	r1, #0
 8004da8:	9101      	str	r1, [sp, #4]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	9201      	str	r2, [sp, #4]
 8004dae:	685a      	ldr	r2, [r3, #4]
 8004db0:	9201      	str	r2, [sp, #4]
 8004db2:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004db4:	695a      	ldr	r2, [r3, #20]
 8004db6:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 8004dba:	f000 80d3 	beq.w	8004f64 <HAL_UART_IRQHandler+0x200>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004dbe:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004dc0:	6802      	ldr	r2, [r0, #0]
 8004dc2:	6852      	ldr	r2, [r2, #4]
 8004dc4:	b292      	uxth	r2, r2
      if (  (nb_remaining_rx_data > 0U)
 8004dc6:	2a00      	cmp	r2, #0
 8004dc8:	d0e7      	beq.n	8004d9a <HAL_UART_IRQHandler+0x36>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004dca:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
 8004dcc:	4295      	cmp	r5, r2
 8004dce:	d9e4      	bls.n	8004d9a <HAL_UART_IRQHandler+0x36>
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004dd0:	69c6      	ldr	r6, [r0, #28]
        huart->RxXferCount = nb_remaining_rx_data;
 8004dd2:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004dd4:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8004dd8:	d016      	beq.n	8004e08 <HAL_UART_IRQHandler+0xa4>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004dda:	68da      	ldr	r2, [r3, #12]
 8004ddc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004de0:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004de2:	695a      	ldr	r2, [r3, #20]
 8004de4:	f022 0201 	bic.w	r2, r2, #1
 8004de8:	615a      	str	r2, [r3, #20]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004dea:	695a      	ldr	r2, [r3, #20]
          huart->RxState = HAL_UART_STATE_READY;
 8004dec:	2520      	movs	r5, #32
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004dee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004df2:	615a      	str	r2, [r3, #20]
          huart->RxState = HAL_UART_STATE_READY;
 8004df4:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004df8:	6321      	str	r1, [r4, #48]	; 0x30
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dfa:	68da      	ldr	r2, [r3, #12]
 8004dfc:	f022 0210 	bic.w	r2, r2, #16
 8004e00:	60da      	str	r2, [r3, #12]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e02:	f7fd faa7 	bl	8002354 <HAL_DMA_Abort>
 8004e06:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e08:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8004e0a:	1a69      	subs	r1, r5, r1
 8004e0c:	b289      	uxth	r1, r1
 8004e0e:	4620      	mov	r0, r4
 8004e10:	f7ff ff56 	bl	8004cc0 <HAL_UARTEx_RxEventCallback>
 8004e14:	e7c1      	b.n	8004d9a <HAL_UART_IRQHandler+0x36>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004e16:	f005 0501 	and.w	r5, r5, #1
 8004e1a:	f401 7090 	and.w	r0, r1, #288	; 0x120
 8004e1e:	4328      	orrs	r0, r5
 8004e20:	d0ae      	beq.n	8004d80 <HAL_UART_IRQHandler+0x1c>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004e22:	07d0      	lsls	r0, r2, #31
 8004e24:	d505      	bpl.n	8004e32 <HAL_UART_IRQHandler+0xce>
 8004e26:	05ce      	lsls	r6, r1, #23
 8004e28:	d503      	bpl.n	8004e32 <HAL_UART_IRQHandler+0xce>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e2a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004e2c:	f040 0001 	orr.w	r0, r0, #1
 8004e30:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e32:	0750      	lsls	r0, r2, #29
 8004e34:	d52c      	bpl.n	8004e90 <HAL_UART_IRQHandler+0x12c>
 8004e36:	b12d      	cbz	r5, 8004e44 <HAL_UART_IRQHandler+0xe0>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e38:	6c20      	ldr	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e3a:	0796      	lsls	r6, r2, #30
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e3c:	f040 0002 	orr.w	r0, r0, #2
 8004e40:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e42:	d429      	bmi.n	8004e98 <HAL_UART_IRQHandler+0x134>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004e44:	0716      	lsls	r6, r2, #28
 8004e46:	d507      	bpl.n	8004e58 <HAL_UART_IRQHandler+0xf4>
 8004e48:	f001 0020 	and.w	r0, r1, #32
 8004e4c:	4328      	orrs	r0, r5
 8004e4e:	d003      	beq.n	8004e58 <HAL_UART_IRQHandler+0xf4>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e50:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004e52:	f040 0008 	orr.w	r0, r0, #8
 8004e56:	6420      	str	r0, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e58:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004e5a:	2800      	cmp	r0, #0
 8004e5c:	d09d      	beq.n	8004d9a <HAL_UART_IRQHandler+0x36>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e5e:	0690      	lsls	r0, r2, #26
 8004e60:	d509      	bpl.n	8004e76 <HAL_UART_IRQHandler+0x112>
 8004e62:	068a      	lsls	r2, r1, #26
 8004e64:	d507      	bpl.n	8004e76 <HAL_UART_IRQHandler+0x112>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e66:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8004e6a:	2a22      	cmp	r2, #34	; 0x22
 8004e6c:	d103      	bne.n	8004e76 <HAL_UART_IRQHandler+0x112>
 8004e6e:	4620      	mov	r0, r4
 8004e70:	f7ff ff28 	bl	8004cc4 <UART_Receive_IT.part.0>
 8004e74:	6823      	ldr	r3, [r4, #0]
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004e76:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004e78:	6c25      	ldr	r5, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004e7a:	f002 0240 	and.w	r2, r2, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004e7e:	f005 0508 	and.w	r5, r5, #8
 8004e82:	4315      	orrs	r5, r2
 8004e84:	d140      	bne.n	8004f08 <HAL_UART_IRQHandler+0x1a4>
        HAL_UART_ErrorCallback(huart);
 8004e86:	4620      	mov	r0, r4
 8004e88:	f7ff ff10 	bl	8004cac <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e8c:	6425      	str	r5, [r4, #64]	; 0x40
 8004e8e:	e784      	b.n	8004d9a <HAL_UART_IRQHandler+0x36>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e90:	0790      	lsls	r0, r2, #30
 8004e92:	d5d7      	bpl.n	8004e44 <HAL_UART_IRQHandler+0xe0>
 8004e94:	2d00      	cmp	r5, #0
 8004e96:	d0d5      	beq.n	8004e44 <HAL_UART_IRQHandler+0xe0>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e98:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004e9a:	f040 0004 	orr.w	r0, r0, #4
 8004e9e:	6420      	str	r0, [r4, #64]	; 0x40
 8004ea0:	e7d0      	b.n	8004e44 <HAL_UART_IRQHandler+0xe0>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ea2:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8004ea6:	2b22      	cmp	r3, #34	; 0x22
 8004ea8:	f47f af77 	bne.w	8004d9a <HAL_UART_IRQHandler+0x36>
}
 8004eac:	b002      	add	sp, #8
 8004eae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004eb2:	f7ff bf07 	b.w	8004cc4 <UART_Receive_IT.part.0>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004eb6:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8004eba:	2a21      	cmp	r2, #33	; 0x21
 8004ebc:	f47f af6d 	bne.w	8004d9a <HAL_UART_IRQHandler+0x36>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ec0:	68a2      	ldr	r2, [r4, #8]
 8004ec2:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8004ec6:	d06e      	beq.n	8004fa6 <HAL_UART_IRQHandler+0x242>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004ec8:	6a22      	ldr	r2, [r4, #32]
 8004eca:	1c51      	adds	r1, r2, #1
 8004ecc:	6221      	str	r1, [r4, #32]
 8004ece:	7812      	ldrb	r2, [r2, #0]
 8004ed0:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8004ed2:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8004ed4:	3a01      	subs	r2, #1
 8004ed6:	b292      	uxth	r2, r2
 8004ed8:	84e2      	strh	r2, [r4, #38]	; 0x26
 8004eda:	2a00      	cmp	r2, #0
 8004edc:	f47f af5d 	bne.w	8004d9a <HAL_UART_IRQHandler+0x36>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004ee0:	68da      	ldr	r2, [r3, #12]
 8004ee2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ee6:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004ee8:	68da      	ldr	r2, [r3, #12]
 8004eea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004eee:	60da      	str	r2, [r3, #12]
 8004ef0:	e753      	b.n	8004d9a <HAL_UART_IRQHandler+0x36>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004ef2:	68da      	ldr	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8004ef4:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004ef6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004efa:	60da      	str	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8004efc:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 8004efe:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 8004f02:	f7ff fecf 	bl	8004ca4 <HAL_UART_TxCpltCallback>
    return;
 8004f06:	e748      	b.n	8004d9a <HAL_UART_IRQHandler+0x36>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f08:	68da      	ldr	r2, [r3, #12]
 8004f0a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004f0e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f10:	695a      	ldr	r2, [r3, #20]
 8004f12:	f022 0201 	bic.w	r2, r2, #1
 8004f16:	615a      	str	r2, [r3, #20]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f18:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004f1a:	2a01      	cmp	r2, #1
 8004f1c:	d103      	bne.n	8004f26 <HAL_UART_IRQHandler+0x1c2>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f1e:	68da      	ldr	r2, [r3, #12]
 8004f20:	f022 0210 	bic.w	r2, r2, #16
 8004f24:	60da      	str	r2, [r3, #12]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f26:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8004f28:	2120      	movs	r1, #32
 8004f2a:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f2e:	6322      	str	r2, [r4, #48]	; 0x30
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f30:	695a      	ldr	r2, [r3, #20]
 8004f32:	0656      	lsls	r6, r2, #25
 8004f34:	d512      	bpl.n	8004f5c <HAL_UART_IRQHandler+0x1f8>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f36:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8004f38:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f3e:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8004f40:	b160      	cbz	r0, 8004f5c <HAL_UART_IRQHandler+0x1f8>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f42:	4b1e      	ldr	r3, [pc, #120]	; (8004fbc <HAL_UART_IRQHandler+0x258>)
 8004f44:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f46:	f7fd fa4d 	bl	80023e4 <HAL_DMA_Abort_IT>
 8004f4a:	2800      	cmp	r0, #0
 8004f4c:	f43f af25 	beq.w	8004d9a <HAL_UART_IRQHandler+0x36>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f50:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004f52:	6d03      	ldr	r3, [r0, #80]	; 0x50
}
 8004f54:	b002      	add	sp, #8
 8004f56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f5a:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8004f5c:	4620      	mov	r0, r4
 8004f5e:	f7ff fea5 	bl	8004cac <HAL_UART_ErrorCallback>
 8004f62:	e71a      	b.n	8004d9a <HAL_UART_IRQHandler+0x36>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004f64:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
      if (  (huart->RxXferCount > 0U)
 8004f66:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8004f68:	b289      	uxth	r1, r1
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004f6a:	b280      	uxth	r0, r0
      if (  (huart->RxXferCount > 0U)
 8004f6c:	2900      	cmp	r1, #0
 8004f6e:	f43f af14 	beq.w	8004d9a <HAL_UART_IRQHandler+0x36>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004f72:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8004f74:	1a08      	subs	r0, r1, r0
 8004f76:	b281      	uxth	r1, r0
          &&(nb_rx_data > 0U) )
 8004f78:	2900      	cmp	r1, #0
 8004f7a:	f43f af0e 	beq.w	8004d9a <HAL_UART_IRQHandler+0x36>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f7e:	68d8      	ldr	r0, [r3, #12]
 8004f80:	f420 7090 	bic.w	r0, r0, #288	; 0x120
 8004f84:	60d8      	str	r0, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f86:	6958      	ldr	r0, [r3, #20]
        huart->RxState = HAL_UART_STATE_READY;
 8004f88:	2520      	movs	r5, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f8a:	f020 0001 	bic.w	r0, r0, #1
 8004f8e:	6158      	str	r0, [r3, #20]
        huart->RxState = HAL_UART_STATE_READY;
 8004f90:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f94:	6322      	str	r2, [r4, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f96:	68da      	ldr	r2, [r3, #12]
 8004f98:	f022 0210 	bic.w	r2, r2, #16
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f9c:	4620      	mov	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f9e:	60da      	str	r2, [r3, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004fa0:	f7ff fe8e 	bl	8004cc0 <HAL_UARTEx_RxEventCallback>
 8004fa4:	e6f9      	b.n	8004d9a <HAL_UART_IRQHandler+0x36>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fa6:	6922      	ldr	r2, [r4, #16]
 8004fa8:	2a00      	cmp	r2, #0
 8004faa:	d18d      	bne.n	8004ec8 <HAL_UART_IRQHandler+0x164>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004fac:	6a22      	ldr	r2, [r4, #32]
 8004fae:	f832 1b02 	ldrh.w	r1, [r2], #2
 8004fb2:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8004fb6:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004fb8:	6222      	str	r2, [r4, #32]
 8004fba:	e78a      	b.n	8004ed2 <HAL_UART_IRQHandler+0x16e>
 8004fbc:	08004cb1 	.word	0x08004cb1

08004fc0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004fc0:	b084      	sub	sp, #16
 8004fc2:	b470      	push	{r4, r5, r6}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004fc4:	9e09      	ldr	r6, [sp, #36]	; 0x24
{
 8004fc6:	ad04      	add	r5, sp, #16
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004fc8:	2e01      	cmp	r6, #1
{
 8004fca:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8004fce:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004fd0:	d131      	bne.n	8005036 <USB_CoreInit+0x76>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004fd2:	6b83      	ldr	r3, [r0, #56]	; 0x38
    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
    if (cfg.use_external_vbus == 1U)
 8004fd4:	9a10      	ldr	r2, [sp, #64]	; 0x40
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004fd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fda:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004fdc:	68c3      	ldr	r3, [r0, #12]
 8004fde:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004fe2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fe6:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004fe8:	68c3      	ldr	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8004fea:	2a01      	cmp	r2, #1
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004fec:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004ff0:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8004ff2:	d043      	beq.n	800507c <USB_CoreInit+0xbc>
{
 8004ff4:	4b26      	ldr	r3, [pc, #152]	; (8005090 <USB_CoreInit+0xd0>)
 8004ff6:	e001      	b.n	8004ffc <USB_CoreInit+0x3c>
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004ff8:	3b01      	subs	r3, #1
 8004ffa:	d044      	beq.n	8005086 <USB_CoreInit+0xc6>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ffc:	6922      	ldr	r2, [r4, #16]
 8004ffe:	2a00      	cmp	r2, #0
 8005000:	dafa      	bge.n	8004ff8 <USB_CoreInit+0x38>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005002:	6922      	ldr	r2, [r4, #16]
 8005004:	4b22      	ldr	r3, [pc, #136]	; (8005090 <USB_CoreInit+0xd0>)
 8005006:	f042 0201 	orr.w	r2, r2, #1
 800500a:	6122      	str	r2, [r4, #16]

  do
  {
    if (++count > 200000U)
 800500c:	e001      	b.n	8005012 <USB_CoreInit+0x52>
 800500e:	3b01      	subs	r3, #1
 8005010:	d039      	beq.n	8005086 <USB_CoreInit+0xc6>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005012:	6920      	ldr	r0, [r4, #16]
 8005014:	f010 0001 	ands.w	r0, r0, #1
 8005018:	d1f9      	bne.n	800500e <USB_CoreInit+0x4e>
  if (cfg.dma_enable == 1U)
 800501a:	9b07      	ldr	r3, [sp, #28]
 800501c:	2b01      	cmp	r3, #1
 800501e:	d107      	bne.n	8005030 <USB_CoreInit+0x70>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005020:	68a3      	ldr	r3, [r4, #8]
 8005022:	f043 0306 	orr.w	r3, r3, #6
 8005026:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005028:	68a3      	ldr	r3, [r4, #8]
 800502a:	f043 0320 	orr.w	r3, r3, #32
 800502e:	60a3      	str	r3, [r4, #8]
}
 8005030:	bc70      	pop	{r4, r5, r6}
 8005032:	b004      	add	sp, #16
 8005034:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005036:	68c2      	ldr	r2, [r0, #12]
 8005038:	4b15      	ldr	r3, [pc, #84]	; (8005090 <USB_CoreInit+0xd0>)
 800503a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800503e:	60c2      	str	r2, [r0, #12]
    if (++count > 200000U)
 8005040:	e001      	b.n	8005046 <USB_CoreInit+0x86>
 8005042:	3b01      	subs	r3, #1
 8005044:	d021      	beq.n	800508a <USB_CoreInit+0xca>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005046:	6922      	ldr	r2, [r4, #16]
 8005048:	2a00      	cmp	r2, #0
 800504a:	dafa      	bge.n	8005042 <USB_CoreInit+0x82>
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800504c:	6922      	ldr	r2, [r4, #16]
 800504e:	4b10      	ldr	r3, [pc, #64]	; (8005090 <USB_CoreInit+0xd0>)
 8005050:	f042 0201 	orr.w	r2, r2, #1
 8005054:	6122      	str	r2, [r4, #16]
    if (++count > 200000U)
 8005056:	e001      	b.n	800505c <USB_CoreInit+0x9c>
 8005058:	3b01      	subs	r3, #1
 800505a:	d016      	beq.n	800508a <USB_CoreInit+0xca>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800505c:	6920      	ldr	r0, [r4, #16]
 800505e:	f010 0001 	ands.w	r0, r0, #1
 8005062:	d1f9      	bne.n	8005058 <USB_CoreInit+0x98>
    if (cfg.battery_charging_enable == 0U)
 8005064:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005066:	b923      	cbnz	r3, 8005072 <USB_CoreInit+0xb2>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005068:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800506a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800506e:	63a3      	str	r3, [r4, #56]	; 0x38
 8005070:	e7d3      	b.n	800501a <USB_CoreInit+0x5a>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005072:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005074:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005078:	63a3      	str	r3, [r4, #56]	; 0x38
 800507a:	e7ce      	b.n	800501a <USB_CoreInit+0x5a>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800507c:	68c3      	ldr	r3, [r0, #12]
 800507e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005082:	60c3      	str	r3, [r0, #12]
 8005084:	e7b6      	b.n	8004ff4 <USB_CoreInit+0x34>
      return HAL_TIMEOUT;
 8005086:	2003      	movs	r0, #3
 8005088:	e7c7      	b.n	800501a <USB_CoreInit+0x5a>
 800508a:	2003      	movs	r0, #3
 800508c:	e7ea      	b.n	8005064 <USB_CoreInit+0xa4>
 800508e:	bf00      	nop
 8005090:	00030d40 	.word	0x00030d40

08005094 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 8005094:	2a02      	cmp	r2, #2
 8005096:	d00a      	beq.n	80050ae <USB_SetTurnaroundTime+0x1a>
 8005098:	f44f 5110 	mov.w	r1, #9216	; 0x2400
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800509c:	68c2      	ldr	r2, [r0, #12]
 800509e:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 80050a2:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80050a4:	68c3      	ldr	r3, [r0, #12]
 80050a6:	430b      	orrs	r3, r1
 80050a8:	60c3      	str	r3, [r0, #12]
}
 80050aa:	2000      	movs	r0, #0
 80050ac:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80050ae:	4b26      	ldr	r3, [pc, #152]	; (8005148 <USB_SetTurnaroundTime+0xb4>)
 80050b0:	4a26      	ldr	r2, [pc, #152]	; (800514c <USB_SetTurnaroundTime+0xb8>)
 80050b2:	440b      	add	r3, r1
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d932      	bls.n	800511e <USB_SetTurnaroundTime+0x8a>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80050b8:	4b25      	ldr	r3, [pc, #148]	; (8005150 <USB_SetTurnaroundTime+0xbc>)
 80050ba:	4a26      	ldr	r2, [pc, #152]	; (8005154 <USB_SetTurnaroundTime+0xc0>)
 80050bc:	440b      	add	r3, r1
 80050be:	4293      	cmp	r3, r2
 80050c0:	d930      	bls.n	8005124 <USB_SetTurnaroundTime+0x90>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80050c2:	4a25      	ldr	r2, [pc, #148]	; (8005158 <USB_SetTurnaroundTime+0xc4>)
 80050c4:	f5a1 0374 	sub.w	r3, r1, #15990784	; 0xf40000
 80050c8:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d92c      	bls.n	800512a <USB_SetTurnaroundTime+0x96>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80050d0:	4a22      	ldr	r2, [pc, #136]	; (800515c <USB_SetTurnaroundTime+0xc8>)
 80050d2:	f1a1 7383 	sub.w	r3, r1, #17170432	; 0x1060000
 80050d6:	f5a3 43e7 	sub.w	r3, r3, #29568	; 0x7380
 80050da:	4293      	cmp	r3, r2
 80050dc:	d328      	bcc.n	8005130 <USB_SetTurnaroundTime+0x9c>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80050de:	4b20      	ldr	r3, [pc, #128]	; (8005160 <USB_SetTurnaroundTime+0xcc>)
 80050e0:	4a20      	ldr	r2, [pc, #128]	; (8005164 <USB_SetTurnaroundTime+0xd0>)
 80050e2:	440b      	add	r3, r1
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d926      	bls.n	8005136 <USB_SetTurnaroundTime+0xa2>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80050e8:	4b1f      	ldr	r3, [pc, #124]	; (8005168 <USB_SetTurnaroundTime+0xd4>)
 80050ea:	4a20      	ldr	r2, [pc, #128]	; (800516c <USB_SetTurnaroundTime+0xd8>)
 80050ec:	440b      	add	r3, r1
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d324      	bcc.n	800513c <USB_SetTurnaroundTime+0xa8>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80050f2:	4b1f      	ldr	r3, [pc, #124]	; (8005170 <USB_SetTurnaroundTime+0xdc>)
 80050f4:	4a1f      	ldr	r2, [pc, #124]	; (8005174 <USB_SetTurnaroundTime+0xe0>)
 80050f6:	440b      	add	r3, r1
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d3cd      	bcc.n	8005098 <USB_SetTurnaroundTime+0x4>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80050fc:	4a1e      	ldr	r2, [pc, #120]	; (8005178 <USB_SetTurnaroundTime+0xe4>)
 80050fe:	f1a1 73b7 	sub.w	r3, r1, #23986176	; 0x16e0000
 8005102:	f5a3 5358 	sub.w	r3, r3, #13824	; 0x3600
 8005106:	4293      	cmp	r3, r2
 8005108:	d31b      	bcc.n	8005142 <USB_SetTurnaroundTime+0xae>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800510a:	4b1c      	ldr	r3, [pc, #112]	; (800517c <USB_SetTurnaroundTime+0xe8>)
 800510c:	4a1c      	ldr	r2, [pc, #112]	; (8005180 <USB_SetTurnaroundTime+0xec>)
 800510e:	440b      	add	r3, r1
 8005110:	4293      	cmp	r3, r2
 8005112:	bf34      	ite	cc
 8005114:	f44f 51e0 	movcc.w	r1, #7168	; 0x1c00
 8005118:	f44f 51c0 	movcs.w	r1, #6144	; 0x1800
 800511c:	e7be      	b.n	800509c <USB_SetTurnaroundTime+0x8>
 800511e:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 8005122:	e7bb      	b.n	800509c <USB_SetTurnaroundTime+0x8>
 8005124:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 8005128:	e7b8      	b.n	800509c <USB_SetTurnaroundTime+0x8>
 800512a:	f44f 5150 	mov.w	r1, #13312	; 0x3400
 800512e:	e7b5      	b.n	800509c <USB_SetTurnaroundTime+0x8>
 8005130:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005134:	e7b2      	b.n	800509c <USB_SetTurnaroundTime+0x8>
 8005136:	f44f 5130 	mov.w	r1, #11264	; 0x2c00
 800513a:	e7af      	b.n	800509c <USB_SetTurnaroundTime+0x8>
 800513c:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 8005140:	e7ac      	b.n	800509c <USB_SetTurnaroundTime+0x8>
 8005142:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005146:	e7a9      	b.n	800509c <USB_SetTurnaroundTime+0x8>
 8005148:	ff275340 	.word	0xff275340
 800514c:	000c34ff 	.word	0x000c34ff
 8005150:	ff1b1e40 	.word	0xff1b1e40
 8005154:	000f423f 	.word	0x000f423f
 8005158:	00124f7f 	.word	0x00124f7f
 800515c:	0013d620 	.word	0x0013d620
 8005160:	fee5b660 	.word	0xfee5b660
 8005164:	0016e35f 	.word	0x0016e35f
 8005168:	feced300 	.word	0xfeced300
 800516c:	001b7740 	.word	0x001b7740
 8005170:	feb35bc0 	.word	0xfeb35bc0
 8005174:	002191c0 	.word	0x002191c0
 8005178:	00387520 	.word	0x00387520
 800517c:	fe5954e0 	.word	0xfe5954e0
 8005180:	00419ce0 	.word	0x00419ce0

08005184 <USB_EnableGlobalInt>:
{
 8005184:	4603      	mov	r3, r0
}
 8005186:	2000      	movs	r0, #0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005188:	689a      	ldr	r2, [r3, #8]
 800518a:	f042 0201 	orr.w	r2, r2, #1
 800518e:	609a      	str	r2, [r3, #8]
}
 8005190:	4770      	bx	lr
 8005192:	bf00      	nop

08005194 <USB_DisableGlobalInt>:
{
 8005194:	4603      	mov	r3, r0
}
 8005196:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005198:	689a      	ldr	r2, [r3, #8]
 800519a:	f022 0201 	bic.w	r2, r2, #1
 800519e:	609a      	str	r2, [r3, #8]
}
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop

080051a4 <USB_SetCurrentMode>:
{
 80051a4:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80051a6:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80051a8:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80051aa:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80051ae:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80051b0:	d00b      	beq.n	80051ca <USB_SetCurrentMode+0x26>
  else if (mode == USB_DEVICE_MODE)
 80051b2:	b941      	cbnz	r1, 80051c6 <USB_SetCurrentMode+0x22>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80051b4:	68c3      	ldr	r3, [r0, #12]
 80051b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051ba:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 80051bc:	2032      	movs	r0, #50	; 0x32
 80051be:	f7fc fd15 	bl	8001bec <HAL_Delay>
  return HAL_OK;
 80051c2:	2000      	movs	r0, #0
}
 80051c4:	bd08      	pop	{r3, pc}
    return HAL_ERROR;
 80051c6:	2001      	movs	r0, #1
}
 80051c8:	bd08      	pop	{r3, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80051ca:	68c3      	ldr	r3, [r0, #12]
 80051cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80051d0:	60c3      	str	r3, [r0, #12]
 80051d2:	e7f3      	b.n	80051bc <USB_SetCurrentMode+0x18>

080051d4 <USB_DevInit>:
{
 80051d4:	b084      	sub	sp, #16
 80051d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80051da:	ac08      	add	r4, sp, #32
 80051dc:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 80051e0:	9e12      	ldr	r6, [sp, #72]	; 0x48
    USBx->DIEPTXF[i] = 0U;
 80051e2:	2200      	movs	r2, #0
 80051e4:	f8c0 2104 	str.w	r2, [r0, #260]	; 0x104
{
 80051e8:	4603      	mov	r3, r0
    USBx->DIEPTXF[i] = 0U;
 80051ea:	f8c0 2108 	str.w	r2, [r0, #264]	; 0x108
 80051ee:	460c      	mov	r4, r1
 80051f0:	f8c0 210c 	str.w	r2, [r0, #268]	; 0x10c
 80051f4:	f8c0 2110 	str.w	r2, [r0, #272]	; 0x110
 80051f8:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
 80051fc:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
 8005200:	f8c0 211c 	str.w	r2, [r0, #284]	; 0x11c
 8005204:	f8c0 2120 	str.w	r2, [r0, #288]	; 0x120
 8005208:	f8c0 2124 	str.w	r2, [r0, #292]	; 0x124
 800520c:	f8c0 2128 	str.w	r2, [r0, #296]	; 0x128
 8005210:	f8c0 212c 	str.w	r2, [r0, #300]	; 0x12c
 8005214:	f8c0 2130 	str.w	r2, [r0, #304]	; 0x130
 8005218:	f8c0 2134 	str.w	r2, [r0, #308]	; 0x134
 800521c:	f8c0 2138 	str.w	r2, [r0, #312]	; 0x138
 8005220:	f8c0 213c 	str.w	r2, [r0, #316]	; 0x13c
  if (cfg.vbus_sensing_enable == 0U)
 8005224:	2e00      	cmp	r6, #0
 8005226:	f040 80a0 	bne.w	800536a <USB_DevInit+0x196>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800522a:	f8d0 2804 	ldr.w	r2, [r0, #2052]	; 0x804
 800522e:	f042 0202 	orr.w	r2, r2, #2
 8005232:	f8c0 2804 	str.w	r2, [r0, #2052]	; 0x804
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005236:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8005238:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800523c:	6382      	str	r2, [r0, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800523e:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8005240:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8005244:	6382      	str	r2, [r0, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005246:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8005248:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800524c:	f500 6500 	add.w	r5, r0, #2048	; 0x800
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005250:	6382      	str	r2, [r0, #56]	; 0x38
  USBx_PCGCCTL = 0U;
 8005252:	2200      	movs	r2, #0
 8005254:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005258:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800525a:	6829      	ldr	r1, [r5, #0]
 800525c:	6029      	str	r1, [r5, #0]
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800525e:	2a01      	cmp	r2, #1
 8005260:	f000 808e 	beq.w	8005380 <USB_DevInit+0x1ac>
  USBx_DEVICE->DCFG |= speed;
 8005264:	682a      	ldr	r2, [r5, #0]
 8005266:	f042 0203 	orr.w	r2, r2, #3
 800526a:	602a      	str	r2, [r5, #0]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800526c:	f44f 6284 	mov.w	r2, #1056	; 0x420
 8005270:	611a      	str	r2, [r3, #16]
 8005272:	4a4a      	ldr	r2, [pc, #296]	; (800539c <USB_DevInit+0x1c8>)
 8005274:	e002      	b.n	800527c <USB_DevInit+0xa8>
    if (++count > 200000U)
 8005276:	3a01      	subs	r2, #1
 8005278:	f000 808c 	beq.w	8005394 <USB_DevInit+0x1c0>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800527c:	6918      	ldr	r0, [r3, #16]
 800527e:	f010 0020 	ands.w	r0, r0, #32
 8005282:	d1f8      	bne.n	8005276 <USB_DevInit+0xa2>
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005284:	2210      	movs	r2, #16
 8005286:	611a      	str	r2, [r3, #16]
 8005288:	4a44      	ldr	r2, [pc, #272]	; (800539c <USB_DevInit+0x1c8>)
 800528a:	e002      	b.n	8005292 <USB_DevInit+0xbe>
    if (++count > 200000U)
 800528c:	3a01      	subs	r2, #1
 800528e:	f000 8083 	beq.w	8005398 <USB_DevInit+0x1c4>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005292:	6919      	ldr	r1, [r3, #16]
 8005294:	06c9      	lsls	r1, r1, #27
 8005296:	d4f9      	bmi.n	800528c <USB_DevInit+0xb8>
  USBx_DEVICE->DIEPMSK = 0U;
 8005298:	2100      	movs	r1, #0
 800529a:	6129      	str	r1, [r5, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800529c:	6169      	str	r1, [r5, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800529e:	61e9      	str	r1, [r5, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052a0:	b1f4      	cbz	r4, 80052e0 <USB_DevInit+0x10c>
      USBx_INEP(i)->DIEPCTL = 0U;
 80052a2:	468c      	mov	ip, r1
 80052a4:	f503 6210 	add.w	r2, r3, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80052a8:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80052ac:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80052b0:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 80052b4:	e00a      	b.n	80052cc <USB_DevInit+0xf8>
      USBx_INEP(i)->DIEPCTL = 0U;
 80052b6:	f8c2 c000 	str.w	ip, [r2]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052ba:	3101      	adds	r1, #1
 80052bc:	42a1      	cmp	r1, r4
    USBx_INEP(i)->DIEPTSIZ = 0U;
 80052be:	f8c2 c010 	str.w	ip, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80052c2:	f8c2 e008 	str.w	lr, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052c6:	f102 0220 	add.w	r2, r2, #32
 80052ca:	d02e      	beq.n	800532a <USB_DevInit+0x156>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80052cc:	6817      	ldr	r7, [r2, #0]
 80052ce:	2f00      	cmp	r7, #0
 80052d0:	daf1      	bge.n	80052b6 <USB_DevInit+0xe2>
      if (i == 0U)
 80052d2:	b111      	cbz	r1, 80052da <USB_DevInit+0x106>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80052d4:	f8c2 8000 	str.w	r8, [r2]
 80052d8:	e7ef      	b.n	80052ba <USB_DevInit+0xe6>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80052da:	f8c2 9000 	str.w	r9, [r2]
 80052de:	e7ec      	b.n	80052ba <USB_DevInit+0xe6>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80052e0:	692a      	ldr	r2, [r5, #16]
  if (cfg.dma_enable == 0U)
 80052e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80052e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052e8:	612a      	str	r2, [r5, #16]
  USBx->GINTMSK = 0U;
 80052ea:	2400      	movs	r4, #0
  USBx->GINTSTS = 0xBFFFFFFFU;
 80052ec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
  USBx->GINTMSK = 0U;
 80052f0:	619c      	str	r4, [r3, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 80052f2:	615a      	str	r2, [r3, #20]
  if (cfg.dma_enable == 0U)
 80052f4:	b919      	cbnz	r1, 80052fe <USB_DevInit+0x12a>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80052f6:	699a      	ldr	r2, [r3, #24]
 80052f8:	f042 0210 	orr.w	r2, r2, #16
 80052fc:	619a      	str	r2, [r3, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80052fe:	699c      	ldr	r4, [r3, #24]
 8005300:	4a27      	ldr	r2, [pc, #156]	; (80053a0 <USB_DevInit+0x1cc>)
  if (cfg.Sof_enable != 0U)
 8005302:	990e      	ldr	r1, [sp, #56]	; 0x38
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005304:	4322      	orrs	r2, r4
 8005306:	619a      	str	r2, [r3, #24]
  if (cfg.Sof_enable != 0U)
 8005308:	b119      	cbz	r1, 8005312 <USB_DevInit+0x13e>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800530a:	699a      	ldr	r2, [r3, #24]
 800530c:	f042 0208 	orr.w	r2, r2, #8
 8005310:	619a      	str	r2, [r3, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8005312:	2e01      	cmp	r6, #1
 8005314:	d105      	bne.n	8005322 <USB_DevInit+0x14e>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005316:	699a      	ldr	r2, [r3, #24]
 8005318:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800531c:	f042 0204 	orr.w	r2, r2, #4
 8005320:	619a      	str	r2, [r3, #24]
}
 8005322:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005326:	b004      	add	sp, #16
 8005328:	4770      	bx	lr
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800532a:	2100      	movs	r1, #0
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800532c:	468c      	mov	ip, r1
 800532e:	f503 6230 	add.w	r2, r3, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005332:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005336:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800533a:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 800533e:	e00a      	b.n	8005356 <USB_DevInit+0x182>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005340:	f8c2 c000 	str.w	ip, [r2]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005344:	3101      	adds	r1, #1
 8005346:	42a1      	cmp	r1, r4
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005348:	f8c2 c010 	str.w	ip, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800534c:	f8c2 e008 	str.w	lr, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005350:	f102 0220 	add.w	r2, r2, #32
 8005354:	d0c4      	beq.n	80052e0 <USB_DevInit+0x10c>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005356:	6817      	ldr	r7, [r2, #0]
 8005358:	2f00      	cmp	r7, #0
 800535a:	daf1      	bge.n	8005340 <USB_DevInit+0x16c>
      if (i == 0U)
 800535c:	b111      	cbz	r1, 8005364 <USB_DevInit+0x190>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800535e:	f8c2 8000 	str.w	r8, [r2]
 8005362:	e7ef      	b.n	8005344 <USB_DevInit+0x170>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005364:	f8c2 9000 	str.w	r9, [r2]
 8005368:	e7ec      	b.n	8005344 <USB_DevInit+0x170>
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800536a:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800536c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8005370:	6382      	str	r2, [r0, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005372:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8005374:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8005378:	6382      	str	r2, [r0, #56]	; 0x38
 800537a:	f500 6500 	add.w	r5, r0, #2048	; 0x800
 800537e:	e768      	b.n	8005252 <USB_DevInit+0x7e>
    if (cfg.speed == USBD_HS_SPEED)
 8005380:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005382:	b912      	cbnz	r2, 800538a <USB_DevInit+0x1b6>
  USBx_DEVICE->DCFG |= speed;
 8005384:	682a      	ldr	r2, [r5, #0]
 8005386:	602a      	str	r2, [r5, #0]
  return HAL_OK;
 8005388:	e770      	b.n	800526c <USB_DevInit+0x98>
  USBx_DEVICE->DCFG |= speed;
 800538a:	682a      	ldr	r2, [r5, #0]
 800538c:	f042 0201 	orr.w	r2, r2, #1
 8005390:	602a      	str	r2, [r5, #0]
  return HAL_OK;
 8005392:	e76b      	b.n	800526c <USB_DevInit+0x98>
    ret = HAL_ERROR;
 8005394:	2001      	movs	r0, #1
 8005396:	e775      	b.n	8005284 <USB_DevInit+0xb0>
    ret = HAL_ERROR;
 8005398:	2001      	movs	r0, #1
 800539a:	e77d      	b.n	8005298 <USB_DevInit+0xc4>
 800539c:	00030d40 	.word	0x00030d40
 80053a0:	803c3800 	.word	0x803c3800

080053a4 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80053a4:	0189      	lsls	r1, r1, #6
 80053a6:	f041 0120 	orr.w	r1, r1, #32
 80053aa:	4a06      	ldr	r2, [pc, #24]	; (80053c4 <USB_FlushTxFifo+0x20>)
 80053ac:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 80053ae:	e001      	b.n	80053b4 <USB_FlushTxFifo+0x10>
 80053b0:	3a01      	subs	r2, #1
 80053b2:	d005      	beq.n	80053c0 <USB_FlushTxFifo+0x1c>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80053b4:	6903      	ldr	r3, [r0, #16]
 80053b6:	f013 0320 	ands.w	r3, r3, #32
 80053ba:	d1f9      	bne.n	80053b0 <USB_FlushTxFifo+0xc>
  return HAL_OK;
 80053bc:	4618      	mov	r0, r3
 80053be:	4770      	bx	lr
      return HAL_TIMEOUT;
 80053c0:	2003      	movs	r0, #3
}
 80053c2:	4770      	bx	lr
 80053c4:	00030d40 	.word	0x00030d40

080053c8 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80053c8:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80053cc:	f013 0006 	ands.w	r0, r3, #6
 80053d0:	d004      	beq.n	80053dc <USB_GetDevSpeed+0x14>
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80053d2:	f013 0f02 	tst.w	r3, #2
    speed = 0xFU;
 80053d6:	bf14      	ite	ne
 80053d8:	2002      	movne	r0, #2
 80053da:	200f      	moveq	r0, #15
}
 80053dc:	4770      	bx	lr
 80053de:	bf00      	nop

080053e0 <USB_ActivateEndpoint>:
{
 80053e0:	b470      	push	{r4, r5, r6}
  if (ep->is_in == 1U)
 80053e2:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 80053e4:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d022      	beq.n	8005430 <USB_ActivateEndpoint+0x50>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80053ea:	f002 050f 	and.w	r5, r2, #15
 80053ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80053f2:	40ab      	lsls	r3, r5
 80053f4:	f8d0 581c 	ldr.w	r5, [r0, #2076]	; 0x81c
 80053f8:	f500 6400 	add.w	r4, r0, #2048	; 0x800
 80053fc:	432b      	orrs	r3, r5
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80053fe:	eb00 1042 	add.w	r0, r0, r2, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005402:	61e3      	str	r3, [r4, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005404:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8005408:	041b      	lsls	r3, r3, #16
 800540a:	d40e      	bmi.n	800542a <USB_ActivateEndpoint+0x4a>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800540c:	688b      	ldr	r3, [r1, #8]
 800540e:	f8d0 4b00 	ldr.w	r4, [r0, #2816]	; 0xb00
                                    ((uint32_t)ep->type << 18) |
 8005412:	78ca      	ldrb	r2, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005414:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005418:	4323      	orrs	r3, r4
 800541a:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 800541e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005422:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005426:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800542a:	2000      	movs	r0, #0
 800542c:	bc70      	pop	{r4, r5, r6}
 800542e:	4770      	bx	lr
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005430:	f8d0 681c 	ldr.w	r6, [r0, #2076]	; 0x81c
 8005434:	f002 040f 	and.w	r4, r2, #15
 8005438:	f500 6500 	add.w	r5, r0, #2048	; 0x800
 800543c:	40a3      	lsls	r3, r4
 800543e:	4333      	orrs	r3, r6
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005440:	eb00 1042 	add.w	r0, r0, r2, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005444:	61eb      	str	r3, [r5, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005446:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800544a:	041c      	lsls	r4, r3, #16
 800544c:	d4ed      	bmi.n	800542a <USB_ActivateEndpoint+0x4a>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800544e:	688b      	ldr	r3, [r1, #8]
 8005450:	f8d0 4900 	ldr.w	r4, [r0, #2304]	; 0x900
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005454:	78c9      	ldrb	r1, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005456:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800545a:	4323      	orrs	r3, r4
 800545c:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 8005460:	ea43 5282 	orr.w	r2, r3, r2, lsl #22
 8005464:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005468:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800546c:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
}
 8005470:	bc70      	pop	{r4, r5, r6}
 8005472:	2000      	movs	r0, #0
 8005474:	4770      	bx	lr
 8005476:	bf00      	nop

08005478 <USB_DeactivateEndpoint>:
{
 8005478:	b430      	push	{r4, r5}
  if (ep->is_in == 1U)
 800547a:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800547c:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800547e:	2a01      	cmp	r2, #1
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005480:	eb00 1543 	add.w	r5, r0, r3, lsl #5
  if (ep->is_in == 1U)
 8005484:	d02b      	beq.n	80054de <USB_DeactivateEndpoint+0x66>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005486:	f8d5 2b00 	ldr.w	r2, [r5, #2816]	; 0xb00
 800548a:	2a00      	cmp	r2, #0
 800548c:	db1a      	blt.n	80054c4 <USB_DeactivateEndpoint+0x4c>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800548e:	f8d0 483c 	ldr.w	r4, [r0, #2108]	; 0x83c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005492:	4928      	ldr	r1, [pc, #160]	; (8005534 <USB_DeactivateEndpoint+0xbc>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005494:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005498:	f003 030f 	and.w	r3, r3, #15
 800549c:	fa02 f303 	lsl.w	r3, r2, r3
 80054a0:	ea24 0403 	bic.w	r4, r4, r3
 80054a4:	f8c0 483c 	str.w	r4, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80054a8:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 80054ac:	ea22 0303 	bic.w	r3, r2, r3
 80054b0:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80054b4:	f8d5 3b00 	ldr.w	r3, [r5, #2816]	; 0xb00
 80054b8:	4019      	ands	r1, r3
 80054ba:	f8c5 1b00 	str.w	r1, [r5, #2816]	; 0xb00
}
 80054be:	2000      	movs	r0, #0
 80054c0:	bc30      	pop	{r4, r5}
 80054c2:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80054c4:	f8d5 2b00 	ldr.w	r2, [r5, #2816]	; 0xb00
 80054c8:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80054cc:	f8c5 2b00 	str.w	r2, [r5, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80054d0:	f8d5 2b00 	ldr.w	r2, [r5, #2816]	; 0xb00
 80054d4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80054d8:	f8c5 2b00 	str.w	r2, [r5, #2816]	; 0xb00
 80054dc:	e7d7      	b.n	800548e <USB_DeactivateEndpoint+0x16>
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80054de:	f8d5 2900 	ldr.w	r2, [r5, #2304]	; 0x900
 80054e2:	2a00      	cmp	r2, #0
 80054e4:	da0b      	bge.n	80054fe <USB_DeactivateEndpoint+0x86>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80054e6:	f8d5 2900 	ldr.w	r2, [r5, #2304]	; 0x900
 80054ea:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80054ee:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80054f2:	f8d5 2900 	ldr.w	r2, [r5, #2304]	; 0x900
 80054f6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80054fa:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80054fe:	f8d0 483c 	ldr.w	r4, [r0, #2108]	; 0x83c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005502:	490d      	ldr	r1, [pc, #52]	; (8005538 <USB_DeactivateEndpoint+0xc0>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005504:	2201      	movs	r2, #1
 8005506:	f003 030f 	and.w	r3, r3, #15
 800550a:	fa02 f303 	lsl.w	r3, r2, r3
 800550e:	ea24 0403 	bic.w	r4, r4, r3
 8005512:	f8c0 483c 	str.w	r4, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005516:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 800551a:	ea22 0303 	bic.w	r3, r2, r3
 800551e:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005522:	f8d5 3900 	ldr.w	r3, [r5, #2304]	; 0x900
 8005526:	4019      	ands	r1, r3
 8005528:	f8c5 1900 	str.w	r1, [r5, #2304]	; 0x900
}
 800552c:	2000      	movs	r0, #0
 800552e:	bc30      	pop	{r4, r5}
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	eff37800 	.word	0xeff37800
 8005538:	ec337800 	.word	0xec337800

0800553c <USB_EPStartXfer>:
{
 800553c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (ep->is_in == 1U)
 8005540:	784d      	ldrb	r5, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8005542:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 8005544:	2d01      	cmp	r5, #1
 8005546:	d053      	beq.n	80055f0 <USB_EPStartXfer+0xb4>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005548:	eb00 1444 	add.w	r4, r0, r4, lsl #5
    if (ep->xfer_len == 0U)
 800554c:	694d      	ldr	r5, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800554e:	f8d4 6b10 	ldr.w	r6, [r4, #2832]	; 0xb10
 8005552:	0cf6      	lsrs	r6, r6, #19
 8005554:	04f6      	lsls	r6, r6, #19
 8005556:	f8c4 6b10 	str.w	r6, [r4, #2832]	; 0xb10
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800555a:	f8d4 6b10 	ldr.w	r6, [r4, #2832]	; 0xb10
 800555e:	f026 56ff 	bic.w	r6, r6, #534773760	; 0x1fe00000
 8005562:	f426 16c0 	bic.w	r6, r6, #1572864	; 0x180000
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005566:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800556a:	611e      	str	r6, [r3, #16]
    if (ep->xfer_len == 0U)
 800556c:	b37d      	cbz	r5, 80055ce <USB_EPStartXfer+0x92>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800556e:	688e      	ldr	r6, [r1, #8]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005570:	4f7c      	ldr	r7, [pc, #496]	; (8005764 <USB_EPStartXfer+0x228>)
 8005572:	f8d3 c010 	ldr.w	ip, [r3, #16]
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005576:	4435      	add	r5, r6
 8005578:	3d01      	subs	r5, #1
 800557a:	fbb5 f5f6 	udiv	r5, r5, r6
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800557e:	ea07 47c5 	and.w	r7, r7, r5, lsl #19
 8005582:	ea47 070c 	orr.w	r7, r7, ip
 8005586:	611f      	str	r7, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005588:	b2ad      	uxth	r5, r5
 800558a:	fb06 f505 	mul.w	r5, r6, r5
 800558e:	691e      	ldr	r6, [r3, #16]
 8005590:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8005594:	4335      	orrs	r5, r6
    if (dma == 1U)
 8005596:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005598:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 800559a:	d024      	beq.n	80055e6 <USB_EPStartXfer+0xaa>
    if (ep->type == EP_TYPE_ISOC)
 800559c:	78cb      	ldrb	r3, [r1, #3]
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d10c      	bne.n	80055bc <USB_EPStartXfer+0x80>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80055a2:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 80055a6:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80055aa:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 80055ae:	bf0c      	ite	eq
 80055b0:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80055b4:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 80055b8:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80055bc:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 80055c0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80055c4:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
}
 80055c8:	2000      	movs	r0, #0
 80055ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80055ce:	688d      	ldr	r5, [r1, #8]
 80055d0:	691e      	ldr	r6, [r3, #16]
 80055d2:	f3c5 0512 	ubfx	r5, r5, #0, #19
 80055d6:	4335      	orrs	r5, r6
 80055d8:	611d      	str	r5, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80055da:	691d      	ldr	r5, [r3, #16]
    if (dma == 1U)
 80055dc:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80055de:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 80055e2:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 80055e4:	d1da      	bne.n	800559c <USB_EPStartXfer+0x60>
      if ((uint32_t)ep->xfer_buff != 0U)
 80055e6:	68ca      	ldr	r2, [r1, #12]
 80055e8:	2a00      	cmp	r2, #0
 80055ea:	d0d7      	beq.n	800559c <USB_EPStartXfer+0x60>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80055ec:	615a      	str	r2, [r3, #20]
 80055ee:	e7d5      	b.n	800559c <USB_EPStartXfer+0x60>
    if (ep->xfer_len == 0U)
 80055f0:	694e      	ldr	r6, [r1, #20]
 80055f2:	2e00      	cmp	r6, #0
 80055f4:	d040      	beq.n	8005678 <USB_EPStartXfer+0x13c>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80055f6:	eb00 1e44 	add.w	lr, r0, r4, lsl #5
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80055fa:	f8d1 9008 	ldr.w	r9, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80055fe:	f8de c910 	ldr.w	ip, [lr, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005602:	4f58      	ldr	r7, [pc, #352]	; (8005764 <USB_EPStartXfer+0x228>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005604:	ea4f 4cdc 	mov.w	ip, ip, lsr #19
 8005608:	ea4f 4ccc 	mov.w	ip, ip, lsl #19
 800560c:	f8ce c910 	str.w	ip, [lr, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005610:	f8de 8910 	ldr.w	r8, [lr, #2320]	; 0x910
 8005614:	f028 58ff 	bic.w	r8, r8, #534773760	; 0x1fe00000
 8005618:	f428 18c0 	bic.w	r8, r8, #1572864	; 0x180000
 800561c:	f8ce 8910 	str.w	r8, [lr, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005620:	f8de 8910 	ldr.w	r8, [lr, #2320]	; 0x910
 8005624:	eb06 0c09 	add.w	ip, r6, r9
 8005628:	f10c 3cff 	add.w	ip, ip, #4294967295
 800562c:	fbbc fcf9 	udiv	ip, ip, r9
 8005630:	ea07 47cc 	and.w	r7, r7, ip, lsl #19
 8005634:	ea47 0708 	orr.w	r7, r7, r8
 8005638:	f8ce 7910 	str.w	r7, [lr, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800563c:	f8de c910 	ldr.w	ip, [lr, #2320]	; 0x910
 8005640:	f3c6 0712 	ubfx	r7, r6, #0, #19
 8005644:	ea47 070c 	orr.w	r7, r7, ip
 8005648:	f8ce 7910 	str.w	r7, [lr, #2320]	; 0x910
      if (ep->type == EP_TYPE_ISOC)
 800564c:	78cf      	ldrb	r7, [r1, #3]
 800564e:	2f01      	cmp	r7, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005650:	f50e 6310 	add.w	r3, lr, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 8005654:	d055      	beq.n	8005702 <USB_EPStartXfer+0x1c6>
    if (dma == 1U)
 8005656:	2a01      	cmp	r2, #1
 8005658:	d06f      	beq.n	800573a <USB_EPStartXfer+0x1fe>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800565a:	f8de 3900 	ldr.w	r3, [lr, #2304]	; 0x900
 800565e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005662:	f8ce 3900 	str.w	r3, [lr, #2304]	; 0x900
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005666:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 800566a:	f004 040f 	and.w	r4, r4, #15
 800566e:	40a5      	lsls	r5, r4
 8005670:	431d      	orrs	r5, r3
 8005672:	f8c0 5834 	str.w	r5, [r0, #2100]	; 0x834
  return HAL_OK;
 8005676:	e7a7      	b.n	80055c8 <USB_EPStartXfer+0x8c>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005678:	eb00 1c44 	add.w	ip, r0, r4, lsl #5
    if (dma == 1U)
 800567c:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800567e:	f8dc 5910 	ldr.w	r5, [ip, #2320]	; 0x910
 8005682:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8005686:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 800568a:	f8cc 5910 	str.w	r5, [ip, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800568e:	f8dc 5910 	ldr.w	r5, [ip, #2320]	; 0x910
 8005692:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8005696:	f8cc 5910 	str.w	r5, [ip, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800569a:	f8dc 5910 	ldr.w	r5, [ip, #2320]	; 0x910
 800569e:	ea4f 45d5 	mov.w	r5, r5, lsr #19
 80056a2:	ea4f 45c5 	mov.w	r5, r5, lsl #19
 80056a6:	f8cc 5910 	str.w	r5, [ip, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80056aa:	f50c 6310 	add.w	r3, ip, #2304	; 0x900
 80056ae:	78cf      	ldrb	r7, [r1, #3]
    if (dma == 1U)
 80056b0:	d038      	beq.n	8005724 <USB_EPStartXfer+0x1e8>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80056b2:	f8dc 5900 	ldr.w	r5, [ip, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 80056b6:	2f01      	cmp	r7, #1
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80056b8:	f045 4504 	orr.w	r5, r5, #2214592512	; 0x84000000
 80056bc:	f8cc 5900 	str.w	r5, [ip, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 80056c0:	d182      	bne.n	80055c8 <USB_EPStartXfer+0x8c>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80056c2:	f8d0 5808 	ldr.w	r5, [r0, #2056]	; 0x808
 80056c6:	f415 7f80 	tst.w	r5, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80056ca:	681d      	ldr	r5, [r3, #0]
 80056cc:	bf0c      	ite	eq
 80056ce:	f045 5500 	orreq.w	r5, r5, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80056d2:	f045 5580 	orrne.w	r5, r5, #268435456	; 0x10000000
 80056d6:	601d      	str	r5, [r3, #0]
  if (dma == 0U)
 80056d8:	2a00      	cmp	r2, #0
 80056da:	f47f af75 	bne.w	80055c8 <USB_EPStartXfer+0x8c>
    count32b = ((uint32_t)len + 3U) / 4U;
 80056de:	b2b6      	uxth	r6, r6
 80056e0:	3603      	adds	r6, #3
    for (i = 0U; i < count32b; i++)
 80056e2:	08b6      	lsrs	r6, r6, #2
 80056e4:	f43f af70 	beq.w	80055c8 <USB_EPStartXfer+0x8c>
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80056e8:	68cb      	ldr	r3, [r1, #12]
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80056ea:	eb00 3004 	add.w	r0, r0, r4, lsl #12
 80056ee:	eb03 0186 	add.w	r1, r3, r6, lsl #2
 80056f2:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 80056f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80056fa:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 80056fc:	428b      	cmp	r3, r1
 80056fe:	d1fa      	bne.n	80056f6 <USB_EPStartXfer+0x1ba>
 8005700:	e762      	b.n	80055c8 <USB_EPStartXfer+0x8c>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005702:	691d      	ldr	r5, [r3, #16]
 8005704:	f025 45c0 	bic.w	r5, r5, #1610612736	; 0x60000000
 8005708:	611d      	str	r5, [r3, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800570a:	691d      	ldr	r5, [r3, #16]
    if (dma == 1U)
 800570c:	2a01      	cmp	r2, #1
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800570e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005712:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 8005714:	d016      	beq.n	8005744 <USB_EPStartXfer+0x208>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005716:	f8de 5900 	ldr.w	r5, [lr, #2304]	; 0x900
 800571a:	f045 4504 	orr.w	r5, r5, #2214592512	; 0x84000000
 800571e:	f8ce 5900 	str.w	r5, [lr, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8005722:	e7ce      	b.n	80056c2 <USB_EPStartXfer+0x186>
      if ((uint32_t)ep->dma_addr != 0U)
 8005724:	690a      	ldr	r2, [r1, #16]
 8005726:	b95a      	cbnz	r2, 8005740 <USB_EPStartXfer+0x204>
      if (ep->type == EP_TYPE_ISOC)
 8005728:	2f01      	cmp	r7, #1
 800572a:	d00e      	beq.n	800574a <USB_EPStartXfer+0x20e>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8005732:	601a      	str	r2, [r3, #0]
}
 8005734:	2000      	movs	r0, #0
 8005736:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if ((uint32_t)ep->dma_addr != 0U)
 800573a:	690a      	ldr	r2, [r1, #16]
 800573c:	2a00      	cmp	r2, #0
 800573e:	d0f5      	beq.n	800572c <USB_EPStartXfer+0x1f0>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005740:	615a      	str	r2, [r3, #20]
 8005742:	e7f1      	b.n	8005728 <USB_EPStartXfer+0x1ec>
      if ((uint32_t)ep->dma_addr != 0U)
 8005744:	690a      	ldr	r2, [r1, #16]
 8005746:	2a00      	cmp	r2, #0
 8005748:	d1fa      	bne.n	8005740 <USB_EPStartXfer+0x204>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800574a:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 800574e:	f412 7f80 	tst.w	r2, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	bf0c      	ite	eq
 8005756:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800575a:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
 800575e:	601a      	str	r2, [r3, #0]
 8005760:	e7e4      	b.n	800572c <USB_EPStartXfer+0x1f0>
 8005762:	bf00      	nop
 8005764:	1ff80000 	.word	0x1ff80000

08005768 <USB_EP0StartXfer>:
  if (ep->is_in == 1U)
 8005768:	784b      	ldrb	r3, [r1, #1]
 800576a:	2b01      	cmp	r3, #1
{
 800576c:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t epnum = (uint32_t)ep->num;
 800576e:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 8005770:	d02d      	beq.n	80057ce <USB_EP0StartXfer+0x66>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005772:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    if (ep->xfer_len > 0U)
 8005776:	694d      	ldr	r5, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005778:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 800577c:	0ce4      	lsrs	r4, r4, #19
 800577e:	04e4      	lsls	r4, r4, #19
 8005780:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005784:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8005788:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 800578c:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005790:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005794:	611c      	str	r4, [r3, #16]
      ep->xfer_len = ep->maxpacket;
 8005796:	688c      	ldr	r4, [r1, #8]
    if (ep->xfer_len > 0U)
 8005798:	b105      	cbz	r5, 800579c <USB_EP0StartXfer+0x34>
      ep->xfer_len = ep->maxpacket;
 800579a:	614c      	str	r4, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800579c:	691d      	ldr	r5, [r3, #16]
 800579e:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 80057a2:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80057a4:	691d      	ldr	r5, [r3, #16]
 80057a6:	f3c4 0412 	ubfx	r4, r4, #0, #19
 80057aa:	432c      	orrs	r4, r5
    if (dma == 1U)
 80057ac:	2a01      	cmp	r2, #1
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80057ae:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 80057b0:	d008      	beq.n	80057c4 <USB_EP0StartXfer+0x5c>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80057b2:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80057b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80057ba:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 80057be:	2000      	movs	r0, #0
 80057c0:	bcf0      	pop	{r4, r5, r6, r7}
 80057c2:	4770      	bx	lr
      if ((uint32_t)ep->xfer_buff != 0U)
 80057c4:	68ca      	ldr	r2, [r1, #12]
 80057c6:	2a00      	cmp	r2, #0
 80057c8:	d0f3      	beq.n	80057b2 <USB_EP0StartXfer+0x4a>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80057ca:	615a      	str	r2, [r3, #20]
 80057cc:	e7f1      	b.n	80057b2 <USB_EP0StartXfer+0x4a>
    if (ep->xfer_len == 0U)
 80057ce:	694d      	ldr	r5, [r1, #20]
 80057d0:	b39d      	cbz	r5, 800583a <USB_EP0StartXfer+0xd2>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80057d2:	eb00 1c44 	add.w	ip, r0, r4, lsl #5
      if (ep->xfer_len > ep->maxpacket)
 80057d6:	688f      	ldr	r7, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80057d8:	f8dc 6910 	ldr.w	r6, [ip, #2320]	; 0x910
 80057dc:	0cf6      	lsrs	r6, r6, #19
 80057de:	04f6      	lsls	r6, r6, #19
 80057e0:	f8cc 6910 	str.w	r6, [ip, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80057e4:	f8dc 6910 	ldr.w	r6, [ip, #2320]	; 0x910
 80057e8:	f026 56ff 	bic.w	r6, r6, #534773760	; 0x1fe00000
 80057ec:	f426 16c0 	bic.w	r6, r6, #1572864	; 0x180000
      if (ep->xfer_len > ep->maxpacket)
 80057f0:	42bd      	cmp	r5, r7
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80057f2:	f50c 6310 	add.w	r3, ip, #2304	; 0x900
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80057f6:	611e      	str	r6, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 80057f8:	d94d      	bls.n	8005896 <USB_EP0StartXfer+0x12e>
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80057fa:	691d      	ldr	r5, [r3, #16]
        ep->xfer_len = ep->maxpacket;
 80057fc:	614f      	str	r7, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80057fe:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8005802:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005804:	691e      	ldr	r6, [r3, #16]
 8005806:	f3c7 0512 	ubfx	r5, r7, #0, #19
 800580a:	4335      	orrs	r5, r6
    if (dma == 1U)
 800580c:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800580e:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 8005810:	d037      	beq.n	8005882 <USB_EP0StartXfer+0x11a>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005812:	f8dc 3900 	ldr.w	r3, [ip, #2304]	; 0x900
 8005816:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800581a:	f8cc 3900 	str.w	r3, [ip, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 800581e:	2f00      	cmp	r7, #0
 8005820:	d0cd      	beq.n	80057be <USB_EP0StartXfer+0x56>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005822:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 8005826:	f004 020f 	and.w	r2, r4, #15
 800582a:	2401      	movs	r4, #1
 800582c:	4094      	lsls	r4, r2
 800582e:	431c      	orrs	r4, r3
 8005830:	f8c0 4834 	str.w	r4, [r0, #2100]	; 0x834
}
 8005834:	2000      	movs	r0, #0
 8005836:	bcf0      	pop	{r4, r5, r6, r7}
 8005838:	4770      	bx	lr
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800583a:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    if (dma == 1U)
 800583e:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005840:	f8d0 5910 	ldr.w	r5, [r0, #2320]	; 0x910
 8005844:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8005848:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 800584c:	f8c0 5910 	str.w	r5, [r0, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005850:	f8d0 5910 	ldr.w	r5, [r0, #2320]	; 0x910
 8005854:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8005858:	f8c0 5910 	str.w	r5, [r0, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800585c:	f8d0 5910 	ldr.w	r5, [r0, #2320]	; 0x910
 8005860:	ea4f 45d5 	mov.w	r5, r5, lsr #19
 8005864:	ea4f 45c5 	mov.w	r5, r5, lsl #19
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005868:	f500 6310 	add.w	r3, r0, #2304	; 0x900
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800586c:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 800586e:	d008      	beq.n	8005882 <USB_EP0StartXfer+0x11a>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005870:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8005874:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005878:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800587c:	bcf0      	pop	{r4, r5, r6, r7}
 800587e:	2000      	movs	r0, #0
 8005880:	4770      	bx	lr
      if ((uint32_t)ep->dma_addr != 0U)
 8005882:	690a      	ldr	r2, [r1, #16]
 8005884:	b102      	cbz	r2, 8005888 <USB_EP0StartXfer+0x120>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005886:	615a      	str	r2, [r3, #20]
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
}
 800588e:	2000      	movs	r0, #0
 8005890:	bcf0      	pop	{r4, r5, r6, r7}
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005892:	601a      	str	r2, [r3, #0]
}
 8005894:	4770      	bx	lr
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005896:	691e      	ldr	r6, [r3, #16]
 8005898:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 800589c:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800589e:	691e      	ldr	r6, [r3, #16]
 80058a0:	f3c5 0512 	ubfx	r5, r5, #0, #19
 80058a4:	4335      	orrs	r5, r6
    if (dma == 1U)
 80058a6:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80058a8:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 80058aa:	d0ea      	beq.n	8005882 <USB_EP0StartXfer+0x11a>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80058ac:	f8dc 3900 	ldr.w	r3, [ip, #2304]	; 0x900
 80058b0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80058b4:	f8cc 3900 	str.w	r3, [ip, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 80058b8:	e7b3      	b.n	8005822 <USB_EP0StartXfer+0xba>
 80058ba:	bf00      	nop

080058bc <USB_WritePacket>:
{
 80058bc:	b410      	push	{r4}
 80058be:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if (dma == 0U)
 80058c2:	b964      	cbnz	r4, 80058de <USB_WritePacket+0x22>
    count32b = ((uint32_t)len + 3U) / 4U;
 80058c4:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 80058c6:	089b      	lsrs	r3, r3, #2
 80058c8:	d009      	beq.n	80058de <USB_WritePacket+0x22>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80058ca:	3201      	adds	r2, #1
 80058cc:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 80058d0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80058d4:	f851 2b04 	ldr.w	r2, [r1], #4
 80058d8:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 80058da:	428b      	cmp	r3, r1
 80058dc:	d1fa      	bne.n	80058d4 <USB_WritePacket+0x18>
}
 80058de:	2000      	movs	r0, #0
 80058e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80058e4:	4770      	bx	lr
 80058e6:	bf00      	nop

080058e8 <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80058e8:	3203      	adds	r2, #3
  for (i = 0U; i < count32b; i++)
 80058ea:	0892      	lsrs	r2, r2, #2
 80058ec:	d00c      	beq.n	8005908 <USB_ReadPacket+0x20>
{
 80058ee:	b410      	push	{r4}
 80058f0:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
 80058f4:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80058f8:	6823      	ldr	r3, [r4, #0]
 80058fa:	f841 3b04 	str.w	r3, [r1], #4
  for (i = 0U; i < count32b; i++)
 80058fe:	4288      	cmp	r0, r1
 8005900:	d1fa      	bne.n	80058f8 <USB_ReadPacket+0x10>
}
 8005902:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005906:	4770      	bx	lr
  uint32_t *pDest = (uint32_t *)dest;
 8005908:	4608      	mov	r0, r1
}
 800590a:	4770      	bx	lr

0800590c <USB_EPSetStall>:
  if (ep->is_in == 1U)
 800590c:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800590e:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8005910:	2a01      	cmp	r2, #1
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005912:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 8005916:	d00c      	beq.n	8005932 <USB_EPSetStall+0x26>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005918:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 800591c:	2a00      	cmp	r2, #0
 800591e:	db00      	blt.n	8005922 <USB_EPSetStall+0x16>
 8005920:	b9d3      	cbnz	r3, 8005958 <USB_EPSetStall+0x4c>
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005922:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8005926:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800592a:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800592e:	2000      	movs	r0, #0
 8005930:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005932:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8005936:	2a00      	cmp	r2, #0
 8005938:	db06      	blt.n	8005948 <USB_EPSetStall+0x3c>
 800593a:	b12b      	cbz	r3, 8005948 <USB_EPSetStall+0x3c>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800593c:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8005940:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005944:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005948:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800594c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005950:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8005954:	2000      	movs	r0, #0
 8005956:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005958:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800595c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005960:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8005964:	e7dd      	b.n	8005922 <USB_EPSetStall+0x16>
 8005966:	bf00      	nop

08005968 <USB_EPClearStall>:
  if (ep->is_in == 1U)
 8005968:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800596a:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800596c:	2a01      	cmp	r2, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800596e:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 8005972:	d013      	beq.n	800599c <USB_EPClearStall+0x34>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005974:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8005978:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800597c:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005980:	78cb      	ldrb	r3, [r1, #3]
 8005982:	3b02      	subs	r3, #2
 8005984:	2b01      	cmp	r3, #1
 8005986:	d901      	bls.n	800598c <USB_EPClearStall+0x24>
}
 8005988:	2000      	movs	r0, #0
 800598a:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800598c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8005990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005994:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8005998:	2000      	movs	r0, #0
 800599a:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800599c:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80059a0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80059a4:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80059a8:	78cb      	ldrb	r3, [r1, #3]
 80059aa:	3b02      	subs	r3, #2
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d8eb      	bhi.n	8005988 <USB_EPClearStall+0x20>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80059b0:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80059b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059b8:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 80059bc:	2000      	movs	r0, #0
 80059be:	4770      	bx	lr

080059c0 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80059c0:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80059c4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80059c8:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80059cc:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80059d0:	0109      	lsls	r1, r1, #4
 80059d2:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 80059d6:	4319      	orrs	r1, r3
 80059d8:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 80059dc:	2000      	movs	r0, #0
 80059de:	4770      	bx	lr

080059e0 <USB_DevConnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80059e0:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 80059e4:	f023 0303 	bic.w	r3, r3, #3
 80059e8:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80059ec:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 80059f0:	f023 0302 	bic.w	r3, r3, #2
 80059f4:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 80059f8:	2000      	movs	r0, #0
 80059fa:	4770      	bx	lr

080059fc <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80059fc:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 8005a00:	f023 0303 	bic.w	r3, r3, #3
 8005a04:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005a08:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8005a0c:	f043 0302 	orr.w	r3, r3, #2
 8005a10:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 8005a14:	2000      	movs	r0, #0
 8005a16:	4770      	bx	lr

08005a18 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8005a18:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8005a1a:	6980      	ldr	r0, [r0, #24]
}
 8005a1c:	4010      	ands	r0, r2
 8005a1e:	4770      	bx	lr

08005a20 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8005a20:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8005a24:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005a28:	69c0      	ldr	r0, [r0, #28]
 8005a2a:	4018      	ands	r0, r3
}
 8005a2c:	0c00      	lsrs	r0, r0, #16
 8005a2e:	4770      	bx	lr

08005a30 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8005a30:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8005a34:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005a38:	69c0      	ldr	r0, [r0, #28]
 8005a3a:	4018      	ands	r0, r3
}
 8005a3c:	b280      	uxth	r0, r0
 8005a3e:	4770      	bx	lr

08005a40 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005a40:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005a44:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005a48:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005a4c:	6940      	ldr	r0, [r0, #20]
}
 8005a4e:	4010      	ands	r0, r2
 8005a50:	4770      	bx	lr
 8005a52:	bf00      	nop

08005a54 <USB_ReadDevInEPInterrupt>:
{
 8005a54:	b410      	push	{r4}
  msk = USBx_DEVICE->DIEPMSK;
 8005a56:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005a5a:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005a5e:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005a62:	f001 010f 	and.w	r1, r1, #15
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005a66:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005a6a:	40cb      	lsrs	r3, r1
 8005a6c:	01db      	lsls	r3, r3, #7
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005a6e:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	4323      	orrs	r3, r4
}
 8005a74:	4018      	ands	r0, r3
 8005a76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8005a7c:	6940      	ldr	r0, [r0, #20]
}
 8005a7e:	f000 0001 	and.w	r0, r0, #1
 8005a82:	4770      	bx	lr

08005a84 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005a84:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8005a88:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005a8c:	f023 0307 	bic.w	r3, r3, #7
 8005a90:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005a94:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8005a98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a9c:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 8005aa0:	2000      	movs	r0, #0
 8005aa2:	4770      	bx	lr

08005aa4 <USB_EP0_OutStart>:
{
 8005aa4:	b410      	push	{r4}
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005aa6:	4b14      	ldr	r3, [pc, #80]	; (8005af8 <USB_EP0_OutStart+0x54>)
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005aa8:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005aaa:	429c      	cmp	r4, r3
 8005aac:	d81a      	bhi.n	8005ae4 <USB_EP0_OutStart+0x40>
 8005aae:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005ab6:	6903      	ldr	r3, [r0, #16]
 8005ab8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005abc:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005abe:	6903      	ldr	r3, [r0, #16]
 8005ac0:	f043 0318 	orr.w	r3, r3, #24
 8005ac4:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005ac6:	6903      	ldr	r3, [r0, #16]
  if (dma == 1U)
 8005ac8:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005aca:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005ace:	6103      	str	r3, [r0, #16]
  if (dma == 1U)
 8005ad0:	d104      	bne.n	8005adc <USB_EP0_OutStart+0x38>
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005ad2:	6142      	str	r2, [r0, #20]
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005ad4:	6803      	ldr	r3, [r0, #0]
 8005ad6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005ada:	6003      	str	r3, [r0, #0]
}
 8005adc:	2000      	movs	r0, #0
 8005ade:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ae2:	4770      	bx	lr
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ae4:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 8005aee:	dae0      	bge.n	8005ab2 <USB_EP0_OutStart+0xe>
}
 8005af0:	2000      	movs	r0, #0
 8005af2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005af6:	4770      	bx	lr
 8005af8:	4f54300a 	.word	0x4f54300a

08005afc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005afc:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005afe:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 8005b02:	b184      	cbz	r4, 8005b26 <USBD_CDC_EP0_RxReady+0x2a>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005b04:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8005b08:	b15b      	cbz	r3, 8005b22 <USBD_CDC_EP0_RxReady+0x26>
 8005b0a:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8005b0e:	28ff      	cmp	r0, #255	; 0xff
 8005b10:	d007      	beq.n	8005b22 <USBD_CDC_EP0_RxReady+0x26>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8005b18:	4621      	mov	r1, r4
 8005b1a:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8005b1c:	23ff      	movs	r3, #255	; 0xff
 8005b1e:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005b22:	2000      	movs	r0, #0
}
 8005b24:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 8005b26:	2003      	movs	r0, #3
}
 8005b28:	bd10      	pop	{r4, pc}
 8005b2a:	bf00      	nop

08005b2c <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005b2c:	2343      	movs	r3, #67	; 0x43
 8005b2e:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgFSDesc;
}
 8005b30:	4800      	ldr	r0, [pc, #0]	; (8005b34 <USBD_CDC_GetFSCfgDesc+0x8>)
 8005b32:	4770      	bx	lr
 8005b34:	20000044 	.word	0x20000044

08005b38 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005b38:	2343      	movs	r3, #67	; 0x43
 8005b3a:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgHSDesc;
}
 8005b3c:	4800      	ldr	r0, [pc, #0]	; (8005b40 <USBD_CDC_GetHSCfgDesc+0x8>)
 8005b3e:	4770      	bx	lr
 8005b40:	20000088 	.word	0x20000088

08005b44 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005b44:	2343      	movs	r3, #67	; 0x43
 8005b46:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
}
 8005b48:	4800      	ldr	r0, [pc, #0]	; (8005b4c <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8005b4a:	4770      	bx	lr
 8005b4c:	200000d8 	.word	0x200000d8

08005b50 <USBD_CDC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005b50:	230a      	movs	r3, #10
 8005b52:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 8005b54:	4800      	ldr	r0, [pc, #0]	; (8005b58 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8005b56:	4770      	bx	lr
 8005b58:	200000cc 	.word	0x200000cc

08005b5c <USBD_CDC_DataOut>:
{
 8005b5c:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005b5e:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  if (pdev->pClassData == NULL)
 8005b62:	b175      	cbz	r5, 8005b82 <USBD_CDC_DataOut+0x26>
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005b64:	4604      	mov	r4, r0
 8005b66:	f001 f88f 	bl	8006c88 <USBD_LL_GetRxDataSize>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005b6a:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005b6e:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005b72:	68db      	ldr	r3, [r3, #12]
 8005b74:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8005b78:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 8005b7c:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8005b7e:	2000      	movs	r0, #0
}
 8005b80:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 8005b82:	2003      	movs	r0, #3
}
 8005b84:	bd38      	pop	{r3, r4, r5, pc}
 8005b86:	bf00      	nop

08005b88 <USBD_CDC_DataIn>:
{
 8005b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pdev->pClassData == NULL)
 8005b8a:	f8d0 72bc 	ldr.w	r7, [r0, #700]	; 0x2bc
 8005b8e:	b367      	cbz	r7, 8005bea <USBD_CDC_DataIn+0x62>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005b90:	eb01 0681 	add.w	r6, r1, r1, lsl #2
 8005b94:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8005b98:	4605      	mov	r5, r0
 8005b9a:	69b3      	ldr	r3, [r6, #24]
 8005b9c:	460a      	mov	r2, r1
 8005b9e:	b96b      	cbnz	r3, 8005bbc <USBD_CDC_DataIn+0x34>
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8005ba0:	f8d5 32c0 	ldr.w	r3, [r5, #704]	; 0x2c0
 8005ba4:	691b      	ldr	r3, [r3, #16]
    hcdc->TxState = 0U;
 8005ba6:	2400      	movs	r4, #0
 8005ba8:	f8c7 4214 	str.w	r4, [r7, #532]	; 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8005bac:	b1db      	cbz	r3, 8005be6 <USBD_CDC_DataIn+0x5e>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005bae:	f8d7 0208 	ldr.w	r0, [r7, #520]	; 0x208
 8005bb2:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8005bb6:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8005bb8:	4620      	mov	r0, r4
}
 8005bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005bbc:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
 8005bc0:	ebc1 0cc1 	rsb	ip, r1, r1, lsl #3
 8005bc4:	eb04 048c 	add.w	r4, r4, ip, lsl #2
 8005bc8:	f8d4 c044 	ldr.w	ip, [r4, #68]	; 0x44
 8005bcc:	fbb3 f4fc 	udiv	r4, r3, ip
 8005bd0:	fb0c 3414 	mls	r4, ip, r4, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005bd4:	2c00      	cmp	r4, #0
 8005bd6:	d1e3      	bne.n	8005ba0 <USBD_CDC_DataIn+0x18>
    pdev->ep_in[epnum].total_length = 0U;
 8005bd8:	61b4      	str	r4, [r6, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005bda:	4623      	mov	r3, r4
 8005bdc:	4622      	mov	r2, r4
 8005bde:	f001 f837 	bl	8006c50 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 8005be2:	4620      	mov	r0, r4
}
 8005be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return (uint8_t)USBD_OK;
 8005be6:	4618      	mov	r0, r3
}
 8005be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (uint8_t)USBD_FAIL;
 8005bea:	2003      	movs	r0, #3
}
 8005bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bee:	bf00      	nop

08005bf0 <USBD_CDC_Setup>:
{
 8005bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005bf4:	f8d0 82bc 	ldr.w	r8, [r0, #700]	; 0x2bc
{
 8005bf8:	b082      	sub	sp, #8
  uint8_t ifalt = 0U;
 8005bfa:	2700      	movs	r7, #0
 8005bfc:	f88d 7005 	strb.w	r7, [sp, #5]
  uint16_t status_info = 0U;
 8005c00:	f8ad 7006 	strh.w	r7, [sp, #6]
  if (hcdc == NULL)
 8005c04:	f1b8 0f00 	cmp.w	r8, #0
 8005c08:	d068      	beq.n	8005cdc <USBD_CDC_Setup+0xec>
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c0a:	780b      	ldrb	r3, [r1, #0]
 8005c0c:	f013 0560 	ands.w	r5, r3, #96	; 0x60
 8005c10:	4606      	mov	r6, r0
 8005c12:	460c      	mov	r4, r1
 8005c14:	d01f      	beq.n	8005c56 <USBD_CDC_Setup+0x66>
 8005c16:	2d20      	cmp	r5, #32
 8005c18:	d008      	beq.n	8005c2c <USBD_CDC_Setup+0x3c>
          USBD_CtlError(pdev, req);
 8005c1a:	4621      	mov	r1, r4
 8005c1c:	4630      	mov	r0, r6
 8005c1e:	f000 fd2f 	bl	8006680 <USBD_CtlError>
          ret = USBD_FAIL;
 8005c22:	2503      	movs	r5, #3
}
 8005c24:	4628      	mov	r0, r5
 8005c26:	b002      	add	sp, #8
 8005c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (req->wLength != 0U)
 8005c2c:	88cd      	ldrh	r5, [r1, #6]
 8005c2e:	b38d      	cbz	r5, 8005c94 <USBD_CDC_Setup+0xa4>
        if ((req->bmRequest & 0x80U) != 0U)
 8005c30:	061b      	lsls	r3, r3, #24
 8005c32:	d558      	bpl.n	8005ce6 <USBD_CDC_Setup+0xf6>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005c34:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8005c38:	7848      	ldrb	r0, [r1, #1]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	462a      	mov	r2, r5
 8005c3e:	4641      	mov	r1, r8
 8005c40:	4798      	blx	r3
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005c42:	88e2      	ldrh	r2, [r4, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005c44:	2a07      	cmp	r2, #7
 8005c46:	4641      	mov	r1, r8
 8005c48:	bf28      	it	cs
 8005c4a:	2207      	movcs	r2, #7
 8005c4c:	4630      	mov	r0, r6
  USBD_StatusTypeDef ret = USBD_OK;
 8005c4e:	463d      	mov	r5, r7
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005c50:	f000 fd48 	bl	80066e4 <USBD_CtlSendData>
 8005c54:	e7e6      	b.n	8005c24 <USBD_CDC_Setup+0x34>
      switch (req->bRequest)
 8005c56:	784b      	ldrb	r3, [r1, #1]
 8005c58:	2b0b      	cmp	r3, #11
 8005c5a:	d8de      	bhi.n	8005c1a <USBD_CDC_Setup+0x2a>
 8005c5c:	a201      	add	r2, pc, #4	; (adr r2, 8005c64 <USBD_CDC_Setup+0x74>)
 8005c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c62:	bf00      	nop
 8005c64:	08005cc7 	.word	0x08005cc7
 8005c68:	08005c25 	.word	0x08005c25
 8005c6c:	08005c1b 	.word	0x08005c1b
 8005c70:	08005c1b 	.word	0x08005c1b
 8005c74:	08005c1b 	.word	0x08005c1b
 8005c78:	08005c1b 	.word	0x08005c1b
 8005c7c:	08005c1b 	.word	0x08005c1b
 8005c80:	08005c1b 	.word	0x08005c1b
 8005c84:	08005c1b 	.word	0x08005c1b
 8005c88:	08005c1b 	.word	0x08005c1b
 8005c8c:	08005cb3 	.word	0x08005cb3
 8005c90:	08005ca9 	.word	0x08005ca9
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005c94:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8005c98:	7848      	ldrb	r0, [r1, #1]
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	462a      	mov	r2, r5
 8005c9e:	4798      	blx	r3
}
 8005ca0:	4628      	mov	r0, r5
 8005ca2:	b002      	add	sp, #8
 8005ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005ca8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005cac:	2b03      	cmp	r3, #3
 8005cae:	d0b9      	beq.n	8005c24 <USBD_CDC_Setup+0x34>
 8005cb0:	e7b3      	b.n	8005c1a <USBD_CDC_Setup+0x2a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cb2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005cb6:	2b03      	cmp	r3, #3
 8005cb8:	d1af      	bne.n	8005c1a <USBD_CDC_Setup+0x2a>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f10d 0105 	add.w	r1, sp, #5
 8005cc0:	f000 fd10 	bl	80066e4 <USBD_CtlSendData>
 8005cc4:	e7ae      	b.n	8005c24 <USBD_CDC_Setup+0x34>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cc6:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8005cca:	2a03      	cmp	r2, #3
 8005ccc:	d1a5      	bne.n	8005c1a <USBD_CDC_Setup+0x2a>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005cce:	2202      	movs	r2, #2
 8005cd0:	f10d 0106 	add.w	r1, sp, #6
  USBD_StatusTypeDef ret = USBD_OK;
 8005cd4:	461d      	mov	r5, r3
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005cd6:	f000 fd05 	bl	80066e4 <USBD_CtlSendData>
 8005cda:	e7a3      	b.n	8005c24 <USBD_CDC_Setup+0x34>
    return (uint8_t)USBD_FAIL;
 8005cdc:	2503      	movs	r5, #3
}
 8005cde:	4628      	mov	r0, r5
 8005ce0:	b002      	add	sp, #8
 8005ce2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          hcdc->CmdOpCode = req->bRequest;
 8005ce6:	784b      	ldrb	r3, [r1, #1]
 8005ce8:	f888 3200 	strb.w	r3, [r8, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005cec:	f888 5201 	strb.w	r5, [r8, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005cf0:	462a      	mov	r2, r5
 8005cf2:	4641      	mov	r1, r8
 8005cf4:	f000 fd0c 	bl	8006710 <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 8005cf8:	463d      	mov	r5, r7
 8005cfa:	e793      	b.n	8005c24 <USBD_CDC_Setup+0x34>

08005cfc <USBD_CDC_DeInit>:
{
 8005cfc:	b538      	push	{r3, r4, r5, lr}
 8005cfe:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005d00:	2500      	movs	r5, #0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005d02:	2181      	movs	r1, #129	; 0x81
 8005d04:	f000 ff58 	bl	8006bb8 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005d08:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005d0a:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005d0c:	4620      	mov	r0, r4
 8005d0e:	f000 ff53 	bl	8006bb8 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005d12:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005d16:	4620      	mov	r0, r4
 8005d18:	2182      	movs	r1, #130	; 0x82
 8005d1a:	f000 ff4d 	bl	8006bb8 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8005d1e:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005d22:	64e5      	str	r5, [r4, #76]	; 0x4c
  if (pdev->pClassData != NULL)
 8005d24:	b14b      	cbz	r3, 8005d3a <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005d26:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005d2e:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 8005d32:	f000 ffb1 	bl	8006c98 <USBD_static_free>
    pdev->pClassData = NULL;
 8005d36:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 8005d3a:	2000      	movs	r0, #0
 8005d3c:	bd38      	pop	{r3, r4, r5, pc}
 8005d3e:	bf00      	nop

08005d40 <USBD_CDC_Init>:
{
 8005d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d44:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005d46:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005d4a:	f000 ffa1 	bl	8006c90 <USBD_static_malloc>
  if (hcdc == NULL)
 8005d4e:	4605      	mov	r5, r0
 8005d50:	2800      	cmp	r0, #0
 8005d52:	d04a      	beq.n	8005dea <USBD_CDC_Init+0xaa>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d54:	7c23      	ldrb	r3, [r4, #16]
  pdev->pClassData = (void *)hcdc;
 8005d56:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d5a:	b393      	cbz	r3, 8005dc2 <USBD_CDC_Init+0x82>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005d5c:	2340      	movs	r3, #64	; 0x40
 8005d5e:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005d60:	2601      	movs	r6, #1
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005d62:	2202      	movs	r2, #2
 8005d64:	4620      	mov	r0, r4
 8005d66:	f000 ff17 	bl	8006b98 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005d6a:	8726      	strh	r6, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005d6c:	4631      	mov	r1, r6
 8005d6e:	2340      	movs	r3, #64	; 0x40
 8005d70:	2202      	movs	r2, #2
 8005d72:	4620      	mov	r0, r4
 8005d74:	f000 ff10 	bl	8006b98 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005d78:	2310      	movs	r3, #16
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005d7a:	2203      	movs	r2, #3
 8005d7c:	2182      	movs	r1, #130	; 0x82
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005d7e:	f8a4 6178 	strh.w	r6, [r4, #376]	; 0x178
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005d82:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005d86:	4620      	mov	r0, r4
 8005d88:	2308      	movs	r3, #8
 8005d8a:	f000 ff05 	bl	8006b98 <USBD_LL_OpenEP>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005d8e:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005d92:	f04f 0801 	mov.w	r8, #1
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005d96:	681b      	ldr	r3, [r3, #0]
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005d98:	f8a4 804c 	strh.w	r8, [r4, #76]	; 0x4c
  hcdc->TxState = 0U;
 8005d9c:	2700      	movs	r7, #0
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005d9e:	4798      	blx	r3
  hcdc->TxState = 0U;
 8005da0:	f8c5 7214 	str.w	r7, [r5, #532]	; 0x214
  hcdc->RxState = 0U;
 8005da4:	f8c5 7218 	str.w	r7, [r5, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005da8:	7c26      	ldrb	r6, [r4, #16]
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005daa:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8005dae:	4641      	mov	r1, r8
 8005db0:	4620      	mov	r0, r4
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005db2:	b99e      	cbnz	r6, 8005ddc <USBD_CDC_Init+0x9c>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005db4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005db8:	f000 ff58 	bl	8006c6c <USBD_LL_PrepareReceive>
}
 8005dbc:	4630      	mov	r0, r6
 8005dbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005dc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005dc6:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005dc8:	2601      	movs	r6, #1
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005dca:	2202      	movs	r2, #2
 8005dcc:	4620      	mov	r0, r4
 8005dce:	f000 fee3 	bl	8006b98 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005dd2:	8726      	strh	r6, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005dd4:	4631      	mov	r1, r6
 8005dd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005dda:	e7c9      	b.n	8005d70 <USBD_CDC_Init+0x30>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005ddc:	2340      	movs	r3, #64	; 0x40
  return (uint8_t)USBD_OK;
 8005dde:	463e      	mov	r6, r7
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005de0:	f000 ff44 	bl	8006c6c <USBD_LL_PrepareReceive>
}
 8005de4:	4630      	mov	r0, r6
 8005de6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (uint8_t)USBD_EMEM;
 8005dea:	2602      	movs	r6, #2
    pdev->pClassData = NULL;
 8005dec:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
}
 8005df0:	4630      	mov	r0, r6
 8005df2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005df6:	bf00      	nop

08005df8 <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 8005df8:	b119      	cbz	r1, 8005e02 <USBD_CDC_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
 8005dfa:	f8c0 12c0 	str.w	r1, [r0, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005dfe:	2000      	movs	r0, #0
 8005e00:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8005e02:	2003      	movs	r0, #3
}
 8005e04:	4770      	bx	lr
 8005e06:	bf00      	nop

08005e08 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005e08:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 8005e0c:	b12b      	cbz	r3, 8005e1a <USBD_CDC_SetTxBuffer+0x12>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->TxBuffer = pbuff;
 8005e0e:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005e12:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005e16:	2000      	movs	r0, #0
 8005e18:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8005e1a:	2003      	movs	r0, #3
}
 8005e1c:	4770      	bx	lr
 8005e1e:	bf00      	nop

08005e20 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005e20:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 8005e24:	b11b      	cbz	r3, 8005e2e <USBD_CDC_SetRxBuffer+0xe>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;
 8005e26:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005e2a:	2000      	movs	r0, #0
 8005e2c:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8005e2e:	2003      	movs	r0, #3
}
 8005e30:	4770      	bx	lr
 8005e32:	bf00      	nop

08005e34 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005e34:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
{
 8005e38:	b510      	push	{r4, lr}

  if (pdev->pClassData == NULL)
 8005e3a:	b18a      	cbz	r2, 8005e60 <USBD_CDC_ReceivePacket+0x2c>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e3c:	7c04      	ldrb	r4, [r0, #16]
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005e3e:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e42:	b134      	cbz	r4, 8005e52 <USBD_CDC_ReceivePacket+0x1e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005e44:	2340      	movs	r3, #64	; 0x40
 8005e46:	2101      	movs	r1, #1
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005e48:	2400      	movs	r4, #0
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005e4a:	f000 ff0f 	bl	8006c6c <USBD_LL_PrepareReceive>
}
 8005e4e:	4620      	mov	r0, r4
 8005e50:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005e52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e56:	2101      	movs	r1, #1
 8005e58:	f000 ff08 	bl	8006c6c <USBD_LL_PrepareReceive>
}
 8005e5c:	4620      	mov	r0, r4
 8005e5e:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 8005e60:	2403      	movs	r4, #3
}
 8005e62:	4620      	mov	r0, r4
 8005e64:	bd10      	pop	{r4, pc}
 8005e66:	bf00      	nop

08005e68 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005e68:	b178      	cbz	r0, 8005e8a <USBD_Init+0x22>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	f8c0 32b8 	str.w	r3, [r0, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8005e70:	f8c0 32c0 	str.w	r3, [r0, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8005e74:	f8c0 32cc 	str.w	r3, [r0, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005e78:	b109      	cbz	r1, 8005e7e <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8005e7a:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005e7e:	2301      	movs	r3, #1
  pdev->id = id;
 8005e80:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005e82:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005e86:	f000 be47 	b.w	8006b18 <USBD_LL_Init>

  return ret;
}
 8005e8a:	2003      	movs	r0, #3
 8005e8c:	4770      	bx	lr
 8005e8e:	bf00      	nop

08005e90 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005e90:	b530      	push	{r4, r5, lr}
 8005e92:	b083      	sub	sp, #12
  uint16_t len = 0U;
 8005e94:	2400      	movs	r4, #0
 8005e96:	f8ad 4006 	strh.w	r4, [sp, #6]

  if (pclass == NULL)
 8005e9a:	b179      	cbz	r1, 8005ebc <USBD_RegisterClass+0x2c>
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005e9c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
  pdev->pClass = pclass;
 8005e9e:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005ea2:	4605      	mov	r5, r0
 8005ea4:	b13b      	cbz	r3, 8005eb6 <USBD_RegisterClass+0x26>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005ea6:	f10d 0006 	add.w	r0, sp, #6
 8005eaa:	4798      	blx	r3
 8005eac:	f8c5 02cc 	str.w	r0, [r5, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8005eb0:	4620      	mov	r0, r4
}
 8005eb2:	b003      	add	sp, #12
 8005eb4:	bd30      	pop	{r4, r5, pc}
  return USBD_OK;
 8005eb6:	4618      	mov	r0, r3
}
 8005eb8:	b003      	add	sp, #12
 8005eba:	bd30      	pop	{r4, r5, pc}
    return USBD_FAIL;
 8005ebc:	2003      	movs	r0, #3
}
 8005ebe:	b003      	add	sp, #12
 8005ec0:	bd30      	pop	{r4, r5, pc}
 8005ec2:	bf00      	nop

08005ec4 <USBD_Start>:
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005ec4:	f000 be5a 	b.w	8006b7c <USBD_LL_Start>

08005ec8 <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8005ec8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8005ecc:	b10b      	cbz	r3, 8005ed2 <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4718      	bx	r3
  }

  return ret;
}
 8005ed2:	2003      	movs	r0, #3
 8005ed4:	4770      	bx	lr
 8005ed6:	bf00      	nop

08005ed8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ed8:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005eda:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8005ede:	b10b      	cbz	r3, 8005ee4 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	4798      	blx	r3
  }

  return USBD_OK;
}
 8005ee4:	2000      	movs	r0, #0
 8005ee6:	bd08      	pop	{r3, pc}

08005ee8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005ee8:	b538      	push	{r3, r4, r5, lr}
 8005eea:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005eec:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
 8005ef0:	4628      	mov	r0, r5
 8005ef2:	f000 fbb1 	bl	8006658 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8005ef6:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
  pdev->ep0_data_len = pdev->request.wLength;
 8005efa:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0
 8005efe:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  pdev->ep0_state = USBD_EP0_SETUP;
 8005f02:	2201      	movs	r2, #1
 8005f04:	f001 031f 	and.w	r3, r1, #31
  switch (pdev->request.bmRequest & 0x1FU)
 8005f08:	4293      	cmp	r3, r2
  pdev->ep0_state = USBD_EP0_SETUP;
 8005f0a:	f8c4 2294 	str.w	r2, [r4, #660]	; 0x294
  switch (pdev->request.bmRequest & 0x1FU)
 8005f0e:	d009      	beq.n	8005f24 <USBD_LL_SetupStage+0x3c>
 8005f10:	2b02      	cmp	r3, #2
 8005f12:	d013      	beq.n	8005f3c <USBD_LL_SetupStage+0x54>
 8005f14:	b163      	cbz	r3, 8005f30 <USBD_LL_SetupStage+0x48>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005f16:	4620      	mov	r0, r4
 8005f18:	f001 0180 	and.w	r1, r1, #128	; 0x80
      break;
  }

  return ret;
}
 8005f1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005f20:	f000 be58 	b.w	8006bd4 <USBD_LL_StallEP>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005f24:	4629      	mov	r1, r5
 8005f26:	4620      	mov	r0, r4
}
 8005f28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005f2c:	f000 baca 	b.w	80064c4 <USBD_StdItfReq>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005f30:	4629      	mov	r1, r5
 8005f32:	4620      	mov	r0, r4
}
 8005f34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005f38:	f000 b924 	b.w	8006184 <USBD_StdDevReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005f3c:	4629      	mov	r1, r5
 8005f3e:	4620      	mov	r0, r4
}
 8005f40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005f44:	f000 baee 	b.w	8006524 <USBD_StdEPReq>

08005f48 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005f48:	b510      	push	{r4, lr}
 8005f4a:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005f4c:	b931      	cbnz	r1, 8005f5c <USBD_LL_DataOutStage+0x14>
 8005f4e:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005f50:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8005f54:	2a03      	cmp	r2, #3
 8005f56:	d00d      	beq.n	8005f74 <USBD_LL_DataOutStage+0x2c>
      }
    }
  }

  return USBD_OK;
}
 8005f58:	2000      	movs	r0, #0
 8005f5a:	bd10      	pop	{r4, pc}
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f5c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005f60:	2b03      	cmp	r3, #3
 8005f62:	d1f9      	bne.n	8005f58 <USBD_LL_DataOutStage+0x10>
      if (pdev->pClass->DataOut != NULL)
 8005f64:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8005f68:	699b      	ldr	r3, [r3, #24]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d0f4      	beq.n	8005f58 <USBD_LL_DataOutStage+0x10>
}
 8005f6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005f72:	4718      	bx	r3
      if (pep->rem_length > pep->maxpacket)
 8005f74:	e9d0 1257 	ldrd	r1, r2, [r0, #348]	; 0x15c
 8005f78:	4291      	cmp	r1, r2
 8005f7a:	d808      	bhi.n	8005f8e <USBD_LL_DataOutStage+0x46>
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f7c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005f80:	2b03      	cmp	r3, #3
 8005f82:	d00e      	beq.n	8005fa2 <USBD_LL_DataOutStage+0x5a>
        (void)USBD_CtlSendStatus(pdev);
 8005f84:	4620      	mov	r0, r4
 8005f86:	f000 fbd9 	bl	800673c <USBD_CtlSendStatus>
}
 8005f8a:	2000      	movs	r0, #0
 8005f8c:	bd10      	pop	{r4, pc}
        pep->rem_length -= pep->maxpacket;
 8005f8e:	1a89      	subs	r1, r1, r2
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005f90:	428a      	cmp	r2, r1
 8005f92:	bf28      	it	cs
 8005f94:	460a      	movcs	r2, r1
        pep->rem_length -= pep->maxpacket;
 8005f96:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	f000 fbc6 	bl	800672c <USBD_CtlContinueRx>
 8005fa0:	e7da      	b.n	8005f58 <USBD_LL_DataOutStage+0x10>
          if (pdev->pClass->EP0_RxReady != NULL)
 8005fa2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8005fa6:	691b      	ldr	r3, [r3, #16]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d0eb      	beq.n	8005f84 <USBD_LL_DataOutStage+0x3c>
            pdev->pClass->EP0_RxReady(pdev);
 8005fac:	4798      	blx	r3
 8005fae:	e7e9      	b.n	8005f84 <USBD_LL_DataOutStage+0x3c>

08005fb0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005fb0:	b570      	push	{r4, r5, r6, lr}
 8005fb2:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005fb4:	b951      	cbnz	r1, 8005fcc <USBD_LL_DataInStage+0x1c>
 8005fb6:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005fb8:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8005fbc:	2a02      	cmp	r2, #2
 8005fbe:	d011      	beq.n	8005fe4 <USBD_LL_DataInStage+0x34>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005fc0:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d022      	beq.n	800600e <USBD_LL_DataInStage+0x5e>
      }
    }
  }

  return USBD_OK;
}
 8005fc8:	2000      	movs	r0, #0
 8005fca:	bd70      	pop	{r4, r5, r6, pc}
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fcc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005fd0:	2b03      	cmp	r3, #3
 8005fd2:	d1f9      	bne.n	8005fc8 <USBD_LL_DataInStage+0x18>
      if (pdev->pClass->DataIn != NULL)
 8005fd4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8005fd8:	695b      	ldr	r3, [r3, #20]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d0f4      	beq.n	8005fc8 <USBD_LL_DataInStage+0x18>
}
 8005fde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005fe2:	4718      	bx	r3
      if (pep->rem_length > pep->maxpacket)
 8005fe4:	e9d0 2607 	ldrd	r2, r6, [r0, #28]
 8005fe8:	42b2      	cmp	r2, r6
 8005fea:	460d      	mov	r5, r1
 8005fec:	d814      	bhi.n	8006018 <USBD_LL_DataInStage+0x68>
        if ((pep->maxpacket == pep->rem_length) &&
 8005fee:	d01f      	beq.n	8006030 <USBD_LL_DataInStage+0x80>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ff0:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8005ff4:	2b03      	cmp	r3, #3
 8005ff6:	d028      	beq.n	800604a <USBD_LL_DataInStage+0x9a>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005ff8:	2180      	movs	r1, #128	; 0x80
 8005ffa:	4620      	mov	r0, r4
 8005ffc:	f000 fdea 	bl	8006bd4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006000:	4620      	mov	r0, r4
 8006002:	f000 fba7 	bl	8006754 <USBD_CtlReceiveStatus>
    if (pdev->dev_test_mode == 1U)
 8006006:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 800600a:	2b01      	cmp	r3, #1
 800600c:	d1dc      	bne.n	8005fc8 <USBD_LL_DataInStage+0x18>
      pdev->dev_test_mode = 0U;
 800600e:	2300      	movs	r3, #0
 8006010:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
}
 8006014:	2000      	movs	r0, #0
 8006016:	bd70      	pop	{r4, r5, r6, pc}
        pep->rem_length -= pep->maxpacket;
 8006018:	1b92      	subs	r2, r2, r6
 800601a:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800601c:	4619      	mov	r1, r3
 800601e:	f000 fb6f 	bl	8006700 <USBD_CtlContinueSendData>
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006022:	462b      	mov	r3, r5
 8006024:	462a      	mov	r2, r5
 8006026:	4629      	mov	r1, r5
 8006028:	4620      	mov	r0, r4
 800602a:	f000 fe1f 	bl	8006c6c <USBD_LL_PrepareReceive>
 800602e:	e7c7      	b.n	8005fc0 <USBD_LL_DataInStage+0x10>
            (pep->total_length >= pep->maxpacket) &&
 8006030:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 8006032:	429a      	cmp	r2, r3
 8006034:	d8dc      	bhi.n	8005ff0 <USBD_LL_DataInStage+0x40>
            (pep->total_length >= pep->maxpacket) &&
 8006036:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
 800603a:	4293      	cmp	r3, r2
 800603c:	d2d8      	bcs.n	8005ff0 <USBD_LL_DataInStage+0x40>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800603e:	460a      	mov	r2, r1
 8006040:	f000 fb5e 	bl	8006700 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006044:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
 8006048:	e7eb      	b.n	8006022 <USBD_LL_DataInStage+0x72>
            if (pdev->pClass->EP0_TxSent != NULL)
 800604a:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d0d1      	beq.n	8005ff8 <USBD_LL_DataInStage+0x48>
              pdev->pClass->EP0_TxSent(pdev);
 8006054:	4620      	mov	r0, r4
 8006056:	4798      	blx	r3
 8006058:	e7ce      	b.n	8005ff8 <USBD_LL_DataInStage+0x48>
 800605a:	bf00      	nop

0800605c <USBD_LL_Reset>:
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClass == NULL)
 800605c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
  pdev->ep0_state = USBD_EP0_IDLE;
 8006060:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006062:	2201      	movs	r2, #1
 8006064:	f880 229c 	strb.w	r2, [r0, #668]	; 0x29c
  pdev->dev_config = 0U;
 8006068:	6041      	str	r1, [r0, #4]
  pdev->ep0_state = USBD_EP0_IDLE;
 800606a:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  pdev->dev_remote_wakeup = 0U;
 800606e:	f8c0 12a4 	str.w	r1, [r0, #676]	; 0x2a4
  if (pdev->pClass == NULL)
 8006072:	b1eb      	cbz	r3, 80060b0 <USBD_LL_Reset+0x54>
  {
    return USBD_FAIL;
  }

  if (pdev->pClassData != NULL)
 8006074:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
{
 8006078:	b570      	push	{r4, r5, r6, lr}
 800607a:	4604      	mov	r4, r0
  if (pdev->pClassData != NULL)
 800607c:	b112      	cbz	r2, 8006084 <USBD_LL_Reset+0x28>
  {
    if (pdev->pClass->DeInit != NULL)
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	b103      	cbz	r3, 8006084 <USBD_LL_Reset+0x28>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006082:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006084:	2200      	movs	r2, #0
 8006086:	2340      	movs	r3, #64	; 0x40
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006088:	461d      	mov	r5, r3
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800608a:	4611      	mov	r1, r2
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800608c:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800608e:	4620      	mov	r0, r4
 8006090:	f000 fd82 	bl	8006b98 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006094:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006098:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800609c:	462b      	mov	r3, r5
 800609e:	2200      	movs	r2, #0
 80060a0:	2180      	movs	r1, #128	; 0x80
 80060a2:	4620      	mov	r0, r4
 80060a4:	f000 fd78 	bl	8006b98 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80060a8:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80060aa:	6225      	str	r5, [r4, #32]

  return USBD_OK;
 80060ac:	2000      	movs	r0, #0
}
 80060ae:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 80060b0:	2003      	movs	r0, #3
}
 80060b2:	4770      	bx	lr

080060b4 <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80060b4:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 80060b6:	2000      	movs	r0, #0
 80060b8:	4770      	bx	lr
 80060ba:	bf00      	nop

080060bc <USBD_LL_Suspend>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 80060bc:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
{
 80060c0:	4603      	mov	r3, r0
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80060c2:	2104      	movs	r1, #4
  pdev->dev_old_state = pdev->dev_state;
 80060c4:	b2d2      	uxtb	r2, r2
 80060c6:	f880 229d 	strb.w	r2, [r0, #669]	; 0x29d

  return USBD_OK;
}
 80060ca:	2000      	movs	r0, #0
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80060cc:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
}
 80060d0:	4770      	bx	lr
 80060d2:	bf00      	nop

080060d4 <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80060d4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80060d8:	2b04      	cmp	r3, #4
 80060da:	d104      	bne.n	80060e6 <USBD_LL_Resume+0x12>
  {
    pdev->dev_state = pdev->dev_old_state;
 80060dc:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 80060e6:	2000      	movs	r0, #0
 80060e8:	4770      	bx	lr
 80060ea:	bf00      	nop

080060ec <USBD_LL_SOF>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->pClass == NULL)
 80060ec:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 80060f0:	b15a      	cbz	r2, 800610a <USBD_LL_SOF+0x1e>
{
 80060f2:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060f4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80060f8:	2b03      	cmp	r3, #3
 80060fa:	d001      	beq.n	8006100 <USBD_LL_SOF+0x14>
    {
      (void)pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
 80060fc:	2000      	movs	r0, #0
}
 80060fe:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 8006100:	69d3      	ldr	r3, [r2, #28]
 8006102:	b123      	cbz	r3, 800610e <USBD_LL_SOF+0x22>
      (void)pdev->pClass->SOF(pdev);
 8006104:	4798      	blx	r3
  return USBD_OK;
 8006106:	2000      	movs	r0, #0
}
 8006108:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800610a:	2003      	movs	r0, #3
}
 800610c:	4770      	bx	lr
  return USBD_OK;
 800610e:	4618      	mov	r0, r3
}
 8006110:	bd08      	pop	{r3, pc}
 8006112:	bf00      	nop

08006114 <USBD_LL_IsoINIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
  if (pdev->pClass == NULL)
 8006114:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 8006118:	b15a      	cbz	r2, 8006132 <USBD_LL_IsoINIncomplete+0x1e>
{
 800611a:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800611c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006120:	2b03      	cmp	r3, #3
 8006122:	d001      	beq.n	8006128 <USBD_LL_IsoINIncomplete+0x14>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 8006124:	2000      	movs	r0, #0
}
 8006126:	bd08      	pop	{r3, pc}
    if (pdev->pClass->IsoINIncomplete != NULL)
 8006128:	6a13      	ldr	r3, [r2, #32]
 800612a:	b123      	cbz	r3, 8006136 <USBD_LL_IsoINIncomplete+0x22>
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800612c:	4798      	blx	r3
  return USBD_OK;
 800612e:	2000      	movs	r0, #0
}
 8006130:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8006132:	2003      	movs	r0, #3
}
 8006134:	4770      	bx	lr
  return USBD_OK;
 8006136:	4618      	mov	r0, r3
}
 8006138:	bd08      	pop	{r3, pc}
 800613a:	bf00      	nop

0800613c <USBD_LL_IsoOUTIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
  if (pdev->pClass == NULL)
 800613c:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 8006140:	b15a      	cbz	r2, 800615a <USBD_LL_IsoOUTIncomplete+0x1e>
{
 8006142:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006144:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006148:	2b03      	cmp	r3, #3
 800614a:	d001      	beq.n	8006150 <USBD_LL_IsoOUTIncomplete+0x14>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 800614c:	2000      	movs	r0, #0
}
 800614e:	bd08      	pop	{r3, pc}
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8006150:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8006152:	b123      	cbz	r3, 800615e <USBD_LL_IsoOUTIncomplete+0x22>
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8006154:	4798      	blx	r3
  return USBD_OK;
 8006156:	2000      	movs	r0, #0
}
 8006158:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800615a:	2003      	movs	r0, #3
}
 800615c:	4770      	bx	lr
  return USBD_OK;
 800615e:	4618      	mov	r0, r3
}
 8006160:	bd08      	pop	{r3, pc}
 8006162:	bf00      	nop

08006164 <USBD_LL_DevConnected>:
 8006164:	2000      	movs	r0, #0
 8006166:	4770      	bx	lr

08006168 <USBD_LL_DevDisconnected>:
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;

  if (pdev->pClass != NULL)
 8006168:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
  pdev->dev_state = USBD_STATE_DEFAULT;
 800616c:	2101      	movs	r1, #1
 800616e:	f880 129c 	strb.w	r1, [r0, #668]	; 0x29c
  if (pdev->pClass != NULL)
 8006172:	b12a      	cbz	r2, 8006180 <USBD_LL_DevDisconnected+0x18>
{
 8006174:	b508      	push	{r3, lr}
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006176:	6852      	ldr	r2, [r2, #4]
 8006178:	7901      	ldrb	r1, [r0, #4]
 800617a:	4790      	blx	r2
  }

  return USBD_OK;
}
 800617c:	2000      	movs	r0, #0
 800617e:	bd08      	pop	{r3, pc}
 8006180:	2000      	movs	r0, #0
 8006182:	4770      	bx	lr

08006184 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006186:	780c      	ldrb	r4, [r1, #0]
 8006188:	f004 0460 	and.w	r4, r4, #96	; 0x60
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800618c:	2c20      	cmp	r4, #32
{
 800618e:	b083      	sub	sp, #12
 8006190:	460e      	mov	r6, r1
 8006192:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006194:	d00e      	beq.n	80061b4 <USBD_StdDevReq+0x30>
 8006196:	2c40      	cmp	r4, #64	; 0x40
 8006198:	d00c      	beq.n	80061b4 <USBD_StdDevReq+0x30>
 800619a:	b1ac      	cbz	r4, 80061c8 <USBD_StdDevReq+0x44>
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800619c:	2180      	movs	r1, #128	; 0x80
 800619e:	4628      	mov	r0, r5
 80061a0:	f000 fd18 	bl	8006bd4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80061a4:	4628      	mov	r0, r5
 80061a6:	2100      	movs	r1, #0
 80061a8:	f000 fd14 	bl	8006bd4 <USBD_LL_StallEP>
  USBD_StatusTypeDef ret = USBD_OK;
 80061ac:	2400      	movs	r4, #0
}
 80061ae:	4620      	mov	r0, r4
 80061b0:	b003      	add	sp, #12
 80061b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80061b4:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 80061b8:	4631      	mov	r1, r6
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	4628      	mov	r0, r5
 80061be:	4798      	blx	r3
 80061c0:	4604      	mov	r4, r0
}
 80061c2:	4620      	mov	r0, r4
 80061c4:	b003      	add	sp, #12
 80061c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      switch (req->bRequest)
 80061c8:	784b      	ldrb	r3, [r1, #1]
 80061ca:	2b09      	cmp	r3, #9
 80061cc:	d8e6      	bhi.n	800619c <USBD_StdDevReq+0x18>
 80061ce:	a201      	add	r2, pc, #4	; (adr r2, 80061d4 <USBD_StdDevReq+0x50>)
 80061d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061d4:	08006235 	.word	0x08006235
 80061d8:	08006263 	.word	0x08006263
 80061dc:	0800619d 	.word	0x0800619d
 80061e0:	08006281 	.word	0x08006281
 80061e4:	0800619d 	.word	0x0800619d
 80061e8:	08006289 	.word	0x08006289
 80061ec:	080062c1 	.word	0x080062c1
 80061f0:	0800619d 	.word	0x0800619d
 80061f4:	080062dd 	.word	0x080062dd
 80061f8:	080061fd 	.word	0x080061fd
  cfgidx = (uint8_t)(req->wValue);
 80061fc:	788e      	ldrb	r6, [r1, #2]
 80061fe:	4fb0      	ldr	r7, [pc, #704]	; (80064c0 <USBD_StdDevReq+0x33c>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006200:	2e01      	cmp	r6, #1
  cfgidx = (uint8_t)(req->wValue);
 8006202:	703e      	strb	r6, [r7, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006204:	f200 8139 	bhi.w	800647a <USBD_StdDevReq+0x2f6>
  switch (pdev->dev_state)
 8006208:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800620c:	2b02      	cmp	r3, #2
 800620e:	b2da      	uxtb	r2, r3
 8006210:	f000 8121 	beq.w	8006456 <USBD_StdDevReq+0x2d2>
 8006214:	2a03      	cmp	r2, #3
 8006216:	f000 80fb 	beq.w	8006410 <USBD_StdDevReq+0x28c>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800621a:	2180      	movs	r1, #128	; 0x80
 800621c:	f000 fcda 	bl	8006bd4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006220:	2100      	movs	r1, #0
 8006222:	4628      	mov	r0, r5
 8006224:	f000 fcd6 	bl	8006bd4 <USBD_LL_StallEP>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006228:	7839      	ldrb	r1, [r7, #0]
 800622a:	4628      	mov	r0, r5
 800622c:	f7ff fe54 	bl	8005ed8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006230:	2403      	movs	r4, #3
      break;
 8006232:	e7bc      	b.n	80061ae <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 8006234:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8006238:	3a01      	subs	r2, #1
 800623a:	2a02      	cmp	r2, #2
 800623c:	d866      	bhi.n	800630c <USBD_StdDevReq+0x188>
      if (req->wLength != 0x2U)
 800623e:	88ca      	ldrh	r2, [r1, #6]
 8006240:	2a02      	cmp	r2, #2
 8006242:	d163      	bne.n	800630c <USBD_StdDevReq+0x188>
      if (pdev->dev_remote_wakeup != 0U)
 8006244:	f8d0 22a4 	ldr.w	r2, [r0, #676]	; 0x2a4
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006248:	2101      	movs	r1, #1
 800624a:	60c1      	str	r1, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 800624c:	b10a      	cbz	r2, 8006252 <USBD_StdDevReq+0xce>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800624e:	2203      	movs	r2, #3
 8006250:	60c2      	str	r2, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006252:	2202      	movs	r2, #2
 8006254:	f105 010c 	add.w	r1, r5, #12
 8006258:	4628      	mov	r0, r5
  USBD_StatusTypeDef ret = USBD_OK;
 800625a:	461c      	mov	r4, r3
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800625c:	f000 fa42 	bl	80066e4 <USBD_CtlSendData>
      break;
 8006260:	e7a5      	b.n	80061ae <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 8006262:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006266:	3b01      	subs	r3, #1
 8006268:	2b02      	cmp	r3, #2
 800626a:	d84f      	bhi.n	800630c <USBD_StdDevReq+0x188>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800626c:	884b      	ldrh	r3, [r1, #2]
 800626e:	2b01      	cmp	r3, #1
 8006270:	d19d      	bne.n	80061ae <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 8006272:	2300      	movs	r3, #0
 8006274:	f8c5 32a4 	str.w	r3, [r5, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006278:	4628      	mov	r0, r5
 800627a:	f000 fa5f 	bl	800673c <USBD_CtlSendStatus>
 800627e:	e796      	b.n	80061ae <USBD_StdDevReq+0x2a>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006280:	884b      	ldrh	r3, [r1, #2]
 8006282:	2b01      	cmp	r3, #1
 8006284:	d193      	bne.n	80061ae <USBD_StdDevReq+0x2a>
 8006286:	e7f5      	b.n	8006274 <USBD_StdDevReq+0xf0>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006288:	888b      	ldrh	r3, [r1, #4]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d13e      	bne.n	800630c <USBD_StdDevReq+0x188>
 800628e:	88cb      	ldrh	r3, [r1, #6]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d13b      	bne.n	800630c <USBD_StdDevReq+0x188>
 8006294:	884e      	ldrh	r6, [r1, #2]
 8006296:	2e7f      	cmp	r6, #127	; 0x7f
 8006298:	d838      	bhi.n	800630c <USBD_StdDevReq+0x188>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800629a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800629e:	2b03      	cmp	r3, #3
 80062a0:	d034      	beq.n	800630c <USBD_StdDevReq+0x188>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80062a2:	b2f1      	uxtb	r1, r6
      pdev->dev_address = dev_addr;
 80062a4:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80062a8:	f000 fcc4 	bl	8006c34 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80062ac:	4628      	mov	r0, r5
 80062ae:	f000 fa45 	bl	800673c <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 80062b2:	2e00      	cmp	r6, #0
 80062b4:	f000 80ff 	beq.w	80064b6 <USBD_StdDevReq+0x332>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80062b8:	2302      	movs	r3, #2
 80062ba:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 80062be:	e776      	b.n	80061ae <USBD_StdDevReq+0x2a>
          USBD_GetDescriptor(pdev, req);
 80062c0:	884a      	ldrh	r2, [r1, #2]
  uint16_t len = 0U;
 80062c2:	0a13      	lsrs	r3, r2, #8
 80062c4:	2100      	movs	r1, #0
 80062c6:	3b01      	subs	r3, #1
 80062c8:	f8ad 1006 	strh.w	r1, [sp, #6]
  switch (req->wValue >> 8)
 80062cc:	2b06      	cmp	r3, #6
 80062ce:	d81d      	bhi.n	800630c <USBD_StdDevReq+0x188>
 80062d0:	e8df f003 	tbb	[pc, r3]
 80062d4:	1c4d606d 	.word	0x1c4d606d
 80062d8:	431c      	.short	0x431c
 80062da:	27          	.byte	0x27
 80062db:	00          	.byte	0x00
  if (req->wLength != 1U)
 80062dc:	88ca      	ldrh	r2, [r1, #6]
 80062de:	2a01      	cmp	r2, #1
 80062e0:	d114      	bne.n	800630c <USBD_StdDevReq+0x188>
    switch (pdev->dev_state)
 80062e2:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c
 80062e6:	2902      	cmp	r1, #2
 80062e8:	b2cb      	uxtb	r3, r1
 80062ea:	f200 808a 	bhi.w	8006402 <USBD_StdDevReq+0x27e>
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	f43f af54 	beq.w	800619c <USBD_StdDevReq+0x18>
        pdev->dev_default_config = 0U;
 80062f4:	4601      	mov	r1, r0
 80062f6:	2300      	movs	r3, #0
 80062f8:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80062fc:	f000 f9f2 	bl	80066e4 <USBD_CtlSendData>
        break;
 8006300:	e755      	b.n	80061ae <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006302:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d15d      	bne.n	80063c8 <USBD_StdDevReq+0x244>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800630c:	2180      	movs	r1, #128	; 0x80
 800630e:	4628      	mov	r0, r5
 8006310:	f000 fc60 	bl	8006bd4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006314:	4628      	mov	r0, r5
 8006316:	2100      	movs	r1, #0
 8006318:	f000 fc5c 	bl	8006bd4 <USBD_LL_StallEP>
}
 800631c:	4620      	mov	r0, r4
 800631e:	b003      	add	sp, #12
 8006320:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006322:	7c03      	ldrb	r3, [r0, #16]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d1f1      	bne.n	800630c <USBD_StdDevReq+0x188>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006328:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800632c:	f10d 0006 	add.w	r0, sp, #6
 8006330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006332:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006334:	2307      	movs	r3, #7
 8006336:	7043      	strb	r3, [r0, #1]
  if (req->wLength != 0U)
 8006338:	88f2      	ldrh	r2, [r6, #6]
 800633a:	2a00      	cmp	r2, #0
 800633c:	d09c      	beq.n	8006278 <USBD_StdDevReq+0xf4>
    if (len != 0U)
 800633e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d0e2      	beq.n	800630c <USBD_StdDevReq+0x188>
      len = MIN(len, req->wLength);
 8006346:	429a      	cmp	r2, r3
 8006348:	bf28      	it	cs
 800634a:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800634c:	4601      	mov	r1, r0
 800634e:	4628      	mov	r0, r5
      len = MIN(len, req->wLength);
 8006350:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006354:	f000 f9c6 	bl	80066e4 <USBD_CtlSendData>
 8006358:	e729      	b.n	80061ae <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800635a:	7c03      	ldrb	r3, [r0, #16]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d1d5      	bne.n	800630c <USBD_StdDevReq+0x188>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006360:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8006364:	f10d 0006 	add.w	r0, sp, #6
 8006368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800636a:	4798      	blx	r3
  if (err != 0U)
 800636c:	e7e4      	b.n	8006338 <USBD_StdDevReq+0x1b4>
      switch ((uint8_t)(req->wValue))
 800636e:	b2d2      	uxtb	r2, r2
 8006370:	2a05      	cmp	r2, #5
 8006372:	d8cb      	bhi.n	800630c <USBD_StdDevReq+0x188>
 8006374:	a301      	add	r3, pc, #4	; (adr r3, 800637c <USBD_StdDevReq+0x1f8>)
 8006376:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 800637a:	bf00      	nop
 800637c:	08006303 	.word	0x08006303
 8006380:	080063f7 	.word	0x080063f7
 8006384:	080063eb 	.word	0x080063eb
 8006388:	080063df 	.word	0x080063df
 800638c:	080063d3 	.word	0x080063d3
 8006390:	080063bf 	.word	0x080063bf
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006394:	7c03      	ldrb	r3, [r0, #16]
 8006396:	2b00      	cmp	r3, #0
 8006398:	f040 8084 	bne.w	80064a4 <USBD_StdDevReq+0x320>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800639c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80063a0:	f10d 0006 	add.w	r0, sp, #6
 80063a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063a6:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80063a8:	2302      	movs	r3, #2
 80063aa:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80063ac:	e7c4      	b.n	8006338 <USBD_StdDevReq+0x1b4>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80063ae:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80063b2:	7c00      	ldrb	r0, [r0, #16]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f10d 0106 	add.w	r1, sp, #6
 80063ba:	4798      	blx	r3
  if (err != 0U)
 80063bc:	e7bc      	b.n	8006338 <USBD_StdDevReq+0x1b4>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80063be:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80063c2:	699b      	ldr	r3, [r3, #24]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d0a1      	beq.n	800630c <USBD_StdDevReq+0x188>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80063c8:	7c28      	ldrb	r0, [r5, #16]
 80063ca:	f10d 0106 	add.w	r1, sp, #6
 80063ce:	4798      	blx	r3
  if (err != 0U)
 80063d0:	e7b2      	b.n	8006338 <USBD_StdDevReq+0x1b4>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80063d2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80063d6:	695b      	ldr	r3, [r3, #20]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d1f5      	bne.n	80063c8 <USBD_StdDevReq+0x244>
 80063dc:	e796      	b.n	800630c <USBD_StdDevReq+0x188>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80063de:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80063e2:	691b      	ldr	r3, [r3, #16]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d1ef      	bne.n	80063c8 <USBD_StdDevReq+0x244>
 80063e8:	e790      	b.n	800630c <USBD_StdDevReq+0x188>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80063ea:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d1e9      	bne.n	80063c8 <USBD_StdDevReq+0x244>
 80063f4:	e78a      	b.n	800630c <USBD_StdDevReq+0x188>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80063f6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d1e3      	bne.n	80063c8 <USBD_StdDevReq+0x244>
 8006400:	e784      	b.n	800630c <USBD_StdDevReq+0x188>
    switch (pdev->dev_state)
 8006402:	2b03      	cmp	r3, #3
 8006404:	f47f aeca 	bne.w	800619c <USBD_StdDevReq+0x18>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006408:	1d01      	adds	r1, r0, #4
 800640a:	f000 f96b 	bl	80066e4 <USBD_CtlSendData>
        break;
 800640e:	e6ce      	b.n	80061ae <USBD_StdDevReq+0x2a>
      if (cfgidx == 0U)
 8006410:	2e00      	cmp	r6, #0
 8006412:	d03b      	beq.n	800648c <USBD_StdDevReq+0x308>
      else if (cfgidx != pdev->dev_config)
 8006414:	6841      	ldr	r1, [r0, #4]
 8006416:	2901      	cmp	r1, #1
 8006418:	f43f af2e 	beq.w	8006278 <USBD_StdDevReq+0xf4>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800641c:	b2c9      	uxtb	r1, r1
 800641e:	f7ff fd5b 	bl	8005ed8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006422:	7839      	ldrb	r1, [r7, #0]
 8006424:	6069      	str	r1, [r5, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006426:	4628      	mov	r0, r5
 8006428:	f7ff fd4e 	bl	8005ec8 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800642c:	4606      	mov	r6, r0
 800642e:	2800      	cmp	r0, #0
 8006430:	f43f af22 	beq.w	8006278 <USBD_StdDevReq+0xf4>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006434:	2180      	movs	r1, #128	; 0x80
 8006436:	4628      	mov	r0, r5
 8006438:	f000 fbcc 	bl	8006bd4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800643c:	2100      	movs	r1, #0
 800643e:	4628      	mov	r0, r5
 8006440:	f000 fbc8 	bl	8006bd4 <USBD_LL_StallEP>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006444:	7929      	ldrb	r1, [r5, #4]
 8006446:	4628      	mov	r0, r5
 8006448:	f7ff fd46 	bl	8005ed8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800644c:	2302      	movs	r3, #2
 800644e:	4634      	mov	r4, r6
 8006450:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 8006454:	e6ab      	b.n	80061ae <USBD_StdDevReq+0x2a>
      if (cfgidx != 0U)
 8006456:	2e00      	cmp	r6, #0
 8006458:	f43f af0e 	beq.w	8006278 <USBD_StdDevReq+0xf4>
        pdev->dev_config = cfgidx;
 800645c:	2101      	movs	r1, #1
 800645e:	6041      	str	r1, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006460:	f7ff fd32 	bl	8005ec8 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8006464:	4604      	mov	r4, r0
 8006466:	2800      	cmp	r0, #0
 8006468:	f47f af50 	bne.w	800630c <USBD_StdDevReq+0x188>
          (void)USBD_CtlSendStatus(pdev);
 800646c:	4628      	mov	r0, r5
 800646e:	f000 f965 	bl	800673c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006472:	2303      	movs	r3, #3
 8006474:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 8006478:	e699      	b.n	80061ae <USBD_StdDevReq+0x2a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800647a:	2180      	movs	r1, #128	; 0x80
 800647c:	f000 fbaa 	bl	8006bd4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006480:	4628      	mov	r0, r5
 8006482:	2100      	movs	r1, #0
 8006484:	f000 fba6 	bl	8006bd4 <USBD_LL_StallEP>
    return USBD_FAIL;
 8006488:	2403      	movs	r4, #3
 800648a:	e690      	b.n	80061ae <USBD_StdDevReq+0x2a>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800648c:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;
 800648e:	6046      	str	r6, [r0, #4]
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006490:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006494:	4631      	mov	r1, r6
 8006496:	f7ff fd1f 	bl	8005ed8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800649a:	4628      	mov	r0, r5
  USBD_StatusTypeDef ret = USBD_OK;
 800649c:	4634      	mov	r4, r6
        (void)USBD_CtlSendStatus(pdev);
 800649e:	f000 f94d 	bl	800673c <USBD_CtlSendStatus>
 80064a2:	e684      	b.n	80061ae <USBD_StdDevReq+0x2a>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80064a4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80064a8:	f10d 0006 	add.w	r0, sp, #6
 80064ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ae:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80064b0:	2302      	movs	r3, #2
 80064b2:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80064b4:	e740      	b.n	8006338 <USBD_StdDevReq+0x1b4>
        pdev->dev_state = USBD_STATE_DEFAULT;
 80064b6:	2301      	movs	r3, #1
 80064b8:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 80064bc:	e677      	b.n	80061ae <USBD_StdDevReq+0x2a>
 80064be:	bf00      	nop
 80064c0:	20000718 	.word	0x20000718

080064c4 <USBD_StdItfReq>:
{
 80064c4:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064c6:	780b      	ldrb	r3, [r1, #0]
 80064c8:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80064cc:	2a40      	cmp	r2, #64	; 0x40
{
 80064ce:	460d      	mov	r5, r1
 80064d0:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064d2:	d00b      	beq.n	80064ec <USBD_StdItfReq+0x28>
 80064d4:	065b      	lsls	r3, r3, #25
 80064d6:	d509      	bpl.n	80064ec <USBD_StdItfReq+0x28>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80064d8:	2180      	movs	r1, #128	; 0x80
 80064da:	f000 fb7b 	bl	8006bd4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80064de:	4620      	mov	r0, r4
 80064e0:	2100      	movs	r1, #0
 80064e2:	f000 fb77 	bl	8006bd4 <USBD_LL_StallEP>
  USBD_StatusTypeDef ret = USBD_OK;
 80064e6:	2500      	movs	r5, #0
}
 80064e8:	4628      	mov	r0, r5
 80064ea:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 80064ec:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 80064f0:	3b01      	subs	r3, #1
 80064f2:	2b02      	cmp	r3, #2
 80064f4:	d812      	bhi.n	800651c <USBD_StdItfReq+0x58>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80064f6:	792b      	ldrb	r3, [r5, #4]
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d80f      	bhi.n	800651c <USBD_StdItfReq+0x58>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80064fc:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8006500:	4629      	mov	r1, r5
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	4620      	mov	r0, r4
 8006506:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006508:	88eb      	ldrh	r3, [r5, #6]
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800650a:	4605      	mov	r5, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800650c:	2b00      	cmp	r3, #0
 800650e:	d1eb      	bne.n	80064e8 <USBD_StdItfReq+0x24>
 8006510:	2800      	cmp	r0, #0
 8006512:	d1e9      	bne.n	80064e8 <USBD_StdItfReq+0x24>
              (void)USBD_CtlSendStatus(pdev);
 8006514:	4620      	mov	r0, r4
 8006516:	f000 f911 	bl	800673c <USBD_CtlSendStatus>
 800651a:	e7e5      	b.n	80064e8 <USBD_StdItfReq+0x24>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800651c:	2180      	movs	r1, #128	; 0x80
 800651e:	4620      	mov	r0, r4
 8006520:	e7db      	b.n	80064da <USBD_StdItfReq+0x16>
 8006522:	bf00      	nop

08006524 <USBD_StdEPReq>:
{
 8006524:	b570      	push	{r4, r5, r6, lr}
 8006526:	780b      	ldrb	r3, [r1, #0]
 8006528:	f003 0360 	and.w	r3, r3, #96	; 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800652c:	2b20      	cmp	r3, #32
{
 800652e:	460d      	mov	r5, r1
 8006530:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006532:	d01b      	beq.n	800656c <USBD_StdEPReq+0x48>
 8006534:	2b40      	cmp	r3, #64	; 0x40
 8006536:	d019      	beq.n	800656c <USBD_StdEPReq+0x48>
 8006538:	b303      	cbz	r3, 800657c <USBD_StdEPReq+0x58>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800653a:	2180      	movs	r1, #128	; 0x80
 800653c:	4620      	mov	r0, r4
 800653e:	f000 fb49 	bl	8006bd4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006542:	4620      	mov	r0, r4
 8006544:	2100      	movs	r1, #0
 8006546:	f000 fb45 	bl	8006bd4 <USBD_LL_StallEP>
}
 800654a:	2000      	movs	r0, #0
 800654c:	bd70      	pop	{r4, r5, r6, pc}
          switch (pdev->dev_state)
 800654e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006552:	2b02      	cmp	r3, #2
 8006554:	b2da      	uxtb	r2, r3
 8006556:	d053      	beq.n	8006600 <USBD_StdEPReq+0xdc>
 8006558:	2a03      	cmp	r2, #3
 800655a:	d1ee      	bne.n	800653a <USBD_StdEPReq+0x16>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800655c:	886b      	ldrh	r3, [r5, #2]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d1f3      	bne.n	800654a <USBD_StdEPReq+0x26>
                if ((ep_addr & 0x7FU) != 0x00U)
 8006562:	064e      	lsls	r6, r1, #25
 8006564:	d16f      	bne.n	8006646 <USBD_StdEPReq+0x122>
                (void)USBD_CtlSendStatus(pdev);
 8006566:	4620      	mov	r0, r4
 8006568:	f000 f8e8 	bl	800673c <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800656c:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8006570:	4629      	mov	r1, r5
 8006572:	4620      	mov	r0, r4
 8006574:	689b      	ldr	r3, [r3, #8]
}
 8006576:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800657a:	4718      	bx	r3
      switch (req->bRequest)
 800657c:	784b      	ldrb	r3, [r1, #1]
  ep_addr = LOBYTE(req->wIndex);
 800657e:	888a      	ldrh	r2, [r1, #4]
 8006580:	2b01      	cmp	r3, #1
 8006582:	b2d1      	uxtb	r1, r2
      switch (req->bRequest)
 8006584:	d0e3      	beq.n	800654e <USBD_StdEPReq+0x2a>
 8006586:	2b03      	cmp	r3, #3
 8006588:	d029      	beq.n	80065de <USBD_StdEPReq+0xba>
 800658a:	2b00      	cmp	r3, #0
 800658c:	d1d5      	bne.n	800653a <USBD_StdEPReq+0x16>
          switch (pdev->dev_state)
 800658e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006592:	2b02      	cmp	r3, #2
 8006594:	b2d8      	uxtb	r0, r3
 8006596:	d03c      	beq.n	8006612 <USBD_StdEPReq+0xee>
 8006598:	2803      	cmp	r0, #3
 800659a:	d1ce      	bne.n	800653a <USBD_StdEPReq+0x16>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800659c:	f001 030f 	and.w	r3, r1, #15
 80065a0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 80065a4:	0612      	lsls	r2, r2, #24
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80065a6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 80065aa:	d441      	bmi.n	8006630 <USBD_StdEPReq+0x10c>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80065ac:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d0c2      	beq.n	800653a <USBD_StdEPReq+0x16>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80065b4:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 80065b8:	2514      	movs	r5, #20
 80065ba:	fb05 4503 	mla	r5, r5, r3, r4
 80065be:	f505 75aa 	add.w	r5, r5, #340	; 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80065c2:	b12b      	cbz	r3, 80065d0 <USBD_StdEPReq+0xac>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80065c4:	4620      	mov	r0, r4
 80065c6:	f000 fb21 	bl	8006c0c <USBD_LL_IsStallEP>
 80065ca:	2800      	cmp	r0, #0
 80065cc:	d03e      	beq.n	800664c <USBD_StdEPReq+0x128>
                pep->status = 0x0001U;
 80065ce:	2301      	movs	r3, #1
 80065d0:	602b      	str	r3, [r5, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80065d2:	4629      	mov	r1, r5
 80065d4:	4620      	mov	r0, r4
 80065d6:	2202      	movs	r2, #2
 80065d8:	f000 f884 	bl	80066e4 <USBD_CtlSendData>
              break;
 80065dc:	e7b5      	b.n	800654a <USBD_StdEPReq+0x26>
          switch (pdev->dev_state)
 80065de:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80065e2:	2b02      	cmp	r3, #2
 80065e4:	b2da      	uxtb	r2, r3
 80065e6:	d00b      	beq.n	8006600 <USBD_StdEPReq+0xdc>
 80065e8:	2a03      	cmp	r2, #3
 80065ea:	d1a6      	bne.n	800653a <USBD_StdEPReq+0x16>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80065ec:	886b      	ldrh	r3, [r5, #2]
 80065ee:	b91b      	cbnz	r3, 80065f8 <USBD_StdEPReq+0xd4>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80065f0:	064a      	lsls	r2, r1, #25
 80065f2:	d001      	beq.n	80065f8 <USBD_StdEPReq+0xd4>
 80065f4:	88eb      	ldrh	r3, [r5, #6]
 80065f6:	b35b      	cbz	r3, 8006650 <USBD_StdEPReq+0x12c>
              (void)USBD_CtlSendStatus(pdev);
 80065f8:	4620      	mov	r0, r4
 80065fa:	f000 f89f 	bl	800673c <USBD_CtlSendStatus>
              break;
 80065fe:	e7a4      	b.n	800654a <USBD_StdEPReq+0x26>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006600:	064b      	lsls	r3, r1, #25
 8006602:	d09a      	beq.n	800653a <USBD_StdEPReq+0x16>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006604:	f000 fae6 	bl	8006bd4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006608:	4620      	mov	r0, r4
 800660a:	2180      	movs	r1, #128	; 0x80
 800660c:	f000 fae2 	bl	8006bd4 <USBD_LL_StallEP>
 8006610:	e79b      	b.n	800654a <USBD_StdEPReq+0x26>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006612:	0648      	lsls	r0, r1, #25
 8006614:	d191      	bne.n	800653a <USBD_StdEPReq+0x16>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006616:	0611      	lsls	r1, r2, #24
 8006618:	bf4c      	ite	mi
 800661a:	f104 0114 	addmi.w	r1, r4, #20
 800661e:	f504 71aa 	addpl.w	r1, r4, #340	; 0x154
              pep->status = 0x0000U;
 8006622:	2300      	movs	r3, #0
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006624:	4620      	mov	r0, r4
              pep->status = 0x0000U;
 8006626:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006628:	2202      	movs	r2, #2
 800662a:	f000 f85b 	bl	80066e4 <USBD_CtlSendData>
              break;
 800662e:	e78c      	b.n	800654a <USBD_StdEPReq+0x26>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006630:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006632:	2b00      	cmp	r3, #0
 8006634:	d081      	beq.n	800653a <USBD_StdEPReq+0x16>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006636:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800663a:	1c5d      	adds	r5, r3, #1
 800663c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8006640:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006644:	e7bd      	b.n	80065c2 <USBD_StdEPReq+0x9e>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006646:	f000 fad3 	bl	8006bf0 <USBD_LL_ClearStallEP>
 800664a:	e78c      	b.n	8006566 <USBD_StdEPReq+0x42>
                pep->status = 0x0000U;
 800664c:	6028      	str	r0, [r5, #0]
 800664e:	e7c0      	b.n	80065d2 <USBD_StdEPReq+0xae>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006650:	f000 fac0 	bl	8006bd4 <USBD_LL_StallEP>
 8006654:	e7d0      	b.n	80065f8 <USBD_StdEPReq+0xd4>
 8006656:	bf00      	nop

08006658 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 8006658:	780b      	ldrb	r3, [r1, #0]
 800665a:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 800665c:	784b      	ldrb	r3, [r1, #1]
 800665e:	7043      	strb	r3, [r0, #1]

  _Byte1 = *(uint8_t *)_pbuff;
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006660:	78ca      	ldrb	r2, [r1, #3]
 8006662:	788b      	ldrb	r3, [r1, #2]
 8006664:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 8006668:	8043      	strh	r3, [r0, #2]
 800666a:	794a      	ldrb	r2, [r1, #5]
 800666c:	790b      	ldrb	r3, [r1, #4]
 800666e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 8006672:	8083      	strh	r3, [r0, #4]
 8006674:	79ca      	ldrb	r2, [r1, #7]
 8006676:	798b      	ldrb	r3, [r1, #6]
 8006678:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 800667c:	80c3      	strh	r3, [r0, #6]
}
 800667e:	4770      	bx	lr

08006680 <USBD_CtlError>:
{
 8006680:	b510      	push	{r4, lr}
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006682:	2180      	movs	r1, #128	; 0x80
{
 8006684:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006686:	f000 faa5 	bl	8006bd4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800668a:	4620      	mov	r0, r4
 800668c:	2100      	movs	r1, #0
}
 800668e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 8006692:	f000 ba9f 	b.w	8006bd4 <USBD_LL_StallEP>
 8006696:	bf00      	nop

08006698 <USBD_GetString>:
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 8006698:	b308      	cbz	r0, 80066de <USBD_GetString+0x46>
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 800669a:	7803      	ldrb	r3, [r0, #0]
{
 800669c:	b470      	push	{r4, r5, r6}
  while (*pbuff != (uint8_t)'\0')
 800669e:	b1fb      	cbz	r3, 80066e0 <USBD_GetString+0x48>
 80066a0:	4604      	mov	r4, r0
 80066a2:	f1c0 0601 	rsb	r6, r0, #1
  {
    len++;
 80066a6:	19a3      	adds	r3, r4, r6
  while (*pbuff != (uint8_t)'\0')
 80066a8:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	2d00      	cmp	r5, #0
 80066b0:	d1f9      	bne.n	80066a6 <USBD_GetString+0xe>
 80066b2:	3301      	adds	r3, #1
 80066b4:	005b      	lsls	r3, r3, #1
  unicode[idx] = USB_DESC_TYPE_STRING;
 80066b6:	2403      	movs	r4, #3
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80066b8:	8013      	strh	r3, [r2, #0]
  unicode[idx] = *(uint8_t *)len;
 80066ba:	700b      	strb	r3, [r1, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80066bc:	704c      	strb	r4, [r1, #1]
  while (*pdesc != (uint8_t)'\0')
 80066be:	7804      	ldrb	r4, [r0, #0]
 80066c0:	b15c      	cbz	r4, 80066da <USBD_GetString+0x42>
  idx++;
 80066c2:	2302      	movs	r3, #2
    unicode[idx] = 0U;
 80066c4:	2500      	movs	r5, #0
    idx++;
 80066c6:	1c5a      	adds	r2, r3, #1
    unicode[idx] = 0U;
 80066c8:	b2d2      	uxtb	r2, r2
    unicode[idx] = *pdesc;
 80066ca:	54cc      	strb	r4, [r1, r3]
    unicode[idx] = 0U;
 80066cc:	548d      	strb	r5, [r1, r2]
  while (*pdesc != (uint8_t)'\0')
 80066ce:	f810 4f01 	ldrb.w	r4, [r0, #1]!
    idx++;
 80066d2:	3302      	adds	r3, #2
 80066d4:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 80066d6:	2c00      	cmp	r4, #0
 80066d8:	d1f5      	bne.n	80066c6 <USBD_GetString+0x2e>
}
 80066da:	bc70      	pop	{r4, r5, r6}
 80066dc:	4770      	bx	lr
 80066de:	4770      	bx	lr
  while (*pbuff != (uint8_t)'\0')
 80066e0:	2302      	movs	r3, #2
 80066e2:	e7e8      	b.n	80066b6 <USBD_GetString+0x1e>

080066e4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80066e4:	b538      	push	{r3, r4, r5, lr}
 80066e6:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80066e8:	2502      	movs	r5, #2
{
 80066ea:	460a      	mov	r2, r1
  pdev->ep_in[0].total_length = len;

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80066ec:	e9c0 3306 	strd	r3, r3, [r0, #24]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80066f0:	f8c0 5294 	str.w	r5, [r0, #660]	; 0x294
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80066f4:	2100      	movs	r1, #0
 80066f6:	f000 faab 	bl	8006c50 <USBD_LL_Transmit>

  return USBD_OK;
}
 80066fa:	2000      	movs	r0, #0
 80066fc:	bd38      	pop	{r3, r4, r5, pc}
 80066fe:	bf00      	nop

08006700 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006700:	b508      	push	{r3, lr}
 8006702:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006704:	460a      	mov	r2, r1
 8006706:	2100      	movs	r1, #0
 8006708:	f000 faa2 	bl	8006c50 <USBD_LL_Transmit>

  return USBD_OK;
}
 800670c:	2000      	movs	r0, #0
 800670e:	bd08      	pop	{r3, pc}

08006710 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006710:	b538      	push	{r3, r4, r5, lr}
 8006712:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006714:	2503      	movs	r5, #3
{
 8006716:	460a      	mov	r2, r1
  pdev->ep_out[0].total_length = len;

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006718:	e9c0 3356 	strd	r3, r3, [r0, #344]	; 0x158
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800671c:	f8c0 5294 	str.w	r5, [r0, #660]	; 0x294
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006720:	2100      	movs	r1, #0
 8006722:	f000 faa3 	bl	8006c6c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8006726:	2000      	movs	r0, #0
 8006728:	bd38      	pop	{r3, r4, r5, pc}
 800672a:	bf00      	nop

0800672c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800672c:	b508      	push	{r3, lr}
 800672e:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006730:	460a      	mov	r2, r1
 8006732:	2100      	movs	r1, #0
 8006734:	f000 fa9a 	bl	8006c6c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8006738:	2000      	movs	r0, #0
 800673a:	bd08      	pop	{r3, pc}

0800673c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800673c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800673e:	2104      	movs	r1, #4

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006740:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006742:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006746:	461a      	mov	r2, r3
 8006748:	4619      	mov	r1, r3
 800674a:	f000 fa81 	bl	8006c50 <USBD_LL_Transmit>

  return USBD_OK;
}
 800674e:	2000      	movs	r0, #0
 8006750:	bd08      	pop	{r3, pc}
 8006752:	bf00      	nop

08006754 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006754:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006756:	2105      	movs	r1, #5

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006758:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800675a:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800675e:	461a      	mov	r2, r3
 8006760:	4619      	mov	r1, r3
 8006762:	f000 fa83 	bl	8006c6c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8006766:	2000      	movs	r0, #0
 8006768:	bd08      	pop	{r3, pc}
 800676a:	bf00      	nop

0800676c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800676c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800676e:	4918      	ldr	r1, [pc, #96]	; (80067d0 <MX_USB_DEVICE_Init+0x64>)
 8006770:	4818      	ldr	r0, [pc, #96]	; (80067d4 <MX_USB_DEVICE_Init+0x68>)
 8006772:	2200      	movs	r2, #0
 8006774:	f7ff fb78 	bl	8005e68 <USBD_Init>
 8006778:	b970      	cbnz	r0, 8006798 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800677a:	4917      	ldr	r1, [pc, #92]	; (80067d8 <MX_USB_DEVICE_Init+0x6c>)
 800677c:	4815      	ldr	r0, [pc, #84]	; (80067d4 <MX_USB_DEVICE_Init+0x68>)
 800677e:	f7ff fb87 	bl	8005e90 <USBD_RegisterClass>
 8006782:	b988      	cbnz	r0, 80067a8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006784:	4915      	ldr	r1, [pc, #84]	; (80067dc <MX_USB_DEVICE_Init+0x70>)
 8006786:	4813      	ldr	r0, [pc, #76]	; (80067d4 <MX_USB_DEVICE_Init+0x68>)
 8006788:	f7ff fb36 	bl	8005df8 <USBD_CDC_RegisterInterface>
 800678c:	b9a0      	cbnz	r0, 80067b8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800678e:	4811      	ldr	r0, [pc, #68]	; (80067d4 <MX_USB_DEVICE_Init+0x68>)
 8006790:	f7ff fb98 	bl	8005ec4 <USBD_Start>
 8006794:	b9b8      	cbnz	r0, 80067c6 <MX_USB_DEVICE_Init+0x5a>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006796:	bd08      	pop	{r3, pc}
    Error_Handler();
 8006798:	f7fa fe84 	bl	80014a4 <Error_Handler>
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800679c:	490e      	ldr	r1, [pc, #56]	; (80067d8 <MX_USB_DEVICE_Init+0x6c>)
 800679e:	480d      	ldr	r0, [pc, #52]	; (80067d4 <MX_USB_DEVICE_Init+0x68>)
 80067a0:	f7ff fb76 	bl	8005e90 <USBD_RegisterClass>
 80067a4:	2800      	cmp	r0, #0
 80067a6:	d0ed      	beq.n	8006784 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 80067a8:	f7fa fe7c 	bl	80014a4 <Error_Handler>
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80067ac:	490b      	ldr	r1, [pc, #44]	; (80067dc <MX_USB_DEVICE_Init+0x70>)
 80067ae:	4809      	ldr	r0, [pc, #36]	; (80067d4 <MX_USB_DEVICE_Init+0x68>)
 80067b0:	f7ff fb22 	bl	8005df8 <USBD_CDC_RegisterInterface>
 80067b4:	2800      	cmp	r0, #0
 80067b6:	d0ea      	beq.n	800678e <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 80067b8:	f7fa fe74 	bl	80014a4 <Error_Handler>
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80067bc:	4805      	ldr	r0, [pc, #20]	; (80067d4 <MX_USB_DEVICE_Init+0x68>)
 80067be:	f7ff fb81 	bl	8005ec4 <USBD_Start>
 80067c2:	2800      	cmp	r0, #0
 80067c4:	d0e7      	beq.n	8006796 <MX_USB_DEVICE_Init+0x2a>
}
 80067c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80067ca:	f7fa be6b 	b.w	80014a4 <Error_Handler>
 80067ce:	bf00      	nop
 80067d0:	20000130 	.word	0x20000130
 80067d4:	200088d4 	.word	0x200088d4
 80067d8:	2000000c 	.word	0x2000000c
 80067dc:	2000011c 	.word	0x2000011c

080067e0 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 80067e0:	2000      	movs	r0, #0
 80067e2:	4770      	bx	lr

080067e4 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 80067e4:	2000      	movs	r0, #0
 80067e6:	4770      	bx	lr

080067e8 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 80067e8:	2000      	movs	r0, #0
 80067ea:	4770      	bx	lr

080067ec <CDC_Receive_FS>:
{
 80067ec:	b510      	push	{r4, lr}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80067ee:	4c05      	ldr	r4, [pc, #20]	; (8006804 <CDC_Receive_FS+0x18>)
{
 80067f0:	4601      	mov	r1, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80067f2:	4620      	mov	r0, r4
 80067f4:	f7ff fb14 	bl	8005e20 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80067f8:	4620      	mov	r0, r4
 80067fa:	f7ff fb1b 	bl	8005e34 <USBD_CDC_ReceivePacket>
}
 80067fe:	2000      	movs	r0, #0
 8006800:	bd10      	pop	{r4, pc}
 8006802:	bf00      	nop
 8006804:	200088d4 	.word	0x200088d4

08006808 <CDC_Init_FS>:
{
 8006808:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800680a:	4c06      	ldr	r4, [pc, #24]	; (8006824 <CDC_Init_FS+0x1c>)
 800680c:	4906      	ldr	r1, [pc, #24]	; (8006828 <CDC_Init_FS+0x20>)
 800680e:	2200      	movs	r2, #0
 8006810:	4620      	mov	r0, r4
 8006812:	f7ff faf9 	bl	8005e08 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006816:	4905      	ldr	r1, [pc, #20]	; (800682c <CDC_Init_FS+0x24>)
 8006818:	4620      	mov	r0, r4
 800681a:	f7ff fb01 	bl	8005e20 <USBD_CDC_SetRxBuffer>
}
 800681e:	2000      	movs	r0, #0
 8006820:	bd10      	pop	{r4, pc}
 8006822:	bf00      	nop
 8006824:	200088d4 	.word	0x200088d4
 8006828:	20008be4 	.word	0x20008be4
 800682c:	20008ba4 	.word	0x20008ba4

08006830 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006830:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8006832:	4801      	ldr	r0, [pc, #4]	; (8006838 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8006834:	800b      	strh	r3, [r1, #0]
}
 8006836:	4770      	bx	lr
 8006838:	2000014c 	.word	0x2000014c

0800683c <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800683c:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 800683e:	4801      	ldr	r0, [pc, #4]	; (8006844 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8006840:	800b      	strh	r3, [r1, #0]
}
 8006842:	4770      	bx	lr
 8006844:	20000160 	.word	0x20000160

08006848 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006848:	b510      	push	{r4, lr}
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800684a:	4c04      	ldr	r4, [pc, #16]	; (800685c <USBD_FS_ManufacturerStrDescriptor+0x14>)
 800684c:	4804      	ldr	r0, [pc, #16]	; (8006860 <USBD_FS_ManufacturerStrDescriptor+0x18>)
{
 800684e:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006850:	4621      	mov	r1, r4
 8006852:	f7ff ff21 	bl	8006698 <USBD_GetString>
  return USBD_StrDesc;
}
 8006856:	4620      	mov	r0, r4
 8006858:	bd10      	pop	{r4, pc}
 800685a:	bf00      	nop
 800685c:	20008c24 	.word	0x20008c24
 8006860:	0800da14 	.word	0x0800da14

08006864 <USBD_FS_ProductStrDescriptor>:
{
 8006864:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006866:	4c04      	ldr	r4, [pc, #16]	; (8006878 <USBD_FS_ProductStrDescriptor+0x14>)
 8006868:	4804      	ldr	r0, [pc, #16]	; (800687c <USBD_FS_ProductStrDescriptor+0x18>)
{
 800686a:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800686c:	4621      	mov	r1, r4
 800686e:	f7ff ff13 	bl	8006698 <USBD_GetString>
}
 8006872:	4620      	mov	r0, r4
 8006874:	bd10      	pop	{r4, pc}
 8006876:	bf00      	nop
 8006878:	20008c24 	.word	0x20008c24
 800687c:	0800da28 	.word	0x0800da28

08006880 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006880:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006882:	4c04      	ldr	r4, [pc, #16]	; (8006894 <USBD_FS_ConfigStrDescriptor+0x14>)
 8006884:	4804      	ldr	r0, [pc, #16]	; (8006898 <USBD_FS_ConfigStrDescriptor+0x18>)
{
 8006886:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006888:	4621      	mov	r1, r4
 800688a:	f7ff ff05 	bl	8006698 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 800688e:	4620      	mov	r0, r4
 8006890:	bd10      	pop	{r4, pc}
 8006892:	bf00      	nop
 8006894:	20008c24 	.word	0x20008c24
 8006898:	0800da40 	.word	0x0800da40

0800689c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800689c:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800689e:	4c04      	ldr	r4, [pc, #16]	; (80068b0 <USBD_FS_InterfaceStrDescriptor+0x14>)
 80068a0:	4804      	ldr	r0, [pc, #16]	; (80068b4 <USBD_FS_InterfaceStrDescriptor+0x18>)
{
 80068a2:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80068a4:	4621      	mov	r1, r4
 80068a6:	f7ff fef7 	bl	8006698 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 80068aa:	4620      	mov	r0, r4
 80068ac:	bd10      	pop	{r4, pc}
 80068ae:	bf00      	nop
 80068b0:	20008c24 	.word	0x20008c24
 80068b4:	0800da4c 	.word	0x0800da4c

080068b8 <USBD_FS_SerialStrDescriptor>:
  */
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80068b8:	4a41      	ldr	r2, [pc, #260]	; (80069c0 <USBD_FS_SerialStrDescriptor+0x108>)
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80068ba:	4b42      	ldr	r3, [pc, #264]	; (80069c4 <USBD_FS_SerialStrDescriptor+0x10c>)
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80068bc:	6812      	ldr	r2, [r2, #0]

  deviceserial0 += deviceserial2;
 80068be:	681b      	ldr	r3, [r3, #0]
  *length = USB_SIZ_STRING_SERIAL;
 80068c0:	201a      	movs	r0, #26

  if (deviceserial0 != 0)
 80068c2:	18d3      	adds	r3, r2, r3
  *length = USB_SIZ_STRING_SERIAL;
 80068c4:	8008      	strh	r0, [r1, #0]
  if (deviceserial0 != 0)
 80068c6:	d101      	bne.n	80068cc <USBD_FS_SerialStrDescriptor+0x14>
}
 80068c8:	483f      	ldr	r0, [pc, #252]	; (80069c8 <USBD_FS_SerialStrDescriptor+0x110>)
 80068ca:	4770      	bx	lr
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80068cc:	4a3f      	ldr	r2, [pc, #252]	; (80069cc <USBD_FS_SerialStrDescriptor+0x114>)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
  {
    if (((value >> 28)) < 0xA)
 80068ce:	0f18      	lsrs	r0, r3, #28
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80068d0:	6811      	ldr	r1, [r2, #0]
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80068d2:	4a3d      	ldr	r2, [pc, #244]	; (80069c8 <USBD_FS_SerialStrDescriptor+0x110>)
    if (((value >> 28)) < 0xA)
 80068d4:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80068d8:	bf2c      	ite	cs
 80068da:	3037      	addcs	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80068dc:	3030      	addcc	r0, #48	; 0x30
{
 80068de:	b410      	push	{r4}
      pbuf[2 * idx] = (value >> 28) + '0';
 80068e0:	7090      	strb	r0, [r2, #2]
    if (((value >> 28)) < 0xA)
 80068e2:	f3c3 6003 	ubfx	r0, r3, #24, #4
 80068e6:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80068e8:	bf8c      	ite	hi
 80068ea:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80068ec:	3030      	addls	r0, #48	; 0x30
 80068ee:	7110      	strb	r0, [r2, #4]
    if (((value >> 28)) < 0xA)
 80068f0:	f3c3 5003 	ubfx	r0, r3, #20, #4
 80068f4:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80068f6:	bf8c      	ite	hi
 80068f8:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80068fa:	3030      	addls	r0, #48	; 0x30
 80068fc:	7190      	strb	r0, [r2, #6]
    if (((value >> 28)) < 0xA)
 80068fe:	f3c3 4003 	ubfx	r0, r3, #16, #4
 8006902:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006904:	bf8c      	ite	hi
 8006906:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8006908:	3030      	addls	r0, #48	; 0x30
 800690a:	7210      	strb	r0, [r2, #8]
    if (((value >> 28)) < 0xA)
 800690c:	f3c3 3003 	ubfx	r0, r3, #12, #4
 8006910:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006912:	bf8c      	ite	hi
 8006914:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8006916:	3030      	addls	r0, #48	; 0x30
 8006918:	7290      	strb	r0, [r2, #10]
    if (((value >> 28)) < 0xA)
 800691a:	f3c3 2003 	ubfx	r0, r3, #8, #4
 800691e:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006920:	bf8c      	ite	hi
 8006922:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8006924:	3030      	addls	r0, #48	; 0x30
 8006926:	7310      	strb	r0, [r2, #12]
    if (((value >> 28)) < 0xA)
 8006928:	f3c3 1003 	ubfx	r0, r3, #4, #4
 800692c:	2809      	cmp	r0, #9
 800692e:	f003 030f 	and.w	r3, r3, #15
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006932:	bf8c      	ite	hi
 8006934:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8006936:	3030      	addls	r0, #48	; 0x30
    if (((value >> 28)) < 0xA)
 8006938:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 800693a:	bf94      	ite	ls
 800693c:	3330      	addls	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800693e:	3337      	addhi	r3, #55	; 0x37
 8006940:	7413      	strb	r3, [r2, #16]
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8006942:	2300      	movs	r3, #0
    if (((value >> 28)) < 0xA)
 8006944:	f1b1 4f20 	cmp.w	r1, #2684354560	; 0xa0000000
    pbuf[2 * idx + 1] = 0;
 8006948:	7453      	strb	r3, [r2, #17]
    if (((value >> 28)) < 0xA)
 800694a:	ea4f 7311 	mov.w	r3, r1, lsr #28
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800694e:	bf2c      	ite	cs
 8006950:	3337      	addcs	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8006952:	3330      	addcc	r3, #48	; 0x30
 8006954:	7493      	strb	r3, [r2, #18]
    if (((value >> 28)) < 0xA)
 8006956:	f3c1 6303 	ubfx	r3, r1, #24, #4
 800695a:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800695c:	bf8c      	ite	hi
 800695e:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8006960:	3330      	addls	r3, #48	; 0x30
 8006962:	7513      	strb	r3, [r2, #20]
    if (((value >> 28)) < 0xA)
 8006964:	f3c1 5303 	ubfx	r3, r1, #20, #4
 8006968:	2b09      	cmp	r3, #9
    pbuf[2 * idx + 1] = 0;
 800696a:	f04f 0400 	mov.w	r4, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800696e:	bf8c      	ite	hi
 8006970:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8006972:	3330      	addls	r3, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 8006974:	70d4      	strb	r4, [r2, #3]
 8006976:	2400      	movs	r4, #0
 8006978:	7154      	strb	r4, [r2, #5]
      pbuf[2 * idx] = (value >> 28) + '0';
 800697a:	7593      	strb	r3, [r2, #22]
    pbuf[2 * idx + 1] = 0;
 800697c:	2400      	movs	r4, #0
    if (((value >> 28)) < 0xA)
 800697e:	f3c1 4303 	ubfx	r3, r1, #16, #4
 8006982:	2b09      	cmp	r3, #9
    pbuf[2 * idx + 1] = 0;
 8006984:	71d4      	strb	r4, [r2, #7]
      pbuf[2 * idx] = (value >> 28) + '0';
 8006986:	7390      	strb	r0, [r2, #14]
    pbuf[2 * idx + 1] = 0;
 8006988:	f04f 0400 	mov.w	r4, #0
 800698c:	f04f 0000 	mov.w	r0, #0
 8006990:	7254      	strb	r4, [r2, #9]
 8006992:	73d0      	strb	r0, [r2, #15]
 8006994:	f04f 0400 	mov.w	r4, #0
 8006998:	f04f 0000 	mov.w	r0, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 800699c:	bf94      	ite	ls
 800699e:	3330      	addls	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80069a0:	3337      	addhi	r3, #55	; 0x37
    pbuf[2 * idx + 1] = 0;
 80069a2:	72d4      	strb	r4, [r2, #11]
 80069a4:	74d0      	strb	r0, [r2, #19]
 80069a6:	2400      	movs	r4, #0
 80069a8:	2000      	movs	r0, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80069aa:	7613      	strb	r3, [r2, #24]
    pbuf[2 * idx + 1] = 0;
 80069ac:	2100      	movs	r1, #0
 80069ae:	2300      	movs	r3, #0
 80069b0:	7550      	strb	r0, [r2, #21]
 80069b2:	7354      	strb	r4, [r2, #13]
 80069b4:	75d1      	strb	r1, [r2, #23]
 80069b6:	7653      	strb	r3, [r2, #25]
}
 80069b8:	4803      	ldr	r0, [pc, #12]	; (80069c8 <USBD_FS_SerialStrDescriptor+0x110>)
 80069ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069be:	4770      	bx	lr
 80069c0:	1fff7a10 	.word	0x1fff7a10
 80069c4:	1fff7a18 	.word	0x1fff7a18
 80069c8:	20000164 	.word	0x20000164
 80069cc:	1fff7a14 	.word	0x1fff7a14

080069d0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80069d0:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(pcdHandle->Instance==USB_OTG_FS)
 80069d2:	6803      	ldr	r3, [r0, #0]
{
 80069d4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069d6:	2400      	movs	r4, #0
  if(pcdHandle->Instance==USB_OTG_FS)
 80069d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069dc:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80069e0:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80069e4:	9406      	str	r4, [sp, #24]
  if(pcdHandle->Instance==USB_OTG_FS)
 80069e6:	d001      	beq.n	80069ec <HAL_PCD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80069e8:	b008      	add	sp, #32
 80069ea:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80069ec:	4d18      	ldr	r5, [pc, #96]	; (8006a50 <HAL_PCD_MspInit+0x80>)
 80069ee:	9400      	str	r4, [sp, #0]
 80069f0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80069f2:	4818      	ldr	r0, [pc, #96]	; (8006a54 <HAL_PCD_MspInit+0x84>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80069f4:	f043 0301 	orr.w	r3, r3, #1
 80069f8:	632b      	str	r3, [r5, #48]	; 0x30
 80069fa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80069fc:	f003 0301 	and.w	r3, r3, #1
 8006a00:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006a02:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8006a06:	2302      	movs	r3, #2
 8006a08:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	2303      	movs	r3, #3
 8006a10:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a14:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006a16:	230a      	movs	r3, #10
 8006a18:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a1a:	9e00      	ldr	r6, [sp, #0]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a1c:	f7fb fde8 	bl	80025f0 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006a20:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8006a22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a26:	636b      	str	r3, [r5, #52]	; 0x34
 8006a28:	9401      	str	r4, [sp, #4]
 8006a2a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8006a2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006a30:	646b      	str	r3, [r5, #68]	; 0x44
 8006a32:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8006a34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a38:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006a3a:	4622      	mov	r2, r4
 8006a3c:	4621      	mov	r1, r4
 8006a3e:	2043      	movs	r0, #67	; 0x43
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006a40:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006a42:	f7fb fb4f 	bl	80020e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006a46:	2043      	movs	r0, #67	; 0x43
 8006a48:	f7fb fb84 	bl	8002154 <HAL_NVIC_EnableIRQ>
}
 8006a4c:	b008      	add	sp, #32
 8006a4e:	bd70      	pop	{r4, r5, r6, pc}
 8006a50:	40023800 	.word	0x40023800
 8006a54:	40020000 	.word	0x40020000

08006a58 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006a58:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 8006a5c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8006a60:	f7ff ba42 	b.w	8005ee8 <USBD_LL_SetupStage>

08006a64 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006a64:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8006a68:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8006a6c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8006a70:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006a74:	f7ff ba68 	b.w	8005f48 <USBD_LL_DataOutStage>

08006a78 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006a78:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8006a7c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8006a80:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8006a84:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a86:	f7ff ba93 	b.w	8005fb0 <USBD_LL_DataInStage>
 8006a8a:	bf00      	nop

08006a8c <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006a8c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8006a90:	f7ff bb2c 	b.w	80060ec <USBD_LL_SOF>

08006a94 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006a94:	68c1      	ldr	r1, [r0, #12]
{
 8006a96:	b510      	push	{r4, lr}
 8006a98:	4604      	mov	r4, r0
  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006a9a:	b111      	cbz	r1, 8006aa2 <HAL_PCD_ResetCallback+0xe>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006a9c:	2902      	cmp	r1, #2
 8006a9e:	d10a      	bne.n	8006ab6 <HAL_PCD_ResetCallback+0x22>
  {
    speed = USBD_SPEED_FULL;
 8006aa0:	2101      	movs	r1, #1
  else
  {
    Error_Handler();
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006aa2:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 8006aa6:	f7ff fb05 	bl	80060b4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006aaa:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
}
 8006aae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006ab2:	f7ff bad3 	b.w	800605c <USBD_LL_Reset>
    Error_Handler();
 8006ab6:	f7fa fcf5 	bl	80014a4 <Error_Handler>
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006aba:	2101      	movs	r1, #1
 8006abc:	e7f1      	b.n	8006aa2 <HAL_PCD_ResetCallback+0xe>
 8006abe:	bf00      	nop

08006ac0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ac0:	b510      	push	{r4, lr}
 8006ac2:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006ac4:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8006ac8:	f7ff faf8 	bl	80060bc <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006acc:	6822      	ldr	r2, [r4, #0]
 8006ace:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8006ad2:	f043 0301 	orr.w	r3, r3, #1
 8006ad6:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006ada:	6a23      	ldr	r3, [r4, #32]
 8006adc:	b123      	cbz	r3, 8006ae8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006ade:	4a03      	ldr	r2, [pc, #12]	; (8006aec <HAL_PCD_SuspendCallback+0x2c>)
 8006ae0:	6913      	ldr	r3, [r2, #16]
 8006ae2:	f043 0306 	orr.w	r3, r3, #6
 8006ae6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006ae8:	bd10      	pop	{r4, pc}
 8006aea:	bf00      	nop
 8006aec:	e000ed00 	.word	0xe000ed00

08006af0 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006af0:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8006af4:	f7ff baee 	b.w	80060d4 <USBD_LL_Resume>

08006af8 <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006af8:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8006afc:	f7ff bb1e 	b.w	800613c <USBD_LL_IsoOUTIncomplete>

08006b00 <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006b00:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8006b04:	f7ff bb06 	b.w	8006114 <USBD_LL_IsoINIncomplete>

08006b08 <HAL_PCD_ConnectCallback>:
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006b08:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8006b0c:	f7ff bb2a 	b.w	8006164 <USBD_LL_DevConnected>

08006b10 <HAL_PCD_DisconnectCallback>:
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006b10:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8006b14:	f7ff bb28 	b.w	8006168 <USBD_LL_DevDisconnected>

08006b18 <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006b18:	7802      	ldrb	r2, [r0, #0]
 8006b1a:	b10a      	cbz	r2, 8006b20 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 8006b1c:	2000      	movs	r0, #0
 8006b1e:	4770      	bx	lr
{
 8006b20:	b538      	push	{r3, r4, r5, lr}
  hpcd_USB_OTG_FS.pData = pdev;
 8006b22:	4b15      	ldr	r3, [pc, #84]	; (8006b78 <USBD_LL_Init+0x60>)
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006b24:	2102      	movs	r1, #2
  hpcd_USB_OTG_FS.pData = pdev;
 8006b26:	f8c3 0404 	str.w	r0, [r3, #1028]	; 0x404
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006b2a:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006b2e:	2404      	movs	r4, #4
  pdev->pData = &hpcd_USB_OTG_FS;
 8006b30:	f8c0 32c4 	str.w	r3, [r0, #708]	; 0x2c4
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006b34:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006b36:	e9c3 2207 	strd	r2, r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006b3a:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006b3e:	e9c3 5400 	strd	r5, r4, [r3]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006b42:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006b44:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006b46:	60d9      	str	r1, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006b48:	6199      	str	r1, [r3, #24]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006b4a:	f7fc fa05 	bl	8002f58 <HAL_PCD_Init>
 8006b4e:	b978      	cbnz	r0, 8006b70 <USBD_LL_Init+0x58>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006b50:	2180      	movs	r1, #128	; 0x80
 8006b52:	4809      	ldr	r0, [pc, #36]	; (8006b78 <USBD_LL_Init+0x60>)
 8006b54:	f7fc ff34 	bl	80039c0 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006b58:	2240      	movs	r2, #64	; 0x40
 8006b5a:	2100      	movs	r1, #0
 8006b5c:	4806      	ldr	r0, [pc, #24]	; (8006b78 <USBD_LL_Init+0x60>)
 8006b5e:	f7fc ff0b 	bl	8003978 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006b62:	2280      	movs	r2, #128	; 0x80
 8006b64:	2101      	movs	r1, #1
 8006b66:	4804      	ldr	r0, [pc, #16]	; (8006b78 <USBD_LL_Init+0x60>)
 8006b68:	f7fc ff06 	bl	8003978 <HAL_PCDEx_SetTxFiFo>
}
 8006b6c:	2000      	movs	r0, #0
 8006b6e:	bd38      	pop	{r3, r4, r5, pc}
    Error_Handler( );
 8006b70:	f7fa fc98 	bl	80014a4 <Error_Handler>
 8006b74:	e7ec      	b.n	8006b50 <USBD_LL_Init+0x38>
 8006b76:	bf00      	nop
 8006b78:	20008ca4 	.word	0x20008ca4

08006b7c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006b7c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 8006b7e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8006b82:	f7fc fa75 	bl	8003070 <HAL_PCD_Start>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8006b86:	2803      	cmp	r0, #3
 8006b88:	bf96      	itet	ls
 8006b8a:	4b02      	ldrls	r3, [pc, #8]	; (8006b94 <USBD_LL_Start+0x18>)
  hal_status = HAL_PCD_Start(pdev->pData);
 8006b8c:	2003      	movhi	r0, #3
 8006b8e:	5c18      	ldrbls	r0, [r3, r0]
}
 8006b90:	bd08      	pop	{r3, pc}
 8006b92:	bf00      	nop
 8006b94:	0800da5c 	.word	0x0800da5c

08006b98 <USBD_LL_OpenEP>:
{
 8006b98:	b510      	push	{r4, lr}
 8006b9a:	4614      	mov	r4, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006b9c:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8006ba0:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006ba2:	4623      	mov	r3, r4
 8006ba4:	f7fc fdae 	bl	8003704 <HAL_PCD_EP_Open>
  switch (hal_status)
 8006ba8:	2803      	cmp	r0, #3
 8006baa:	bf96      	itet	ls
 8006bac:	4b01      	ldrls	r3, [pc, #4]	; (8006bb4 <USBD_LL_OpenEP+0x1c>)
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006bae:	2003      	movhi	r0, #3
 8006bb0:	5c18      	ldrbls	r0, [r3, r0]
}
 8006bb2:	bd10      	pop	{r4, pc}
 8006bb4:	0800da5c 	.word	0x0800da5c

08006bb8 <USBD_LL_CloseEP>:
{
 8006bb8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006bba:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8006bbe:	f7fc fdd7 	bl	8003770 <HAL_PCD_EP_Close>
  switch (hal_status)
 8006bc2:	2803      	cmp	r0, #3
 8006bc4:	bf96      	itet	ls
 8006bc6:	4b02      	ldrls	r3, [pc, #8]	; (8006bd0 <USBD_LL_CloseEP+0x18>)
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006bc8:	2003      	movhi	r0, #3
 8006bca:	5c18      	ldrbls	r0, [r3, r0]
}
 8006bcc:	bd08      	pop	{r3, pc}
 8006bce:	bf00      	nop
 8006bd0:	0800da5c 	.word	0x0800da5c

08006bd4 <USBD_LL_StallEP>:
{
 8006bd4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006bd6:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8006bda:	f7fc fe4f 	bl	800387c <HAL_PCD_EP_SetStall>
  switch (hal_status)
 8006bde:	2803      	cmp	r0, #3
 8006be0:	bf96      	itet	ls
 8006be2:	4b02      	ldrls	r3, [pc, #8]	; (8006bec <USBD_LL_StallEP+0x18>)
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006be4:	2003      	movhi	r0, #3
 8006be6:	5c18      	ldrbls	r0, [r3, r0]
}
 8006be8:	bd08      	pop	{r3, pc}
 8006bea:	bf00      	nop
 8006bec:	0800da5c 	.word	0x0800da5c

08006bf0 <USBD_LL_ClearStallEP>:
{
 8006bf0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006bf2:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8006bf6:	f7fc fe85 	bl	8003904 <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 8006bfa:	2803      	cmp	r0, #3
 8006bfc:	bf96      	itet	ls
 8006bfe:	4b02      	ldrls	r3, [pc, #8]	; (8006c08 <USBD_LL_ClearStallEP+0x18>)
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006c00:	2003      	movhi	r0, #3
 8006c02:	5c18      	ldrbls	r0, [r3, r0]
}
 8006c04:	bd08      	pop	{r3, pc}
 8006c06:	bf00      	nop
 8006c08:	0800da5c 	.word	0x0800da5c

08006c0c <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 8006c0c:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006c0e:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  if((ep_addr & 0x80) == 0x80)
 8006c12:	d406      	bmi.n	8006c22 <USBD_LL_IsStallEP+0x16>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006c14:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8006c18:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8006c1c:	f891 01fe 	ldrb.w	r0, [r1, #510]	; 0x1fe
}
 8006c20:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006c22:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8006c26:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8006c2a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8006c2e:	f891 003e 	ldrb.w	r0, [r1, #62]	; 0x3e
 8006c32:	4770      	bx	lr

08006c34 <USBD_LL_SetUSBAddress>:
{
 8006c34:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006c36:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8006c3a:	f7fc fd4f 	bl	80036dc <HAL_PCD_SetAddress>
  switch (hal_status)
 8006c3e:	2803      	cmp	r0, #3
 8006c40:	bf96      	itet	ls
 8006c42:	4b02      	ldrls	r3, [pc, #8]	; (8006c4c <USBD_LL_SetUSBAddress+0x18>)
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006c44:	2003      	movhi	r0, #3
 8006c46:	5c18      	ldrbls	r0, [r3, r0]
}
 8006c48:	bd08      	pop	{r3, pc}
 8006c4a:	bf00      	nop
 8006c4c:	0800da5c 	.word	0x0800da5c

08006c50 <USBD_LL_Transmit>:
{
 8006c50:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006c52:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8006c56:	f7fc fded 	bl	8003834 <HAL_PCD_EP_Transmit>
  switch (hal_status)
 8006c5a:	2803      	cmp	r0, #3
 8006c5c:	bf96      	itet	ls
 8006c5e:	4b02      	ldrls	r3, [pc, #8]	; (8006c68 <USBD_LL_Transmit+0x18>)
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006c60:	2003      	movhi	r0, #3
 8006c62:	5c18      	ldrbls	r0, [r3, r0]
}
 8006c64:	bd08      	pop	{r3, pc}
 8006c66:	bf00      	nop
 8006c68:	0800da5c 	.word	0x0800da5c

08006c6c <USBD_LL_PrepareReceive>:
{
 8006c6c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006c6e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8006c72:	f7fc fdad 	bl	80037d0 <HAL_PCD_EP_Receive>
  switch (hal_status)
 8006c76:	2803      	cmp	r0, #3
 8006c78:	bf96      	itet	ls
 8006c7a:	4b02      	ldrls	r3, [pc, #8]	; (8006c84 <USBD_LL_PrepareReceive+0x18>)
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006c7c:	2003      	movhi	r0, #3
 8006c7e:	5c18      	ldrbls	r0, [r3, r0]
}
 8006c80:	bd08      	pop	{r3, pc}
 8006c82:	bf00      	nop
 8006c84:	0800da5c 	.word	0x0800da5c

08006c88 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006c88:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8006c8c:	f7fc bdc8 	b.w	8003820 <HAL_PCD_EP_GetRxCount>

08006c90 <USBD_static_malloc>:
}
 8006c90:	4800      	ldr	r0, [pc, #0]	; (8006c94 <USBD_static_malloc+0x4>)
 8006c92:	4770      	bx	lr
 8006c94:	2000071c 	.word	0x2000071c

08006c98 <USBD_static_free>:
}
 8006c98:	4770      	bx	lr
 8006c9a:	bf00      	nop

08006c9c <ili9341_new>:
    GPIO_TypeDef *touch_select_port, uint16_t touch_select_pin,
    GPIO_TypeDef *touch_irq_port,    uint16_t touch_irq_pin,

    ili9341_touch_support_t   touch_support,
    ili9341_touch_normalize_t touch_normalize)
{
 8006c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ca0:	b0a1      	sub	sp, #132	; 0x84
 8006ca2:	460e      	mov	r6, r1
 8006ca4:	f99d 40cc 	ldrsb.w	r4, [sp, #204]	; 0xcc
 8006ca8:	f8bd 80a8 	ldrh.w	r8, [sp, #168]	; 0xa8
 8006cac:	f8bd 90b0 	ldrh.w	r9, [sp, #176]	; 0xb0
 8006cb0:	f99d a0b4 	ldrsb.w	sl, [sp, #180]	; 0xb4
 8006cb4:	f8bd b0bc 	ldrh.w	fp, [sp, #188]	; 0xbc
 8006cb8:	f8bd 10c4 	ldrh.w	r1, [sp, #196]	; 0xc4
 8006cbc:	f99d 70c8 	ldrsb.w	r7, [sp, #200]	; 0xc8
 8006cc0:	9400      	str	r4, [sp, #0]
  ili9341_t *lcd = NULL;

  if (NULL != spi_hal) {
 8006cc2:	2800      	cmp	r0, #0
 8006cc4:	f000 833d 	beq.w	8007342 <ili9341_new+0x6a6>

    if ( (NULL != reset_port)        && IS_GPIO_PIN(reset_pin)         &&
 8006cc8:	2e00      	cmp	r6, #0
 8006cca:	f000 833a 	beq.w	8007342 <ili9341_new+0x6a6>
 8006cce:	2a00      	cmp	r2, #0
 8006cd0:	f000 8337 	beq.w	8007342 <ili9341_new+0x6a6>
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	f000 8334 	beq.w	8007342 <ili9341_new+0x6a6>
         (NULL != tft_select_port)   && IS_GPIO_PIN(tft_select_pin)    &&
 8006cda:	f1b8 0f00 	cmp.w	r8, #0
 8006cde:	f000 8330 	beq.w	8007342 <ili9341_new+0x6a6>
 8006ce2:	4605      	mov	r5, r0
 8006ce4:	982b      	ldr	r0, [sp, #172]	; 0xac
 8006ce6:	2800      	cmp	r0, #0
 8006ce8:	f000 832b 	beq.w	8007342 <ili9341_new+0x6a6>
         (NULL != data_command_port) && IS_GPIO_PIN(data_command_pin)  &&
 8006cec:	f1b9 0f00 	cmp.w	r9, #0
 8006cf0:	f000 8327 	beq.w	8007342 <ili9341_new+0x6a6>
         (orientation > isoNONE)     && (orientation < isoCOUNT)       ) {
 8006cf4:	fa5f f08a 	uxtb.w	r0, sl
 8006cf8:	2803      	cmp	r0, #3
 8006cfa:	f200 8322 	bhi.w	8007342 <ili9341_new+0x6a6>

      // we must either NOT support the touch interface, OR we must have valid
      // touch interface parameters
      if ( itsSupported != touch_support ||
 8006cfe:	2f01      	cmp	r7, #1
 8006d00:	d10e      	bne.n	8006d20 <ili9341_new+0x84>
 8006d02:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8006d04:	2800      	cmp	r0, #0
 8006d06:	f000 831c 	beq.w	8007342 <ili9341_new+0x6a6>
           ( (NULL != touch_select_port) && IS_GPIO_PIN(touch_select_pin) &&
 8006d0a:	f1bb 0f00 	cmp.w	fp, #0
 8006d0e:	f000 8318 	beq.w	8007342 <ili9341_new+0x6a6>
 8006d12:	9830      	ldr	r0, [sp, #192]	; 0xc0
 8006d14:	2800      	cmp	r0, #0
 8006d16:	f000 8314 	beq.w	8007342 <ili9341_new+0x6a6>
             (NULL != touch_irq_port)    && IS_GPIO_PIN(touch_irq_pin)    )) {
 8006d1a:	2900      	cmp	r1, #0
 8006d1c:	f000 8311 	beq.w	8007342 <ili9341_new+0x6a6>

        if (NULL != (lcd = malloc(sizeof(ili9341_t)))) {
 8006d20:	2068      	movs	r0, #104	; 0x68
 8006d22:	e9cd 3102 	strd	r3, r1, [sp, #8]
 8006d26:	9201      	str	r2, [sp, #4]
 8006d28:	f003 f82a 	bl	8009d80 <malloc>
 8006d2c:	4604      	mov	r4, r0
 8006d2e:	2800      	cmp	r0, #0
 8006d30:	f000 8307 	beq.w	8007342 <ili9341_new+0x6a6>

          lcd->spi_hal              = spi_hal;

          lcd->reset_port           = reset_port;
          lcd->reset_pin            = reset_pin;
          lcd->tft_select_port      = tft_select_port;
 8006d34:	9b02      	ldr	r3, [sp, #8]
 8006d36:	60c3      	str	r3, [r0, #12]
          lcd->tft_select_pin       = tft_select_pin;
          lcd->data_command_port    = data_command_port;
 8006d38:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8006d3a:	6143      	str	r3, [r0, #20]
}

static ili9341_two_dimension_t ili9341_screen_size(
    ili9341_screen_orientation_t orientation)
{
  switch (orientation) {
 8006d3c:	f03a 0302 	bics.w	r3, sl, #2
    default:
    case isoDown:
      return (ili9341_two_dimension_t){ { .width = 240U }, { .height = 320U } };
 8006d40:	4bc7      	ldr	r3, [pc, #796]	; (8007060 <ili9341_new+0x3c4>)
          lcd->reset_pin            = reset_pin;
 8006d42:	9a01      	ldr	r2, [sp, #4]
      return (ili9341_two_dimension_t){ { .width = 240U }, { .height = 320U } };
 8006d44:	bf0c      	ite	eq
 8006d46:	681b      	ldreq	r3, [r3, #0]
    case isoRight:
      return (ili9341_two_dimension_t){ { .width = 320U }, { .height = 240U } };
 8006d48:	685b      	ldrne	r3, [r3, #4]
  switch (orientation) {
 8006d4a:	9903      	ldr	r1, [sp, #12]
          lcd->reset_pin            = reset_pin;
 8006d4c:	8102      	strh	r2, [r0, #8]
          lcd->reset_port           = reset_port;
 8006d4e:	e9c0 5600 	strd	r5, r6, [r0]
          lcd->tft_select_pin       = tft_select_pin;
 8006d52:	f8a0 8010 	strh.w	r8, [r0, #16]
          lcd->data_command_pin     = data_command_pin;
 8006d56:	f8a0 9018 	strh.w	r9, [r0, #24]
          lcd->orientation          = orientation;
 8006d5a:	f880 a01a 	strb.w	sl, [r0, #26]
      return (ili9341_two_dimension_t){ { .width = 320U }, { .height = 240U } };
 8006d5e:	9314      	str	r3, [sp, #80]	; 0x50
 8006d60:	931c      	str	r3, [sp, #112]	; 0x70
          lcd->screen_size          = ili9341_screen_size(orientation);
 8006d62:	61c3      	str	r3, [r0, #28]
          if (touch_support) {
 8006d64:	2f00      	cmp	r7, #0
 8006d66:	f040 82f1 	bne.w	800734c <ili9341_new+0x6b0>
            lcd->touch_pressed_begin  = NULL;
 8006d6a:	f04f 0800 	mov.w	r8, #0
 8006d6e:	f04f 0900 	mov.w	r9, #0
            lcd->touch_3point         = (ili9341_3point_calibrator_t){ {{0U}, {0U}}, 0, 0, 0.0F, 0.0F, 0.0F, 0.0F };
 8006d72:	e9c4 7711 	strd	r7, r7, [r4, #68]	; 0x44
 8006d76:	e9c4 7713 	strd	r7, r7, [r4, #76]	; 0x4c
 8006d7a:	e9c4 7715 	strd	r7, r7, [r4, #84]	; 0x54
            lcd->touch_pressed_begin  = NULL;
 8006d7e:	e9c4 8918 	strd	r8, r9, [r4, #96]	; 0x60
            lcd->touch_calibration    = itcNONE;
 8006d82:	21ff      	movs	r1, #255	; 0xff
            lcd->touch_irq_pin        = 0;
 8006d84:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
            lcd->touch_select_port    = NULL;
 8006d88:	6227      	str	r7, [r4, #32]
            lcd->touch_select_pin     = 0;
 8006d8a:	84a7      	strh	r7, [r4, #36]	; 0x24
            lcd->touch_irq_port       = NULL;
 8006d8c:	62a7      	str	r7, [r4, #40]	; 0x28
            lcd->touch_coordinate     = (ili9341_two_dimension_t){ {0U}, {0U} };
 8006d8e:	6327      	str	r7, [r4, #48]	; 0x30
            lcd->touch_scalar         = (ili9341_scalar_calibrator_t){ {{0U}, {0U}}, {{0U}, {0U}} };
 8006d90:	f8c4 7036 	str.w	r7, [r4, #54]	; 0x36
 8006d94:	f8c4 703a 	str.w	r7, [r4, #58]	; 0x3a
            lcd->touch_3point         = (ili9341_3point_calibrator_t){ {{0U}, {0U}}, 0, 0, 0.0F, 0.0F, 0.0F, 0.0F };
 8006d98:	6427      	str	r7, [r4, #64]	; 0x40
            lcd->touch_irq_pin        = 0;
 8006d9a:	62e0      	str	r0, [r4, #44]	; 0x2c
            lcd->touch_calibration    = itcNONE;
 8006d9c:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
            lcd->touch_pressed        = itpNONE;
 8006da0:	f884 105c 	strb.w	r1, [r4, #92]	; 0x5c
  HAL_GPIO_WritePin(lcd->reset_port, lcd->reset_pin, __GPIO_PIN_CLR__);
 8006da4:	4611      	mov	r1, r2
 8006da6:	4630      	mov	r0, r6
 8006da8:	2200      	movs	r2, #0
 8006daa:	f7fb fd37 	bl	800281c <HAL_GPIO_WritePin>
  HAL_Delay(200);
 8006dae:	20c8      	movs	r0, #200	; 0xc8
 8006db0:	f7fa ff1c 	bl	8001bec <HAL_Delay>
  HAL_GPIO_WritePin(lcd->reset_port, lcd->reset_pin, __GPIO_PIN_SET__);
 8006db4:	8921      	ldrh	r1, [r4, #8]
 8006db6:	6860      	ldr	r0, [r4, #4]
      0xE0, 15, (uint8_t[]){ 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 8006db8:	4faa      	ldr	r7, [pc, #680]	; (8007064 <ili9341_new+0x3c8>)
  HAL_GPIO_WritePin(lcd->reset_port, lcd->reset_pin, __GPIO_PIN_SET__);
 8006dba:	2201      	movs	r2, #1
 8006dbc:	f7fb fd2e 	bl	800281c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(lcd->tft_select_port, lcd->tft_select_pin, __GPIO_PIN_SET__);
 8006dc0:	8a21      	ldrh	r1, [r4, #16]
 8006dc2:	68e0      	ldr	r0, [r4, #12]
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	f7fb fd29 	bl	800281c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(lcd->touch_select_port, lcd->touch_select_pin, __GPIO_PIN_SET__);
 8006dca:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 8006dcc:	6a20      	ldr	r0, [r4, #32]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	f7fb fd24 	bl	800281c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(lcd->tft_select_port, lcd->tft_select_pin, __GPIO_PIN_CLR__);
 8006dd4:	8a21      	ldrh	r1, [r4, #16]
 8006dd6:	68e0      	ldr	r0, [r4, #12]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	2501      	movs	r5, #1
 8006ddc:	f7fb fd1e 	bl	800281c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_CLR__);
 8006de0:	8b21      	ldrh	r1, [r4, #24]
 8006de2:	6960      	ldr	r0, [r4, #20]
 8006de4:	f88d 5070 	strb.w	r5, [sp, #112]	; 0x70
 8006de8:	2200      	movs	r2, #0
 8006dea:	f7fb fd17 	bl	800281c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(lcd->spi_hal, &command, sizeof(command), __SPI_MAX_DELAY__);
 8006dee:	462a      	mov	r2, r5
 8006df0:	a91c      	add	r1, sp, #112	; 0x70
 8006df2:	f04f 33ff 	mov.w	r3, #4294967295
 8006df6:	6820      	ldr	r0, [r4, #0]
 8006df8:	f7fd fa4e 	bl	8004298 <HAL_SPI_Transmit>
  HAL_Delay(1000);
 8006dfc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006e00:	f7fa fef4 	bl	8001bec <HAL_Delay>
      0xCB, 5, (uint8_t[]){ 0x39, 0x2C, 0x00, 0x34, 0x02 });
 8006e04:	4b98      	ldr	r3, [pc, #608]	; (8007068 <ili9341_new+0x3cc>)
  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_CLR__);
 8006e06:	8b21      	ldrh	r1, [r4, #24]
 8006e08:	6960      	ldr	r0, [r4, #20]
      0xCB, 5, (uint8_t[]){ 0x39, 0x2C, 0x00, 0x34, 0x02 });
 8006e0a:	9316      	str	r3, [sp, #88]	; 0x58
 8006e0c:	f04f 0a02 	mov.w	sl, #2
 8006e10:	23cb      	movs	r3, #203	; 0xcb
  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_CLR__);
 8006e12:	2200      	movs	r2, #0
 8006e14:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
      0xCB, 5, (uint8_t[]){ 0x39, 0x2C, 0x00, 0x34, 0x02 });
 8006e18:	f88d a05c 	strb.w	sl, [sp, #92]	; 0x5c
  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_CLR__);
 8006e1c:	f7fb fcfe 	bl	800281c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(lcd->spi_hal, &command, sizeof(command), __SPI_MAX_DELAY__);
 8006e20:	f04f 33ff 	mov.w	r3, #4294967295
 8006e24:	462a      	mov	r2, r5
 8006e26:	a91c      	add	r1, sp, #112	; 0x70
 8006e28:	6820      	ldr	r0, [r4, #0]
 8006e2a:	f7fd fa35 	bl	8004298 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_SET__);
 8006e2e:	8b21      	ldrh	r1, [r4, #24]
 8006e30:	6960      	ldr	r0, [r4, #20]
 8006e32:	462a      	mov	r2, r5
 8006e34:	f7fb fcf2 	bl	800281c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(lcd->spi_hal, data, data_sz, __SPI_MAX_DELAY__);
 8006e38:	f04f 33ff 	mov.w	r3, #4294967295
 8006e3c:	2205      	movs	r2, #5
 8006e3e:	a916      	add	r1, sp, #88	; 0x58
 8006e40:	6820      	ldr	r0, [r4, #0]
 8006e42:	f7fd fa29 	bl	8004298 <HAL_SPI_Transmit>
      0xCF, 3, (uint8_t[]){ 0x00, 0xC1, 0x30 });
 8006e46:	2630      	movs	r6, #48	; 0x30
 8006e48:	f44f 4c41 	mov.w	ip, #49408	; 0xc100
 8006e4c:	23cf      	movs	r3, #207	; 0xcf
  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_CLR__);
 8006e4e:	8b21      	ldrh	r1, [r4, #24]
 8006e50:	6960      	ldr	r0, [r4, #20]
      0xCF, 3, (uint8_t[]){ 0x00, 0xC1, 0x30 });
 8006e52:	f8ad c04c 	strh.w	ip, [sp, #76]	; 0x4c
  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_CLR__);
 8006e56:	2200      	movs	r2, #0
      0xCF, 3, (uint8_t[]){ 0x00, 0xC1, 0x30 });
 8006e58:	f88d 604e 	strb.w	r6, [sp, #78]	; 0x4e
  ili9341_spi_write_command(lcd, issNONE, command);
 8006e5c:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_CLR__);
 8006e60:	f7fb fcdc 	bl	800281c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(lcd->spi_hal, &command, sizeof(command), __SPI_MAX_DELAY__);
 8006e64:	f04f 33ff 	mov.w	r3, #4294967295
 8006e68:	462a      	mov	r2, r5
 8006e6a:	a91c      	add	r1, sp, #112	; 0x70
 8006e6c:	6820      	ldr	r0, [r4, #0]
 8006e6e:	f7fd fa13 	bl	8004298 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_SET__);
 8006e72:	8b21      	ldrh	r1, [r4, #24]
 8006e74:	6960      	ldr	r0, [r4, #20]
 8006e76:	462a      	mov	r2, r5
 8006e78:	f7fb fcd0 	bl	800281c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(lcd->spi_hal, data, data_sz, __SPI_MAX_DELAY__);
 8006e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8006e80:	2203      	movs	r2, #3
 8006e82:	a913      	add	r1, sp, #76	; 0x4c
 8006e84:	6820      	ldr	r0, [r4, #0]
 8006e86:	f7fd fa07 	bl	8004298 <HAL_SPI_Transmit>
      0xE8, 3, (uint8_t[]){ 0x85, 0x00, 0x78 });
 8006e8a:	f04f 0978 	mov.w	r9, #120	; 0x78
 8006e8e:	23e8      	movs	r3, #232	; 0xe8
  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_CLR__);
 8006e90:	8b21      	ldrh	r1, [r4, #24]
 8006e92:	6960      	ldr	r0, [r4, #20]
 8006e94:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
      0xE8, 3, (uint8_t[]){ 0x85, 0x00, 0x78 });
 8006e98:	2685      	movs	r6, #133	; 0x85
  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_CLR__);
 8006e9a:	2200      	movs	r2, #0
      0xE8, 3, (uint8_t[]){ 0x85, 0x00, 0x78 });
 8006e9c:	f8ad 6048 	strh.w	r6, [sp, #72]	; 0x48
 8006ea0:	f88d 904a 	strb.w	r9, [sp, #74]	; 0x4a
  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_CLR__);
 8006ea4:	f7fb fcba 	bl	800281c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(lcd->spi_hal, &command, sizeof(command), __SPI_MAX_DELAY__);
 8006ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8006eac:	462a      	mov	r2, r5
 8006eae:	a91c      	add	r1, sp, #112	; 0x70
 8006eb0:	6820      	ldr	r0, [r4, #0]
 8006eb2:	f7fd f9f1 	bl	8004298 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_SET__);
 8006eb6:	8b21      	ldrh	r1, [r4, #24]
 8006eb8:	6960      	ldr	r0, [r4, #20]
 8006eba:	462a      	mov	r2, r5
      0xEA, 2, (uint8_t[]){ 0x00, 0x00 });
 8006ebc:	2600      	movs	r6, #0
  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_SET__);
 8006ebe:	f7fb fcad 	bl	800281c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(lcd->spi_hal, data, data_sz, __SPI_MAX_DELAY__);
 8006ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8006ec6:	2203      	movs	r2, #3
 8006ec8:	a912      	add	r1, sp, #72	; 0x48
 8006eca:	6820      	ldr	r0, [r4, #0]
 8006ecc:	f7fd f9e4 	bl	8004298 <HAL_SPI_Transmit>
  ili9341_spi_write_command_data(lcd, issNONE,
 8006ed0:	23ea      	movs	r3, #234	; 0xea
  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_CLR__);
 8006ed2:	8b21      	ldrh	r1, [r4, #24]
 8006ed4:	6960      	ldr	r0, [r4, #20]
 8006ed6:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 8006eda:	4632      	mov	r2, r6
      0xEA, 2, (uint8_t[]){ 0x00, 0x00 });
 8006edc:	f8ad 6040 	strh.w	r6, [sp, #64]	; 0x40
  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_CLR__);
 8006ee0:	f7fb fc9c 	bl	800281c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(lcd->spi_hal, &command, sizeof(command), __SPI_MAX_DELAY__);
 8006ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8006ee8:	462a      	mov	r2, r5
 8006eea:	a91c      	add	r1, sp, #112	; 0x70
 8006eec:	6820      	ldr	r0, [r4, #0]
 8006eee:	f7fd f9d3 	bl	8004298 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_SET__);
 8006ef2:	8b21      	ldrh	r1, [r4, #24]
 8006ef4:	6960      	ldr	r0, [r4, #20]
 8006ef6:	462a      	mov	r2, r5
 8006ef8:	f7fb fc90 	bl	800281c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(lcd->spi_hal, data, data_sz, __SPI_MAX_DELAY__);
 8006efc:	4652      	mov	r2, sl
 8006efe:	f04f 33ff 	mov.w	r3, #4294967295
 8006f02:	a910      	add	r1, sp, #64	; 0x40
 8006f04:	6820      	ldr	r0, [r4, #0]
 8006f06:	f7fd f9c7 	bl	8004298 <HAL_SPI_Transmit>
      0xED, 4, (uint8_t[]){ 0x64, 0x03, 0x12, 0x81 });
 8006f0a:	4b58      	ldr	r3, [pc, #352]	; (800706c <ili9341_new+0x3d0>)
  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_CLR__);
 8006f0c:	8b21      	ldrh	r1, [r4, #24]
 8006f0e:	6960      	ldr	r0, [r4, #20]
      0xED, 4, (uint8_t[]){ 0x64, 0x03, 0x12, 0x81 });
 8006f10:	9315      	str	r3, [sp, #84]	; 0x54
  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_CLR__);
 8006f12:	4632      	mov	r2, r6
 8006f14:	23ed      	movs	r3, #237	; 0xed
 8006f16:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 8006f1a:	f7fb fc7f 	bl	800281c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(lcd->spi_hal, &command, sizeof(command), __SPI_MAX_DELAY__);
 8006f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8006f22:	462a      	mov	r2, r5
 8006f24:	a91c      	add	r1, sp, #112	; 0x70
 8006f26:	6820      	ldr	r0, [r4, #0]
 8006f28:	f7fd f9b6 	bl	8004298 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_SET__);
 8006f2c:	8b21      	ldrh	r1, [r4, #24]
 8006f2e:	6960      	ldr	r0, [r4, #20]
 8006f30:	462a      	mov	r2, r5
 8006f32:	f7fb fc73 	bl	800281c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(lcd->spi_hal, data, data_sz, __SPI_MAX_DELAY__);
 8006f36:	f04f 33ff 	mov.w	r3, #4294967295
 8006f3a:	2204      	movs	r2, #4
 8006f3c:	a915      	add	r1, sp, #84	; 0x54
 8006f3e:	6820      	ldr	r0, [r4, #0]
 8006f40:	f7fd f9aa 	bl	8004298 <HAL_SPI_Transmit>
      0xF7, 1, (uint8_t[]){ 0x20 });
 8006f44:	f04f 0c20 	mov.w	ip, #32
 8006f48:	23f7      	movs	r3, #247	; 0xf7
  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_CLR__);
 8006f4a:	8b21      	ldrh	r1, [r4, #24]
 8006f4c:	6960      	ldr	r0, [r4, #20]
      0xF7, 1, (uint8_t[]){ 0x20 });
 8006f4e:	f88d c034 	strb.w	ip, [sp, #52]	; 0x34
  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_CLR__);
 8006f52:	4632      	mov	r2, r6
 8006f54:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 8006f58:	f7fb fc60 	bl	800281c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(lcd->spi_hal, &command, sizeof(command), __SPI_MAX_DELAY__);
 8006f5c:	f04f 33ff 	mov.w	r3, #4294967295
 8006f60:	462a      	mov	r2, r5
 8006f62:	a91c      	add	r1, sp, #112	; 0x70
 8006f64:	6820      	ldr	r0, [r4, #0]
 8006f66:	f7fd f997 	bl	8004298 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_SET__);
 8006f6a:	8b21      	ldrh	r1, [r4, #24]
 8006f6c:	6960      	ldr	r0, [r4, #20]
 8006f6e:	462a      	mov	r2, r5
 8006f70:	f7fb fc54 	bl	800281c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(lcd->spi_hal, data, data_sz, __SPI_MAX_DELAY__);
 8006f74:	462a      	mov	r2, r5
 8006f76:	f04f 33ff 	mov.w	r3, #4294967295
 8006f7a:	a90d      	add	r1, sp, #52	; 0x34
 8006f7c:	6820      	ldr	r0, [r4, #0]
 8006f7e:	f7fd f98b 	bl	8004298 <HAL_SPI_Transmit>
      0xC0, 1, (uint8_t[]){ 0x23 });
 8006f82:	f04f 0c23 	mov.w	ip, #35	; 0x23
 8006f86:	23c0      	movs	r3, #192	; 0xc0
  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_CLR__);
 8006f88:	8b21      	ldrh	r1, [r4, #24]
 8006f8a:	6960      	ldr	r0, [r4, #20]
      0xC0, 1, (uint8_t[]){ 0x23 });
 8006f8c:	f88d c030 	strb.w	ip, [sp, #48]	; 0x30
  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_CLR__);
 8006f90:	4632      	mov	r2, r6
 8006f92:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 8006f96:	f7fb fc41 	bl	800281c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(lcd->spi_hal, &command, sizeof(command), __SPI_MAX_DELAY__);
 8006f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8006f9e:	462a      	mov	r2, r5
 8006fa0:	a91c      	add	r1, sp, #112	; 0x70
 8006fa2:	6820      	ldr	r0, [r4, #0]
 8006fa4:	f7fd f978 	bl	8004298 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_SET__);
 8006fa8:	8b21      	ldrh	r1, [r4, #24]
 8006faa:	6960      	ldr	r0, [r4, #20]
 8006fac:	462a      	mov	r2, r5
 8006fae:	f7fb fc35 	bl	800281c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(lcd->spi_hal, data, data_sz, __SPI_MAX_DELAY__);
 8006fb2:	462a      	mov	r2, r5
 8006fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8006fb8:	a90c      	add	r1, sp, #48	; 0x30
 8006fba:	6820      	ldr	r0, [r4, #0]
 8006fbc:	f7fd f96c 	bl	8004298 <HAL_SPI_Transmit>
      0xC1, 1, (uint8_t[]){ 0x10 });
 8006fc0:	f04f 0c10 	mov.w	ip, #16
 8006fc4:	23c1      	movs	r3, #193	; 0xc1
  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_CLR__);
 8006fc6:	8b21      	ldrh	r1, [r4, #24]
 8006fc8:	6960      	ldr	r0, [r4, #20]
      0xC1, 1, (uint8_t[]){ 0x10 });
 8006fca:	f88d c02c 	strb.w	ip, [sp, #44]	; 0x2c
  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_CLR__);
 8006fce:	4632      	mov	r2, r6
 8006fd0:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 8006fd4:	f7fb fc22 	bl	800281c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(lcd->spi_hal, &command, sizeof(command), __SPI_MAX_DELAY__);
 8006fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8006fdc:	462a      	mov	r2, r5
 8006fde:	a91c      	add	r1, sp, #112	; 0x70
 8006fe0:	6820      	ldr	r0, [r4, #0]
 8006fe2:	f7fd f959 	bl	8004298 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_SET__);
 8006fe6:	8b21      	ldrh	r1, [r4, #24]
 8006fe8:	6960      	ldr	r0, [r4, #20]
 8006fea:	462a      	mov	r2, r5
 8006fec:	f7fb fc16 	bl	800281c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(lcd->spi_hal, data, data_sz, __SPI_MAX_DELAY__);
 8006ff0:	462a      	mov	r2, r5
 8006ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8006ff6:	a90b      	add	r1, sp, #44	; 0x2c
 8006ff8:	6820      	ldr	r0, [r4, #0]
 8006ffa:	f7fd f94d 	bl	8004298 <HAL_SPI_Transmit>
      0xC5, 2, (uint8_t[]){ 0x3E, 0x28 });
 8006ffe:	f642 0c3e 	movw	ip, #10302	; 0x283e
 8007002:	23c5      	movs	r3, #197	; 0xc5
  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_CLR__);
 8007004:	8b21      	ldrh	r1, [r4, #24]
 8007006:	6960      	ldr	r0, [r4, #20]
      0xC5, 2, (uint8_t[]){ 0x3E, 0x28 });
 8007008:	f8ad c03c 	strh.w	ip, [sp, #60]	; 0x3c
  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_CLR__);
 800700c:	4632      	mov	r2, r6
 800700e:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 8007012:	f7fb fc03 	bl	800281c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(lcd->spi_hal, &command, sizeof(command), __SPI_MAX_DELAY__);
 8007016:	f04f 33ff 	mov.w	r3, #4294967295
 800701a:	462a      	mov	r2, r5
 800701c:	a91c      	add	r1, sp, #112	; 0x70
 800701e:	6820      	ldr	r0, [r4, #0]
 8007020:	f7fd f93a 	bl	8004298 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_SET__);
 8007024:	8b21      	ldrh	r1, [r4, #24]
 8007026:	6960      	ldr	r0, [r4, #20]
 8007028:	462a      	mov	r2, r5
 800702a:	f7fb fbf7 	bl	800281c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(lcd->spi_hal, data, data_sz, __SPI_MAX_DELAY__);
 800702e:	4652      	mov	r2, sl
 8007030:	f04f 33ff 	mov.w	r3, #4294967295
 8007034:	a90f      	add	r1, sp, #60	; 0x3c
 8007036:	6820      	ldr	r0, [r4, #0]
 8007038:	f7fd f92e 	bl	8004298 <HAL_SPI_Transmit>
      0xC7, 1, (uint8_t[]){ 0x86 });
 800703c:	f04f 0c86 	mov.w	ip, #134	; 0x86
 8007040:	23c7      	movs	r3, #199	; 0xc7
  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_CLR__);
 8007042:	8b21      	ldrh	r1, [r4, #24]
 8007044:	6960      	ldr	r0, [r4, #20]
      0xC7, 1, (uint8_t[]){ 0x86 });
 8007046:	f88d c028 	strb.w	ip, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_CLR__);
 800704a:	4632      	mov	r2, r6
 800704c:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 8007050:	f7fb fbe4 	bl	800281c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(lcd->spi_hal, &command, sizeof(command), __SPI_MAX_DELAY__);
 8007054:	f04f 33ff 	mov.w	r3, #4294967295
 8007058:	462a      	mov	r2, r5
 800705a:	a91c      	add	r1, sp, #112	; 0x70
 800705c:	e008      	b.n	8007070 <ili9341_new+0x3d4>
 800705e:	bf00      	nop
 8007060:	0800d9b8 	.word	0x0800d9b8
 8007064:	0800d9c0 	.word	0x0800d9c0
 8007068:	34002c39 	.word	0x34002c39
 800706c:	81120364 	.word	0x81120364
 8007070:	6820      	ldr	r0, [r4, #0]
 8007072:	f7fd f911 	bl	8004298 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_SET__);
 8007076:	8b21      	ldrh	r1, [r4, #24]
 8007078:	6960      	ldr	r0, [r4, #20]
 800707a:	462a      	mov	r2, r5
 800707c:	f7fb fbce 	bl	800281c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(lcd->spi_hal, data, data_sz, __SPI_MAX_DELAY__);
 8007080:	462a      	mov	r2, r5
 8007082:	f04f 33ff 	mov.w	r3, #4294967295
 8007086:	a90a      	add	r1, sp, #40	; 0x28
 8007088:	6820      	ldr	r0, [r4, #0]
 800708a:	f7fd f905 	bl	8004298 <HAL_SPI_Transmit>
      0x36, 1, (uint8_t[]){ 0x48 });
 800708e:	f04f 0848 	mov.w	r8, #72	; 0x48
 8007092:	2336      	movs	r3, #54	; 0x36
  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_CLR__);
 8007094:	8b21      	ldrh	r1, [r4, #24]
 8007096:	6960      	ldr	r0, [r4, #20]
 8007098:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 800709c:	4632      	mov	r2, r6
      0x36, 1, (uint8_t[]){ 0x48 });
 800709e:	f88d 8024 	strb.w	r8, [sp, #36]	; 0x24
  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_CLR__);
 80070a2:	f7fb fbbb 	bl	800281c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(lcd->spi_hal, &command, sizeof(command), __SPI_MAX_DELAY__);
 80070a6:	f04f 33ff 	mov.w	r3, #4294967295
 80070aa:	462a      	mov	r2, r5
 80070ac:	a91c      	add	r1, sp, #112	; 0x70
 80070ae:	6820      	ldr	r0, [r4, #0]
 80070b0:	f7fd f8f2 	bl	8004298 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_SET__);
 80070b4:	8b21      	ldrh	r1, [r4, #24]
 80070b6:	6960      	ldr	r0, [r4, #20]
 80070b8:	462a      	mov	r2, r5
 80070ba:	f7fb fbaf 	bl	800281c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(lcd->spi_hal, data, data_sz, __SPI_MAX_DELAY__);
 80070be:	462a      	mov	r2, r5
 80070c0:	f04f 33ff 	mov.w	r3, #4294967295
 80070c4:	a909      	add	r1, sp, #36	; 0x24
 80070c6:	6820      	ldr	r0, [r4, #0]
 80070c8:	f7fd f8e6 	bl	8004298 <HAL_SPI_Transmit>
      0x3A, 1, (uint8_t[]){ 0x55 });
 80070cc:	f04f 0c55 	mov.w	ip, #85	; 0x55
 80070d0:	233a      	movs	r3, #58	; 0x3a
  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_CLR__);
 80070d2:	8b21      	ldrh	r1, [r4, #24]
 80070d4:	6960      	ldr	r0, [r4, #20]
      0x3A, 1, (uint8_t[]){ 0x55 });
 80070d6:	f88d c020 	strb.w	ip, [sp, #32]
  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_CLR__);
 80070da:	4632      	mov	r2, r6
 80070dc:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 80070e0:	f7fb fb9c 	bl	800281c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(lcd->spi_hal, &command, sizeof(command), __SPI_MAX_DELAY__);
 80070e4:	f04f 33ff 	mov.w	r3, #4294967295
 80070e8:	462a      	mov	r2, r5
 80070ea:	a91c      	add	r1, sp, #112	; 0x70
 80070ec:	6820      	ldr	r0, [r4, #0]
 80070ee:	f7fd f8d3 	bl	8004298 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_SET__);
 80070f2:	8b21      	ldrh	r1, [r4, #24]
 80070f4:	6960      	ldr	r0, [r4, #20]
 80070f6:	462a      	mov	r2, r5
 80070f8:	f7fb fb90 	bl	800281c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(lcd->spi_hal, data, data_sz, __SPI_MAX_DELAY__);
 80070fc:	462a      	mov	r2, r5
 80070fe:	f04f 33ff 	mov.w	r3, #4294967295
 8007102:	a908      	add	r1, sp, #32
 8007104:	6820      	ldr	r0, [r4, #0]
 8007106:	f7fd f8c7 	bl	8004298 <HAL_SPI_Transmit>
      0xB1, 2, (uint8_t[]){ 0x00, 0x18 });
 800710a:	f44f 5cc0 	mov.w	ip, #6144	; 0x1800
 800710e:	23b1      	movs	r3, #177	; 0xb1
  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_CLR__);
 8007110:	8b21      	ldrh	r1, [r4, #24]
 8007112:	6960      	ldr	r0, [r4, #20]
      0xB1, 2, (uint8_t[]){ 0x00, 0x18 });
 8007114:	f8ad c038 	strh.w	ip, [sp, #56]	; 0x38
  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_CLR__);
 8007118:	4632      	mov	r2, r6
 800711a:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 800711e:	f7fb fb7d 	bl	800281c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(lcd->spi_hal, &command, sizeof(command), __SPI_MAX_DELAY__);
 8007122:	f04f 33ff 	mov.w	r3, #4294967295
 8007126:	462a      	mov	r2, r5
 8007128:	a91c      	add	r1, sp, #112	; 0x70
 800712a:	6820      	ldr	r0, [r4, #0]
 800712c:	f7fd f8b4 	bl	8004298 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_SET__);
 8007130:	8b21      	ldrh	r1, [r4, #24]
 8007132:	6960      	ldr	r0, [r4, #20]
 8007134:	462a      	mov	r2, r5
 8007136:	f7fb fb71 	bl	800281c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(lcd->spi_hal, data, data_sz, __SPI_MAX_DELAY__);
 800713a:	4652      	mov	r2, sl
 800713c:	f04f 33ff 	mov.w	r3, #4294967295
 8007140:	a90e      	add	r1, sp, #56	; 0x38
 8007142:	6820      	ldr	r0, [r4, #0]
 8007144:	f7fd f8a8 	bl	8004298 <HAL_SPI_Transmit>
      0xB6, 3, (uint8_t[]){ 0x08, 0x82, 0x27 });
 8007148:	f248 2e08 	movw	lr, #33288	; 0x8208
 800714c:	f04f 0c27 	mov.w	ip, #39	; 0x27
 8007150:	23b6      	movs	r3, #182	; 0xb6
  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_CLR__);
 8007152:	8b21      	ldrh	r1, [r4, #24]
 8007154:	6960      	ldr	r0, [r4, #20]
      0xB6, 3, (uint8_t[]){ 0x08, 0x82, 0x27 });
 8007156:	f8ad e044 	strh.w	lr, [sp, #68]	; 0x44
  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_CLR__);
 800715a:	4632      	mov	r2, r6
      0xB6, 3, (uint8_t[]){ 0x08, 0x82, 0x27 });
 800715c:	f88d c046 	strb.w	ip, [sp, #70]	; 0x46
  ili9341_spi_write_command(lcd, issNONE, command);
 8007160:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_CLR__);
 8007164:	f7fb fb5a 	bl	800281c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(lcd->spi_hal, &command, sizeof(command), __SPI_MAX_DELAY__);
 8007168:	f04f 33ff 	mov.w	r3, #4294967295
 800716c:	462a      	mov	r2, r5
 800716e:	a91c      	add	r1, sp, #112	; 0x70
 8007170:	6820      	ldr	r0, [r4, #0]
 8007172:	f7fd f891 	bl	8004298 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_SET__);
 8007176:	8b21      	ldrh	r1, [r4, #24]
 8007178:	6960      	ldr	r0, [r4, #20]
 800717a:	462a      	mov	r2, r5
 800717c:	f7fb fb4e 	bl	800281c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(lcd->spi_hal, data, data_sz, __SPI_MAX_DELAY__);
 8007180:	f04f 33ff 	mov.w	r3, #4294967295
 8007184:	2203      	movs	r2, #3
 8007186:	a911      	add	r1, sp, #68	; 0x44
 8007188:	6820      	ldr	r0, [r4, #0]
 800718a:	f7fd f885 	bl	8004298 <HAL_SPI_Transmit>
  ili9341_spi_write_command_data(lcd, issNONE,
 800718e:	23f2      	movs	r3, #242	; 0xf2
  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_CLR__);
 8007190:	8b21      	ldrh	r1, [r4, #24]
 8007192:	6960      	ldr	r0, [r4, #20]
 8007194:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 8007198:	4632      	mov	r2, r6
      0xF2, 1, (uint8_t[]){ 0x00 });
 800719a:	f88d 601c 	strb.w	r6, [sp, #28]
  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_CLR__);
 800719e:	f7fb fb3d 	bl	800281c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(lcd->spi_hal, &command, sizeof(command), __SPI_MAX_DELAY__);
 80071a2:	f04f 33ff 	mov.w	r3, #4294967295
 80071a6:	462a      	mov	r2, r5
 80071a8:	a91c      	add	r1, sp, #112	; 0x70
 80071aa:	6820      	ldr	r0, [r4, #0]
 80071ac:	f7fd f874 	bl	8004298 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_SET__);
 80071b0:	8b21      	ldrh	r1, [r4, #24]
 80071b2:	6960      	ldr	r0, [r4, #20]
 80071b4:	462a      	mov	r2, r5
 80071b6:	f7fb fb31 	bl	800281c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(lcd->spi_hal, data, data_sz, __SPI_MAX_DELAY__);
 80071ba:	462a      	mov	r2, r5
 80071bc:	f04f 33ff 	mov.w	r3, #4294967295
 80071c0:	a907      	add	r1, sp, #28
 80071c2:	6820      	ldr	r0, [r4, #0]
 80071c4:	f7fd f868 	bl	8004298 <HAL_SPI_Transmit>
  ili9341_spi_write_command_data(lcd, issNONE,
 80071c8:	2326      	movs	r3, #38	; 0x26
  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_CLR__);
 80071ca:	8b21      	ldrh	r1, [r4, #24]
 80071cc:	6960      	ldr	r0, [r4, #20]
 80071ce:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 80071d2:	4632      	mov	r2, r6
      0x26, 1, (uint8_t[]){ 0x01 });
 80071d4:	f88d 5018 	strb.w	r5, [sp, #24]
  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_CLR__);
 80071d8:	f7fb fb20 	bl	800281c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(lcd->spi_hal, &command, sizeof(command), __SPI_MAX_DELAY__);
 80071dc:	f04f 33ff 	mov.w	r3, #4294967295
 80071e0:	462a      	mov	r2, r5
 80071e2:	a91c      	add	r1, sp, #112	; 0x70
 80071e4:	6820      	ldr	r0, [r4, #0]
 80071e6:	f7fd f857 	bl	8004298 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_SET__);
 80071ea:	8b21      	ldrh	r1, [r4, #24]
 80071ec:	6960      	ldr	r0, [r4, #20]
 80071ee:	462a      	mov	r2, r5
 80071f0:	f7fb fb14 	bl	800281c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(lcd->spi_hal, data, data_sz, __SPI_MAX_DELAY__);
 80071f4:	462a      	mov	r2, r5
 80071f6:	f04f 33ff 	mov.w	r3, #4294967295
 80071fa:	a906      	add	r1, sp, #24
 80071fc:	6820      	ldr	r0, [r4, #0]
 80071fe:	f7fd f84b 	bl	8004298 <HAL_SPI_Transmit>
      0xE0, 15, (uint8_t[]){ 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 8007202:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8007206:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
 800720a:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 800720e:	f82c 3b02 	strh.w	r3, [ip], #2
 8007212:	f04f 0ee0 	mov.w	lr, #224	; 0xe0
 8007216:	0c1b      	lsrs	r3, r3, #16
  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_CLR__);
 8007218:	8b21      	ldrh	r1, [r4, #24]
 800721a:	6960      	ldr	r0, [r4, #20]
 800721c:	f88d e060 	strb.w	lr, [sp, #96]	; 0x60
 8007220:	4632      	mov	r2, r6
      0xE0, 15, (uint8_t[]){ 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 8007222:	f88c 3000 	strb.w	r3, [ip]
  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_CLR__);
 8007226:	f7fb faf9 	bl	800281c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(lcd->spi_hal, &command, sizeof(command), __SPI_MAX_DELAY__);
 800722a:	f04f 33ff 	mov.w	r3, #4294967295
 800722e:	462a      	mov	r2, r5
 8007230:	a918      	add	r1, sp, #96	; 0x60
 8007232:	6820      	ldr	r0, [r4, #0]
 8007234:	f7fd f830 	bl	8004298 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_SET__);
 8007238:	8b21      	ldrh	r1, [r4, #24]
 800723a:	6960      	ldr	r0, [r4, #20]
 800723c:	462a      	mov	r2, r5
 800723e:	f7fb faed 	bl	800281c <HAL_GPIO_WritePin>
      0xE1, 15, (uint8_t[]){ 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 8007242:	3710      	adds	r7, #16
  HAL_SPI_Transmit(lcd->spi_hal, data, data_sz, __SPI_MAX_DELAY__);
 8007244:	a91c      	add	r1, sp, #112	; 0x70
 8007246:	f04f 33ff 	mov.w	r3, #4294967295
 800724a:	220f      	movs	r2, #15
 800724c:	6820      	ldr	r0, [r4, #0]
 800724e:	f7fd f823 	bl	8004298 <HAL_SPI_Transmit>
      0xE1, 15, (uint8_t[]){ 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 8007252:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8007256:	af18      	add	r7, sp, #96	; 0x60
 8007258:	c707      	stmia	r7!, {r0, r1, r2}
 800725a:	f827 3b02 	strh.w	r3, [r7], #2
 800725e:	f04f 0ce1 	mov.w	ip, #225	; 0xe1
 8007262:	0c1b      	lsrs	r3, r3, #16
  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_CLR__);
 8007264:	8b21      	ldrh	r1, [r4, #24]
 8007266:	6960      	ldr	r0, [r4, #20]
 8007268:	f88d c037 	strb.w	ip, [sp, #55]	; 0x37
 800726c:	4632      	mov	r2, r6
      0xE1, 15, (uint8_t[]){ 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 800726e:	703b      	strb	r3, [r7, #0]
  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_CLR__);
 8007270:	f7fb fad4 	bl	800281c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(lcd->spi_hal, &command, sizeof(command), __SPI_MAX_DELAY__);
 8007274:	f04f 33ff 	mov.w	r3, #4294967295
 8007278:	462a      	mov	r2, r5
 800727a:	f10d 0137 	add.w	r1, sp, #55	; 0x37
 800727e:	6820      	ldr	r0, [r4, #0]
 8007280:	f7fd f80a 	bl	8004298 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_SET__);
 8007284:	8b21      	ldrh	r1, [r4, #24]
 8007286:	6960      	ldr	r0, [r4, #20]
 8007288:	462a      	mov	r2, r5
 800728a:	f7fb fac7 	bl	800281c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(lcd->spi_hal, data, data_sz, __SPI_MAX_DELAY__);
 800728e:	a918      	add	r1, sp, #96	; 0x60
 8007290:	f04f 33ff 	mov.w	r3, #4294967295
 8007294:	220f      	movs	r2, #15
 8007296:	6820      	ldr	r0, [r4, #0]
 8007298:	f7fc fffe 	bl	8004298 <HAL_SPI_Transmit>
  ili9341_spi_write_command(lcd, issNONE, 0x11);
 800729c:	2311      	movs	r3, #17
  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_CLR__);
 800729e:	8b21      	ldrh	r1, [r4, #24]
 80072a0:	6960      	ldr	r0, [r4, #20]
 80072a2:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 80072a6:	4632      	mov	r2, r6
 80072a8:	f7fb fab8 	bl	800281c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(lcd->spi_hal, &command, sizeof(command), __SPI_MAX_DELAY__);
 80072ac:	462a      	mov	r2, r5
 80072ae:	f10d 0137 	add.w	r1, sp, #55	; 0x37
 80072b2:	f04f 33ff 	mov.w	r3, #4294967295
 80072b6:	6820      	ldr	r0, [r4, #0]
 80072b8:	f7fc ffee 	bl	8004298 <HAL_SPI_Transmit>
  HAL_Delay(120);
 80072bc:	4648      	mov	r0, r9
 80072be:	f7fa fc95 	bl	8001bec <HAL_Delay>
  ili9341_spi_write_command(lcd, issNONE, 0x29);
 80072c2:	2329      	movs	r3, #41	; 0x29
  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_CLR__);
 80072c4:	8b21      	ldrh	r1, [r4, #24]
 80072c6:	6960      	ldr	r0, [r4, #20]
 80072c8:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 80072cc:	4632      	mov	r2, r6
 80072ce:	f7fb faa5 	bl	800281c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(lcd->spi_hal, &command, sizeof(command), __SPI_MAX_DELAY__);
 80072d2:	462a      	mov	r2, r5
 80072d4:	f04f 33ff 	mov.w	r3, #4294967295
 80072d8:	6820      	ldr	r0, [r4, #0]
 80072da:	f10d 0137 	add.w	r1, sp, #55	; 0x37
 80072de:	f7fc ffdb 	bl	8004298 <HAL_SPI_Transmit>
}

static uint8_t ili9341_screen_rotation(
    ili9341_screen_orientation_t orientation)
{
  switch (orientation) {
 80072e2:	7ea3      	ldrb	r3, [r4, #26]
 80072e4:	1e5a      	subs	r2, r3, #1
 80072e6:	4552      	cmp	r2, sl
 80072e8:	d807      	bhi.n	80072fa <ili9341_new+0x65e>
 80072ea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80072ee:	ea4f 1843 	mov.w	r8, r3, lsl #5
 80072f2:	f108 0848 	add.w	r8, r8, #72	; 0x48
 80072f6:	fa5f f888 	uxtb.w	r8, r8
  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_CLR__);
 80072fa:	8b21      	ldrh	r1, [r4, #24]
 80072fc:	6960      	ldr	r0, [r4, #20]
      0x36, 1, (uint8_t[]){ ili9341_screen_rotation(lcd->orientation) });
 80072fe:	f88d 8014 	strb.w	r8, [sp, #20]
  ili9341_spi_write_command(lcd, issNONE, command);
 8007302:	2336      	movs	r3, #54	; 0x36
  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_CLR__);
 8007304:	2200      	movs	r2, #0
 8007306:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 800730a:	f7fb fa87 	bl	800281c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(lcd->spi_hal, &command, sizeof(command), __SPI_MAX_DELAY__);
 800730e:	f10d 0137 	add.w	r1, sp, #55	; 0x37
 8007312:	f04f 33ff 	mov.w	r3, #4294967295
 8007316:	6820      	ldr	r0, [r4, #0]
 8007318:	2201      	movs	r2, #1
 800731a:	f7fc ffbd 	bl	8004298 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_SET__);
 800731e:	8b21      	ldrh	r1, [r4, #24]
 8007320:	6960      	ldr	r0, [r4, #20]
 8007322:	2201      	movs	r2, #1
 8007324:	f7fb fa7a 	bl	800281c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(lcd->spi_hal, data, data_sz, __SPI_MAX_DELAY__);
 8007328:	a905      	add	r1, sp, #20
 800732a:	6820      	ldr	r0, [r4, #0]
 800732c:	f04f 33ff 	mov.w	r3, #4294967295
 8007330:	2201      	movs	r2, #1
 8007332:	f7fc ffb1 	bl	8004298 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(lcd->tft_select_port, lcd->tft_select_pin, __GPIO_PIN_SET__);
 8007336:	8a21      	ldrh	r1, [r4, #16]
 8007338:	68e0      	ldr	r0, [r4, #12]
 800733a:	2201      	movs	r2, #1
 800733c:	f7fb fa6e 	bl	800281c <HAL_GPIO_WritePin>
  return lcd;
 8007340:	e000      	b.n	8007344 <ili9341_new+0x6a8>
  ili9341_t *lcd = NULL;
 8007342:	2400      	movs	r4, #0
}
 8007344:	4620      	mov	r0, r4
 8007346:	b021      	add	sp, #132	; 0x84
 8007348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            lcd->touch_select_port    = touch_select_port;
 800734c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
            lcd->touch_irq_port       = touch_irq_port;
 800734e:	9d30      	ldr	r5, [sp, #192]	; 0xc0
            lcd->touch_select_port    = touch_select_port;
 8007350:	6223      	str	r3, [r4, #32]
            lcd->touch_irq_port       = touch_irq_port;
 8007352:	62a5      	str	r5, [r4, #40]	; 0x28
            lcd->touch_coordinate     = (ili9341_two_dimension_t){ {0U}, {0U} };
 8007354:	2300      	movs	r3, #0
            lcd->touch_irq_pin        = touch_irq_pin;
 8007356:	85a1      	strh	r1, [r4, #44]	; 0x2c
            lcd->touch_3point         = (ili9341_3point_calibrator_t){ {{0U}, {0U}}, 0, 0, 0.0F, 0.0F, 0.0F, 0.0F };
 8007358:	3040      	adds	r0, #64	; 0x40
            lcd->touch_normalize      = touch_normalize;
 800735a:	9d00      	ldr	r5, [sp, #0]
            lcd->touch_select_pin     = touch_select_pin;
 800735c:	f8a4 b024 	strh.w	fp, [r4, #36]	; 0x24
            lcd->touch_calibration    = itcNONE;
 8007360:	21ff      	movs	r1, #255	; 0xff
            lcd->touch_pressed_begin  = NULL;
 8007362:	f04f 0800 	mov.w	r8, #0
 8007366:	f04f 0900 	mov.w	r9, #0
            lcd->touch_support        = touch_support;
 800736a:	f884 702e 	strb.w	r7, [r4, #46]	; 0x2e
            lcd->touch_normalize      = touch_normalize;
 800736e:	f884 502f 	strb.w	r5, [r4, #47]	; 0x2f
            lcd->touch_coordinate     = (ili9341_two_dimension_t){ {0U}, {0U} };
 8007372:	6323      	str	r3, [r4, #48]	; 0x30
            lcd->touch_scalar         = (ili9341_scalar_calibrator_t){ {{0U}, {0U}}, {{0U}, {0U}} };
 8007374:	f8c4 3036 	str.w	r3, [r4, #54]	; 0x36
 8007378:	f8c4 303a 	str.w	r3, [r4, #58]	; 0x3a
            lcd->touch_3point         = (ili9341_3point_calibrator_t){ {{0U}, {0U}}, 0, 0, 0.0F, 0.0F, 0.0F, 0.0F };
 800737c:	6423      	str	r3, [r4, #64]	; 0x40
            lcd->touch_calibration    = itcNONE;
 800737e:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
            lcd->touch_3point         = (ili9341_3point_calibrator_t){ {{0U}, {0U}}, 0, 0, 0.0F, 0.0F, 0.0F, 0.0F };
 8007382:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8007386:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800738a:	e9c0 3305 	strd	r3, r3, [r0, #20]
            lcd->touch_pressed_begin  = NULL;
 800738e:	e9c4 8918 	strd	r8, r9, [r4, #96]	; 0x60
            lcd->touch_pressed        = itpNotPressed;
 8007392:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
            lcd->touch_pressed_end    = NULL;
 8007396:	e505      	b.n	8006da4 <ili9341_new+0x108>

08007398 <ili9341_spi_tft_select>:
  HAL_GPIO_WritePin(lcd->tft_select_port, lcd->tft_select_pin, __GPIO_PIN_CLR__);
 8007398:	8a01      	ldrh	r1, [r0, #16]
 800739a:	68c0      	ldr	r0, [r0, #12]
 800739c:	2200      	movs	r2, #0
 800739e:	f7fb ba3d 	b.w	800281c <HAL_GPIO_WritePin>
 80073a2:	bf00      	nop

080073a4 <ili9341_spi_tft_release>:
  HAL_GPIO_WritePin(lcd->tft_select_port, lcd->tft_select_pin, __GPIO_PIN_SET__);
 80073a4:	8a01      	ldrh	r1, [r0, #16]
 80073a6:	68c0      	ldr	r0, [r0, #12]
 80073a8:	2201      	movs	r2, #1
 80073aa:	f7fb ba37 	b.w	800281c <HAL_GPIO_WritePin>
 80073ae:	bf00      	nop

080073b0 <ili9341_spi_write_command>:
{
 80073b0:	b530      	push	{r4, r5, lr}
  __SLAVE_SELECT(lcd, spi_slave);
 80073b2:	b2cb      	uxtb	r3, r1
{
 80073b4:	b083      	sub	sp, #12
  __SLAVE_SELECT(lcd, spi_slave);
 80073b6:	2b01      	cmp	r3, #1
{
 80073b8:	4604      	mov	r4, r0
 80073ba:	f88d 2007 	strb.w	r2, [sp, #7]
  __SLAVE_SELECT(lcd, spi_slave);
 80073be:	d90e      	bls.n	80073de <ili9341_spi_write_command+0x2e>
  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_CLR__);
 80073c0:	8b01      	ldrh	r1, [r0, #24]
 80073c2:	6940      	ldr	r0, [r0, #20]
 80073c4:	2200      	movs	r2, #0
 80073c6:	f7fb fa29 	bl	800281c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(lcd->spi_hal, &command, sizeof(command), __SPI_MAX_DELAY__);
 80073ca:	6820      	ldr	r0, [r4, #0]
 80073cc:	f04f 33ff 	mov.w	r3, #4294967295
 80073d0:	2201      	movs	r2, #1
 80073d2:	f10d 0107 	add.w	r1, sp, #7
 80073d6:	f7fc ff5f 	bl	8004298 <HAL_SPI_Transmit>
}
 80073da:	b003      	add	sp, #12
 80073dc:	bd30      	pop	{r4, r5, pc}
  switch (spi_slave) {
 80073de:	2901      	cmp	r1, #1
 80073e0:	460d      	mov	r5, r1
  HAL_GPIO_WritePin(lcd->touch_select_port, lcd->touch_select_pin, __GPIO_PIN_CLR__);
 80073e2:	f04f 0200 	mov.w	r2, #0
  switch (spi_slave) {
 80073e6:	d116      	bne.n	8007416 <ili9341_spi_write_command+0x66>
  HAL_GPIO_WritePin(lcd->touch_select_port, lcd->touch_select_pin, __GPIO_PIN_CLR__);
 80073e8:	8c81      	ldrh	r1, [r0, #36]	; 0x24
 80073ea:	6a00      	ldr	r0, [r0, #32]
 80073ec:	f7fb fa16 	bl	800281c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_CLR__);
 80073f0:	8b21      	ldrh	r1, [r4, #24]
 80073f2:	6960      	ldr	r0, [r4, #20]
 80073f4:	2200      	movs	r2, #0
 80073f6:	f7fb fa11 	bl	800281c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(lcd->spi_hal, &command, sizeof(command), __SPI_MAX_DELAY__);
 80073fa:	462a      	mov	r2, r5
 80073fc:	f10d 0107 	add.w	r1, sp, #7
 8007400:	6820      	ldr	r0, [r4, #0]
 8007402:	f04f 33ff 	mov.w	r3, #4294967295
 8007406:	f7fc ff47 	bl	8004298 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(lcd->touch_select_port, lcd->touch_select_pin, __GPIO_PIN_SET__);
 800740a:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 800740c:	6a20      	ldr	r0, [r4, #32]
 800740e:	462a      	mov	r2, r5
 8007410:	f7fb fa04 	bl	800281c <HAL_GPIO_WritePin>
}
 8007414:	e7e1      	b.n	80073da <ili9341_spi_write_command+0x2a>
  HAL_GPIO_WritePin(lcd->tft_select_port, lcd->tft_select_pin, __GPIO_PIN_CLR__);
 8007416:	8a01      	ldrh	r1, [r0, #16]
 8007418:	68c0      	ldr	r0, [r0, #12]
 800741a:	f7fb f9ff 	bl	800281c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_CLR__);
 800741e:	8b21      	ldrh	r1, [r4, #24]
 8007420:	6960      	ldr	r0, [r4, #20]
 8007422:	2200      	movs	r2, #0
 8007424:	f7fb f9fa 	bl	800281c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(lcd->spi_hal, &command, sizeof(command), __SPI_MAX_DELAY__);
 8007428:	f10d 0107 	add.w	r1, sp, #7
 800742c:	6820      	ldr	r0, [r4, #0]
 800742e:	f04f 33ff 	mov.w	r3, #4294967295
 8007432:	2201      	movs	r2, #1
 8007434:	f7fc ff30 	bl	8004298 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(lcd->tft_select_port, lcd->tft_select_pin, __GPIO_PIN_SET__);
 8007438:	8a21      	ldrh	r1, [r4, #16]
 800743a:	68e0      	ldr	r0, [r4, #12]
 800743c:	2201      	movs	r2, #1
 800743e:	f7fb f9ed 	bl	800281c <HAL_GPIO_WritePin>
}
 8007442:	e7ca      	b.n	80073da <ili9341_spi_write_command+0x2a>

08007444 <ili9341_spi_write_command_data>:
{
 8007444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007446:	460d      	mov	r5, r1
  __SLAVE_SELECT(lcd, spi_slave);
 8007448:	b2c9      	uxtb	r1, r1
 800744a:	2901      	cmp	r1, #1
{
 800744c:	4617      	mov	r7, r2
 800744e:	b083      	sub	sp, #12
 8007450:	4604      	mov	r4, r0
 8007452:	461e      	mov	r6, r3
  HAL_GPIO_WritePin(lcd->touch_select_port, lcd->touch_select_pin, __GPIO_PIN_CLR__);
 8007454:	f04f 0200 	mov.w	r2, #0
  __SLAVE_SELECT(lcd, spi_slave);
 8007458:	d91b      	bls.n	8007492 <ili9341_spi_write_command_data+0x4e>
  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_CLR__);
 800745a:	8b01      	ldrh	r1, [r0, #24]
 800745c:	6940      	ldr	r0, [r0, #20]
 800745e:	f88d 7007 	strb.w	r7, [sp, #7]
 8007462:	f7fb f9db 	bl	800281c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(lcd->spi_hal, &command, sizeof(command), __SPI_MAX_DELAY__);
 8007466:	f04f 33ff 	mov.w	r3, #4294967295
 800746a:	2201      	movs	r2, #1
 800746c:	f10d 0107 	add.w	r1, sp, #7
 8007470:	6820      	ldr	r0, [r4, #0]
 8007472:	f7fc ff11 	bl	8004298 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_SET__);
 8007476:	8b21      	ldrh	r1, [r4, #24]
 8007478:	6960      	ldr	r0, [r4, #20]
 800747a:	2201      	movs	r2, #1
 800747c:	f7fb f9ce 	bl	800281c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(lcd->spi_hal, data, data_sz, __SPI_MAX_DELAY__);
 8007480:	6820      	ldr	r0, [r4, #0]
 8007482:	9908      	ldr	r1, [sp, #32]
 8007484:	4632      	mov	r2, r6
 8007486:	f04f 33ff 	mov.w	r3, #4294967295
 800748a:	f7fc ff05 	bl	8004298 <HAL_SPI_Transmit>
}
 800748e:	b003      	add	sp, #12
 8007490:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch (spi_slave) {
 8007492:	2d01      	cmp	r5, #1
 8007494:	d124      	bne.n	80074e0 <ili9341_spi_write_command_data+0x9c>
  HAL_GPIO_WritePin(lcd->touch_select_port, lcd->touch_select_pin, __GPIO_PIN_CLR__);
 8007496:	8c81      	ldrh	r1, [r0, #36]	; 0x24
 8007498:	6a00      	ldr	r0, [r0, #32]
 800749a:	f7fb f9bf 	bl	800281c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_CLR__);
 800749e:	8b21      	ldrh	r1, [r4, #24]
 80074a0:	6960      	ldr	r0, [r4, #20]
 80074a2:	f88d 7007 	strb.w	r7, [sp, #7]
 80074a6:	2200      	movs	r2, #0
 80074a8:	f7fb f9b8 	bl	800281c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(lcd->spi_hal, &command, sizeof(command), __SPI_MAX_DELAY__);
 80074ac:	f04f 33ff 	mov.w	r3, #4294967295
 80074b0:	462a      	mov	r2, r5
 80074b2:	f10d 0107 	add.w	r1, sp, #7
 80074b6:	6820      	ldr	r0, [r4, #0]
 80074b8:	f7fc feee 	bl	8004298 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_SET__);
 80074bc:	8b21      	ldrh	r1, [r4, #24]
 80074be:	6960      	ldr	r0, [r4, #20]
 80074c0:	462a      	mov	r2, r5
 80074c2:	f7fb f9ab 	bl	800281c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(lcd->spi_hal, data, data_sz, __SPI_MAX_DELAY__);
 80074c6:	9908      	ldr	r1, [sp, #32]
 80074c8:	6820      	ldr	r0, [r4, #0]
 80074ca:	4632      	mov	r2, r6
 80074cc:	f04f 33ff 	mov.w	r3, #4294967295
 80074d0:	f7fc fee2 	bl	8004298 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(lcd->touch_select_port, lcd->touch_select_pin, __GPIO_PIN_SET__);
 80074d4:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 80074d6:	6a20      	ldr	r0, [r4, #32]
 80074d8:	462a      	mov	r2, r5
 80074da:	f7fb f99f 	bl	800281c <HAL_GPIO_WritePin>
}
 80074de:	e7d6      	b.n	800748e <ili9341_spi_write_command_data+0x4a>
  HAL_GPIO_WritePin(lcd->tft_select_port, lcd->tft_select_pin, __GPIO_PIN_CLR__);
 80074e0:	8a01      	ldrh	r1, [r0, #16]
 80074e2:	68c0      	ldr	r0, [r0, #12]
 80074e4:	f7fb f99a 	bl	800281c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_CLR__);
 80074e8:	8b21      	ldrh	r1, [r4, #24]
 80074ea:	6960      	ldr	r0, [r4, #20]
 80074ec:	f88d 7007 	strb.w	r7, [sp, #7]
 80074f0:	2200      	movs	r2, #0
 80074f2:	f7fb f993 	bl	800281c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(lcd->spi_hal, &command, sizeof(command), __SPI_MAX_DELAY__);
 80074f6:	f04f 33ff 	mov.w	r3, #4294967295
 80074fa:	f10d 0107 	add.w	r1, sp, #7
 80074fe:	6820      	ldr	r0, [r4, #0]
 8007500:	2201      	movs	r2, #1
 8007502:	f7fc fec9 	bl	8004298 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_SET__);
 8007506:	8b21      	ldrh	r1, [r4, #24]
 8007508:	6960      	ldr	r0, [r4, #20]
 800750a:	2201      	movs	r2, #1
 800750c:	f7fb f986 	bl	800281c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(lcd->spi_hal, data, data_sz, __SPI_MAX_DELAY__);
 8007510:	9908      	ldr	r1, [sp, #32]
 8007512:	6820      	ldr	r0, [r4, #0]
 8007514:	4632      	mov	r2, r6
 8007516:	f04f 33ff 	mov.w	r3, #4294967295
 800751a:	f7fc febd 	bl	8004298 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(lcd->tft_select_port, lcd->tft_select_pin, __GPIO_PIN_SET__);
 800751e:	8a21      	ldrh	r1, [r4, #16]
 8007520:	68e0      	ldr	r0, [r4, #12]
 8007522:	2201      	movs	r2, #1
 8007524:	f7fb f97a 	bl	800281c <HAL_GPIO_WritePin>
}
 8007528:	e7b1      	b.n	800748e <ili9341_spi_write_command_data+0x4a>
 800752a:	bf00      	nop

0800752c <glyph_index>:

// ------------------------------------------------------- exported functions --

uint8_t glyph_index(unsigned char glyph)
{
  if ((glyph >= __ILI9341_FONT_FIRST_GLYPH__) &&
 800752c:	3820      	subs	r0, #32
 800752e:	b2c0      	uxtb	r0, r0
      (glyph <= __ILI9341_FONT_LAST_GLYPH__)) {
    return glyph - __ILI9341_FONT_FIRST_GLYPH__;
  }
  return 0; // on error, return index of ASCII space (0x20)
 8007530:	285f      	cmp	r0, #95	; 0x5f
}
 8007532:	bf28      	it	cs
 8007534:	2000      	movcs	r0, #0
 8007536:	4770      	bx	lr

08007538 <ili9341_clip_rect.isra.0>:
  }
}

// ------------------------------------------------------- private functions --

static ili9341_bool_t ili9341_clip_rect(ili9341_t *lcd,
 8007538:	b470      	push	{r4, r5, r6}
  // must have an origin to do anything
  if ((NULL == x) || (NULL == y))
    { return ibFalse; }

  //  1. rect origin beyond screen dimensions, nothing to draw
  if ((*x >= lcd->screen_size.width) || (*y >= lcd->screen_size.height))
 800753a:	8804      	ldrh	r4, [r0, #0]
 800753c:	f9b2 5000 	ldrsh.w	r5, [r2]
 8007540:	42a5      	cmp	r5, r4
 8007542:	da31      	bge.n	80075a8 <ili9341_clip_rect.isra.0+0x70>
 8007544:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007548:	880c      	ldrh	r4, [r1, #0]
 800754a:	42a6      	cmp	r6, r4
 800754c:	da2c      	bge.n	80075a8 <ili9341_clip_rect.isra.0+0x70>
    { return ibFalse; }

  //  2. rect width or height is 0, nothing to draw
  if ((NULL != w) && (NULL != h)) {
 800754e:	9c03      	ldr	r4, [sp, #12]
 8007550:	2c00      	cmp	r4, #0
 8007552:	d02c      	beq.n	80075ae <ili9341_clip_rect.isra.0+0x76>
 8007554:	9c04      	ldr	r4, [sp, #16]
 8007556:	b12c      	cbz	r4, 8007564 <ili9341_clip_rect.isra.0+0x2c>
    if ((0U == *w) || (0U == *h))
 8007558:	9c03      	ldr	r4, [sp, #12]
 800755a:	8824      	ldrh	r4, [r4, #0]
 800755c:	b324      	cbz	r4, 80075a8 <ili9341_clip_rect.isra.0+0x70>
 800755e:	9c04      	ldr	r4, [sp, #16]
 8007560:	8824      	ldrh	r4, [r4, #0]
 8007562:	b30c      	cbz	r4, 80075a8 <ili9341_clip_rect.isra.0+0x70>
      { return ibFalse; }
  }

  // 3. rect origin has negative component, adjust origin and dimensions
  if (*x < 0) {
 8007564:	2d00      	cmp	r5, #0
 8007566:	db34      	blt.n	80075d2 <ili9341_clip_rect.isra.0+0x9a>
    if (NULL != w)
      { *w -= *x; }
    *x = 0;
  }
  if (*y < 0) {
 8007568:	2e00      	cmp	r6, #0
 800756a:	db24      	blt.n	80075b6 <ili9341_clip_rect.isra.0+0x7e>
    if (NULL != h)
      { *h -= *y; }
    *y = 0;
  }

  if ((NULL != w) && (NULL != h)) {
 800756c:	9c04      	ldr	r4, [sp, #16]
 800756e:	2c00      	cmp	r4, #0
 8007570:	d02c      	beq.n	80075cc <ili9341_clip_rect.isra.0+0x94>

    //  4. rect width beyond screen width, reduce rect width
    if ((*x + *w - 1) >= lcd->screen_size.width)
 8007572:	f9b2 4000 	ldrsh.w	r4, [r2]
 8007576:	9a03      	ldr	r2, [sp, #12]
 8007578:	8800      	ldrh	r0, [r0, #0]
 800757a:	8812      	ldrh	r2, [r2, #0]
 800757c:	18a5      	adds	r5, r4, r2
 800757e:	4285      	cmp	r5, r0
 8007580:	dd05      	ble.n	800758e <ili9341_clip_rect.isra.0+0x56>
      { *w = lcd->screen_size.width - *x; }
 8007582:	1b00      	subs	r0, r0, r4
 8007584:	b282      	uxth	r2, r0
 8007586:	9803      	ldr	r0, [sp, #12]
 8007588:	8002      	strh	r2, [r0, #0]
 800758a:	f9b3 6000 	ldrsh.w	r6, [r3]

    //  5. rect height beyond screen height, reduce rect height
    if ((*y + *h - 1) >= lcd->screen_size.height)
 800758e:	9b04      	ldr	r3, [sp, #16]
 8007590:	8818      	ldrh	r0, [r3, #0]
 8007592:	880b      	ldrh	r3, [r1, #0]
 8007594:	1831      	adds	r1, r6, r0
 8007596:	4299      	cmp	r1, r3
 8007598:	dd05      	ble.n	80075a6 <ili9341_clip_rect.isra.0+0x6e>
      { *h = lcd->screen_size.height - *y; }
 800759a:	1b98      	subs	r0, r3, r6
 800759c:	9b04      	ldr	r3, [sp, #16]
 800759e:	b280      	uxth	r0, r0
 80075a0:	8018      	strh	r0, [r3, #0]
 80075a2:	9b03      	ldr	r3, [sp, #12]
 80075a4:	881a      	ldrh	r2, [r3, #0]

    return (*w > 0U) && (*h > 0U);
 80075a6:	bb02      	cbnz	r2, 80075ea <ili9341_clip_rect.isra.0+0xb2>
    { return ibFalse; }
 80075a8:	2000      	movs	r0, #0
  }

  return ibTrue;
}
 80075aa:	bc70      	pop	{r4, r5, r6}
 80075ac:	4770      	bx	lr
  if (*x < 0) {
 80075ae:	2d00      	cmp	r5, #0
 80075b0:	db1f      	blt.n	80075f2 <ili9341_clip_rect.isra.0+0xba>
  if (*y < 0) {
 80075b2:	2e00      	cmp	r6, #0
 80075b4:	da0a      	bge.n	80075cc <ili9341_clip_rect.isra.0+0x94>
    if (NULL != h)
 80075b6:	9c04      	ldr	r4, [sp, #16]
 80075b8:	b11c      	cbz	r4, 80075c2 <ili9341_clip_rect.isra.0+0x8a>
      { *h -= *y; }
 80075ba:	8824      	ldrh	r4, [r4, #0]
 80075bc:	1ba6      	subs	r6, r4, r6
 80075be:	9c04      	ldr	r4, [sp, #16]
 80075c0:	8026      	strh	r6, [r4, #0]
  if ((NULL != w) && (NULL != h)) {
 80075c2:	9c03      	ldr	r4, [sp, #12]
    *y = 0;
 80075c4:	2600      	movs	r6, #0
 80075c6:	801e      	strh	r6, [r3, #0]
  if ((NULL != w) && (NULL != h)) {
 80075c8:	2c00      	cmp	r4, #0
 80075ca:	d1cf      	bne.n	800756c <ili9341_clip_rect.isra.0+0x34>
  return ibTrue;
 80075cc:	2001      	movs	r0, #1
}
 80075ce:	bc70      	pop	{r4, r5, r6}
 80075d0:	4770      	bx	lr
      { *w -= *x; }
 80075d2:	9c03      	ldr	r4, [sp, #12]
 80075d4:	9e03      	ldr	r6, [sp, #12]
 80075d6:	8824      	ldrh	r4, [r4, #0]
 80075d8:	1b65      	subs	r5, r4, r5
    *x = 0;
 80075da:	2400      	movs	r4, #0
      { *w -= *x; }
 80075dc:	8035      	strh	r5, [r6, #0]
    *x = 0;
 80075de:	8014      	strh	r4, [r2, #0]
  if (*y < 0) {
 80075e0:	f9b3 6000 	ldrsh.w	r6, [r3]
 80075e4:	42a6      	cmp	r6, r4
 80075e6:	dac1      	bge.n	800756c <ili9341_clip_rect.isra.0+0x34>
 80075e8:	e7e5      	b.n	80075b6 <ili9341_clip_rect.isra.0+0x7e>
 80075ea:	3800      	subs	r0, #0
 80075ec:	bf18      	it	ne
 80075ee:	2001      	movne	r0, #1
 80075f0:	e7db      	b.n	80075aa <ili9341_clip_rect.isra.0+0x72>
    *x = 0;
 80075f2:	8014      	strh	r4, [r2, #0]
  if (*y < 0) {
 80075f4:	f9b3 6000 	ldrsh.w	r6, [r3]
 80075f8:	e7db      	b.n	80075b2 <ili9341_clip_rect.isra.0+0x7a>
 80075fa:	bf00      	nop

080075fc <ili9341_draw_pixel>:
{
 80075fc:	b570      	push	{r4, r5, r6, lr}
  if ((*x >= lcd->screen_size.width) || (*y >= lcd->screen_size.height))
 80075fe:	8b85      	ldrh	r5, [r0, #28]
 8007600:	42aa      	cmp	r2, r5
{
 8007602:	b086      	sub	sp, #24
  if ((*x >= lcd->screen_size.width) || (*y >= lcd->screen_size.height))
 8007604:	da4b      	bge.n	800769e <ili9341_draw_pixel+0xa2>
 8007606:	8bc5      	ldrh	r5, [r0, #30]
 8007608:	42ab      	cmp	r3, r5
 800760a:	4604      	mov	r4, r0
 800760c:	da47      	bge.n	800769e <ili9341_draw_pixel+0xa2>
  uint16_t color_le = __LEu16(&color);
 800760e:	b2ce      	uxtb	r6, r1
 8007610:	0a09      	lsrs	r1, r1, #8
 8007612:	ea22 75e2 	bic.w	r5, r2, r2, asr #31
 8007616:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
 800761a:	f8ad 100e 	strh.w	r1, [sp, #14]
 800761e:	ea23 76e3 	bic.w	r6, r3, r3, asr #31
  ili9341_spi_tft_select(lcd);
 8007622:	f7ff feb9 	bl	8007398 <ili9341_spi_tft_select>
  ili9341_spi_tft_set_address_rect(lcd, x, y, x + 1, y + 1);
 8007626:	1c68      	adds	r0, r5, #1
  ili9341_spi_write_command_data(lcd, issNONE,
 8007628:	ab04      	add	r3, sp, #16
      0x2A, 4, (uint8_t[]){ (x0 >> 8) & 0xFF, x0 & 0xFF,
 800762a:	ba40      	rev16	r0, r0
 800762c:	ba6d      	rev16	r5, r5
  ili9341_spi_write_command_data(lcd, issNONE,
 800762e:	9300      	str	r3, [sp, #0]
 8007630:	222a      	movs	r2, #42	; 0x2a
 8007632:	2304      	movs	r3, #4
 8007634:	f04f 31ff 	mov.w	r1, #4294967295
      0x2A, 4, (uint8_t[]){ (x0 >> 8) & 0xFF, x0 & 0xFF,
 8007638:	f8ad 0012 	strh.w	r0, [sp, #18]
  ili9341_spi_write_command_data(lcd, issNONE,
 800763c:	4620      	mov	r0, r4
      0x2A, 4, (uint8_t[]){ (x0 >> 8) & 0xFF, x0 & 0xFF,
 800763e:	f8ad 5010 	strh.w	r5, [sp, #16]
  ili9341_spi_write_command_data(lcd, issNONE,
 8007642:	f7ff feff 	bl	8007444 <ili9341_spi_write_command_data>
  ili9341_spi_tft_set_address_rect(lcd, x, y, x + 1, y + 1);
 8007646:	1c75      	adds	r5, r6, #1
  ili9341_spi_write_command_data(lcd, issNONE,
 8007648:	ab05      	add	r3, sp, #20
 800764a:	9300      	str	r3, [sp, #0]
 800764c:	222b      	movs	r2, #43	; 0x2b
 800764e:	2304      	movs	r3, #4
 8007650:	f04f 31ff 	mov.w	r1, #4294967295
 8007654:	4620      	mov	r0, r4
      0x2B, 4, (uint8_t[]){ (y0 >> 8) & 0xFF, y0 & 0xFF,
 8007656:	ba6d      	rev16	r5, r5
 8007658:	ba76      	rev16	r6, r6
 800765a:	f8ad 5016 	strh.w	r5, [sp, #22]
 800765e:	f8ad 6014 	strh.w	r6, [sp, #20]
  ili9341_spi_write_command_data(lcd, issNONE,
 8007662:	f7ff feef 	bl	8007444 <ili9341_spi_write_command_data>
  ili9341_spi_write_command(lcd, issNONE, 0x2C);
 8007666:	222c      	movs	r2, #44	; 0x2c
 8007668:	f04f 31ff 	mov.w	r1, #4294967295
 800766c:	4620      	mov	r0, r4
 800766e:	f7ff fe9f 	bl	80073b0 <ili9341_spi_write_command>
  ili9341_spi_tft_release(lcd);
 8007672:	4620      	mov	r0, r4
 8007674:	f7ff fe96 	bl	80073a4 <ili9341_spi_tft_release>
  ili9341_spi_tft_select(lcd);
 8007678:	4620      	mov	r0, r4
 800767a:	f7ff fe8d 	bl	8007398 <ili9341_spi_tft_select>
  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_SET__);
 800767e:	8b21      	ldrh	r1, [r4, #24]
 8007680:	6960      	ldr	r0, [r4, #20]
 8007682:	2201      	movs	r2, #1
 8007684:	f7fb f8ca 	bl	800281c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(lcd->spi_hal, (uint8_t *)&color_le, 2U, __SPI_MAX_DELAY__);
 8007688:	6820      	ldr	r0, [r4, #0]
 800768a:	f04f 33ff 	mov.w	r3, #4294967295
 800768e:	2202      	movs	r2, #2
 8007690:	f10d 010e 	add.w	r1, sp, #14
 8007694:	f7fc fe00 	bl	8004298 <HAL_SPI_Transmit>
  ili9341_spi_tft_release(lcd);
 8007698:	4620      	mov	r0, r4
 800769a:	f7ff fe83 	bl	80073a4 <ili9341_spi_tft_release>
}
 800769e:	b006      	add	sp, #24
 80076a0:	bd70      	pop	{r4, r5, r6, pc}
 80076a2:	bf00      	nop

080076a4 <ili9341_fill_rect>:
{
 80076a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076a8:	b087      	sub	sp, #28
 80076aa:	4606      	mov	r6, r0
 80076ac:	461d      	mov	r5, r3
  if (ibNOT(ili9341_clip_rect(lcd, &x, &y, &w, &h)))
 80076ae:	a811      	add	r0, sp, #68	; 0x44
 80076b0:	ab10      	add	r3, sp, #64	; 0x40
{
 80076b2:	460c      	mov	r4, r1
  if (ibNOT(ili9341_clip_rect(lcd, &x, &y, &w, &h)))
 80076b4:	9300      	str	r3, [sp, #0]
 80076b6:	9001      	str	r0, [sp, #4]
{
 80076b8:	f8ad 200e 	strh.w	r2, [sp, #14]
  if (ibNOT(ili9341_clip_rect(lcd, &x, &y, &w, &h)))
 80076bc:	f106 011e 	add.w	r1, r6, #30
 80076c0:	f106 001c 	add.w	r0, r6, #28
 80076c4:	ab03      	add	r3, sp, #12
 80076c6:	f10d 020e 	add.w	r2, sp, #14
{
 80076ca:	f8ad 500c 	strh.w	r5, [sp, #12]
  if (ibNOT(ili9341_clip_rect(lcd, &x, &y, &w, &h)))
 80076ce:	f7ff ff33 	bl	8007538 <ili9341_clip_rect.isra.0>
 80076d2:	2800      	cmp	r0, #0
 80076d4:	f000 808b 	beq.w	80077ee <ili9341_fill_rect+0x14a>
  uint32_t num_pixels = w * h;
 80076d8:	f8bd e040 	ldrh.w	lr, [sp, #64]	; 0x40
 80076dc:	f8bd c044 	ldrh.w	ip, [sp, #68]	; 0x44
 80076e0:	fb0c f50e 	mul.w	r5, ip, lr
  uint16_t color_le = __LEu16(&color);
 80076e4:	b2e3      	uxtb	r3, r4
 80076e6:	0a21      	lsrs	r1, r4, #8
 80076e8:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80076ec:	462f      	mov	r7, r5
  uint32_t num_pixels = w * h;
 80076ee:	462c      	mov	r4, r5
  if (block_wc > __SPI_TX_BLOCK_MAX__)
 80076f0:	bf28      	it	cs
 80076f2:	f44f 6780 	movcs.w	r7, #1024	; 0x400
  uint16_t color_le = __LEu16(&color);
 80076f6:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
  for (uint16_t i = 0; i < block_wc; ++i)
 80076fa:	b1dd      	cbz	r5, 8007734 <ili9341_fill_rect+0x90>
 80076fc:	f1a7 0216 	sub.w	r2, r7, #22
 8007700:	f64f 73e9 	movw	r3, #65513	; 0xffe9
 8007704:	429a      	cmp	r2, r3
 8007706:	d875      	bhi.n	80077f4 <ili9341_fill_rect+0x150>
 8007708:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 8007808 <ili9341_fill_rect+0x164>
 800770c:	2000      	movs	r0, #0
 800770e:	f361 000f 	bfi	r0, r1, #0, #16
 8007712:	f361 401f 	bfi	r0, r1, #16, #16
 8007716:	464a      	mov	r2, r9
 8007718:	ea4f 0857 	mov.w	r8, r7, lsr #1
 800771c:	2300      	movs	r3, #0
    { spi_tx_block[i] = color_le; }
 800771e:	3301      	adds	r3, #1
 8007720:	4543      	cmp	r3, r8
 8007722:	f842 0b04 	str.w	r0, [r2], #4
  for (uint16_t i = 0; i < block_wc; ++i)
 8007726:	d3fa      	bcc.n	800771e <ili9341_fill_rect+0x7a>
 8007728:	07fa      	lsls	r2, r7, #31
 800772a:	f027 0301 	bic.w	r3, r7, #1
 800772e:	d501      	bpl.n	8007734 <ili9341_fill_rect+0x90>
    { spi_tx_block[i] = color_le; }
 8007730:	f829 1013 	strh.w	r1, [r9, r3, lsl #1]
  ili9341_spi_tft_set_address_rect(lcd, x, y, (x + w - 1), (y + h - 1));
 8007734:	f8bd a00e 	ldrh.w	sl, [sp, #14]
 8007738:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 800773c:	f10e 32ff 	add.w	r2, lr, #4294967295
 8007740:	f10c 33ff 	add.w	r3, ip, #4294967295
 8007744:	4452      	add	r2, sl
 8007746:	444b      	add	r3, r9
  ili9341_spi_tft_select(lcd);
 8007748:	4630      	mov	r0, r6
  ili9341_spi_tft_set_address_rect(lcd, x, y, (x + w - 1), (y + h - 1));
 800774a:	fa1f fb82 	uxth.w	fp, r2
 800774e:	fa1f f883 	uxth.w	r8, r3
  ili9341_spi_tft_select(lcd);
 8007752:	f7ff fe21 	bl	8007398 <ili9341_spi_tft_select>
  ili9341_spi_write_command_data(lcd, issNONE,
 8007756:	ab04      	add	r3, sp, #16
      0x2A, 4, (uint8_t[]){ (x0 >> 8) & 0xFF, x0 & 0xFF,
 8007758:	fa9b fc9b 	rev16.w	ip, fp
  ili9341_spi_write_command_data(lcd, issNONE,
 800775c:	9300      	str	r3, [sp, #0]
 800775e:	222a      	movs	r2, #42	; 0x2a
 8007760:	2304      	movs	r3, #4
 8007762:	f04f 31ff 	mov.w	r1, #4294967295
 8007766:	4630      	mov	r0, r6
 8007768:	fa9a fa9a 	rev16.w	sl, sl
      0x2A, 4, (uint8_t[]){ (x0 >> 8) & 0xFF, x0 & 0xFF,
 800776c:	f8ad c012 	strh.w	ip, [sp, #18]
 8007770:	f8ad a010 	strh.w	sl, [sp, #16]
  ili9341_spi_write_command_data(lcd, issNONE,
 8007774:	f7ff fe66 	bl	8007444 <ili9341_spi_write_command_data>
  ili9341_spi_write_command_data(lcd, issNONE,
 8007778:	ab05      	add	r3, sp, #20
 800777a:	9300      	str	r3, [sp, #0]
 800777c:	222b      	movs	r2, #43	; 0x2b
 800777e:	2304      	movs	r3, #4
 8007780:	f04f 31ff 	mov.w	r1, #4294967295
 8007784:	4630      	mov	r0, r6
 8007786:	fa99 f999 	rev16.w	r9, r9
      0x2B, 4, (uint8_t[]){ (y0 >> 8) & 0xFF, y0 & 0xFF,
 800778a:	fa98 f898 	rev16.w	r8, r8
 800778e:	f8ad 9014 	strh.w	r9, [sp, #20]
 8007792:	f8ad 8016 	strh.w	r8, [sp, #22]
  ili9341_spi_write_command_data(lcd, issNONE,
 8007796:	f7ff fe55 	bl	8007444 <ili9341_spi_write_command_data>
  ili9341_spi_write_command(lcd, issNONE, 0x2C);
 800779a:	222c      	movs	r2, #44	; 0x2c
 800779c:	f04f 31ff 	mov.w	r1, #4294967295
 80077a0:	4630      	mov	r0, r6
 80077a2:	f7ff fe05 	bl	80073b0 <ili9341_spi_write_command>
  ili9341_spi_tft_release(lcd);
 80077a6:	4630      	mov	r0, r6
 80077a8:	f7ff fdfc 	bl	80073a4 <ili9341_spi_tft_release>
  ili9341_spi_tft_select(lcd);
 80077ac:	4630      	mov	r0, r6
 80077ae:	f7ff fdf3 	bl	8007398 <ili9341_spi_tft_select>
  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_SET__);
 80077b2:	8b31      	ldrh	r1, [r6, #24]
 80077b4:	6970      	ldr	r0, [r6, #20]
 80077b6:	2201      	movs	r2, #1
 80077b8:	f7fb f830 	bl	800281c <HAL_GPIO_WritePin>
  while (rect_wc > 0) {
 80077bc:	b1a5      	cbz	r5, 80077e8 <ili9341_fill_rect+0x144>
  HAL_SPI_Transmit_DMA(lcd->spi_hal, (uint8_t *)color, size);
 80077be:	f8df 8048 	ldr.w	r8, [pc, #72]	; 8007808 <ili9341_fill_rect+0x164>
    if (curr_wc > block_wc)
 80077c2:	42a7      	cmp	r7, r4
 80077c4:	463d      	mov	r5, r7
 80077c6:	bf28      	it	cs
 80077c8:	4625      	movcs	r5, r4
    ili9341_transmit_color(lcd, curr_wc * 2/*16-bit words*/, spi_tx_block, ibYes);
 80077ca:	006a      	lsls	r2, r5, #1
 80077cc:	b292      	uxth	r2, r2
  if ((NULL == lcd) || (0 == size) || (NULL == color))
 80077ce:	b14a      	cbz	r2, 80077e4 <ili9341_fill_rect+0x140>
  HAL_SPI_Transmit_DMA(lcd->spi_hal, (uint8_t *)color, size);
 80077d0:	6830      	ldr	r0, [r6, #0]
 80077d2:	4641      	mov	r1, r8
 80077d4:	f7fc fe84 	bl	80044e0 <HAL_SPI_Transmit_DMA>
  while (HAL_DMA_STATE_BUSY == HAL_DMA_GetState(lcd->spi_hal->hdmatx))
 80077d8:	6833      	ldr	r3, [r6, #0]
 80077da:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80077dc:	f7fa ff04 	bl	80025e8 <HAL_DMA_GetState>
 80077e0:	2802      	cmp	r0, #2
 80077e2:	d0f9      	beq.n	80077d8 <ili9341_fill_rect+0x134>
  while (rect_wc > 0) {
 80077e4:	1b64      	subs	r4, r4, r5
 80077e6:	d1ec      	bne.n	80077c2 <ili9341_fill_rect+0x11e>
  ili9341_spi_tft_release(lcd);
 80077e8:	4630      	mov	r0, r6
 80077ea:	f7ff fddb 	bl	80073a4 <ili9341_spi_tft_release>
}
 80077ee:	b007      	add	sp, #28
 80077f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077f4:	f8df 9010 	ldr.w	r9, [pc, #16]	; 8007808 <ili9341_fill_rect+0x164>
  for (uint16_t i = 0; i < block_wc; ++i)
 80077f8:	2000      	movs	r0, #0
 80077fa:	1c43      	adds	r3, r0, #1
    { spi_tx_block[i] = color_le; }
 80077fc:	f829 1010 	strh.w	r1, [r9, r0, lsl #1]
  for (uint16_t i = 0; i < block_wc; ++i)
 8007800:	b298      	uxth	r0, r3
 8007802:	4287      	cmp	r7, r0
 8007804:	d8f9      	bhi.n	80077fa <ili9341_fill_rect+0x156>
 8007806:	e795      	b.n	8007734 <ili9341_fill_rect+0x90>
 8007808:	2000093c 	.word	0x2000093c

0800780c <ili9341_draw_line>:
{
 800780c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007810:	b085      	sub	sp, #20
  int16_t dy = y1 - y0;
 8007812:	b29c      	uxth	r4, r3
{
 8007814:	f9bd 7038 	ldrsh.w	r7, [sp, #56]	; 0x38
 8007818:	9200      	str	r2, [sp, #0]
 800781a:	f9bd e03c 	ldrsh.w	lr, [sp, #60]	; 0x3c
  int16_t dx = x1 - x0;
 800781e:	f8bd a000 	ldrh.w	sl, [sp]
  int16_t dy = y1 - y0;
 8007822:	9401      	str	r4, [sp, #4]
 8007824:	9c01      	ldr	r4, [sp, #4]
{
 8007826:	9103      	str	r1, [sp, #12]
  int16_t dx = x1 - x0;
 8007828:	fa1f fb87 	uxth.w	fp, r7
  int16_t dy = y1 - y0;
 800782c:	fa1f fc8e 	uxth.w	ip, lr
  int16_t dx = x1 - x0;
 8007830:	ebab 080a 	sub.w	r8, fp, sl
  int16_t dy = y1 - y0;
 8007834:	f8cd c008 	str.w	ip, [sp, #8]
  int16_t dx = x1 - x0;
 8007838:	fa0f f588 	sxth.w	r5, r8
  int16_t dy = y1 - y0;
 800783c:	ebac 0c04 	sub.w	ip, ip, r4
 8007840:	fa1f f48c 	uxth.w	r4, ip
 8007844:	fa0f fc8c 	sxth.w	ip, ip
  if (0 == dx) {
 8007848:	b935      	cbnz	r5, 8007858 <ili9341_draw_line+0x4c>
    if (0 == dy)
 800784a:	f1bc 0f00 	cmp.w	ip, #0
 800784e:	f040 8081 	bne.w	8007954 <ili9341_draw_line+0x148>
}
 8007852:	b005      	add	sp, #20
 8007854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  else if (0 == dy) {
 8007858:	f1bc 0f00 	cmp.w	ip, #0
 800785c:	f000 8090 	beq.w	8007980 <ili9341_draw_line+0x174>
  ili9341_bool_t is_steep = abs(dy) > abs(dx);
 8007860:	2d00      	cmp	r5, #0
 8007862:	ea8c 72ec 	eor.w	r2, ip, ip, asr #31
 8007866:	461e      	mov	r6, r3
 8007868:	eba2 72ec 	sub.w	r2, r2, ip, asr #31
 800786c:	462b      	mov	r3, r5
 800786e:	bfb8      	it	lt
 8007870:	426b      	neglt	r3, r5
 8007872:	b292      	uxth	r2, r2
 8007874:	b29b      	uxth	r3, r3
  if (is_steep) {
 8007876:	429a      	cmp	r2, r3
 8007878:	fa1f f888 	uxth.w	r8, r8
 800787c:	4681      	mov	r9, r0
 800787e:	d909      	bls.n	8007894 <ili9341_draw_line+0x88>
 8007880:	9900      	ldr	r1, [sp, #0]
    __SWAP(int16_t, x0, y0);
 8007882:	9600      	str	r6, [sp, #0]
  if (is_steep) {
 8007884:	e9dd ab01 	ldrd	sl, fp, [sp, #4]
 8007888:	4638      	mov	r0, r7
    __SWAP(int16_t, x0, y0);
 800788a:	460e      	mov	r6, r1
    __SWAP(int16_t, x1, y1);
 800788c:	4677      	mov	r7, lr
  if (is_steep) {
 800788e:	4665      	mov	r5, ip
    __SWAP(int16_t, x1, y1);
 8007890:	4686      	mov	lr, r0
  if (is_steep) {
 8007892:	46a0      	mov	r8, r4
  if (x0 > x1) {
 8007894:	9900      	ldr	r1, [sp, #0]
 8007896:	42b9      	cmp	r1, r7
 8007898:	dd0a      	ble.n	80078b0 <ili9341_draw_line+0xa4>
 800789a:	ebaa 040b 	sub.w	r4, sl, fp
 800789e:	4630      	mov	r0, r6
 80078a0:	9700      	str	r7, [sp, #0]
 80078a2:	460f      	mov	r7, r1
 80078a4:	b221      	sxth	r1, r4
    __SWAP(int16_t, y0, y1);
 80078a6:	4676      	mov	r6, lr
 80078a8:	fa1f f884 	uxth.w	r8, r4
 80078ac:	4686      	mov	lr, r0
 80078ae:	460d      	mov	r5, r1
  dy = abs(y1 - y0);
 80078b0:	ebae 0a06 	sub.w	sl, lr, r6
 80078b4:	f1ba 0f00 	cmp.w	sl, #0
  if (y0 < y1)
 80078b8:	f64f 7bff 	movw	fp, #65535	; 0xffff
  dy = abs(y1 - y0);
 80078bc:	bfb8      	it	lt
 80078be:	f1ca 0a00 	rsblt	sl, sl, #0
  if (y0 < y1)
 80078c2:	4576      	cmp	r6, lr
 80078c4:	bfb8      	it	lt
 80078c6:	f04f 0b01 	movlt.w	fp, #1
 80078ca:	429a      	cmp	r2, r3
  err = dx >> 1;
 80078cc:	ea4f 0465 	mov.w	r4, r5, asr #1
  if (y0 < y1)
 80078d0:	fa1f fa8a 	uxth.w	sl, sl
 80078d4:	9d00      	ldr	r5, [sp, #0]
 80078d6:	d830      	bhi.n	800793a <ili9341_draw_line+0x12e>
    if ( (x >= 0) && (x <= lcd->screen_size.width) &&
 80078d8:	2d00      	cmp	r5, #0
 80078da:	db09      	blt.n	80078f0 <ili9341_draw_line+0xe4>
 80078dc:	f8b9 301c 	ldrh.w	r3, [r9, #28]
 80078e0:	42ab      	cmp	r3, r5
 80078e2:	db05      	blt.n	80078f0 <ili9341_draw_line+0xe4>
 80078e4:	2e00      	cmp	r6, #0
 80078e6:	db03      	blt.n	80078f0 <ili9341_draw_line+0xe4>
         (y >= 0) && (y <= lcd->screen_size.height) ) {
 80078e8:	f8b9 301e 	ldrh.w	r3, [r9, #30]
 80078ec:	42b3      	cmp	r3, r6
 80078ee:	da40      	bge.n	8007972 <ili9341_draw_line+0x166>
    err -= dy;
 80078f0:	eba4 010a 	sub.w	r1, r4, sl
 80078f4:	b20c      	sxth	r4, r1
    if (err < 0) {
 80078f6:	3501      	adds	r5, #1
 80078f8:	2c00      	cmp	r4, #0
 80078fa:	b22d      	sxth	r5, r5
    err -= dy;
 80078fc:	b289      	uxth	r1, r1
    if (err < 0) {
 80078fe:	da03      	bge.n	8007908 <ili9341_draw_line+0xfc>
      err += dx;
 8007900:	4441      	add	r1, r8
      y0 += step;
 8007902:	445e      	add	r6, fp
      err += dx;
 8007904:	b20c      	sxth	r4, r1
      y0 += step;
 8007906:	b236      	sxth	r6, r6
  while (x0 <= x1) {
 8007908:	42bd      	cmp	r5, r7
 800790a:	dde5      	ble.n	80078d8 <ili9341_draw_line+0xcc>
}
 800790c:	b005      	add	sp, #20
 800790e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      ili9341_draw_pixel(lcd, color, x, y);
 8007912:	9903      	ldr	r1, [sp, #12]
 8007914:	462b      	mov	r3, r5
 8007916:	4632      	mov	r2, r6
 8007918:	4648      	mov	r0, r9
 800791a:	f7ff fe6f 	bl	80075fc <ili9341_draw_pixel>
    err -= dy;
 800791e:	eba4 010a 	sub.w	r1, r4, sl
 8007922:	b20c      	sxth	r4, r1
    if (err < 0) {
 8007924:	3501      	adds	r5, #1
 8007926:	2c00      	cmp	r4, #0
 8007928:	b22d      	sxth	r5, r5
    err -= dy;
 800792a:	b289      	uxth	r1, r1
    if (err < 0) {
 800792c:	da03      	bge.n	8007936 <ili9341_draw_line+0x12a>
      err += dx;
 800792e:	4441      	add	r1, r8
      y0 += step;
 8007930:	445e      	add	r6, fp
      err += dx;
 8007932:	b20c      	sxth	r4, r1
      y0 += step;
 8007934:	b236      	sxth	r6, r6
  while (x0 <= x1) {
 8007936:	42bd      	cmp	r5, r7
 8007938:	dc8b      	bgt.n	8007852 <ili9341_draw_line+0x46>
    if ( (x >= 0) && (x <= lcd->screen_size.width) &&
 800793a:	2e00      	cmp	r6, #0
 800793c:	dbef      	blt.n	800791e <ili9341_draw_line+0x112>
 800793e:	f8b9 301c 	ldrh.w	r3, [r9, #28]
 8007942:	429e      	cmp	r6, r3
 8007944:	dceb      	bgt.n	800791e <ili9341_draw_line+0x112>
 8007946:	2d00      	cmp	r5, #0
 8007948:	dbe9      	blt.n	800791e <ili9341_draw_line+0x112>
         (y >= 0) && (y <= lcd->screen_size.height) ) {
 800794a:	f8b9 301e 	ldrh.w	r3, [r9, #30]
 800794e:	429d      	cmp	r5, r3
 8007950:	dce5      	bgt.n	800791e <ili9341_draw_line+0x112>
 8007952:	e7de      	b.n	8007912 <ili9341_draw_line+0x106>
    ili9341_fill_rect(lcd, color, x0, y0, 1, abs(dy));
 8007954:	f1bc 0f00 	cmp.w	ip, #0
 8007958:	bfb8      	it	lt
 800795a:	f1cc 0c00 	rsblt	ip, ip, #0
 800795e:	fa1f f48c 	uxth.w	r4, ip
 8007962:	2501      	movs	r5, #1
 8007964:	e9cd 540e 	strd	r5, r4, [sp, #56]	; 0x38
}
 8007968:	b005      	add	sp, #20
 800796a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ili9341_fill_rect(lcd, color, x0, y0, abs(dx), 1);
 800796e:	f7ff be99 	b.w	80076a4 <ili9341_fill_rect>
      ili9341_draw_pixel(lcd, color, x, y);
 8007972:	9903      	ldr	r1, [sp, #12]
 8007974:	4633      	mov	r3, r6
 8007976:	462a      	mov	r2, r5
 8007978:	4648      	mov	r0, r9
 800797a:	f7ff fe3f 	bl	80075fc <ili9341_draw_pixel>
 800797e:	e7b7      	b.n	80078f0 <ili9341_draw_line+0xe4>
    ili9341_fill_rect(lcd, color, x0, y0, abs(dx), 1);
 8007980:	2d00      	cmp	r5, #0
 8007982:	462c      	mov	r4, r5
 8007984:	bfb8      	it	lt
 8007986:	426c      	neglt	r4, r5
 8007988:	b2a4      	uxth	r4, r4
 800798a:	2501      	movs	r5, #1
 800798c:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
}
 8007990:	b005      	add	sp, #20
 8007992:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ili9341_fill_rect(lcd, color, x0, y0, abs(dx), 1);
 8007996:	f7ff be85 	b.w	80076a4 <ili9341_fill_rect>
 800799a:	bf00      	nop

0800799c <ili9341_draw_rect>:
{
 800799c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079a0:	b082      	sub	sp, #8
 80079a2:	461e      	mov	r6, r3
 80079a4:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
 80079a8:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
  ili9341_draw_line(lcd, color,     x,     y,   x+w,     y );
 80079ac:	4414      	add	r4, r2
 80079ae:	fa0f fa84 	sxth.w	sl, r4
  ili9341_draw_line(lcd, color,     x, y+h-1,   x+w, y+h-1 );
 80079b2:	4435      	add	r5, r6
  ili9341_draw_line(lcd, color,     x,     y,   x+w,     y );
 80079b4:	e9cd a300 	strd	sl, r3, [sp]
  ili9341_draw_line(lcd, color,     x, y+h-1,   x+w, y+h-1 );
 80079b8:	b2ad      	uxth	r5, r5
{
 80079ba:	4617      	mov	r7, r2
 80079bc:	4680      	mov	r8, r0
 80079be:	4689      	mov	r9, r1
  ili9341_draw_line(lcd, color,     x,     y,   x+w,     y );
 80079c0:	f7ff ff24 	bl	800780c <ili9341_draw_line>
  ili9341_draw_line(lcd, color,     x, y+h-1,   x+w, y+h-1 );
 80079c4:	1e6b      	subs	r3, r5, #1
 80079c6:	b21b      	sxth	r3, r3
 80079c8:	e9cd a300 	strd	sl, r3, [sp]
  ili9341_draw_line(lcd, color,     x,     y,     x,   y+h );
 80079cc:	b22d      	sxth	r5, r5
  ili9341_draw_line(lcd, color,     x, y+h-1,   x+w, y+h-1 );
 80079ce:	463a      	mov	r2, r7
 80079d0:	4649      	mov	r1, r9
 80079d2:	4640      	mov	r0, r8
 80079d4:	f7ff ff1a 	bl	800780c <ili9341_draw_line>
  ili9341_draw_line(lcd, color,     x,     y,     x,   y+h );
 80079d8:	463a      	mov	r2, r7
 80079da:	4633      	mov	r3, r6
 80079dc:	4649      	mov	r1, r9
 80079de:	4640      	mov	r0, r8
 80079e0:	e9cd 7500 	strd	r7, r5, [sp]
 80079e4:	f7ff ff12 	bl	800780c <ili9341_draw_line>
  ili9341_draw_line(lcd, color,     x,     y,   x+w,     y );
 80079e8:	b2a4      	uxth	r4, r4
  ili9341_draw_line(lcd, color, x+w-1,     y, x+w-1,   y+h );
 80079ea:	1e62      	subs	r2, r4, #1
 80079ec:	b212      	sxth	r2, r2
 80079ee:	4633      	mov	r3, r6
 80079f0:	4649      	mov	r1, r9
 80079f2:	4640      	mov	r0, r8
 80079f4:	e9cd 250a 	strd	r2, r5, [sp, #40]	; 0x28
}
 80079f8:	b002      	add	sp, #8
 80079fa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  ili9341_draw_line(lcd, color, x+w-1,     y, x+w-1,   y+h );
 80079fe:	f7ff bf05 	b.w	800780c <ili9341_draw_line>
 8007a02:	bf00      	nop

08007a04 <ili9341_fill_screen>:
{
 8007a04:	b510      	push	{r4, lr}
  ili9341_fill_rect(lcd, color,
 8007a06:	8b82      	ldrh	r2, [r0, #28]
 8007a08:	8bc4      	ldrh	r4, [r0, #30]
{
 8007a0a:	b082      	sub	sp, #8
  ili9341_fill_rect(lcd, color,
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	e9cd 2400 	strd	r2, r4, [sp]
 8007a12:	461a      	mov	r2, r3
 8007a14:	f7ff fe46 	bl	80076a4 <ili9341_fill_rect>
}
 8007a18:	b002      	add	sp, #8
 8007a1a:	bd10      	pop	{r4, pc}

08007a1c <ili9341_draw_char>:
{
 8007a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a20:	b08f      	sub	sp, #60	; 0x3c
 8007a22:	ac07      	add	r4, sp, #28
 8007a24:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8007a28:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 8007a2c:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
  uint16_t _w = attr.font->width;
 8007a30:	780b      	ldrb	r3, [r1, #0]
 8007a32:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8007a36:	e9cd 5402 	strd	r5, r4, [sp, #8]
 8007a3a:	ba6d      	rev16	r5, r5
  if (ibNOT(ili9341_clip_rect(lcd, &_x, &_y, &_w, &_h)))
 8007a3c:	f10d 022e 	add.w	r2, sp, #46	; 0x2e
 8007a40:	ab0b      	add	r3, sp, #44	; 0x2c
 8007a42:	f8ad 5010 	strh.w	r5, [sp, #16]
 8007a46:	ba65      	rev16	r5, r4
  int16_t  _x = attr.origin_x;
 8007a48:	9c02      	ldr	r4, [sp, #8]
  uint16_t _h = attr.font->height;
 8007a4a:	f891 c001 	ldrb.w	ip, [r1, #1]
  int16_t  _x = attr.origin_x;
 8007a4e:	f8ad 4028 	strh.w	r4, [sp, #40]	; 0x28
  if (ibNOT(ili9341_clip_rect(lcd, &_x, &_y, &_w, &_h)))
 8007a52:	e9cd 3200 	strd	r3, r2, [sp]
  int16_t  _y = attr.origin_y;
 8007a56:	9c03      	ldr	r4, [sp, #12]
 8007a58:	f8ad 402a 	strh.w	r4, [sp, #42]	; 0x2a
 8007a5c:	460f      	mov	r7, r1
{
 8007a5e:	4606      	mov	r6, r0
  if (ibNOT(ili9341_clip_rect(lcd, &_x, &_y, &_w, &_h)))
 8007a60:	f100 011e 	add.w	r1, r0, #30
 8007a64:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 8007a68:	301c      	adds	r0, #28
 8007a6a:	aa0a      	add	r2, sp, #40	; 0x28
{
 8007a6c:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
  uint16_t _h = attr.font->height;
 8007a70:	f8ad c02e 	strh.w	ip, [sp, #46]	; 0x2e
 8007a74:	f8ad 5012 	strh.w	r5, [sp, #18]
  if (ibNOT(ili9341_clip_rect(lcd, &_x, &_y, &_w, &_h)))
 8007a78:	f7ff fd5e 	bl	8007538 <ili9341_clip_rect.isra.0>
 8007a7c:	b910      	cbnz	r0, 8007a84 <ili9341_draw_char+0x68>
}
 8007a7e:	b00f      	add	sp, #60	; 0x3c
 8007a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint32_t num_pixels = attr.font->width * attr.font->height;
 8007a84:	783d      	ldrb	r5, [r7, #0]
 8007a86:	7879      	ldrb	r1, [r7, #1]
  uint16_t fg_le = __LEu16(&(attr.fg_color));
 8007a88:	f89d 2020 	ldrb.w	r2, [sp, #32]
 8007a8c:	f89d 9021 	ldrb.w	r9, [sp, #33]	; 0x21
  uint16_t bg_le = __LEu16(&(attr.bg_color));
 8007a90:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 8007a94:	f89d a023 	ldrb.w	sl, [sp, #35]	; 0x23
  uint8_t ch_index = glyph_index(ch);
 8007a98:	4620      	mov	r0, r4
  uint32_t num_pixels = attr.font->width * attr.font->height;
 8007a9a:	fb15 f401 	smulbb	r4, r5, r1
 8007a9e:	9405      	str	r4, [sp, #20]
  uint16_t fg_le = __LEu16(&(attr.fg_color));
 8007aa0:	ea49 2902 	orr.w	r9, r9, r2, lsl #8
  uint16_t bg_le = __LEu16(&(attr.bg_color));
 8007aa4:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
  uint8_t ch_index = glyph_index(ch);
 8007aa8:	f7ff fd40 	bl	800752c <glyph_index>
 8007aac:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
  for (uint32_t yi = 0; yi < attr.font->height; ++yi) {
 8007ab0:	f897 b001 	ldrb.w	fp, [r7, #1]
  uint32_t num_pixels = attr.font->width * attr.font->height;
 8007ab4:	4625      	mov	r5, r4
  if (block_wc > __SPI_TX_BLOCK_MAX__)
 8007ab6:	bf28      	it	cs
 8007ab8:	f44f 6480 	movcs.w	r4, #1024	; 0x400
 8007abc:	46a0      	mov	r8, r4
    for (uint32_t xi = 0; xi < attr.font->width; ++xi) {
 8007abe:	783c      	ldrb	r4, [r7, #0]
  for (uint32_t yi = 0; yi < attr.font->height; ++yi) {
 8007ac0:	f1bb 0f00 	cmp.w	fp, #0
 8007ac4:	d024      	beq.n	8007b10 <ili9341_draw_char+0xf4>
    uint32_t gl = (uint32_t)attr.font->glyph[ch_index * attr.font->height + yi];
 8007ac6:	fb10 f00b 	smulbb	r0, r0, fp
 8007aca:	b1fc      	cbz	r4, 8007b0c <ili9341_draw_char+0xf0>
 8007acc:	3001      	adds	r0, #1
 8007ace:	0063      	lsls	r3, r4, #1
 8007ad0:	493c      	ldr	r1, [pc, #240]	; (8007bc4 <ili9341_draw_char+0x1a8>)
  for (uint32_t yi = 0; yi < attr.font->height; ++yi) {
 8007ad2:	f8cd 8018 	str.w	r8, [sp, #24]
 8007ad6:	eb07 0e40 	add.w	lr, r7, r0, lsl #1
 8007ada:	f04f 0c00 	mov.w	ip, #0
 8007ade:	4698      	mov	r8, r3
    uint32_t gl = (uint32_t)attr.font->glyph[ch_index * attr.font->height + yi];
 8007ae0:	f83e 0b02 	ldrh.w	r0, [lr], #2
    for (uint32_t xi = 0; xi < attr.font->width; ++xi) {
 8007ae4:	2300      	movs	r3, #0
      if ((gl << xi) & 0x8000)
 8007ae6:	fa00 f203 	lsl.w	r2, r0, r3
 8007aea:	0412      	lsls	r2, r2, #16
        { spi_tx_block[yi * attr.font->width + xi] = bg_le; }
 8007aec:	bf54      	ite	pl
 8007aee:	f821 a013 	strhpl.w	sl, [r1, r3, lsl #1]
        { spi_tx_block[yi * attr.font->width + xi] = fg_le; }
 8007af2:	f821 9013 	strhmi.w	r9, [r1, r3, lsl #1]
    for (uint32_t xi = 0; xi < attr.font->width; ++xi) {
 8007af6:	3301      	adds	r3, #1
 8007af8:	429c      	cmp	r4, r3
 8007afa:	d1f4      	bne.n	8007ae6 <ili9341_draw_char+0xca>
  for (uint32_t yi = 0; yi < attr.font->height; ++yi) {
 8007afc:	f10c 0c01 	add.w	ip, ip, #1
 8007b00:	45dc      	cmp	ip, fp
 8007b02:	4441      	add	r1, r8
 8007b04:	d1ec      	bne.n	8007ae0 <ili9341_draw_char+0xc4>
 8007b06:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8007b0a:	783c      	ldrb	r4, [r7, #0]
 8007b0c:	fa1f fb8b 	uxth.w	fp, fp
  ili9341_spi_tft_set_address_rect(lcd,
 8007b10:	9b02      	ldr	r3, [sp, #8]
 8007b12:	1e5f      	subs	r7, r3, #1
 8007b14:	9b03      	ldr	r3, [sp, #12]
 8007b16:	4427      	add	r7, r4
 8007b18:	3b01      	subs	r3, #1
  ili9341_spi_tft_select(lcd);
 8007b1a:	4630      	mov	r0, r6
  ili9341_spi_tft_set_address_rect(lcd,
 8007b1c:	b2bf      	uxth	r7, r7
 8007b1e:	eb0b 0403 	add.w	r4, fp, r3
  ili9341_spi_tft_select(lcd);
 8007b22:	f7ff fc39 	bl	8007398 <ili9341_spi_tft_select>
      0x2A, 4, (uint8_t[]){ (x0 >> 8) & 0xFF, x0 & 0xFF,
 8007b26:	ba78      	rev16	r0, r7
  ili9341_spi_write_command_data(lcd, issNONE,
 8007b28:	ab0c      	add	r3, sp, #48	; 0x30
      0x2A, 4, (uint8_t[]){ (x0 >> 8) & 0xFF, x0 & 0xFF,
 8007b2a:	f8bd 7010 	ldrh.w	r7, [sp, #16]
  ili9341_spi_write_command_data(lcd, issNONE,
 8007b2e:	9300      	str	r3, [sp, #0]
 8007b30:	222a      	movs	r2, #42	; 0x2a
 8007b32:	2304      	movs	r3, #4
 8007b34:	f04f 31ff 	mov.w	r1, #4294967295
      0x2A, 4, (uint8_t[]){ (x0 >> 8) & 0xFF, x0 & 0xFF,
 8007b38:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
  ili9341_spi_tft_set_address_rect(lcd,
 8007b3c:	b2a4      	uxth	r4, r4
  ili9341_spi_write_command_data(lcd, issNONE,
 8007b3e:	4630      	mov	r0, r6
      0x2B, 4, (uint8_t[]){ (y0 >> 8) & 0xFF, y0 & 0xFF,
 8007b40:	ba64      	rev16	r4, r4
      0x2A, 4, (uint8_t[]){ (x0 >> 8) & 0xFF, x0 & 0xFF,
 8007b42:	f8ad 7030 	strh.w	r7, [sp, #48]	; 0x30
  ili9341_spi_write_command_data(lcd, issNONE,
 8007b46:	f7ff fc7d 	bl	8007444 <ili9341_spi_write_command_data>
  ili9341_spi_write_command_data(lcd, issNONE,
 8007b4a:	ab0d      	add	r3, sp, #52	; 0x34
 8007b4c:	9300      	str	r3, [sp, #0]
 8007b4e:	222b      	movs	r2, #43	; 0x2b
 8007b50:	2304      	movs	r3, #4
 8007b52:	f04f 31ff 	mov.w	r1, #4294967295
 8007b56:	4630      	mov	r0, r6
      0x2B, 4, (uint8_t[]){ (y0 >> 8) & 0xFF, y0 & 0xFF,
 8007b58:	f8ad 4036 	strh.w	r4, [sp, #54]	; 0x36
 8007b5c:	f8bd 4012 	ldrh.w	r4, [sp, #18]
 8007b60:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
  ili9341_spi_write_command_data(lcd, issNONE,
 8007b64:	f7ff fc6e 	bl	8007444 <ili9341_spi_write_command_data>
  ili9341_spi_write_command(lcd, issNONE, 0x2C);
 8007b68:	222c      	movs	r2, #44	; 0x2c
 8007b6a:	f04f 31ff 	mov.w	r1, #4294967295
 8007b6e:	4630      	mov	r0, r6
 8007b70:	f7ff fc1e 	bl	80073b0 <ili9341_spi_write_command>
  ili9341_spi_tft_release(lcd);
 8007b74:	4630      	mov	r0, r6
 8007b76:	f7ff fc15 	bl	80073a4 <ili9341_spi_tft_release>
  ili9341_spi_tft_select(lcd);
 8007b7a:	4630      	mov	r0, r6
 8007b7c:	f7ff fc0c 	bl	8007398 <ili9341_spi_tft_select>
  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_SET__);
 8007b80:	8b31      	ldrh	r1, [r6, #24]
 8007b82:	6970      	ldr	r0, [r6, #20]
 8007b84:	2201      	movs	r2, #1
 8007b86:	f7fa fe49 	bl	800281c <HAL_GPIO_WritePin>
  while (rect_wc > 0) {
 8007b8a:	9b05      	ldr	r3, [sp, #20]
 8007b8c:	b19b      	cbz	r3, 8007bb6 <ili9341_draw_char+0x19a>
  HAL_SPI_Transmit_DMA(lcd->spi_hal, (uint8_t *)color, size);
 8007b8e:	4f0d      	ldr	r7, [pc, #52]	; (8007bc4 <ili9341_draw_char+0x1a8>)
    if (curr_wc > block_wc)
 8007b90:	45a8      	cmp	r8, r5
 8007b92:	4644      	mov	r4, r8
 8007b94:	bf28      	it	cs
 8007b96:	462c      	movcs	r4, r5
    ili9341_transmit_color(lcd, curr_wc * 2/*16-bit words*/, spi_tx_block, ibYes);
 8007b98:	0062      	lsls	r2, r4, #1
 8007b9a:	b292      	uxth	r2, r2
  if ((NULL == lcd) || (0 == size) || (NULL == color))
 8007b9c:	b14a      	cbz	r2, 8007bb2 <ili9341_draw_char+0x196>
  HAL_SPI_Transmit_DMA(lcd->spi_hal, (uint8_t *)color, size);
 8007b9e:	6830      	ldr	r0, [r6, #0]
 8007ba0:	4639      	mov	r1, r7
 8007ba2:	f7fc fc9d 	bl	80044e0 <HAL_SPI_Transmit_DMA>
  while (HAL_DMA_STATE_BUSY == HAL_DMA_GetState(lcd->spi_hal->hdmatx))
 8007ba6:	6833      	ldr	r3, [r6, #0]
 8007ba8:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8007baa:	f7fa fd1d 	bl	80025e8 <HAL_DMA_GetState>
 8007bae:	2802      	cmp	r0, #2
 8007bb0:	d0f9      	beq.n	8007ba6 <ili9341_draw_char+0x18a>
  while (rect_wc > 0) {
 8007bb2:	1b2d      	subs	r5, r5, r4
 8007bb4:	d1ec      	bne.n	8007b90 <ili9341_draw_char+0x174>
  ili9341_spi_tft_release(lcd);
 8007bb6:	4630      	mov	r0, r6
 8007bb8:	f7ff fbf4 	bl	80073a4 <ili9341_spi_tft_release>
}
 8007bbc:	b00f      	add	sp, #60	; 0x3c
 8007bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bc2:	bf00      	nop
 8007bc4:	2000093c 	.word	0x2000093c

08007bc8 <ili9341_draw_string>:
{
 8007bc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007bcc:	b087      	sub	sp, #28
 8007bce:	ae03      	add	r6, sp, #12
 8007bd0:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 8007bd4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8007bd6:	f8bd 9016 	ldrh.w	r9, [sp, #22]
  while ('\0' != *str) {
 8007bda:	783a      	ldrb	r2, [r7, #0]
  int16_t curr_x = attr.origin_x;
 8007bdc:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
  int16_t curr_y = attr.origin_y;
 8007be0:	f9bd 8016 	ldrsh.w	r8, [sp, #22]
  while ('\0' != *str) {
 8007be4:	b1ca      	cbz	r2, 8007c1a <ili9341_draw_string+0x52>
 8007be6:	4605      	mov	r5, r0
 8007be8:	e012      	b.n	8007c10 <ili9341_draw_string+0x48>
         (curr_y > lcd->screen_size.height) )
 8007bea:	8beb      	ldrh	r3, [r5, #30]
    if ( (curr_x > lcd->screen_size.width) ||
 8007bec:	4598      	cmp	r8, r3
 8007bee:	dc14      	bgt.n	8007c1a <ili9341_draw_string+0x52>
    ili9341_draw_char(lcd, attr, *str);
 8007bf0:	f8ad 4014 	strh.w	r4, [sp, #20]
 8007bf4:	f8ad 9016 	strh.w	r9, [sp, #22]
 8007bf8:	9200      	str	r2, [sp, #0]
 8007bfa:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8007bfe:	f7ff ff0d 	bl	8007a1c <ili9341_draw_char>
    curr_x += attr.font->width;
 8007c02:	9b03      	ldr	r3, [sp, #12]
  while ('\0' != *str) {
 8007c04:	f817 2f01 	ldrb.w	r2, [r7, #1]!
    curr_x += attr.font->width;
 8007c08:	781b      	ldrb	r3, [r3, #0]
 8007c0a:	441c      	add	r4, r3
 8007c0c:	b223      	sxth	r3, r4
  while ('\0' != *str) {
 8007c0e:	b122      	cbz	r2, 8007c1a <ili9341_draw_string+0x52>
    if ( (curr_x > lcd->screen_size.width) ||
 8007c10:	8ba9      	ldrh	r1, [r5, #28]
 8007c12:	428b      	cmp	r3, r1
    attr.origin_x = curr_x;
 8007c14:	b29c      	uxth	r4, r3
    ili9341_draw_char(lcd, attr, *str);
 8007c16:	4628      	mov	r0, r5
    if ( (curr_x > lcd->screen_size.width) ||
 8007c18:	dde7      	ble.n	8007bea <ili9341_draw_string+0x22>
}
 8007c1a:	b007      	add	sp, #28
 8007c1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08007c20 <adcStart>:
};

ADC_HandleTypeDef hadc1;

void adcStart(void){
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adcDMAdata[0], ADC_CHANNELS);
 8007c20:	4902      	ldr	r1, [pc, #8]	; (8007c2c <adcStart+0xc>)
 8007c22:	4803      	ldr	r0, [pc, #12]	; (8007c30 <adcStart+0x10>)
 8007c24:	2203      	movs	r2, #3
 8007c26:	f7fa b8a1 	b.w	8001d6c <HAL_ADC_Start_DMA>
 8007c2a:	bf00      	nop
 8007c2c:	200090ac 	.word	0x200090ac
 8007c30:	200085dc 	.word	0x200085dc

08007c34 <adcSmoothen>:
		adcCh[i].ADCsmooth = adcCh[i].ADCold + ((int16_t)(adcCh[i].LPFalpha * (float)delta));
		adcCh[i].test = (int16_t)(delta * adcCh[i].LPFalpha);
		adcCh[i].ADCold = adcCh[i].ADCsmooth;
		*/

		adcCh[i].ADCraw = adcDMAdata[i];              			//read the sensor value using ADC
 8007c34:	4b28      	ldr	r3, [pc, #160]	; (8007cd8 <adcSmoothen+0xa4>)
 8007c36:	4a29      	ldr	r2, [pc, #164]	; (8007cdc <adcSmoothen+0xa8>)
		adcCh[i].ADCsmooth = (adcCh[i].LPFalpha*adcCh[i].ADCraw) + ((1-adcCh[i].LPFalpha) * adcCh[i].ADCsmooth);  //run the EMA
 8007c38:	8899      	ldrh	r1, [r3, #4]
		adcCh[i].ADCraw = adcDMAdata[i];              			//read the sensor value using ADC
 8007c3a:	8810      	ldrh	r0, [r2, #0]
		adcCh[i].ADCsmooth = (adcCh[i].LPFalpha*adcCh[i].ADCraw) + ((1-adcCh[i].LPFalpha) * adcCh[i].ADCsmooth);  //run the EMA
 8007c3c:	edd3 4a04 	vldr	s9, [r3, #16]
 8007c40:	ed93 5a0a 	vldr	s10, [r3, #40]	; 0x28
 8007c44:	f8b3 c034 	ldrh.w	ip, [r3, #52]	; 0x34
 8007c48:	edd3 5a10 	vldr	s11, [r3, #64]	; 0x40
 8007c4c:	ee06 1a90 	vmov	s13, r1
 8007c50:	8b99      	ldrh	r1, [r3, #28]
 8007c52:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8007c56:	ee07 1a10 	vmov	s14, r1
		adcCh[i].ADCraw = adcDMAdata[i];              			//read the sensor value using ADC
 8007c5a:	b280      	uxth	r0, r0
 8007c5c:	8851      	ldrh	r1, [r2, #2]
 8007c5e:	8892      	ldrh	r2, [r2, #4]
 8007c60:	8058      	strh	r0, [r3, #2]
		adcCh[i].ADCsmooth = (adcCh[i].LPFalpha*adcCh[i].ADCraw) + ((1-adcCh[i].LPFalpha) * adcCh[i].ADCsmooth);  //run the EMA
 8007c62:	ee76 3a64 	vsub.f32	s7, s12, s9
 8007c66:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8007c6a:	ee03 0a10 	vmov	s6, r0
		adcCh[i].ADCraw = adcDMAdata[i];              			//read the sensor value using ADC
 8007c6e:	b289      	uxth	r1, r1
		adcCh[i].ADCsmooth = (adcCh[i].LPFalpha*adcCh[i].ADCraw) + ((1-adcCh[i].LPFalpha) * adcCh[i].ADCsmooth);  //run the EMA
 8007c70:	ee36 4a45 	vsub.f32	s8, s12, s10
 8007c74:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8007c78:	ee07 ca90 	vmov	s15, ip
 8007c7c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007c80:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8007c84:	ee03 1a90 	vmov	s7, r1
		adcCh[i].ADCraw = adcDMAdata[i];              			//read the sensor value using ADC
 8007c88:	b292      	uxth	r2, r2
		adcCh[i].ADCsmooth = (adcCh[i].LPFalpha*adcCh[i].ADCraw) + ((1-adcCh[i].LPFalpha) * adcCh[i].ADCsmooth);  //run the EMA
 8007c8a:	ee27 7a04 	vmul.f32	s14, s14, s8
 8007c8e:	eee4 6a83 	vfma.f32	s13, s9, s6
		adcCh[i].ADCraw = adcDMAdata[i];              			//read the sensor value using ADC
 8007c92:	865a      	strh	r2, [r3, #50]	; 0x32
 8007c94:	8359      	strh	r1, [r3, #26]
		adcCh[i].ADCsmooth = (adcCh[i].LPFalpha*adcCh[i].ADCraw) + ((1-adcCh[i].LPFalpha) * adcCh[i].ADCsmooth);  //run the EMA
 8007c96:	ee04 2a10 	vmov	s8, r2
 8007c9a:	ee36 6a65 	vsub.f32	s12, s12, s11
 8007c9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007ca2:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 8007ca6:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 8007caa:	eea5 7a23 	vfma.f32	s14, s10, s7
 8007cae:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007cb2:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8007cb6:	eee5 7a84 	vfma.f32	s15, s11, s8
 8007cba:	ee16 2a90 	vmov	r2, s13
 8007cbe:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8007cc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007cc6:	809a      	strh	r2, [r3, #4]
 8007cc8:	ee17 2a10 	vmov	r2, s14
 8007ccc:	839a      	strh	r2, [r3, #28]
 8007cce:	ee17 2a90 	vmov	r2, s15
 8007cd2:	869a      	strh	r2, [r3, #52]	; 0x34


	}
}
 8007cd4:	4770      	bx	lr
 8007cd6:	bf00      	nop
 8007cd8:	20000180 	.word	0x20000180
 8007cdc:	200090ac 	.word	0x200090ac

08007ce0 <AudioAgc_AgcWdsp_Init>:
/**
 * Sets the basic initial values for the WDSP AGC
 * Call only once at startup!
 */
void AudioAgc_AgcWdsp_Init()
{
 8007ce0:	b430      	push	{r4, r5}
    // the values below are all loaded from
    // EEPROM, which happens BEFORE we get here
    // so there is no point in setting these.
	agc_wdsp_conf.mode = 2;
 8007ce2:	4b10      	ldr	r3, [pc, #64]	; (8007d24 <AudioAgc_AgcWdsp_Init+0x44>)
 8007ce4:	f244 6202 	movw	r2, #17922	; 0x4602
	agc_wdsp_conf.slope = 70;
	agc_wdsp_conf.hang_enable = 0;
	agc_wdsp_conf.tau_decay[0] = 4000;
	agc_wdsp_conf.tau_decay[1] = 2000;
 8007ce8:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
	agc_wdsp_conf.tau_decay[2] = 500;
	agc_wdsp_conf.tau_decay[3] = 250;
	agc_wdsp_conf.tau_decay[4] = 50;
 8007cec:	2132      	movs	r1, #50	; 0x32
	agc_wdsp_conf.tau_decay[0] = 4000;
 8007cee:	f44f 657a 	mov.w	r5, #4000	; 0xfa0
	agc_wdsp_conf.tau_decay[3] = 250;
 8007cf2:	20fa      	movs	r0, #250	; 0xfa
	agc_wdsp_conf.mode = 2;
 8007cf4:	801a      	strh	r2, [r3, #0]
	agc_wdsp_conf.tau_decay[1] = 2000;
 8007cf6:	619c      	str	r4, [r3, #24]
	agc_wdsp_conf.thresh = 20;
 8007cf8:	2214      	movs	r2, #20

    // these are not stored in volatile memory
    // so let us initialize them here.
	agc_wdsp_conf.hang_time = 	500;
	agc_wdsp_conf.hang_thresh = 45;
	agc_wdsp_conf.action = 0;
 8007cfa:	f44f 7480 	mov.w	r4, #256	; 0x100
	agc_wdsp_conf.tau_decay[4] = 50;
 8007cfe:	6259      	str	r1, [r3, #36]	; 0x24
	agc_wdsp_conf.hang_enable = 0;
 8007d00:	2100      	movs	r1, #0
	agc_wdsp_conf.tau_decay[0] = 4000;
 8007d02:	615d      	str	r5, [r3, #20]
	agc_wdsp_conf.tau_decay[3] = 250;
 8007d04:	6218      	str	r0, [r3, #32]
	agc_wdsp_conf.hang_thresh = 45;
 8007d06:	252d      	movs	r5, #45	; 0x2d
	agc_wdsp_conf.switch_mode = 1;
	agc_wdsp_conf.hang_action = 0;
	agc_wdsp_conf.tau_decay[5] = 1; // this is the OFF-Mode
 8007d08:	2001      	movs	r0, #1
	agc_wdsp_conf.thresh = 20;
 8007d0a:	605a      	str	r2, [r3, #4]
	agc_wdsp_conf.action = 0;
 8007d0c:	821c      	strh	r4, [r3, #16]
	agc_wdsp_conf.tau_decay[2] = 500;
 8007d0e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
	agc_wdsp_conf.hang_enable = 0;
 8007d12:	7099      	strb	r1, [r3, #2]
	agc_wdsp_conf.hang_action = 0;
 8007d14:	7499      	strb	r1, [r3, #18]
	agc_wdsp_conf.hang_thresh = 45;
 8007d16:	609d      	str	r5, [r3, #8]
	agc_wdsp_conf.tau_decay[5] = 1; // this is the OFF-Mode
 8007d18:	6298      	str	r0, [r3, #40]	; 0x28
}
 8007d1a:	bc30      	pop	{r4, r5}
	agc_wdsp_conf.tau_decay[2] = 500;
 8007d1c:	61da      	str	r2, [r3, #28]
	agc_wdsp_conf.tau_hang_decay = 500;
 8007d1e:	62da      	str	r2, [r3, #44]	; 0x2c
	agc_wdsp_conf.hang_time = 	500;
 8007d20:	60da      	str	r2, [r3, #12]
}
 8007d22:	4770      	bx	lr
 8007d24:	20009a74 	.word	0x20009a74

08007d28 <AudioAgc_SetupAgcWdsp>:
 *
 * @param sample_rate audio sample rate
 * @param remove_dc Should be set for AM demodulation (AM,SAM,DSB) If set to true, remove DC in output
 */
void AudioAgc_SetupAgcWdsp(float32_t sample_rate, bool remove_dc)
{
 8007d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    // this should prevent confusion between the distance of in_index and out_index variables
    // because these are freshly initialised
    // in_index and out_index have a distance of 48 (sample rate 12000) or 96 (sample rate 24000)
    // so that has to be defined very well when filter from 4k8 to 5k0 (changing decimation rate from 4 to 2)

    agc_wdsp.remove_dc = remove_dc;
 8007d2c:	4ce4      	ldr	r4, [pc, #912]	; (80080c0 <AudioAgc_SetupAgcWdsp+0x398>)

    if(agc_wdsp.sample_rate != sample_rate)
 8007d2e:	f604 13b8 	addw	r3, r4, #2488	; 0x9b8
 8007d32:	edd3 7a00 	vldr	s15, [r3]
{
 8007d36:	ed2d 8b10 	vpush	{d8-d15}
    if(agc_wdsp.sample_rate != sample_rate)
 8007d3a:	eef4 7a40 	vcmp.f32	s15, s0
 8007d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 8007d42:	b082      	sub	sp, #8
 8007d44:	eeb0 8a40 	vmov.f32	s16, s0
    agc_wdsp.remove_dc = remove_dc;
 8007d48:	f884 09b4 	strb.w	r0, [r4, #2484]	; 0x9b4
    if(agc_wdsp.sample_rate != sample_rate)
 8007d4c:	f040 81e6 	bne.w	800811c <AudioAgc_SetupAgcWdsp+0x3f4>
        agc_wdsp.initialised = false; // force initialisation
        agc_wdsp.sample_rate = sample_rate; // remember decimation rate for next time
    }


    agc_wdsp.tau_attack = 0.001f;
 8007d50:	4adc      	ldr	r2, [pc, #880]	; (80080c4 <AudioAgc_SetupAgcWdsp+0x39c>)
    agc_wdsp.tau_decay = 0.250f;
    agc_wdsp.n_tau = 4;
    agc_wdsp.max_gain = 10000.0f;
 8007d52:	4bdd      	ldr	r3, [pc, #884]	; (80080c8 <AudioAgc_SetupAgcWdsp+0x3a0>)
    //agc_wdsp.var_gain = 1.5f
    agc_wdsp.fixed_gain = 1000.0f;
 8007d54:	48dd      	ldr	r0, [pc, #884]	; (80080cc <AudioAgc_SetupAgcWdsp+0x3a4>)
    agc_wdsp.pop_ratio = 5.0f;
    //agc_wdsp.hang_enable = 1;
    agc_wdsp.tau_hang_backmult = 0.5f;
    agc_wdsp.hangtime = 0.250f;
    agc_wdsp.hang_thresh = 0.250f;
    agc_wdsp.tau_hang_decay = 0.100;
 8007d56:	49de      	ldr	r1, [pc, #888]	; (80080d0 <AudioAgc_SetupAgcWdsp+0x3a8>)
    agc_wdsp.tau_attack = 0.001f;
 8007d58:	6122      	str	r2, [r4, #16]
    agc_wdsp.max_gain = 10000.0f;
 8007d5a:	61e3      	str	r3, [r4, #28]
 8007d5c:	f894 29bc 	ldrb.w	r2, [r4, #2492]	; 0x9bc
    agc_wdsp.tau_fast_decay = 0.005f;
 8007d60:	4ddc      	ldr	r5, [pc, #880]	; (80080d4 <AudioAgc_SetupAgcWdsp+0x3ac>)
    agc_wdsp.fixed_gain = 1000.0f;
 8007d62:	6260      	str	r0, [r4, #36]	; 0x24
    agc_wdsp.tau_decay = 0.250f;
 8007d64:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
    agc_wdsp.max_input = 1.0f;
 8007d68:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    agc_wdsp.n_tau = 4;
 8007d6c:	2004      	movs	r0, #4
    agc_wdsp.out_target = 1.0f;
 8007d6e:	f604 188c 	addw	r8, r4, #2444	; 0x98c
    agc_wdsp.tau_hang_decay = 0.100;
 8007d72:	64a1      	str	r1, [r4, #72]	; 0x48
    agc_wdsp.tau_decay = 0.250f;
 8007d74:	6163      	str	r3, [r4, #20]
    agc_wdsp.pop_ratio = 5.0f;
 8007d76:	49d8      	ldr	r1, [pc, #864]	; (80080d8 <AudioAgc_SetupAgcWdsp+0x3b0>)
    agc_wdsp.tau_fast_backaverage = 0.25f;
 8007d78:	6323      	str	r3, [r4, #48]	; 0x30
    agc_wdsp.hangtime = 0.250f;
 8007d7a:	6423      	str	r3, [r4, #64]	; 0x40
    agc_wdsp.hang_thresh = 0.250f;
 8007d7c:	6463      	str	r3, [r4, #68]	; 0x44
    agc_wdsp.tau_hang_backmult = 0.5f;
 8007d7e:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
    agc_wdsp.tau_fast_decay = 0.005f;
 8007d82:	6365      	str	r5, [r4, #52]	; 0x34
    agc_wdsp.n_tau = 4;
 8007d84:	61a0      	str	r0, [r4, #24]
    agc_wdsp.max_input = 1.0f;
 8007d86:	edc4 8a0a 	vstr	s17, [r4, #40]	; 0x28
    agc_wdsp.out_target = 1.0f;
 8007d8a:	edc8 8a00 	vstr	s17, [r8]
    agc_wdsp.pop_ratio = 5.0f;
 8007d8e:	63a1      	str	r1, [r4, #56]	; 0x38
    agc_wdsp.tau_hang_backmult = 0.5f;
 8007d90:	63e3      	str	r3, [r4, #60]	; 0x3c


    // one time initialization
    if(!agc_wdsp.initialised)
 8007d92:	2a00      	cmp	r2, #0
 8007d94:	f000 81de 	beq.w	8008154 <AudioAgc_SetupAgcWdsp+0x42c>
 8007d98:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8007d9a:	f8d4 a950 	ldr.w	sl, [r4, #2384]	; 0x950
 8007d9e:	f7f8 fbd3 	bl	8000548 <__aeabi_f2d>
 8007da2:	a3bb      	add	r3, pc, #748	; (adr r3, 8008090 <AudioAgc_SetupAgcWdsp+0x368>)
 8007da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da8:	f7f8 fc26 	bl	80005f8 <__aeabi_dmul>
 8007dac:	f7f8 fefc 	bl	8000ba8 <__aeabi_d2f>
 8007db0:	ee0b 0a90 	vmov	s23, r0
 8007db4:	ee88 daab 	vdiv.f32	s26, s17, s23
 8007db8:	f7f8 fbc6 	bl	8000548 <__aeabi_f2d>
 8007dbc:	f8d4 994c 	ldr.w	r9, [r4, #2380]	; 0x94c
 8007dc0:	ec41 0b1f 	vmov	d15, r0, r1
 8007dc4:	eef0 ca68 	vmov.f32	s25, s17
 8007dc8:	eeb0 ba68 	vmov.f32	s22, s17
        //hang_enable = 1;                // hang_enable
        agc_wdsp.tau_hang_backmult = 0.500;       // tau_hang_backmult
        agc_wdsp.initialised = true;
    }

	agc_wdsp.var_gain = pow10f((float32_t)agc_wdsp_conf.slope / 20.0 / 10.0); // 10^(slope / 200)
 8007dcc:	4dc3      	ldr	r5, [pc, #780]	; (80080dc <AudioAgc_SetupAgcWdsp+0x3b4>)
 8007dce:	7868      	ldrb	r0, [r5, #1]
 8007dd0:	ee07 0a90 	vmov	s15, r0
 8007dd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dd8:	ee17 0a90 	vmov	r0, s15
 8007ddc:	f7f8 fbb4 	bl	8000548 <__aeabi_f2d>
 8007de0:	a3ad      	add	r3, pc, #692	; (adr r3, 8008098 <AudioAgc_SetupAgcWdsp+0x370>)
 8007de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de6:	f7f8 fc07 	bl	80005f8 <__aeabi_dmul>
 8007dea:	f7f8 fedd 	bl	8000ba8 <__aeabi_d2f>
 8007dee:	ee00 0a10 	vmov	s0, r0
 8007df2:	f004 fefb 	bl	800cbec <pow10f>
    agc_wdsp.hangtime = (float32_t)agc_wdsp_conf.hang_time / 1000.0;
 8007df6:	edd5 7a03 	vldr	s15, [r5, #12]
	agc_wdsp.var_gain = pow10f((float32_t)agc_wdsp_conf.slope / 20.0 / 10.0); // 10^(slope / 200)
 8007dfa:	ed84 0a08 	vstr	s0, [r4, #32]
    agc_wdsp.hangtime = (float32_t)agc_wdsp_conf.hang_time / 1000.0;
 8007dfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	agc_wdsp.var_gain = pow10f((float32_t)agc_wdsp_conf.slope / 20.0 / 10.0); // 10^(slope / 200)
 8007e02:	eef0 9a40 	vmov.f32	s19, s0
    agc_wdsp.hangtime = (float32_t)agc_wdsp_conf.hang_time / 1000.0;
 8007e06:	ee17 0a90 	vmov	r0, s15
 8007e0a:	f7f8 fb9d 	bl	8000548 <__aeabi_f2d>
 8007e0e:	a3a4      	add	r3, pc, #656	; (adr r3, 80080a0 <AudioAgc_SetupAgcWdsp+0x378>)
 8007e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e14:	f7f8 fbf0 	bl	80005f8 <__aeabi_dmul>
 8007e18:	f7f8 fec6 	bl	8000ba8 <__aeabi_d2f>

    //calculate internal parameters
    if(agc_wdsp_conf.switch_mode)
 8007e1c:	7c6b      	ldrb	r3, [r5, #17]
    {
        switch (agc_wdsp_conf.mode)
 8007e1e:	782f      	ldrb	r7, [r5, #0]
    agc_wdsp.hangtime = (float32_t)agc_wdsp_conf.hang_time / 1000.0;
 8007e20:	6420      	str	r0, [r4, #64]	; 0x40
    if(agc_wdsp_conf.switch_mode)
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	f040 821b 	bne.w	800825e <AudioAgc_SetupAgcWdsp+0x536>
 8007e28:	eddf daad 	vldr	s27, [pc, #692]	; 80080e0 <AudioAgc_SetupAgcWdsp+0x3b8>
            break;
        }
        agc_wdsp_conf.switch_mode = 0;
    }

    agc_wdsp.tau_hang_decay = (float32_t)agc_wdsp_conf.tau_hang_decay / 1000.0;
 8007e2c:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
    agc_wdsp.attack_buffsize = ceilf(sample_rate * agc_wdsp.n_tau * agc_wdsp.tau_attack);

    agc_wdsp.in_index = agc_wdsp.attack_buffsize + agc_wdsp.out_index; // attack_buffsize + out_index can be more than 2x ring_bufsize !!!
    agc_wdsp.in_index %= agc_wdsp.ring_buffsize; // need to keep this within the index boundaries

    agc_wdsp.attack_mult = 1.0 - expf(-1.0 / (sample_rate * agc_wdsp.tau_attack));
 8007e30:	4eac      	ldr	r6, [pc, #688]	; (80080e4 <AudioAgc_SetupAgcWdsp+0x3bc>)
    agc_wdsp.tau_hang_decay = (float32_t)agc_wdsp_conf.tau_hang_decay / 1000.0;
 8007e32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    agc_wdsp.tau_decay = (float32_t)agc_wdsp_conf.tau_decay[agc_wdsp_conf.mode] / 1000.0;
 8007e36:	eb05 0787 	add.w	r7, r5, r7, lsl #2
    agc_wdsp.tau_hang_decay = (float32_t)agc_wdsp_conf.tau_hang_decay / 1000.0;
 8007e3a:	ee17 0a90 	vmov	r0, s15
 8007e3e:	f7f8 fb83 	bl	8000548 <__aeabi_f2d>
 8007e42:	a397      	add	r3, pc, #604	; (adr r3, 80080a0 <AudioAgc_SetupAgcWdsp+0x378>)
 8007e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e48:	f7f8 fbd6 	bl	80005f8 <__aeabi_dmul>
 8007e4c:	f7f8 feac 	bl	8000ba8 <__aeabi_d2f>
 8007e50:	ee09 0a10 	vmov	s18, r0
    agc_wdsp.tau_decay = (float32_t)agc_wdsp_conf.tau_decay[agc_wdsp_conf.mode] / 1000.0;
 8007e54:	6978      	ldr	r0, [r7, #20]
    agc_wdsp.tau_hang_decay = (float32_t)agc_wdsp_conf.tau_hang_decay / 1000.0;
 8007e56:	ed84 9a12 	vstr	s18, [r4, #72]	; 0x48
    agc_wdsp.tau_decay = (float32_t)agc_wdsp_conf.tau_decay[agc_wdsp_conf.mode] / 1000.0;
 8007e5a:	ee07 0a90 	vmov	s15, r0
 8007e5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007e62:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8007e66:	ee17 0a90 	vmov	r0, s15
 8007e6a:	f7f8 fb6d 	bl	8000548 <__aeabi_f2d>
 8007e6e:	a38c      	add	r3, pc, #560	; (adr r3, 80080a0 <AudioAgc_SetupAgcWdsp+0x378>)
 8007e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e74:	f7f8 fbc0 	bl	80005f8 <__aeabi_dmul>
 8007e78:	f7f8 fe96 	bl	8000ba8 <__aeabi_d2f>
    agc_wdsp.max_gain = pow10f ((float32_t)agc_wdsp_conf.thresh / 20.0);
 8007e7c:	edd5 7a01 	vldr	s15, [r5, #4]
    agc_wdsp.tau_decay = (float32_t)agc_wdsp_conf.tau_decay[agc_wdsp_conf.mode] / 1000.0;
 8007e80:	ee0a 0a90 	vmov	s21, r0
    agc_wdsp.max_gain = pow10f ((float32_t)agc_wdsp_conf.thresh / 20.0);
 8007e84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    agc_wdsp.tau_decay = (float32_t)agc_wdsp_conf.tau_decay[agc_wdsp_conf.mode] / 1000.0;
 8007e88:	edc4 aa05 	vstr	s21, [r4, #20]
    agc_wdsp.max_gain = pow10f ((float32_t)agc_wdsp_conf.thresh / 20.0);
 8007e8c:	ee17 0a90 	vmov	r0, s15
 8007e90:	f7f8 fb5a 	bl	8000548 <__aeabi_f2d>
 8007e94:	a384      	add	r3, pc, #528	; (adr r3, 80080a8 <AudioAgc_SetupAgcWdsp+0x380>)
 8007e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e9a:	f7f8 fbad 	bl	80005f8 <__aeabi_dmul>
 8007e9e:	f7f8 fe83 	bl	8000ba8 <__aeabi_d2f>
 8007ea2:	ee00 0a10 	vmov	s0, r0
 8007ea6:	f004 fea1 	bl	800cbec <pow10f>
 8007eaa:	ee88 ca88 	vdiv.f32	s24, s17, s16
    agc_wdsp.attack_mult = 1.0 - expf(-1.0 / (sample_rate * agc_wdsp.tau_attack));
 8007eae:	4637      	mov	r7, r6
    agc_wdsp.fixed_gain = agc_wdsp.max_gain / 10.0;
 8007eb0:	ee10 0a10 	vmov	r0, s0
    agc_wdsp.max_gain = pow10f ((float32_t)agc_wdsp_conf.thresh / 20.0);
 8007eb4:	ed84 0a07 	vstr	s0, [r4, #28]
 8007eb8:	eeb0 aa40 	vmov.f32	s20, s0
    agc_wdsp.fixed_gain = agc_wdsp.max_gain / 10.0;
 8007ebc:	f7f8 fb44 	bl	8000548 <__aeabi_f2d>
 8007ec0:	a37b      	add	r3, pc, #492	; (adr r3, 80080b0 <AudioAgc_SetupAgcWdsp+0x388>)
 8007ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec6:	f7f8 fb97 	bl	80005f8 <__aeabi_dmul>
 8007eca:	f7f8 fe6d 	bl	8000ba8 <__aeabi_d2f>
    agc_wdsp.attack_buffsize = ceilf(sample_rate * agc_wdsp.n_tau * agc_wdsp.tau_attack);
 8007ece:	ed9f 0a86 	vldr	s0, [pc, #536]	; 80080e8 <AudioAgc_SetupAgcWdsp+0x3c0>
    agc_wdsp.fixed_gain = agc_wdsp.max_gain / 10.0;
 8007ed2:	6260      	str	r0, [r4, #36]	; 0x24
    agc_wdsp.attack_buffsize = ceilf(sample_rate * agc_wdsp.n_tau * agc_wdsp.tau_attack);
 8007ed4:	ee28 0a00 	vmul.f32	s0, s16, s0
 8007ed8:	f004 fe46 	bl	800cb68 <ceilf>
 8007edc:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    agc_wdsp.attack_mult = 1.0 - expf(-1.0 / (sample_rate * agc_wdsp.tau_attack));
 8007ee0:	ed9f 0a82 	vldr	s0, [pc, #520]	; 80080ec <AudioAgc_SetupAgcWdsp+0x3c4>
    agc_wdsp.attack_buffsize = ceilf(sample_rate * agc_wdsp.n_tau * agc_wdsp.tau_attack);
 8007ee4:	ee17 3a90 	vmov	r3, s15
    agc_wdsp.in_index = agc_wdsp.attack_buffsize + agc_wdsp.out_index; // attack_buffsize + out_index can be more than 2x ring_bufsize !!!
 8007ee8:	449a      	add	sl, r3
    agc_wdsp.attack_buffsize = ceilf(sample_rate * agc_wdsp.n_tau * agc_wdsp.tau_attack);
 8007eea:	f8c4 3970 	str.w	r3, [r4, #2416]	; 0x970
    agc_wdsp.attack_mult = 1.0 - expf(-1.0 / (sample_rate * agc_wdsp.tau_attack));
 8007eee:	ee2c 0a00 	vmul.f32	s0, s24, s0
    agc_wdsp.in_index %= agc_wdsp.ring_buffsize; // need to keep this within the index boundaries
 8007ef2:	fbba f3f9 	udiv	r3, sl, r9
 8007ef6:	fb09 a313 	mls	r3, r9, r3, sl
 8007efa:	f8c4 3974 	str.w	r3, [r4, #2420]	; 0x974
    agc_wdsp.attack_mult = 1.0 - expf(-1.0 / (sample_rate * agc_wdsp.tau_attack));
 8007efe:	f004 fe7b 	bl	800cbf8 <expf>
    agc_wdsp.decay_mult = 1.0 - expf(-1.0 / (sample_rate * agc_wdsp.tau_decay));
 8007f02:	ee6a aa88 	vmul.f32	s21, s21, s16
    agc_wdsp.attack_mult = 1.0 - expf(-1.0 / (sample_rate * agc_wdsp.tau_attack));
 8007f06:	ee78 7ac0 	vsub.f32	s15, s17, s0
    agc_wdsp.decay_mult = 1.0 - expf(-1.0 / (sample_rate * agc_wdsp.tau_decay));
 8007f0a:	eebf ea00 	vmov.f32	s28, #240	; 0xbf800000 -1.0
 8007f0e:	ee8e 0a2a 	vdiv.f32	s0, s28, s21
    agc_wdsp.attack_mult = 1.0 - expf(-1.0 / (sample_rate * agc_wdsp.tau_attack));
 8007f12:	ece7 7a01 	vstmia	r7!, {s15}
    agc_wdsp.decay_mult = 1.0 - expf(-1.0 / (sample_rate * agc_wdsp.tau_decay));
 8007f16:	f004 fe6f 	bl	800cbf8 <expf>
    agc_wdsp.fast_decay_mult = 1.0 - expf(-1.0 / (sample_rate * agc_wdsp.tau_fast_decay));
 8007f1a:	ee68 da2d 	vmul.f32	s27, s16, s27
    agc_wdsp.decay_mult = 1.0 - expf(-1.0 / (sample_rate * agc_wdsp.tau_decay));
 8007f1e:	ee78 7ac0 	vsub.f32	s15, s17, s0
    agc_wdsp.fast_decay_mult = 1.0 - expf(-1.0 / (sample_rate * agc_wdsp.tau_fast_decay));
 8007f22:	ee8e 0a2d 	vdiv.f32	s0, s28, s27
    agc_wdsp.decay_mult = 1.0 - expf(-1.0 / (sample_rate * agc_wdsp.tau_decay));
 8007f26:	edc7 7a00 	vstr	s15, [r7]
    agc_wdsp.fast_decay_mult = 1.0 - expf(-1.0 / (sample_rate * agc_wdsp.tau_fast_decay));
 8007f2a:	f004 fe65 	bl	800cbf8 <expf>
    agc_wdsp.fast_backmult = 1.0 - expf(-1.0 / (sample_rate * agc_wdsp.tau_fast_backaverage));
 8007f2e:	eeb9 7a00 	vmov.f32	s14, #144	; 0xc0800000 -4.0
    agc_wdsp.fast_decay_mult = 1.0 - expf(-1.0 / (sample_rate * agc_wdsp.tau_fast_decay));
 8007f32:	ee78 7ac0 	vsub.f32	s15, s17, s0
    agc_wdsp.fast_backmult = 1.0 - expf(-1.0 / (sample_rate * agc_wdsp.tau_fast_backaverage));
 8007f36:	ee2c 0a07 	vmul.f32	s0, s24, s14
    agc_wdsp.fast_decay_mult = 1.0 - expf(-1.0 / (sample_rate * agc_wdsp.tau_fast_decay));
 8007f3a:	edc6 7a02 	vstr	s15, [r6, #8]
    agc_wdsp.fast_backmult = 1.0 - expf(-1.0 / (sample_rate * agc_wdsp.tau_fast_backaverage));
 8007f3e:	f004 fe5b 	bl	800cbf8 <expf>
    agc_wdsp.onemfast_backmult = 1.0 - agc_wdsp.fast_backmult;

    agc_wdsp.out_target = agc_wdsp.out_targ * (1.0 - expf(-(float32_t)agc_wdsp.n_tau)) * 0.9999;
    //  out_target = out_target * (1.0 - expf(-(float32_t)n_tau)) * 0.9999;
    agc_wdsp.min_volts = agc_wdsp.out_target / (agc_wdsp.var_gain * agc_wdsp.max_gain);
 8007f42:	ee29 7a8a 	vmul.f32	s14, s19, s20
    agc_wdsp.inv_out_target = 1.0 / agc_wdsp.out_target;

    float32_t tmpA = log10f(agc_wdsp.out_target / (agc_wdsp.max_input * agc_wdsp.var_gain * agc_wdsp.max_gain));
 8007f46:	ee69 7a8b 	vmul.f32	s15, s19, s22
    agc_wdsp.min_volts = agc_wdsp.out_target / (agc_wdsp.var_gain * agc_wdsp.max_gain);
 8007f4a:	eecb aa87 	vdiv.f32	s21, s23, s14
    float32_t tmpA = log10f(agc_wdsp.out_target / (agc_wdsp.max_input * agc_wdsp.var_gain * agc_wdsp.max_gain));
 8007f4e:	ee27 aa8a 	vmul.f32	s20, s15, s20
    agc_wdsp.fast_backmult = 1.0 - expf(-1.0 / (sample_rate * agc_wdsp.tau_fast_backaverage));
 8007f52:	ee78 8ac0 	vsub.f32	s17, s17, s0
 8007f56:	eeb0 7a40 	vmov.f32	s14, s0
    float32_t tmpA = log10f(agc_wdsp.out_target / (agc_wdsp.max_input * agc_wdsp.var_gain * agc_wdsp.max_gain));
 8007f5a:	ee8b 0a8a 	vdiv.f32	s0, s23, s20
    agc_wdsp.inv_out_target = 1.0 / agc_wdsp.out_target;
 8007f5e:	ed86 da07 	vstr	s26, [r6, #28]
    agc_wdsp.out_target = agc_wdsp.out_targ * (1.0 - expf(-(float32_t)agc_wdsp.n_tau)) * 0.9999;
 8007f62:	edc8 ba00 	vstr	s23, [r8]
    agc_wdsp.fast_backmult = 1.0 - expf(-1.0 / (sample_rate * agc_wdsp.tau_fast_backaverage));
 8007f66:	edc6 8a03 	vstr	s17, [r6, #12]
    agc_wdsp.onemfast_backmult = 1.0 - agc_wdsp.fast_backmult;
 8007f6a:	ed86 7a04 	vstr	s14, [r6, #16]
    agc_wdsp.min_volts = agc_wdsp.out_target / (agc_wdsp.var_gain * agc_wdsp.max_gain);
 8007f6e:	edc6 aa06 	vstr	s21, [r6, #24]
    float32_t tmpA = log10f(agc_wdsp.out_target / (agc_wdsp.max_input * agc_wdsp.var_gain * agc_wdsp.max_gain));
 8007f72:	f004 fe7f 	bl	800cc74 <log10f>
    if (tmpA == 0.0)
 8007f76:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8007f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f7e:	f000 8175 	beq.w	800826c <AudioAgc_SetupAgcWdsp+0x544>
 8007f82:	ee10 0a10 	vmov	r0, s0
 8007f86:	f7f8 fadf 	bl	8000548 <__aeabi_f2d>
 8007f8a:	4606      	mov	r6, r0
 8007f8c:	460f      	mov	r7, r1
    {
        tmpA = 1e-16;
    }
    agc_wdsp.slope_constant = (agc_wdsp.out_target * (1.0 - 1.0 / agc_wdsp.var_gain)) / tmpA;
 8007f8e:	ee19 0a90 	vmov	r0, s19
 8007f92:	f7f8 fad9 	bl	8000548 <__aeabi_f2d>
 8007f96:	4602      	mov	r2, r0
 8007f98:	460b      	mov	r3, r1
 8007f9a:	2000      	movs	r0, #0
 8007f9c:	4954      	ldr	r1, [pc, #336]	; (80080f0 <AudioAgc_SetupAgcWdsp+0x3c8>)
 8007f9e:	f7f8 fc55 	bl	800084c <__aeabi_ddiv>
 8007fa2:	4602      	mov	r2, r0
 8007fa4:	460b      	mov	r3, r1
 8007fa6:	2000      	movs	r0, #0
 8007fa8:	4951      	ldr	r1, [pc, #324]	; (80080f0 <AudioAgc_SetupAgcWdsp+0x3c8>)
 8007faa:	f7f8 f96d 	bl	8000288 <__aeabi_dsub>
 8007fae:	ec53 2b1f 	vmov	r2, r3, d15
 8007fb2:	f7f8 fb21 	bl	80005f8 <__aeabi_dmul>
 8007fb6:	463b      	mov	r3, r7
 8007fb8:	4632      	mov	r2, r6
 8007fba:	f7f8 fc47 	bl	800084c <__aeabi_ddiv>
 8007fbe:	f7f8 fdf3 	bl	8000ba8 <__aeabi_d2f>
 8007fc2:	4b4c      	ldr	r3, [pc, #304]	; (80080f4 <AudioAgc_SetupAgcWdsp+0x3cc>)

    agc_wdsp.inv_max_input = 1.0 / agc_wdsp.max_input;

    if (agc_wdsp.max_input > agc_wdsp.min_volts)
 8007fc4:	eef4 aacb 	vcmpe.f32	s21, s22
    agc_wdsp.slope_constant = (agc_wdsp.out_target * (1.0 - 1.0 / agc_wdsp.var_gain)) / tmpA;
 8007fc8:	f843 0b04 	str.w	r0, [r3], #4
    if (agc_wdsp.max_input > agc_wdsp.min_volts)
 8007fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    agc_wdsp.inv_max_input = 1.0 / agc_wdsp.max_input;
 8007fd0:	edc3 ca00 	vstr	s25, [r3]
    if (agc_wdsp.max_input > agc_wdsp.min_volts)
 8007fd4:	f140 8108 	bpl.w	80081e8 <AudioAgc_SetupAgcWdsp+0x4c0>
    {
        float32_t convert
        = pow10f ((float32_t)agc_wdsp_conf.hang_thresh / 20.0);
 8007fd8:	68a8      	ldr	r0, [r5, #8]
 8007fda:	ee07 0a90 	vmov	s15, r0
 8007fde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007fe2:	ee17 0a90 	vmov	r0, s15
 8007fe6:	f7f8 faaf 	bl	8000548 <__aeabi_f2d>
 8007fea:	a32f      	add	r3, pc, #188	; (adr r3, 80080a8 <AudioAgc_SetupAgcWdsp+0x380>)
 8007fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff0:	f7f8 fb02 	bl	80005f8 <__aeabi_dmul>
 8007ff4:	f7f8 fdd8 	bl	8000ba8 <__aeabi_d2f>
 8007ff8:	ee00 0a10 	vmov	s0, r0
 8007ffc:	f004 fdf6 	bl	800cbec <pow10f>
        float32_t tmpB = (convert - agc_wdsp.min_volts) / (agc_wdsp.max_input - agc_wdsp.min_volts);
 8008000:	ee7b 7a6a 	vsub.f32	s15, s22, s21
 8008004:	ee30 7a6a 	vsub.f32	s14, s0, s21
 8008008:	eec7 8a27 	vdiv.f32	s17, s14, s15
        if(tmpB < 1e-8)
 800800c:	ee18 0a90 	vmov	r0, s17
 8008010:	f7f8 fa9a 	bl	8000548 <__aeabi_f2d>
 8008014:	a328      	add	r3, pc, #160	; (adr r3, 80080b8 <AudioAgc_SetupAgcWdsp+0x390>)
 8008016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800801a:	f7f8 fd5f 	bl	8000adc <__aeabi_dcmplt>
 800801e:	2800      	cmp	r0, #0
 8008020:	f040 8128 	bne.w	8008274 <AudioAgc_SetupAgcWdsp+0x54c>
 8008024:	eeb0 0a68 	vmov.f32	s0, s17
 8008028:	f004 fe24 	bl	800cc74 <log10f>
 800802c:	ee10 0a10 	vmov	r0, s0
 8008030:	f7f8 fa8a 	bl	8000548 <__aeabi_f2d>
 8008034:	2200      	movs	r2, #0
 8008036:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800803a:	f7f8 fadd 	bl	80005f8 <__aeabi_dmul>
 800803e:	4b2c      	ldr	r3, [pc, #176]	; (80080f0 <AudioAgc_SetupAgcWdsp+0x3c8>)
 8008040:	2200      	movs	r2, #0
 8008042:	f7f8 f923 	bl	800028c <__adddf3>
 8008046:	f7f8 fdaf 	bl	8000ba8 <__aeabi_d2f>
 800804a:	4605      	mov	r5, r0
 800804c:	f7f8 fa7c 	bl	8000548 <__aeabi_f2d>
 8008050:	4b27      	ldr	r3, [pc, #156]	; (80080f0 <AudioAgc_SetupAgcWdsp+0x3c8>)
 8008052:	2200      	movs	r2, #0
 8008054:	f7f8 f918 	bl	8000288 <__aeabi_dsub>
 8008058:	4b27      	ldr	r3, [pc, #156]	; (80080f8 <AudioAgc_SetupAgcWdsp+0x3d0>)
 800805a:	2200      	movs	r2, #0
 800805c:	f7f8 facc 	bl	80005f8 <__aeabi_dmul>
 8008060:	f7f8 fda2 	bl	8000ba8 <__aeabi_d2f>
 8008064:	ee00 0a10 	vmov	s0, r0
 8008068:	f004 fdc0 	bl	800cbec <pow10f>
 800806c:	ee10 0a10 	vmov	r0, s0
 8008070:	eef0 8a40 	vmov.f32	s17, s0
 8008074:	f7f8 fa68 	bl	8000548 <__aeabi_f2d>
 8008078:	4602      	mov	r2, r0
 800807a:	460b      	mov	r3, r1
 800807c:	2000      	movs	r0, #0
 800807e:	491c      	ldr	r1, [pc, #112]	; (80080f0 <AudioAgc_SetupAgcWdsp+0x3c8>)
 8008080:	f7f8 f902 	bl	8000288 <__aeabi_dsub>
 8008084:	4602      	mov	r2, r0
 8008086:	460b      	mov	r3, r1
 8008088:	e038      	b.n	80080fc <AudioAgc_SetupAgcWdsp+0x3d4>
 800808a:	bf00      	nop
 800808c:	f3af 8000 	nop.w
 8008090:	7238e219 	.word	0x7238e219
 8008094:	3fef6927 	.word	0x3fef6927
 8008098:	47ae147c 	.word	0x47ae147c
 800809c:	3f747ae1 	.word	0x3f747ae1
 80080a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80080a4:	3f50624d 	.word	0x3f50624d
 80080a8:	9999999a 	.word	0x9999999a
 80080ac:	3fa99999 	.word	0x3fa99999
 80080b0:	9999999a 	.word	0x9999999a
 80080b4:	3fb99999 	.word	0x3fb99999
 80080b8:	e2308c3a 	.word	0xe2308c3a
 80080bc:	3e45798e 	.word	0x3e45798e
 80080c0:	200090b4 	.word	0x200090b4
 80080c4:	3a83126f 	.word	0x3a83126f
 80080c8:	461c4000 	.word	0x461c4000
 80080cc:	447a0000 	.word	0x447a0000
 80080d0:	3dcccccd 	.word	0x3dcccccd
 80080d4:	3ba3d70a 	.word	0x3ba3d70a
 80080d8:	40a00000 	.word	0x40a00000
 80080dc:	20009a74 	.word	0x20009a74
 80080e0:	3ba3d70a 	.word	0x3ba3d70a
 80080e4:	20009a2c 	.word	0x20009a2c
 80080e8:	3b83126f 	.word	0x3b83126f
 80080ec:	c479ffff 	.word	0xc479ffff
 80080f0:	3ff00000 	.word	0x3ff00000
 80080f4:	20009a50 	.word	0x20009a50
 80080f8:	40200000 	.word	0x40200000
 80080fc:	ee1a 0a90 	vmov	r0, s21
        {
            tmpB = 1e-8;
        }
        agc_wdsp.hang_thresh = 1.0 + 0.125 * log10f (tmpB);
 8008100:	6465      	str	r5, [r4, #68]	; 0x44
 8008102:	e9cd 2300 	strd	r2, r3, [sp]
 8008106:	f7f8 fa1f 	bl	8000548 <__aeabi_f2d>
 800810a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800810e:	f7f8 fa73 	bl	80005f8 <__aeabi_dmul>
 8008112:	ee2b ba28 	vmul.f32	s22, s22, s17
 8008116:	4602      	mov	r2, r0
 8008118:	460b      	mov	r3, r1
 800811a:	e06a      	b.n	80081f2 <AudioAgc_SetupAgcWdsp+0x4ca>
    agc_wdsp.tau_attack = 0.001f;
 800811c:	4872      	ldr	r0, [pc, #456]	; (80082e8 <AudioAgc_SetupAgcWdsp+0x5c0>)
    agc_wdsp.tau_fast_decay = 0.005f;
 800811e:	4973      	ldr	r1, [pc, #460]	; (80082ec <AudioAgc_SetupAgcWdsp+0x5c4>)
    agc_wdsp.tau_hang_decay = 0.100;
 8008120:	4a73      	ldr	r2, [pc, #460]	; (80082f0 <AudioAgc_SetupAgcWdsp+0x5c8>)
        agc_wdsp.sample_rate = sample_rate; // remember decimation rate for next time
 8008122:	ed83 0a00 	vstr	s0, [r3]
    agc_wdsp.out_target = 1.0f;
 8008126:	f604 188c 	addw	r8, r4, #2444	; 0x98c
    agc_wdsp.tau_decay = 0.250f;
 800812a:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
    agc_wdsp.max_gain = 10000.0f;
 800812e:	4d71      	ldr	r5, [pc, #452]	; (80082f4 <AudioAgc_SetupAgcWdsp+0x5cc>)
    agc_wdsp.tau_attack = 0.001f;
 8008130:	6120      	str	r0, [r4, #16]
    agc_wdsp.tau_fast_decay = 0.005f;
 8008132:	6361      	str	r1, [r4, #52]	; 0x34
    agc_wdsp.n_tau = 4;
 8008134:	2004      	movs	r0, #4
    agc_wdsp.out_target = 1.0f;
 8008136:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    agc_wdsp.tau_hang_decay = 0.100;
 800813a:	64a2      	str	r2, [r4, #72]	; 0x48
    agc_wdsp.tau_decay = 0.250f;
 800813c:	6163      	str	r3, [r4, #20]
    agc_wdsp.pop_ratio = 5.0f;
 800813e:	4a6e      	ldr	r2, [pc, #440]	; (80082f8 <AudioAgc_SetupAgcWdsp+0x5d0>)
    agc_wdsp.tau_fast_backaverage = 0.25f;
 8008140:	6323      	str	r3, [r4, #48]	; 0x30
    agc_wdsp.hang_thresh = 0.250f;
 8008142:	6463      	str	r3, [r4, #68]	; 0x44
    agc_wdsp.tau_hang_backmult = 0.5f;
 8008144:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
    agc_wdsp.max_gain = 10000.0f;
 8008148:	61e5      	str	r5, [r4, #28]
    agc_wdsp.n_tau = 4;
 800814a:	61a0      	str	r0, [r4, #24]
    agc_wdsp.out_target = 1.0f;
 800814c:	f8c8 1000 	str.w	r1, [r8]
    agc_wdsp.pop_ratio = 5.0f;
 8008150:	63a2      	str	r2, [r4, #56]	; 0x38
    agc_wdsp.tau_hang_backmult = 0.5f;
 8008152:	63e3      	str	r3, [r4, #60]	; 0x3c
        agc_wdsp.ring_max = 0.0;
 8008154:	4969      	ldr	r1, [pc, #420]	; (80082fc <AudioAgc_SetupAgcWdsp+0x5d4>)
        agc_wdsp.fixed_gain = 1.0;
 8008156:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
        agc_wdsp.ring_max = 0.0;
 800815a:	460d      	mov	r5, r1
 800815c:	2200      	movs	r2, #0
        agc_wdsp.fixed_gain = 1.0;
 800815e:	6260      	str	r0, [r4, #36]	; 0x24
        agc_wdsp.ring_buffsize = AGC_WDSP_RB_SIZE; //192; //96;
 8008160:	20c0      	movs	r0, #192	; 0xc0
        agc_wdsp.ring_max = 0.0;
 8008162:	f845 2b04 	str.w	r2, [r5], #4
        agc_wdsp.ring_buffsize = AGC_WDSP_RB_SIZE; //192; //96;
 8008166:	f8c4 094c 	str.w	r0, [r4, #2380]	; 0x94c
        agc_wdsp.out_index = -1; //agc_wdsp.ring_buffsize; // or -1 ??
 800816a:	f04f 30ff 	mov.w	r0, #4294967295
 800816e:	f6a1 1354 	subw	r3, r1, #2388	; 0x954
 8008172:	f8c4 0950 	str.w	r0, [r4, #2384]	; 0x950
        agc_wdsp.hang_counter = 0;
 8008176:	2000      	movs	r0, #0
 8008178:	f8c4 0968 	str.w	r0, [r4, #2408]	; 0x968
        agc_wdsp.decay_type = 0;
 800817c:	f8a4 096c 	strh.w	r0, [r4, #2412]	; 0x96c
        agc_wdsp.save_volts = 0.0;
 8008180:	608a      	str	r2, [r1, #8]
        agc_wdsp.fast_backaverage = 0.0;
 8008182:	60ca      	str	r2, [r1, #12]
        agc_wdsp.hang_backaverage = 0.0;
 8008184:	610a      	str	r2, [r1, #16]
            agc_wdsp.ring[idx * 2 + 0] = 0.0;
 8008186:	4610      	mov	r0, r2
        agc_wdsp.volts = 0.0;
 8008188:	602a      	str	r2, [r5, #0]
        agc_wdsp.decay_type = 0;
 800818a:	461c      	mov	r4, r3
 800818c:	f5a1 7155 	sub.w	r1, r1, #852	; 0x354
 8008190:	461a      	mov	r2, r3
            agc_wdsp.ring[idx * 2 + 0] = 0.0;
 8008192:	64d0      	str	r0, [r2, #76]	; 0x4c
        for(int idx = 0; idx < AGC_WDSP_RB_SIZE; idx++)
 8008194:	3208      	adds	r2, #8
 8008196:	428a      	cmp	r2, r1
 8008198:	d1fb      	bne.n	8008192 <AudioAgc_SetupAgcWdsp+0x46a>
            agc_wdsp.ring[idx * 2 + 1] = 0.0;
 800819a:	2200      	movs	r2, #0
 800819c:	651a      	str	r2, [r3, #80]	; 0x50
        for(int idx = 0; idx < AGC_WDSP_RB_SIZE; idx++)
 800819e:	3308      	adds	r3, #8
 80081a0:	428b      	cmp	r3, r1
 80081a2:	d1fb      	bne.n	800819c <AudioAgc_SetupAgcWdsp+0x474>
 80081a4:	4856      	ldr	r0, [pc, #344]	; (8008300 <AudioAgc_SetupAgcWdsp+0x5d8>)
        agc_wdsp.initialised = true;
 80081a6:	eddf ca57 	vldr	s25, [pc, #348]	; 8008304 <AudioAgc_SetupAgcWdsp+0x5dc>
 80081aa:	ed9f da57 	vldr	s26, [pc, #348]	; 8008308 <AudioAgc_SetupAgcWdsp+0x5e0>
 80081ae:	eddf ba57 	vldr	s23, [pc, #348]	; 800830c <AudioAgc_SetupAgcWdsp+0x5e4>
 80081b2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80081b6:	2100      	movs	r1, #0
 80081b8:	f001 fe00 	bl	8009dbc <memset>
 80081bc:	ed9f 6b42 	vldr	d6, [pc, #264]	; 80082c8 <AudioAgc_SetupAgcWdsp+0x5a0>
        agc_wdsp.max_input = (float32_t)ADC_CLIP_WARN_THRESHOLD; // which is 4096 at the moment
 80081c0:	eddf 7a53 	vldr	s15, [pc, #332]	; 8008310 <AudioAgc_SetupAgcWdsp+0x5e8>
        agc_wdsp.initialised = true;
 80081c4:	eeb0 fa46 	vmov.f32	s30, s12
 80081c8:	eef0 fa66 	vmov.f32	s31, s13
 80081cc:	2301      	movs	r3, #1
 80081ce:	eeb0 ba67 	vmov.f32	s22, s15
        agc_wdsp.max_input = (float32_t)ADC_CLIP_WARN_THRESHOLD; // which is 4096 at the moment
 80081d2:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
        agc_wdsp.out_targ = (float32_t)ADC_CLIP_WARN_THRESHOLD; // 4096, tweaked, so that volume when switching between the two AGCs remains equal
 80081d6:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
        agc_wdsp.initialised = true;
 80081da:	f884 39bc 	strb.w	r3, [r4, #2492]	; 0x9bc
 80081de:	f04f 09c0 	mov.w	r9, #192	; 0xc0
 80081e2:	f04f 3aff 	mov.w	sl, #4294967295
 80081e6:	e5f1      	b.n	8007dcc <AudioAgc_SetupAgcWdsp+0xa4>
    }
    else
    {
        agc_wdsp.hang_thresh = 1.0;
 80081e8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80081ec:	2200      	movs	r2, #0
 80081ee:	2300      	movs	r3, #0
 80081f0:	6461      	str	r1, [r4, #68]	; 0x44
    }

    float32_t tmpC = pow10f ((agc_wdsp.hang_thresh - 1.0) / 0.125);
    agc_wdsp.hang_level = (agc_wdsp.max_input * tmpC + (agc_wdsp.out_target /
 80081f2:	ee1b 0a10 	vmov	r0, s22
 80081f6:	e9cd 2300 	strd	r2, r3, [sp]
 80081fa:	f7f8 f9a5 	bl	8000548 <__aeabi_f2d>
 80081fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008202:	f7f8 f843 	bl	800028c <__adddf3>
            (agc_wdsp.var_gain * agc_wdsp.max_gain)) * (1.0 - tmpC)) * 0.637;
 8008206:	a332      	add	r3, pc, #200	; (adr r3, 80082d0 <AudioAgc_SetupAgcWdsp+0x5a8>)
 8008208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800820c:	f7f8 f9f4 	bl	80005f8 <__aeabi_dmul>
    agc_wdsp.hang_level = (agc_wdsp.max_input * tmpC + (agc_wdsp.out_target /
 8008210:	4c40      	ldr	r4, [pc, #256]	; (8008314 <AudioAgc_SetupAgcWdsp+0x5ec>)
            (agc_wdsp.var_gain * agc_wdsp.max_gain)) * (1.0 - tmpC)) * 0.637;
 8008212:	f7f8 fcc9 	bl	8000ba8 <__aeabi_d2f>
 8008216:	4625      	mov	r5, r4

    agc_wdsp.hang_backmult = 1.0 - expf(-1.0 / (sample_rate * agc_wdsp.tau_hang_backmult));
 8008218:	eeb8 0a00 	vmov.f32	s0, #128	; 0xc0000000 -2.0
 800821c:	ee2c 0a00 	vmul.f32	s0, s24, s0
            (agc_wdsp.var_gain * agc_wdsp.max_gain)) * (1.0 - tmpC)) * 0.637;
 8008220:	f845 0b04 	str.w	r0, [r5], #4
    agc_wdsp.hang_backmult = 1.0 - expf(-1.0 / (sample_rate * agc_wdsp.tau_hang_backmult));
 8008224:	f004 fce8 	bl	800cbf8 <expf>
 8008228:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    agc_wdsp.onemhang_backmult = 1.0 - agc_wdsp.hang_backmult;

    agc_wdsp.hang_decay_mult = 1.0 - expf(-1.0 / (sample_rate * agc_wdsp.tau_hang_decay));
 800822c:	ee29 8a08 	vmul.f32	s16, s18, s16
    agc_wdsp.hang_backmult = 1.0 - expf(-1.0 / (sample_rate * agc_wdsp.tau_hang_backmult));
 8008230:	ee38 7ac0 	vsub.f32	s14, s17, s0
 8008234:	eef0 7a40 	vmov.f32	s15, s0
    agc_wdsp.hang_decay_mult = 1.0 - expf(-1.0 / (sample_rate * agc_wdsp.tau_hang_decay));
 8008238:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800823c:	ee80 0a08 	vdiv.f32	s0, s0, s16
    agc_wdsp.onemhang_backmult = 1.0 - agc_wdsp.hang_backmult;
 8008240:	edc4 7a02 	vstr	s15, [r4, #8]
    agc_wdsp.hang_backmult = 1.0 - expf(-1.0 / (sample_rate * agc_wdsp.tau_hang_backmult));
 8008244:	ed85 7a00 	vstr	s14, [r5]
    agc_wdsp.hang_decay_mult = 1.0 - expf(-1.0 / (sample_rate * agc_wdsp.tau_hang_decay));
 8008248:	f004 fcd6 	bl	800cbf8 <expf>
 800824c:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8008250:	ed84 0a03 	vstr	s0, [r4, #12]
}
 8008254:	b002      	add	sp, #8
 8008256:	ecbd 8b10 	vpop	{d8-d15}
 800825a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        switch (agc_wdsp_conf.mode)
 800825e:	2f04      	cmp	r7, #4
 8008260:	d82f      	bhi.n	80082c2 <AudioAgc_SetupAgcWdsp+0x59a>
 8008262:	e8df f007 	tbb	[pc, r7]
 8008266:	1c15      	.short	0x1c15
 8008268:	2822      	.short	0x2822
 800826a:	0e          	.byte	0x0e
 800826b:	00          	.byte	0x00
 800826c:	a71a      	add	r7, pc, #104	; (adr r7, 80082d8 <AudioAgc_SetupAgcWdsp+0x5b0>)
 800826e:	e9d7 6700 	ldrd	r6, r7, [r7]
 8008272:	e68c      	b.n	8007f8e <AudioAgc_SetupAgcWdsp+0x266>
 8008274:	a31a      	add	r3, pc, #104	; (adr r3, 80082e0 <AudioAgc_SetupAgcWdsp+0x5b8>)
 8008276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800827a:	eddf 8a27 	vldr	s17, [pc, #156]	; 8008318 <AudioAgc_SetupAgcWdsp+0x5f0>
 800827e:	2500      	movs	r5, #0
 8008280:	e73c      	b.n	80080fc <AudioAgc_SetupAgcWdsp+0x3d4>
            agc_wdsp.hangtime = 0.100;
 8008282:	4b1b      	ldr	r3, [pc, #108]	; (80082f0 <AudioAgc_SetupAgcWdsp+0x5c8>)
            break;
 8008284:	eddf da25 	vldr	s27, [pc, #148]	; 800831c <AudioAgc_SetupAgcWdsp+0x5f4>
            agc_wdsp.hangtime = 0.100;
 8008288:	6423      	str	r3, [r4, #64]	; 0x40
        agc_wdsp_conf.switch_mode = 0;
 800828a:	2300      	movs	r3, #0
 800828c:	746b      	strb	r3, [r5, #17]
 800828e:	e5cd      	b.n	8007e2c <AudioAgc_SetupAgcWdsp+0x104>
            agc_wdsp.tau_fast_decay = 0.05;          // tau_fast_decay
 8008290:	eddf da23 	vldr	s27, [pc, #140]	; 8008320 <AudioAgc_SetupAgcWdsp+0x5f8>
            agc_wdsp.hangtime = 3.000; // hang time, if enabled
 8008294:	4b23      	ldr	r3, [pc, #140]	; (8008324 <AudioAgc_SetupAgcWdsp+0x5fc>)
            agc_wdsp.tau_fast_decay = 0.05;          // tau_fast_decay
 8008296:	edc4 da0d 	vstr	s27, [r4, #52]	; 0x34
            agc_wdsp.hangtime = 3.000; // hang time, if enabled
 800829a:	6423      	str	r3, [r4, #64]	; 0x40
            break;
 800829c:	e7f5      	b.n	800828a <AudioAgc_SetupAgcWdsp+0x562>
            agc_wdsp.hangtime = 2.000;
 800829e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
            break;
 80082a2:	eddf da1e 	vldr	s27, [pc, #120]	; 800831c <AudioAgc_SetupAgcWdsp+0x5f4>
            agc_wdsp.hangtime = 2.000;
 80082a6:	6423      	str	r3, [r4, #64]	; 0x40
            break;
 80082a8:	e7ef      	b.n	800828a <AudioAgc_SetupAgcWdsp+0x562>
            agc_wdsp.hangtime = 1.000;
 80082aa:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            break;
 80082ae:	eddf da1b 	vldr	s27, [pc, #108]	; 800831c <AudioAgc_SetupAgcWdsp+0x5f4>
            agc_wdsp.hangtime = 1.000;
 80082b2:	6423      	str	r3, [r4, #64]	; 0x40
            break;
 80082b4:	e7e9      	b.n	800828a <AudioAgc_SetupAgcWdsp+0x562>
            agc_wdsp.hangtime = 0.250;
 80082b6:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
            break;
 80082ba:	eddf da18 	vldr	s27, [pc, #96]	; 800831c <AudioAgc_SetupAgcWdsp+0x5f4>
            agc_wdsp.hangtime = 0.250;
 80082be:	6423      	str	r3, [r4, #64]	; 0x40
            break;
 80082c0:	e7e3      	b.n	800828a <AudioAgc_SetupAgcWdsp+0x562>
        switch (agc_wdsp_conf.mode)
 80082c2:	eddf da16 	vldr	s27, [pc, #88]	; 800831c <AudioAgc_SetupAgcWdsp+0x5f4>
 80082c6:	e7e0      	b.n	800828a <AudioAgc_SetupAgcWdsp+0x562>
 80082c8:	20000000 	.word	0x20000000
 80082cc:	40b2679d 	.word	0x40b2679d
 80082d0:	d2f1a9fc 	.word	0xd2f1a9fc
 80082d4:	3fe4624d 	.word	0x3fe4624d
 80082d8:	a0000000 	.word	0xa0000000
 80082dc:	3c9cd2b2 	.word	0x3c9cd2b2
 80082e0:	faa19c48 	.word	0xfaa19c48
 80082e4:	3fefffff 	.word	0x3fefffff
 80082e8:	3a83126f 	.word	0x3a83126f
 80082ec:	3ba3d70a 	.word	0x3ba3d70a
 80082f0:	3dcccccd 	.word	0x3dcccccd
 80082f4:	461c4000 	.word	0x461c4000
 80082f8:	40a00000 	.word	0x40a00000
 80082fc:	20009a08 	.word	0x20009a08
 8008300:	20009700 	.word	0x20009700
 8008304:	395a740e 	.word	0x395a740e
 8008308:	395e8d25 	.word	0x395e8d25
 800830c:	45933ce9 	.word	0x45933ce9
 8008310:	45960000 	.word	0x45960000
 8008314:	20009a58 	.word	0x20009a58
 8008318:	322bcc77 	.word	0x322bcc77
 800831c:	3ba3d70a 	.word	0x3ba3d70a
 8008320:	3d4ccccd 	.word	0x3d4ccccd
 8008324:	40400000 	.word	0x40400000

08008328 <AICinit>:

enum {AIC_16BIT = 0, AIC_20BIT = 1, AIC_24BIT = 2, AIC_32BIT = 3};
enum {AIC_MSBFIRST = 0, AIC_LSBFIRST = 1, AIC_I2S = 2, AIC_DSP = 3};
enum {AIC_48K = 0, AIC_32K = 6,  AIC_8K = 3};

void AICinit(void){
 8008328:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

	HAL_GPIO_WritePin(CODEC_CS_PORT, CODEC_CS_PIN, 1);
 800832c:	4c9d      	ldr	r4, [pc, #628]	; (80085a4 <AICinit+0x27c>)
		HAL_SPI_Transmit(&hspi3, (uint8_t*)dataToTx, 1, 10);
 800832e:	4d9e      	ldr	r5, [pc, #632]	; (80085a8 <AICinit+0x280>)
	lineInVol = newVol;
 8008330:	f8df 827c 	ldr.w	r8, [pc, #636]	; 80085b0 <AICinit+0x288>
	HPvol = newVol;
 8008334:	4e9d      	ldr	r6, [pc, #628]	; (80085ac <AICinit+0x284>)
	lineInMute = mute;
 8008336:	f8df 927c 	ldr.w	r9, [pc, #636]	; 80085b4 <AICinit+0x28c>
	HAL_GPIO_WritePin(CODEC_CS_PORT, CODEC_CS_PIN, 1);
 800833a:	2201      	movs	r2, #1
void AICinit(void){
 800833c:	b083      	sub	sp, #12
	HAL_GPIO_WritePin(CODEC_CS_PORT, CODEC_CS_PIN, 1);
 800833e:	4620      	mov	r0, r4
 8008340:	4611      	mov	r1, r2
 8008342:	f7fa fa6b 	bl	800281c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CODEC_CS_PORT, CODEC_CS_PIN, 0);
 8008346:	4620      	mov	r0, r4
	uint8_t dataToTx[2] = {txData & 0xFF, ((txData >> 8) & 0xFF)};
 8008348:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
	HAL_GPIO_WritePin(CODEC_CS_PORT, CODEC_CS_PIN, 0);
 800834c:	2200      	movs	r2, #0
 800834e:	2101      	movs	r1, #1
	uint8_t dataToTx[2] = {txData & 0xFF, ((txData >> 8) & 0xFF)};
 8008350:	f8ad 3004 	strh.w	r3, [sp, #4]
	HAL_GPIO_WritePin(CODEC_CS_PORT, CODEC_CS_PIN, 0);
 8008354:	f7fa fa62 	bl	800281c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi3, (uint8_t*)dataToTx, 1, 10);
 8008358:	a901      	add	r1, sp, #4
 800835a:	230a      	movs	r3, #10
 800835c:	4628      	mov	r0, r5
 800835e:	2201      	movs	r2, #1
 8008360:	f7fb ff9a 	bl	8004298 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CODEC_CS_PORT, CODEC_CS_PIN, 1);
 8008364:	2201      	movs	r2, #1
 8008366:	4620      	mov	r0, r4
 8008368:	4611      	mov	r1, r2
 800836a:	f7fa fa57 	bl	800281c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CODEC_CS_PORT, CODEC_CS_PIN, 0);
 800836e:	4620      	mov	r0, r4
	uint8_t dataToTx[2] = {txData & 0xFF, ((txData >> 8) & 0xFF)};
 8008370:	f640 43ff 	movw	r3, #3327	; 0xcff
	HAL_GPIO_WritePin(CODEC_CS_PORT, CODEC_CS_PIN, 0);
 8008374:	2200      	movs	r2, #0
 8008376:	2101      	movs	r1, #1
	uint8_t dataToTx[2] = {txData & 0xFF, ((txData >> 8) & 0xFF)};
 8008378:	f8ad 3004 	strh.w	r3, [sp, #4]
	HAL_GPIO_WritePin(CODEC_CS_PORT, CODEC_CS_PIN, 0);
 800837c:	f7fa fa4e 	bl	800281c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi3, (uint8_t*)dataToTx, 1, 10);
 8008380:	a901      	add	r1, sp, #4
 8008382:	230a      	movs	r3, #10
 8008384:	4628      	mov	r0, r5
 8008386:	2201      	movs	r2, #1
 8008388:	f7fb ff86 	bl	8004298 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CODEC_CS_PORT, CODEC_CS_PIN, 1);
 800838c:	2201      	movs	r2, #1
 800838e:	4620      	mov	r0, r4
 8008390:	4611      	mov	r1, r2
 8008392:	f7fa fa43 	bl	800281c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CODEC_CS_PORT, CODEC_CS_PIN, 0);
 8008396:	4620      	mov	r0, r4
	uint8_t dataToTx[2] = {txData & 0xFF, ((txData >> 8) & 0xFF)};
 8008398:	f44f 6342 	mov.w	r3, #3104	; 0xc20
	HAL_GPIO_WritePin(CODEC_CS_PORT, CODEC_CS_PIN, 0);
 800839c:	2200      	movs	r2, #0
 800839e:	2101      	movs	r1, #1
	uint8_t dataToTx[2] = {txData & 0xFF, ((txData >> 8) & 0xFF)};
 80083a0:	f8ad 3004 	strh.w	r3, [sp, #4]
	HAL_GPIO_WritePin(CODEC_CS_PORT, CODEC_CS_PIN, 0);
 80083a4:	f7fa fa3a 	bl	800281c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi3, (uint8_t*)dataToTx, 1, 10);
 80083a8:	a901      	add	r1, sp, #4
 80083aa:	230a      	movs	r3, #10
 80083ac:	4628      	mov	r0, r5
 80083ae:	2201      	movs	r2, #1
 80083b0:	f7fb ff72 	bl	8004298 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CODEC_CS_PORT, CODEC_CS_PIN, 1);
 80083b4:	2201      	movs	r2, #1
 80083b6:	4620      	mov	r0, r4
 80083b8:	4611      	mov	r1, r2
 80083ba:	f7fa fa2f 	bl	800281c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CODEC_CS_PORT, CODEC_CS_PIN, 0);
 80083be:	4620      	mov	r0, r4
	uint8_t dataToTx[2] = {txData & 0xFF, ((txData >> 8) & 0xFF)};
 80083c0:	f640 6302 	movw	r3, #3586	; 0xe02
	HAL_GPIO_WritePin(CODEC_CS_PORT, CODEC_CS_PIN, 0);
 80083c4:	2200      	movs	r2, #0
 80083c6:	2101      	movs	r1, #1
	uint8_t dataToTx[2] = {txData & 0xFF, ((txData >> 8) & 0xFF)};
 80083c8:	f8ad 3004 	strh.w	r3, [sp, #4]
	HAL_GPIO_WritePin(CODEC_CS_PORT, CODEC_CS_PIN, 0);
 80083cc:	f7fa fa26 	bl	800281c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi3, (uint8_t*)dataToTx, 1, 10);
 80083d0:	a901      	add	r1, sp, #4
 80083d2:	230a      	movs	r3, #10
 80083d4:	4628      	mov	r0, r5
 80083d6:	2201      	movs	r2, #1
 80083d8:	f7fb ff5e 	bl	8004298 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CODEC_CS_PORT, CODEC_CS_PIN, 1);
 80083dc:	2201      	movs	r2, #1
 80083de:	4620      	mov	r0, r4
 80083e0:	4611      	mov	r1, r2
 80083e2:	f7fa fa1b 	bl	800281c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CODEC_CS_PORT, CODEC_CS_PIN, 0);
 80083e6:	4620      	mov	r0, r4
	uint8_t dataToTx[2] = {txData & 0xFF, ((txData >> 8) & 0xFF)};
 80083e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	HAL_GPIO_WritePin(CODEC_CS_PORT, CODEC_CS_PIN, 0);
 80083ec:	2200      	movs	r2, #0
 80083ee:	2101      	movs	r1, #1
	uint8_t dataToTx[2] = {txData & 0xFF, ((txData >> 8) & 0xFF)};
 80083f0:	f8ad 3004 	strh.w	r3, [sp, #4]
	HAL_GPIO_WritePin(CODEC_CS_PORT, CODEC_CS_PIN, 0);
 80083f4:	f7fa fa12 	bl	800281c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi3, (uint8_t*)dataToTx, 1, 10);
 80083f8:	a901      	add	r1, sp, #4
 80083fa:	230a      	movs	r3, #10
 80083fc:	4628      	mov	r0, r5
 80083fe:	2201      	movs	r2, #1
 8008400:	f7fb ff4a 	bl	8004298 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CODEC_CS_PORT, CODEC_CS_PIN, 1);
 8008404:	2201      	movs	r2, #1
 8008406:	4620      	mov	r0, r4
 8008408:	4611      	mov	r1, r2
 800840a:	f7fa fa07 	bl	800281c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CODEC_CS_PORT, CODEC_CS_PIN, 0);
 800840e:	4620      	mov	r0, r4
	uint8_t dataToTx[2] = {txData & 0xFF, ((txData >> 8) & 0xFF)};
 8008410:	f640 13d2 	movw	r3, #2514	; 0x9d2
	HAL_GPIO_WritePin(CODEC_CS_PORT, CODEC_CS_PIN, 0);
 8008414:	2200      	movs	r2, #0
 8008416:	2101      	movs	r1, #1
	uint8_t dataToTx[2] = {txData & 0xFF, ((txData >> 8) & 0xFF)};
 8008418:	f8ad 3004 	strh.w	r3, [sp, #4]
	HAL_GPIO_WritePin(CODEC_CS_PORT, CODEC_CS_PIN, 0);
 800841c:	f7fa f9fe 	bl	800281c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi3, (uint8_t*)dataToTx, 1, 10);
 8008420:	a901      	add	r1, sp, #4
 8008422:	230a      	movs	r3, #10
 8008424:	4628      	mov	r0, r5
 8008426:	2201      	movs	r2, #1
 8008428:	f7fb ff36 	bl	8004298 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CODEC_CS_PORT, CODEC_CS_PIN, 1);
 800842c:	2201      	movs	r2, #1
 800842e:	4620      	mov	r0, r4
 8008430:	4611      	mov	r1, r2
 8008432:	f7fa f9f3 	bl	800281c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CODEC_CS_PORT, CODEC_CS_PIN, 0);
 8008436:	4620      	mov	r0, r4
	uint8_t dataToTx[2] = {txData & 0xFF, ((txData >> 8) & 0xFF)};
 8008438:	f640 2307 	movw	r3, #2567	; 0xa07
	HAL_GPIO_WritePin(CODEC_CS_PORT, CODEC_CS_PIN, 0);
 800843c:	2200      	movs	r2, #0
 800843e:	2101      	movs	r1, #1
	uint8_t dataToTx[2] = {txData & 0xFF, ((txData >> 8) & 0xFF)};
 8008440:	f8ad 3004 	strh.w	r3, [sp, #4]
	HAL_GPIO_WritePin(CODEC_CS_PORT, CODEC_CS_PIN, 0);
 8008444:	f7fa f9ea 	bl	800281c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi3, (uint8_t*)dataToTx, 1, 10);
 8008448:	a901      	add	r1, sp, #4
 800844a:	230a      	movs	r3, #10
 800844c:	4628      	mov	r0, r5
 800844e:	2201      	movs	r2, #1
 8008450:	f7fb ff22 	bl	8004298 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CODEC_CS_PORT, CODEC_CS_PIN, 1);
 8008454:	2201      	movs	r2, #1
 8008456:	4620      	mov	r0, r4
 8008458:	4611      	mov	r1, r2
 800845a:	f7fa f9df 	bl	800281c <HAL_GPIO_WritePin>
	lineInVol = newVol;
 800845e:	231c      	movs	r3, #28
	HAL_GPIO_WritePin(CODEC_CS_PORT, CODEC_CS_PIN, 0);
 8008460:	4620      	mov	r0, r4
 8008462:	2200      	movs	r2, #0
 8008464:	2101      	movs	r1, #1
	lineInVol = newVol;
 8008466:	f888 3000 	strb.w	r3, [r8]
	uint8_t dataToTx[2] = {txData & 0xFF, ((txData >> 8) & 0xFF)};
 800846a:	f8ad 3004 	strh.w	r3, [sp, #4]
	HAL_GPIO_WritePin(CODEC_CS_PORT, CODEC_CS_PIN, 0);
 800846e:	f7fa f9d5 	bl	800281c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi3, (uint8_t*)dataToTx, 1, 10);
 8008472:	a901      	add	r1, sp, #4
 8008474:	230a      	movs	r3, #10
 8008476:	4628      	mov	r0, r5
 8008478:	2201      	movs	r2, #1
 800847a:	f7fb ff0d 	bl	8004298 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CODEC_CS_PORT, CODEC_CS_PIN, 1);
 800847e:	2201      	movs	r2, #1
 8008480:	4620      	mov	r0, r4
 8008482:	4611      	mov	r1, r2
 8008484:	f7fa f9ca 	bl	800281c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CODEC_CS_PORT, CODEC_CS_PIN, 0);
 8008488:	4620      	mov	r0, r4
	uint8_t dataToTx[2] = {txData & 0xFF, ((txData >> 8) & 0xFF)};
 800848a:	f44f 7307 	mov.w	r3, #540	; 0x21c
	HAL_GPIO_WritePin(CODEC_CS_PORT, CODEC_CS_PIN, 0);
 800848e:	2200      	movs	r2, #0
 8008490:	2101      	movs	r1, #1
	uint8_t dataToTx[2] = {txData & 0xFF, ((txData >> 8) & 0xFF)};
 8008492:	f8ad 3004 	strh.w	r3, [sp, #4]
	HAL_GPIO_WritePin(CODEC_CS_PORT, CODEC_CS_PIN, 0);
 8008496:	f7fa f9c1 	bl	800281c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi3, (uint8_t*)dataToTx, 1, 10);
 800849a:	a901      	add	r1, sp, #4
 800849c:	230a      	movs	r3, #10
 800849e:	4628      	mov	r0, r5
 80084a0:	2201      	movs	r2, #1
 80084a2:	f7fb fef9 	bl	8004298 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CODEC_CS_PORT, CODEC_CS_PIN, 1);
 80084a6:	2201      	movs	r2, #1
 80084a8:	4620      	mov	r0, r4
 80084aa:	4611      	mov	r1, r2
 80084ac:	f7fa f9b6 	bl	800281c <HAL_GPIO_WritePin>
	HPvol = newVol;
 80084b0:	2777      	movs	r7, #119	; 0x77
	HAL_GPIO_WritePin(CODEC_CS_PORT, CODEC_CS_PIN, 0);
 80084b2:	4620      	mov	r0, r4
	uint8_t dataToTx[2] = {txData & 0xFF, ((txData >> 8) & 0xFF)};
 80084b4:	f240 43f7 	movw	r3, #1271	; 0x4f7
	HAL_GPIO_WritePin(CODEC_CS_PORT, CODEC_CS_PIN, 0);
 80084b8:	2200      	movs	r2, #0
 80084ba:	2101      	movs	r1, #1
	HPvol = newVol;
 80084bc:	7037      	strb	r7, [r6, #0]
	uint8_t dataToTx[2] = {txData & 0xFF, ((txData >> 8) & 0xFF)};
 80084be:	f8ad 3004 	strh.w	r3, [sp, #4]
	HAL_GPIO_WritePin(CODEC_CS_PORT, CODEC_CS_PIN, 0);
 80084c2:	f7fa f9ab 	bl	800281c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi3, (uint8_t*)dataToTx, 1, 10);
 80084c6:	a901      	add	r1, sp, #4
 80084c8:	230a      	movs	r3, #10
 80084ca:	4628      	mov	r0, r5
 80084cc:	2201      	movs	r2, #1
 80084ce:	f7fb fee3 	bl	8004298 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CODEC_CS_PORT, CODEC_CS_PIN, 1);
 80084d2:	2201      	movs	r2, #1
 80084d4:	4620      	mov	r0, r4
 80084d6:	4611      	mov	r1, r2
 80084d8:	f7fa f9a0 	bl	800281c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CODEC_CS_PORT, CODEC_CS_PIN, 0);
 80084dc:	4620      	mov	r0, r4
	uint8_t dataToTx[2] = {txData & 0xFF, ((txData >> 8) & 0xFF)};
 80084de:	f240 63f7 	movw	r3, #1783	; 0x6f7
	HAL_GPIO_WritePin(CODEC_CS_PORT, CODEC_CS_PIN, 0);
 80084e2:	2200      	movs	r2, #0
 80084e4:	2101      	movs	r1, #1
	uint8_t dataToTx[2] = {txData & 0xFF, ((txData >> 8) & 0xFF)};
 80084e6:	f8ad 3004 	strh.w	r3, [sp, #4]
	HAL_GPIO_WritePin(CODEC_CS_PORT, CODEC_CS_PIN, 0);
 80084ea:	f7fa f997 	bl	800281c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi3, (uint8_t*)dataToTx, 1, 10);
 80084ee:	a901      	add	r1, sp, #4
 80084f0:	230a      	movs	r3, #10
 80084f2:	4628      	mov	r0, r5
 80084f4:	2201      	movs	r2, #1
 80084f6:	f7fb fecf 	bl	8004298 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CODEC_CS_PORT, CODEC_CS_PIN, 1);
 80084fa:	2201      	movs	r2, #1
 80084fc:	4620      	mov	r0, r4
 80084fe:	4611      	mov	r1, r2
 8008500:	f7fa f98c 	bl	800281c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CODEC_CS_PORT, CODEC_CS_PIN, 0);
 8008504:	4620      	mov	r0, r4
	uint8_t dataToTx[2] = {txData & 0xFF, ((txData >> 8) & 0xFF)};
 8008506:	f241 2301 	movw	r3, #4609	; 0x1201
	HAL_GPIO_WritePin(CODEC_CS_PORT, CODEC_CS_PIN, 0);
 800850a:	2200      	movs	r2, #0
 800850c:	2101      	movs	r1, #1
	uint8_t dataToTx[2] = {txData & 0xFF, ((txData >> 8) & 0xFF)};
 800850e:	f8ad 3004 	strh.w	r3, [sp, #4]
	HAL_GPIO_WritePin(CODEC_CS_PORT, CODEC_CS_PIN, 0);
 8008512:	f7fa f983 	bl	800281c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi3, (uint8_t*)dataToTx, 1, 10);
 8008516:	a901      	add	r1, sp, #4
 8008518:	230a      	movs	r3, #10
 800851a:	4628      	mov	r0, r5
 800851c:	2201      	movs	r2, #1
 800851e:	f7fb febb 	bl	8004298 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CODEC_CS_PORT, CODEC_CS_PIN, 1);
 8008522:	2201      	movs	r2, #1
 8008524:	4620      	mov	r0, r4
 8008526:	4611      	mov	r1, r2
 8008528:	f7fa f978 	bl	800281c <HAL_GPIO_WritePin>
	AICtx(AIC_REG_LINEIN_L, ((lineInVol & 0x1f) | (lineInMute << 7) | (1 << 8)));
 800852c:	f898 3000 	ldrb.w	r3, [r8]
	uint8_t dataToTx[2] = {txData & 0xFF, ((txData >> 8) & 0xFF)};
 8008530:	2601      	movs	r6, #1
	lineInMute = mute;
 8008532:	2700      	movs	r7, #0
	AICtx(AIC_REG_LINEIN_L, ((lineInVol & 0x1f) | (lineInMute << 7) | (1 << 8)));
 8008534:	f003 031f 	and.w	r3, r3, #31
	HAL_GPIO_WritePin(CODEC_CS_PORT, CODEC_CS_PIN, 0);
 8008538:	4620      	mov	r0, r4
 800853a:	463a      	mov	r2, r7
 800853c:	4631      	mov	r1, r6
	uint8_t dataToTx[2] = {txData & 0xFF, ((txData >> 8) & 0xFF)};
 800853e:	f88d 3004 	strb.w	r3, [sp, #4]
	lineInMute = mute;
 8008542:	f889 7000 	strb.w	r7, [r9]
	uint8_t dataToTx[2] = {txData & 0xFF, ((txData >> 8) & 0xFF)};
 8008546:	f88d 6005 	strb.w	r6, [sp, #5]
	HAL_GPIO_WritePin(CODEC_CS_PORT, CODEC_CS_PIN, 0);
 800854a:	f7fa f967 	bl	800281c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi3, (uint8_t*)dataToTx, 1, 10);
 800854e:	4632      	mov	r2, r6
 8008550:	a901      	add	r1, sp, #4
 8008552:	230a      	movs	r3, #10
 8008554:	4628      	mov	r0, r5
 8008556:	f7fb fe9f 	bl	8004298 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CODEC_CS_PORT, CODEC_CS_PIN, 1);
 800855a:	4632      	mov	r2, r6
 800855c:	4631      	mov	r1, r6
 800855e:	4620      	mov	r0, r4
 8008560:	f7fa f95c 	bl	800281c <HAL_GPIO_WritePin>
	AICtx(AIC_REG_LINEIN_R, ((lineInVol & 0x1f) | (lineInMute << 7) | (1 << 8)));
 8008564:	f898 3000 	ldrb.w	r3, [r8]
 8008568:	f899 2000 	ldrb.w	r2, [r9]
 800856c:	f003 031f 	and.w	r3, r3, #31
 8008570:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
	HAL_GPIO_WritePin(CODEC_CS_PORT, CODEC_CS_PIN, 0);
 8008574:	4631      	mov	r1, r6
 8008576:	463a      	mov	r2, r7
 8008578:	4620      	mov	r0, r4
	uint8_t dataToTx[2] = {txData & 0xFF, ((txData >> 8) & 0xFF)};
 800857a:	2703      	movs	r7, #3
 800857c:	f88d 3004 	strb.w	r3, [sp, #4]
 8008580:	f88d 7005 	strb.w	r7, [sp, #5]
	HAL_GPIO_WritePin(CODEC_CS_PORT, CODEC_CS_PIN, 0);
 8008584:	f7fa f94a 	bl	800281c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi3, (uint8_t*)dataToTx, 1, 10);
 8008588:	a901      	add	r1, sp, #4
 800858a:	4632      	mov	r2, r6
 800858c:	230a      	movs	r3, #10
 800858e:	4628      	mov	r0, r5
 8008590:	f7fb fe82 	bl	8004298 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CODEC_CS_PORT, CODEC_CS_PIN, 1);
 8008594:	4632      	mov	r2, r6
 8008596:	4631      	mov	r1, r6
 8008598:	4620      	mov	r0, r4
 800859a:	f7fa f93f 	bl	800281c <HAL_GPIO_WritePin>
	AICsetLineVolPercent(90); // 0, 1
	AICsetHPVolPercent(90);	// 2, 3

	AICtx(AIC_REG_ACTIVATION, 1); // 9
	AICsetLineInMute(0);
}
 800859e:	b003      	add	sp, #12
 80085a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80085a4:	40020800 	.word	0x40020800
 80085a8:	20008524 	.word	0x20008524
 80085ac:	2000113c 	.word	0x2000113c
 80085b0:	2000113e 	.word	0x2000113e
 80085b4:	2000113d 	.word	0x2000113d

080085b8 <btnScan>:
//f = A;
//f();
#include <stdbool.h>


void btnScan (void) {
 80085b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ButtonStruct_t* b;
	for (uint8_t i = 0; i<BUTTON_NR; i++){
		b = &Button[i];
		if (!b->Locked){
 80085ba:	4cab      	ldr	r4, [pc, #684]	; (8008868 <btnScan+0x2b0>)
 80085bc:	78a3      	ldrb	r3, [r4, #2]
 80085be:	b95b      	cbnz	r3, 80085d8 <btnScan+0x20>
			//b->LongPress = 0;
			if ((b->State == PRESSED) && (b->OldState == PRESSED) && !b->waitForRelease){
 80085c0:	8823      	ldrh	r3, [r4, #0]
 80085c2:	f240 1201 	movw	r2, #257	; 0x101
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d06e      	beq.n	80086a8 <btnScan+0xf0>
					b->test1++;
					break;
				}
			}

			if ((b->State == PRESSED) && (b->OldState == RELEASED)){
 80085ca:	2b01      	cmp	r3, #1
 80085cc:	f000 8122 	beq.w	8008814 <btnScan+0x25c>
				b->StartTimer = HAL_GetTick();
				b->OldState = b->State;
				break;
			}

			if	((b->State == RELEASED) && (b->OldState == PRESSED)){
 80085d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085d4:	f000 8114 	beq.w	8008800 <btnScan+0x248>
		if (!b->Locked){
 80085d8:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80085dc:	b963      	cbnz	r3, 80085f8 <btnScan+0x40>
			if ((b->State == PRESSED) && (b->OldState == PRESSED) && !b->waitForRelease){
 80085de:	8c23      	ldrh	r3, [r4, #32]
 80085e0:	f240 1201 	movw	r2, #257	; 0x101
 80085e4:	4293      	cmp	r3, r2
 80085e6:	f000 8089 	beq.w	80086fc <btnScan+0x144>
			if ((b->State == PRESSED) && (b->OldState == RELEASED)){
 80085ea:	2b01      	cmp	r3, #1
 80085ec:	f000 8114 	beq.w	8008818 <btnScan+0x260>
			if	((b->State == RELEASED) && (b->OldState == PRESSED)){
 80085f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085f4:	f000 8106 	beq.w	8008804 <btnScan+0x24c>
		if (!b->Locked){
 80085f8:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 80085fc:	b96b      	cbnz	r3, 800861a <btnScan+0x62>
			if ((b->State == PRESSED) && (b->OldState == PRESSED) && !b->waitForRelease){
 80085fe:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
 8008602:	f240 1201 	movw	r2, #257	; 0x101
 8008606:	4293      	cmp	r3, r2
 8008608:	f000 8089 	beq.w	800871e <btnScan+0x166>
			if ((b->State == PRESSED) && (b->OldState == RELEASED)){
 800860c:	2b01      	cmp	r3, #1
 800860e:	f000 8107 	beq.w	8008820 <btnScan+0x268>
			if	((b->State == RELEASED) && (b->OldState == PRESSED)){
 8008612:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008616:	f000 80f7 	beq.w	8008808 <btnScan+0x250>
		if (!b->Locked){
 800861a:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
 800861e:	b96b      	cbnz	r3, 800863c <btnScan+0x84>
			if ((b->State == PRESSED) && (b->OldState == PRESSED) && !b->waitForRelease){
 8008620:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 8008624:	f240 1201 	movw	r2, #257	; 0x101
 8008628:	4293      	cmp	r3, r2
 800862a:	f000 808c 	beq.w	8008746 <btnScan+0x18e>
			if ((b->State == PRESSED) && (b->OldState == RELEASED)){
 800862e:	2b01      	cmp	r3, #1
 8008630:	f000 80f4 	beq.w	800881c <btnScan+0x264>
			if	((b->State == RELEASED) && (b->OldState == PRESSED)){
 8008634:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008638:	f000 80e8 	beq.w	800880c <btnScan+0x254>
		if (!b->Locked){
 800863c:	f894 3082 	ldrb.w	r3, [r4, #130]	; 0x82
 8008640:	b96b      	cbnz	r3, 800865e <btnScan+0xa6>
			if ((b->State == PRESSED) && (b->OldState == PRESSED) && !b->waitForRelease){
 8008642:	f8b4 3080 	ldrh.w	r3, [r4, #128]	; 0x80
 8008646:	f240 1201 	movw	r2, #257	; 0x101
 800864a:	4293      	cmp	r3, r2
 800864c:	f000 808e 	beq.w	800876c <btnScan+0x1b4>
			if ((b->State == PRESSED) && (b->OldState == RELEASED)){
 8008650:	2b01      	cmp	r3, #1
 8008652:	f000 80e7 	beq.w	8008824 <btnScan+0x26c>
			if	((b->State == RELEASED) && (b->OldState == PRESSED)){
 8008656:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800865a:	f000 80d9 	beq.w	8008810 <btnScan+0x258>
		if (!b->Locked){
 800865e:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
 8008662:	b963      	cbnz	r3, 800867e <btnScan+0xc6>
			if ((b->State == PRESSED) && (b->OldState == PRESSED) && !b->waitForRelease){
 8008664:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
 8008668:	f240 1201 	movw	r2, #257	; 0x101
 800866c:	4293      	cmp	r3, r2
 800866e:	f000 8090 	beq.w	8008792 <btnScan+0x1da>
			if ((b->State == PRESSED) && (b->OldState == RELEASED)){
 8008672:	2b01      	cmp	r3, #1
 8008674:	f000 80b3 	beq.w	80087de <btnScan+0x226>
			if	((b->State == RELEASED) && (b->OldState == PRESSED)){
 8008678:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800867c:	d023      	beq.n	80086c6 <btnScan+0x10e>
		if (!b->Locked){
 800867e:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
 8008682:	b983      	cbnz	r3, 80086a6 <btnScan+0xee>
			if ((b->State == PRESSED) && (b->OldState == PRESSED) && !b->waitForRelease){
 8008684:	f8b4 30c0 	ldrh.w	r3, [r4, #192]	; 0xc0
 8008688:	f240 1201 	movw	r2, #257	; 0x101
 800868c:	4293      	cmp	r3, r2
 800868e:	f000 8093 	beq.w	80087b8 <btnScan+0x200>
			if ((b->State == PRESSED) && (b->OldState == RELEASED)){
 8008692:	2b01      	cmp	r3, #1
		b = &Button[i];
 8008694:	bf08      	it	eq
 8008696:	2506      	moveq	r5, #6
			if ((b->State == PRESSED) && (b->OldState == RELEASED)){
 8008698:	f000 80a2 	beq.w	80087e0 <btnScan+0x228>
			if	((b->State == RELEASED) && (b->OldState == PRESSED)){
 800869c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
		b = &Button[i];
 80086a0:	bf08      	it	eq
 80086a2:	2506      	moveq	r5, #6
			if	((b->State == RELEASED) && (b->OldState == PRESSED)){
 80086a4:	d010      	beq.n	80086c8 <btnScan+0x110>
				break;
			}

		}
	}
}
 80086a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if ((b->State == PRESSED) && (b->OldState == PRESSED) && !b->waitForRelease){
 80086a8:	7d25      	ldrb	r5, [r4, #20]
 80086aa:	2d00      	cmp	r5, #0
 80086ac:	d194      	bne.n	80085d8 <btnScan+0x20>
				b->EndTimer = HAL_GetTick();
 80086ae:	f7f9 fa97 	bl	8001be0 <HAL_GetTick>
				if ((b->EndTimer - b->StartTimer) >= LONGPRESS_MS){
 80086b2:	8922      	ldrh	r2, [r4, #8]
				b->EndTimer = HAL_GetTick();
 80086b4:	8160      	strh	r0, [r4, #10]
				if ((b->EndTimer - b->StartTimer) >= LONGPRESS_MS){
 80086b6:	b283      	uxth	r3, r0
 80086b8:	1a9b      	subs	r3, r3, r2
 80086ba:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80086be:	f280 80b4 	bge.w	800882a <btnScan+0x272>
 80086c2:	8823      	ldrh	r3, [r4, #0]
 80086c4:	e781      	b.n	80085ca <btnScan+0x12>
		b = &Button[i];
 80086c6:	2505      	movs	r5, #5
				b->EndTimer = HAL_GetTick();
 80086c8:	eb04 1645 	add.w	r6, r4, r5, lsl #5
 80086cc:	f7f9 fa88 	bl	8001be0 <HAL_GetTick>
				if (!b->waitForRelease){
 80086d0:	7d37      	ldrb	r7, [r6, #20]
				b->EndTimer = HAL_GetTick();
 80086d2:	8170      	strh	r0, [r6, #10]
 80086d4:	016d      	lsls	r5, r5, #5
				if (!b->waitForRelease){
 80086d6:	2f00      	cmp	r7, #0
 80086d8:	f040 808b 	bne.w	80087f2 <btnScan+0x23a>
					if ((b->EndTimer - b->StartTimer) < LONGPRESS_MS){
 80086dc:	8932      	ldrh	r2, [r6, #8]
 80086de:	b283      	uxth	r3, r0
 80086e0:	1a9b      	subs	r3, r3, r2
 80086e2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80086e6:	f280 8087 	bge.w	80087f8 <btnScan+0x240>
						b->ProcessingPending = PRESSED;
 80086ea:	2301      	movs	r3, #1
 80086ec:	71b3      	strb	r3, [r6, #6]
						b->funcPtrShort();
 80086ee:	6933      	ldr	r3, [r6, #16]
 80086f0:	4798      	blx	r3
						b->test2++;
 80086f2:	69f3      	ldr	r3, [r6, #28]
						b->ProcessingPending = RELEASED;
 80086f4:	71b7      	strb	r7, [r6, #6]
						b->test2++;
 80086f6:	3301      	adds	r3, #1
 80086f8:	61f3      	str	r3, [r6, #28]
 80086fa:	e07d      	b.n	80087f8 <btnScan+0x240>
			if ((b->State == PRESSED) && (b->OldState == PRESSED) && !b->waitForRelease){
 80086fc:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8008700:	2b00      	cmp	r3, #0
 8008702:	f47f af79 	bne.w	80085f8 <btnScan+0x40>
				b->EndTimer = HAL_GetTick();
 8008706:	f7f9 fa6b 	bl	8001be0 <HAL_GetTick>
				if ((b->EndTimer - b->StartTimer) >= LONGPRESS_MS){
 800870a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
				b->EndTimer = HAL_GetTick();
 800870c:	8560      	strh	r0, [r4, #42]	; 0x2a
				if ((b->EndTimer - b->StartTimer) >= LONGPRESS_MS){
 800870e:	b283      	uxth	r3, r0
 8008710:	1a9b      	subs	r3, r3, r2
 8008712:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8008716:	f280 80a1 	bge.w	800885c <btnScan+0x2a4>
 800871a:	8c23      	ldrh	r3, [r4, #32]
 800871c:	e765      	b.n	80085ea <btnScan+0x32>
			if ((b->State == PRESSED) && (b->OldState == PRESSED) && !b->waitForRelease){
 800871e:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8008722:	2b00      	cmp	r3, #0
 8008724:	f47f af79 	bne.w	800861a <btnScan+0x62>
				b->EndTimer = HAL_GetTick();
 8008728:	f7f9 fa5a 	bl	8001be0 <HAL_GetTick>
				if ((b->EndTimer - b->StartTimer) >= LONGPRESS_MS){
 800872c:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
				b->EndTimer = HAL_GetTick();
 8008730:	f8a4 004a 	strh.w	r0, [r4, #74]	; 0x4a
				if ((b->EndTimer - b->StartTimer) >= LONGPRESS_MS){
 8008734:	b283      	uxth	r3, r0
 8008736:	1a9b      	subs	r3, r3, r2
 8008738:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800873c:	f280 8092 	bge.w	8008864 <btnScan+0x2ac>
 8008740:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
 8008744:	e762      	b.n	800860c <btnScan+0x54>
			if ((b->State == PRESSED) && (b->OldState == PRESSED) && !b->waitForRelease){
 8008746:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 800874a:	2b00      	cmp	r3, #0
 800874c:	f47f af76 	bne.w	800863c <btnScan+0x84>
				b->EndTimer = HAL_GetTick();
 8008750:	f7f9 fa46 	bl	8001be0 <HAL_GetTick>
				if ((b->EndTimer - b->StartTimer) >= LONGPRESS_MS){
 8008754:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
				b->EndTimer = HAL_GetTick();
 8008758:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
				if ((b->EndTimer - b->StartTimer) >= LONGPRESS_MS){
 800875c:	b283      	uxth	r3, r0
 800875e:	1a9b      	subs	r3, r3, r2
 8008760:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8008764:	da60      	bge.n	8008828 <btnScan+0x270>
 8008766:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 800876a:	e760      	b.n	800862e <btnScan+0x76>
			if ((b->State == PRESSED) && (b->OldState == PRESSED) && !b->waitForRelease){
 800876c:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 8008770:	2b00      	cmp	r3, #0
 8008772:	f47f af74 	bne.w	800865e <btnScan+0xa6>
				b->EndTimer = HAL_GetTick();
 8008776:	f7f9 fa33 	bl	8001be0 <HAL_GetTick>
				if ((b->EndTimer - b->StartTimer) >= LONGPRESS_MS){
 800877a:	f8b4 2088 	ldrh.w	r2, [r4, #136]	; 0x88
				b->EndTimer = HAL_GetTick();
 800877e:	f8a4 008a 	strh.w	r0, [r4, #138]	; 0x8a
				if ((b->EndTimer - b->StartTimer) >= LONGPRESS_MS){
 8008782:	b283      	uxth	r3, r0
 8008784:	1a9b      	subs	r3, r3, r2
 8008786:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800878a:	da63      	bge.n	8008854 <btnScan+0x29c>
 800878c:	f8b4 3080 	ldrh.w	r3, [r4, #128]	; 0x80
 8008790:	e75e      	b.n	8008650 <btnScan+0x98>
			if ((b->State == PRESSED) && (b->OldState == PRESSED) && !b->waitForRelease){
 8008792:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
 8008796:	2b00      	cmp	r3, #0
 8008798:	f47f af71 	bne.w	800867e <btnScan+0xc6>
				b->EndTimer = HAL_GetTick();
 800879c:	f7f9 fa20 	bl	8001be0 <HAL_GetTick>
				if ((b->EndTimer - b->StartTimer) >= LONGPRESS_MS){
 80087a0:	f8b4 20a8 	ldrh.w	r2, [r4, #168]	; 0xa8
				b->EndTimer = HAL_GetTick();
 80087a4:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
				if ((b->EndTimer - b->StartTimer) >= LONGPRESS_MS){
 80087a8:	b283      	uxth	r3, r0
 80087aa:	1a9b      	subs	r3, r3, r2
 80087ac:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80087b0:	da52      	bge.n	8008858 <btnScan+0x2a0>
 80087b2:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
 80087b6:	e75c      	b.n	8008672 <btnScan+0xba>
			if ((b->State == PRESSED) && (b->OldState == PRESSED) && !b->waitForRelease){
 80087b8:	f894 30d4 	ldrb.w	r3, [r4, #212]	; 0xd4
 80087bc:	2b00      	cmp	r3, #0
 80087be:	f47f af72 	bne.w	80086a6 <btnScan+0xee>
				b->EndTimer = HAL_GetTick();
 80087c2:	f7f9 fa0d 	bl	8001be0 <HAL_GetTick>
				if ((b->EndTimer - b->StartTimer) >= LONGPRESS_MS){
 80087c6:	f8b4 20c8 	ldrh.w	r2, [r4, #200]	; 0xc8
				b->EndTimer = HAL_GetTick();
 80087ca:	f8a4 00ca 	strh.w	r0, [r4, #202]	; 0xca
				if ((b->EndTimer - b->StartTimer) >= LONGPRESS_MS){
 80087ce:	b283      	uxth	r3, r0
 80087d0:	1a9b      	subs	r3, r3, r2
 80087d2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80087d6:	da43      	bge.n	8008860 <btnScan+0x2a8>
 80087d8:	f8b4 30c0 	ldrh.w	r3, [r4, #192]	; 0xc0
 80087dc:	e759      	b.n	8008692 <btnScan+0xda>
		b = &Button[i];
 80087de:	2505      	movs	r5, #5
				b->StartTimer = HAL_GetTick();
 80087e0:	f7f9 f9fe 	bl	8001be0 <HAL_GetTick>
 80087e4:	016a      	lsls	r2, r5, #5
 80087e6:	eb04 1345 	add.w	r3, r4, r5, lsl #5
				b->OldState = b->State;
 80087ea:	5ca2      	ldrb	r2, [r4, r2]
				b->StartTimer = HAL_GetTick();
 80087ec:	8118      	strh	r0, [r3, #8]
				b->OldState = b->State;
 80087ee:	705a      	strb	r2, [r3, #1]
}
 80087f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					b->waitForRelease = 0;
 80087f2:	2300      	movs	r3, #0
 80087f4:	7533      	strb	r3, [r6, #20]
					b->ProcessingPending = RELEASED;
 80087f6:	71b3      	strb	r3, [r6, #6]
				b->OldState = b->State;
 80087f8:	1963      	adds	r3, r4, r5
 80087fa:	5d62      	ldrb	r2, [r4, r5]
 80087fc:	705a      	strb	r2, [r3, #1]
}
 80087fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		b = &Button[i];
 8008800:	2500      	movs	r5, #0
 8008802:	e761      	b.n	80086c8 <btnScan+0x110>
 8008804:	2501      	movs	r5, #1
 8008806:	e75f      	b.n	80086c8 <btnScan+0x110>
 8008808:	2502      	movs	r5, #2
 800880a:	e75d      	b.n	80086c8 <btnScan+0x110>
 800880c:	2503      	movs	r5, #3
 800880e:	e75b      	b.n	80086c8 <btnScan+0x110>
 8008810:	2504      	movs	r5, #4
 8008812:	e759      	b.n	80086c8 <btnScan+0x110>
 8008814:	2500      	movs	r5, #0
 8008816:	e7e3      	b.n	80087e0 <btnScan+0x228>
 8008818:	461d      	mov	r5, r3
 800881a:	e7e1      	b.n	80087e0 <btnScan+0x228>
 800881c:	2503      	movs	r5, #3
 800881e:	e7df      	b.n	80087e0 <btnScan+0x228>
 8008820:	2502      	movs	r5, #2
 8008822:	e7dd      	b.n	80087e0 <btnScan+0x228>
 8008824:	2504      	movs	r5, #4
 8008826:	e7db      	b.n	80087e0 <btnScan+0x228>
 8008828:	2503      	movs	r5, #3
					if (b->HasLongPress)
 800882a:	eb04 1645 	add.w	r6, r4, r5, lsl #5
 800882e:	016d      	lsls	r5, r5, #5
 8008830:	78f3      	ldrb	r3, [r6, #3]
					b->OldState = b->State;
 8008832:	5d62      	ldrb	r2, [r4, r5]
 8008834:	7072      	strb	r2, [r6, #1]
					else 	b->ProcessingPending = PRESSED;
 8008836:	2b00      	cmp	r3, #0
 8008838:	bf14      	ite	ne
 800883a:	2202      	movne	r2, #2
 800883c:	2201      	moveq	r2, #1
					b->waitForRelease = 1;
 800883e:	2301      	movs	r3, #1
 8008840:	71b2      	strb	r2, [r6, #6]
 8008842:	7533      	strb	r3, [r6, #20]
					b->funcPtrLong();
 8008844:	68f3      	ldr	r3, [r6, #12]
 8008846:	4798      	blx	r3
					b->test1++;
 8008848:	69b3      	ldr	r3, [r6, #24]
					b->ProcessingPending = RELEASED;
 800884a:	2200      	movs	r2, #0
					b->test1++;
 800884c:	3301      	adds	r3, #1
					b->ProcessingPending = RELEASED;
 800884e:	71b2      	strb	r2, [r6, #6]
					b->test1++;
 8008850:	61b3      	str	r3, [r6, #24]
}
 8008852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		b = &Button[i];
 8008854:	2504      	movs	r5, #4
 8008856:	e7e8      	b.n	800882a <btnScan+0x272>
 8008858:	2505      	movs	r5, #5
 800885a:	e7e6      	b.n	800882a <btnScan+0x272>
 800885c:	2501      	movs	r5, #1
 800885e:	e7e4      	b.n	800882a <btnScan+0x272>
 8008860:	2506      	movs	r5, #6
 8008862:	e7e2      	b.n	800882a <btnScan+0x272>
 8008864:	2502      	movs	r5, #2
 8008866:	e7e0      	b.n	800882a <btnScan+0x272>
 8008868:	200001c8 	.word	0x200001c8

0800886c <btnUpdateFromADC>:
	int16_t thisBtnADC = adcCh[ADC_BUTTONS].ADCsmooth;
 800886c:	4b32      	ldr	r3, [pc, #200]	; (8008938 <btnUpdateFromADC+0xcc>)
	if (thisBtnADC < btnNoneADC){
 800886e:	4a33      	ldr	r2, [pc, #204]	; (800893c <btnUpdateFromADC+0xd0>)
 8008870:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8008874:	8812      	ldrh	r2, [r2, #0]
 8008876:	4293      	cmp	r3, r2
 8008878:	db10      	blt.n	800889c <btnUpdateFromADC+0x30>
			Button[i].State = RELEASED;
 800887a:	4b31      	ldr	r3, [pc, #196]	; (8008940 <btnUpdateFromADC+0xd4>)
 800887c:	2200      	movs	r2, #0
 800887e:	701a      	strb	r2, [r3, #0]
 8008880:	f883 2020 	strb.w	r2, [r3, #32]
 8008884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008888:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 800888c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8008890:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 8008894:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	btnScan();
 8008898:	f7ff be8e 	b.w	80085b8 <btnScan>
			if ((thisBtnADC < (btnADCvalues[i]+btnADCdelta)) && (thisBtnADC > (btnADCvalues[i]-btnADCdelta))){
 800889c:	4a29      	ldr	r2, [pc, #164]	; (8008944 <btnUpdateFromADC+0xd8>)
 800889e:	7812      	ldrb	r2, [r2, #0]
 80088a0:	4293      	cmp	r3, r2
 80088a2:	db39      	blt.n	8008918 <btnUpdateFromADC+0xac>
 80088a4:	f102 011e 	add.w	r1, r2, #30
 80088a8:	428b      	cmp	r3, r1
 80088aa:	da03      	bge.n	80088b4 <btnUpdateFromADC+0x48>
 80088ac:	f1c2 011e 	rsb	r1, r2, #30
 80088b0:	428b      	cmp	r3, r1
 80088b2:	dc36      	bgt.n	8008922 <btnUpdateFromADC+0xb6>
 80088b4:	f102 0178 	add.w	r1, r2, #120	; 0x78
 80088b8:	428b      	cmp	r3, r1
 80088ba:	da03      	bge.n	80088c4 <btnUpdateFromADC+0x58>
 80088bc:	f1c2 0178 	rsb	r1, r2, #120	; 0x78
 80088c0:	428b      	cmp	r3, r1
 80088c2:	dc30      	bgt.n	8008926 <btnUpdateFromADC+0xba>
 80088c4:	f502 7196 	add.w	r1, r2, #300	; 0x12c
 80088c8:	428b      	cmp	r3, r1
 80088ca:	da03      	bge.n	80088d4 <btnUpdateFromADC+0x68>
 80088cc:	f5c2 7196 	rsb	r1, r2, #300	; 0x12c
 80088d0:	428b      	cmp	r3, r1
 80088d2:	dc2a      	bgt.n	800892a <btnUpdateFromADC+0xbe>
 80088d4:	f202 2185 	addw	r1, r2, #645	; 0x285
 80088d8:	428b      	cmp	r3, r1
 80088da:	da04      	bge.n	80088e6 <btnUpdateFromADC+0x7a>
 80088dc:	f5c2 7121 	rsb	r1, r2, #644	; 0x284
 80088e0:	3101      	adds	r1, #1
 80088e2:	428b      	cmp	r3, r1
 80088e4:	dc23      	bgt.n	800892e <btnUpdateFromADC+0xc2>
 80088e6:	f202 41dd 	addw	r1, r2, #1245	; 0x4dd
 80088ea:	428b      	cmp	r3, r1
 80088ec:	da04      	bge.n	80088f8 <btnUpdateFromADC+0x8c>
 80088ee:	f5c2 619b 	rsb	r1, r2, #1240	; 0x4d8
 80088f2:	3105      	adds	r1, #5
 80088f4:	428b      	cmp	r3, r1
 80088f6:	dc1c      	bgt.n	8008932 <btnUpdateFromADC+0xc6>
 80088f8:	f602 1156 	addw	r1, r2, #2390	; 0x956
 80088fc:	428b      	cmp	r3, r1
 80088fe:	dacb      	bge.n	8008898 <btnUpdateFromADC+0x2c>
 8008900:	f5c2 6215 	rsb	r2, r2, #2384	; 0x950
 8008904:	3206      	adds	r2, #6
 8008906:	4293      	cmp	r3, r2
 8008908:	bfc8      	it	gt
 800890a:	2306      	movgt	r3, #6
 800890c:	ddc4      	ble.n	8008898 <btnUpdateFromADC+0x2c>
				Button[i].State = PRESSED;
 800890e:	4a0c      	ldr	r2, [pc, #48]	; (8008940 <btnUpdateFromADC+0xd4>)
 8008910:	015b      	lsls	r3, r3, #5
 8008912:	2101      	movs	r1, #1
 8008914:	54d1      	strb	r1, [r2, r3]
				break;
 8008916:	e7bf      	b.n	8008898 <btnUpdateFromADC+0x2c>
			if ((thisBtnADC < (btnADCvalues[i]+btnADCdelta)) && (thisBtnADC > (btnADCvalues[i]-btnADCdelta))){
 8008918:	4251      	negs	r1, r2
 800891a:	428b      	cmp	r3, r1
 800891c:	ddc2      	ble.n	80088a4 <btnUpdateFromADC+0x38>
 800891e:	2300      	movs	r3, #0
 8008920:	e7f5      	b.n	800890e <btnUpdateFromADC+0xa2>
 8008922:	2301      	movs	r3, #1
 8008924:	e7f3      	b.n	800890e <btnUpdateFromADC+0xa2>
 8008926:	2302      	movs	r3, #2
 8008928:	e7f1      	b.n	800890e <btnUpdateFromADC+0xa2>
 800892a:	2303      	movs	r3, #3
 800892c:	e7ef      	b.n	800890e <btnUpdateFromADC+0xa2>
 800892e:	2304      	movs	r3, #4
 8008930:	e7ed      	b.n	800890e <btnUpdateFromADC+0xa2>
 8008932:	2305      	movs	r3, #5
 8008934:	e7eb      	b.n	800890e <btnUpdateFromADC+0xa2>
 8008936:	bf00      	nop
 8008938:	20000180 	.word	0x20000180
 800893c:	200002aa 	.word	0x200002aa
 8008940:	200001c8 	.word	0x200001c8
 8008944:	200002a8 	.word	0x200002a8

08008948 <dspInit>:

DMA_HandleTypeDef hdma_spi2_tx;
I2S_HandleTypeDef hi2s2;


void dspInit(void){
 8008948:	b538      	push	{r3, r4, r5, lr}
	 DMA_HandleTypeDef *hdma = &hdma_spi2_tx;
	 hdma->Instance->CR  |= DMA_IT_HT | DMA_IT_TC;
 800894a:	4b1b      	ldr	r3, [pc, #108]	; (80089b8 <dspInit+0x70>)

	dspRingHalf = HALF_LOWER;
	dspProcDone = 0;
 800894c:	491b      	ldr	r1, [pc, #108]	; (80089bc <dspInit+0x74>)
	 hdma->Instance->CR  |= DMA_IT_HT | DMA_IT_TC;
 800894e:	681a      	ldr	r2, [r3, #0]
	dspRingHalf = HALF_LOWER;
 8008950:	4d1b      	ldr	r5, [pc, #108]	; (80089c0 <dspInit+0x78>)
	 hdma->Instance->CR  |= DMA_IT_HT | DMA_IT_TC;
 8008952:	6813      	ldr	r3, [r2, #0]
	AudioAgc_SetupAgcWdsp(48000, 0);
 8008954:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 80089c4 <dspInit+0x7c>
	 hdma->Instance->CR  |= DMA_IT_HT | DMA_IT_TC;
 8008958:	f043 0318 	orr.w	r3, r3, #24
	dspRingHalf = HALF_LOWER;
 800895c:	2400      	movs	r4, #0
void dspInit(void){
 800895e:	ed2d 8b02 	vpush	{d8}
	AudioAgc_SetupAgcWdsp(48000, 0);
 8008962:	4620      	mov	r0, r4
	 hdma->Instance->CR  |= DMA_IT_HT | DMA_IT_TC;
 8008964:	6013      	str	r3, [r2, #0]
	AudioAgc_AgcWdsp_Init();

	debugPrint("dspInit");

	genInit(GEN_F0);
	genSetFreq(GEN_F0, 3100.0);
 8008966:	ed9f 8b12 	vldr	d8, [pc, #72]	; 80089b0 <dspInit+0x68>
	dspRingHalf = HALF_LOWER;
 800896a:	702c      	strb	r4, [r5, #0]
	dspProcDone = 0;
 800896c:	700c      	strb	r4, [r1, #0]
	AudioAgc_SetupAgcWdsp(48000, 0);
 800896e:	f7ff f9db 	bl	8007d28 <AudioAgc_SetupAgcWdsp>
	AudioAgc_AgcWdsp_Init();
 8008972:	f7ff f9b5 	bl	8007ce0 <AudioAgc_AgcWdsp_Init>
	debugPrint("dspInit");
 8008976:	4814      	ldr	r0, [pc, #80]	; (80089c8 <dspInit+0x80>)
 8008978:	f000 fc74 	bl	8009264 <debugPrint>
	genInit(GEN_F0);
 800897c:	4620      	mov	r0, r4
 800897e:	f000 fbd9 	bl	8009134 <genInit>
	genSetFreq(GEN_F0, 3100.0);
 8008982:	eeb0 0a48 	vmov.f32	s0, s16
 8008986:	eef0 0a68 	vmov.f32	s1, s17
 800898a:	4620      	mov	r0, r4
 800898c:	f000 fbe4 	bl	8009158 <genSetFreq>
	genInit(GEN_F1);
 8008990:	2001      	movs	r0, #1
 8008992:	f000 fbcf 	bl	8009134 <genInit>
	genSetFreq(GEN_F1, 3100.0);
 8008996:	eeb0 0a48 	vmov.f32	s0, s16
 800899a:	eef0 0a68 	vmov.f32	s1, s17

}
 800899e:	ecbd 8b02 	vpop	{d8}
	genSetFreq(GEN_F1, 3100.0);
 80089a2:	2001      	movs	r0, #1
}
 80089a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	genSetFreq(GEN_F1, 3100.0);
 80089a8:	f000 bbd6 	b.w	8009158 <genSetFreq>
 80089ac:	f3af 8000 	nop.w
 80089b0:	00000000 	.word	0x00000000
 80089b4:	40a83800 	.word	0x40a83800
 80089b8:	20008780 	.word	0x20008780
 80089bc:	20006144 	.word	0x20006144
 80089c0:	20006145 	.word	0x20006145
 80089c4:	473b8000 	.word	0x473b8000
 80089c8:	08010280 	.word	0x08010280

080089cc <dspStartAudio>:



void dspStartAudio(void){
	HAL_I2SEx_TransmitReceive_DMA(&hi2s2, (uint16_t*)audioTxBuffer, (uint16_t*)audioRxBuffer, AUDIO_BUFFER_LEN);
 80089cc:	4a03      	ldr	r2, [pc, #12]	; (80089dc <dspStartAudio+0x10>)
 80089ce:	4904      	ldr	r1, [pc, #16]	; (80089e0 <dspStartAudio+0x14>)
 80089d0:	4804      	ldr	r0, [pc, #16]	; (80089e4 <dspStartAudio+0x18>)
 80089d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80089d6:	f7fa b87f 	b.w	8002ad8 <HAL_I2SEx_TransmitReceive_DMA>
 80089da:	bf00      	nop
 80089dc:	20004140 	.word	0x20004140
 80089e0:	20005140 	.word	0x20005140
 80089e4:	20008888 	.word	0x20008888

080089e8 <dspProc>:


float inputGain = 1.0f;
uint32_t dspEntries = 0;

void dspProc(void){
 80089e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	float F = 2700/2; // Hz
	float F2 = 8000; // Hz
	double WTincrement = 2.0 * M_PI * F * 1.0/(double)AUDIO_FREQ;
	double WTincrement2 = 2.0 * M_PI * F2 * 1.0/(double)AUDIO_FREQ;

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, dspRingHalf == HALF_LOWER);
 80089ec:	4c95      	ldr	r4, [pc, #596]	; (8008c44 <dspProc+0x25c>)
 80089ee:	4896      	ldr	r0, [pc, #600]	; (8008c48 <dspProc+0x260>)
 80089f0:	7822      	ldrb	r2, [r4, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, dspRingHalf == HALF_UPPER);

	if (!dspProcDone){
 80089f2:	4e96      	ldr	r6, [pc, #600]	; (8008c4c <dspProc+0x264>)
void dspProc(void){
 80089f4:	f5ad 5d20 	sub.w	sp, sp, #10240	; 0x2800
 80089f8:	b081      	sub	sp, #4
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, dspRingHalf == HALF_LOWER);
 80089fa:	f082 0201 	eor.w	r2, r2, #1
 80089fe:	2140      	movs	r1, #64	; 0x40
 8008a00:	f7f9 ff0c 	bl	800281c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, dspRingHalf == HALF_UPPER);
 8008a04:	7822      	ldrb	r2, [r4, #0]
 8008a06:	4890      	ldr	r0, [pc, #576]	; (8008c48 <dspProc+0x260>)
 8008a08:	2180      	movs	r1, #128	; 0x80
 8008a0a:	f7f9 ff07 	bl	800281c <HAL_GPIO_WritePin>
	if (!dspProcDone){
 8008a0e:	7832      	ldrb	r2, [r6, #0]
 8008a10:	b122      	cbz	r2, 8008a1c <dspProc+0x34>

		dspTotalTime = preciseTimerValue() - dspStartTime;
		dspProcDone = 1;
	}

}
 8008a12:	f50d 5d20 	add.w	sp, sp, #10240	; 0x2800
 8008a16:	b001      	add	sp, #4
 8008a18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		dspEntries++;
 8008a1c:	f002 09ff 	and.w	r9, r2, #255	; 0xff
 8008a20:	4a8b      	ldr	r2, [pc, #556]	; (8008c50 <dspProc+0x268>)
		dspStartTime = preciseTimerValue();
 8008a22:	4f8c      	ldr	r7, [pc, #560]	; (8008c54 <dspProc+0x26c>)
		dspEntries++;
 8008a24:	6813      	ldr	r3, [r2, #0]
	ptrToTxArray = (audioTxBuffer + (AUDIO_BUFFER_LEN/2 * (dspRingHalf == HALF_LOWER)));
 8008a26:	f8df 826c 	ldr.w	r8, [pc, #620]	; 8008c94 <dspProc+0x2ac>
		dspEntries++;
 8008a2a:	3301      	adds	r3, #1
 8008a2c:	6013      	str	r3, [r2, #0]
		dspStartTime = preciseTimerValue();
 8008a2e:	f000 fd15 	bl	800945c <preciseTimerValue>
	ptrToRxArray = (audioRxBuffer + (AUDIO_BUFFER_LEN/2 * (dspRingHalf == HALF_LOWER)));
 8008a32:	4989      	ldr	r1, [pc, #548]	; (8008c58 <dspProc+0x270>)
 8008a34:	f894 c000 	ldrb.w	ip, [r4]
	ptrToTxArray = (audioTxBuffer + (AUDIO_BUFFER_LEN/2 * (dspRingHalf == HALF_LOWER)));
 8008a38:	4a88      	ldr	r2, [pc, #544]	; (8008c5c <dspProc+0x274>)
 8008a3a:	7825      	ldrb	r5, [r4, #0]
		else 		Lbuffer[i/2] = (float)(*(ptrToRxArray+i)) / (float)(1 << DSP_BIT);
 8008a3c:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8008c60 <dspProc+0x278>
 8008a40:	4c88      	ldr	r4, [pc, #544]	; (8008c64 <dspProc+0x27c>)
		dspStartTime = preciseTimerValue();
 8008a42:	6038      	str	r0, [r7, #0]
	ptrToRxArray = (audioRxBuffer + (AUDIO_BUFFER_LEN/2 * (dspRingHalf == HALF_LOWER)));
 8008a44:	f5a1 6300 	sub.w	r3, r1, #2048	; 0x800
 8008a48:	f1bc 0f00 	cmp.w	ip, #0
 8008a4c:	bf18      	it	ne
 8008a4e:	4619      	movne	r1, r3
 8008a50:	4b85      	ldr	r3, [pc, #532]	; (8008c68 <dspProc+0x280>)
 8008a52:	6019      	str	r1, [r3, #0]
	ptrToTxArray = (audioTxBuffer + (AUDIO_BUFFER_LEN/2 * (dspRingHalf == HALF_LOWER)));
 8008a54:	f5a2 6300 	sub.w	r3, r2, #2048	; 0x800
 8008a58:	2d00      	cmp	r5, #0
 8008a5a:	bf18      	it	ne
 8008a5c:	461a      	movne	r2, r3
 8008a5e:	f8c8 2000 	str.w	r2, [r8]
	for (int i = 0; i < AUDIO_BUFFER_LEN/2; i++){
 8008a62:	4d82      	ldr	r5, [pc, #520]	; (8008c6c <dspProc+0x284>)
 8008a64:	464b      	mov	r3, r9
 8008a66:	e00d      	b.n	8008a84 <dspProc+0x9c>
		if (i%2==0) Rbuffer[i/2] = (float)(*(ptrToRxArray+i)) / (float)(1 << DSP_BIT);
 8008a68:	f931 0013 	ldrsh.w	r0, [r1, r3, lsl #1]
 8008a6c:	ee07 0a90 	vmov	s15, r0
 8008a70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	for (int i = 0; i < AUDIO_BUFFER_LEN/2; i++){
 8008a74:	3301      	adds	r3, #1
		if (i%2==0) Rbuffer[i/2] = (float)(*(ptrToRxArray+i)) / (float)(1 << DSP_BIT);
 8008a76:	ee67 7a87 	vmul.f32	s15, s15, s14
	for (int i = 0; i < AUDIO_BUFFER_LEN/2; i++){
 8008a7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
		if (i%2==0) Rbuffer[i/2] = (float)(*(ptrToRxArray+i)) / (float)(1 << DSP_BIT);
 8008a7e:	edc2 7a00 	vstr	s15, [r2]
	for (int i = 0; i < AUDIO_BUFFER_LEN/2; i++){
 8008a82:	d016      	beq.n	8008ab2 <dspProc+0xca>
		if (i%2==0) Rbuffer[i/2] = (float)(*(ptrToRxArray+i)) / (float)(1 << DSP_BIT);
 8008a84:	105a      	asrs	r2, r3, #1
 8008a86:	f013 0f01 	tst.w	r3, #1
 8008a8a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008a8e:	d0eb      	beq.n	8008a68 <dspProc+0x80>
		else 		Lbuffer[i/2] = (float)(*(ptrToRxArray+i)) / (float)(1 << DSP_BIT);
 8008a90:	f931 2013 	ldrsh.w	r2, [r1, r3, lsl #1]
 8008a94:	ee07 2a90 	vmov	s15, r2
 8008a98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008a9c:	105a      	asrs	r2, r3, #1
 8008a9e:	ee67 7a87 	vmul.f32	s15, s15, s14
	for (int i = 0; i < AUDIO_BUFFER_LEN/2; i++){
 8008aa2:	3301      	adds	r3, #1
		else 		Lbuffer[i/2] = (float)(*(ptrToRxArray+i)) / (float)(1 << DSP_BIT);
 8008aa4:	eb05 0282 	add.w	r2, r5, r2, lsl #2
	for (int i = 0; i < AUDIO_BUFFER_LEN/2; i++){
 8008aa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
		else 		Lbuffer[i/2] = (float)(*(ptrToRxArray+i)) / (float)(1 << DSP_BIT);
 8008aac:	edc2 7a00 	vstr	s15, [r2]
	for (int i = 0; i < AUDIO_BUFFER_LEN/2; i++){
 8008ab0:	d1e8      	bne.n	8008a84 <dspProc+0x9c>
		arm_scale_f32(Lbuffer, LnputGain, LbufferScaled, DSP_BLOCK_SIZE);
 8008ab2:	496f      	ldr	r1, [pc, #444]	; (8008c70 <dspProc+0x288>)
 8008ab4:	486d      	ldr	r0, [pc, #436]	; (8008c6c <dspProc+0x284>)
 8008ab6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008aba:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8008abe:	f001 f873 	bl	8009ba8 <arm_scale_f32>
		arm_scale_f32(Rbuffer, RnputGain, RbufferScaled, DSP_BLOCK_SIZE);
 8008ac2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008ac6:	496b      	ldr	r1, [pc, #428]	; (8008c74 <dspProc+0x28c>)
 8008ac8:	4866      	ldr	r0, [pc, #408]	; (8008c64 <dspProc+0x27c>)
 8008aca:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8008ace:	f001 f86b 	bl	8009ba8 <arm_scale_f32>
    for(int i = 0; i < blockSize; i += 4)
 8008ad2:	4b68      	ldr	r3, [pc, #416]	; (8008c74 <dspProc+0x28c>)
 8008ad4:	4a66      	ldr	r2, [pc, #408]	; (8008c70 <dspProc+0x288>)
 8008ad6:	f503 6c00 	add.w	ip, r3, #2048	; 0x800
        hh2 = - q_buffer[i + 2];
 8008ada:	edd3 6a02 	vldr	s13, [r3, #8]
        float32_t hh2 = - i_buffer[i + 1];
 8008ade:	ed92 6a01 	vldr	s12, [r2, #4]
        hh1 = - q_buffer[i + 3];
 8008ae2:	edd3 7a03 	vldr	s15, [r3, #12]
        hh1 = - i_buffer[i + 2];
 8008ae6:	ed92 7a02 	vldr	s14, [r2, #8]
        hh2 = i_buffer[i + 3];
 8008aea:	68d0      	ldr	r0, [r2, #12]
        i_buffer[i + 1] = hh1;
 8008aec:	6859      	ldr	r1, [r3, #4]
        q_buffer[i + 3] = hh2;
 8008aee:	60d8      	str	r0, [r3, #12]
        float32_t hh2 = - i_buffer[i + 1];
 8008af0:	eeb1 6a46 	vneg.f32	s12, s12
        hh2 = - q_buffer[i + 2];
 8008af4:	eef1 6a66 	vneg.f32	s13, s13
        q_buffer[i + 1] = hh2;
 8008af8:	ed83 6a01 	vstr	s12, [r3, #4]
        q_buffer[i + 2] = hh2;
 8008afc:	edc3 6a02 	vstr	s13, [r3, #8]
 8008b00:	3310      	adds	r3, #16
        hh1 = - i_buffer[i + 2];
 8008b02:	eeb1 7a47 	vneg.f32	s14, s14
        hh1 = - q_buffer[i + 3];
 8008b06:	eef1 7a67 	vneg.f32	s15, s15
    for(int i = 0; i < blockSize; i += 4)
 8008b0a:	4563      	cmp	r3, ip
        i_buffer[i + 1] = hh1;
 8008b0c:	6051      	str	r1, [r2, #4]
        i_buffer[i + 2] = hh1;
 8008b0e:	ed82 7a02 	vstr	s14, [r2, #8]
        i_buffer[i + 3] = hh1;
 8008b12:	edc2 7a03 	vstr	s15, [r2, #12]
    for(int i = 0; i < blockSize; i += 4)
 8008b16:	f102 0210 	add.w	r2, r2, #16
 8008b1a:	d1de      	bne.n	8008ada <dspProc+0xf2>
		arm_copy_f32(LbufferScaled, Lshifted, DSP_BLOCK_SIZE);
 8008b1c:	4956      	ldr	r1, [pc, #344]	; (8008c78 <dspProc+0x290>)
 8008b1e:	4854      	ldr	r0, [pc, #336]	; (8008c70 <dspProc+0x288>)
 8008b20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b24:	f000 fcaa 	bl	800947c <arm_copy_f32>
		arm_copy_f32(RbufferScaled, Rshifted, DSP_BLOCK_SIZE);
 8008b28:	4954      	ldr	r1, [pc, #336]	; (8008c7c <dspProc+0x294>)
 8008b2a:	4852      	ldr	r0, [pc, #328]	; (8008c74 <dspProc+0x28c>)
 8008b2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b30:	f000 fca4 	bl	800947c <arm_copy_f32>
		firTest(Lshifted, Lfiltered, DSP_BLOCK_SIZE, 0);
 8008b34:	4952      	ldr	r1, [pc, #328]	; (8008c80 <dspProc+0x298>)
 8008b36:	4850      	ldr	r0, [pc, #320]	; (8008c78 <dspProc+0x290>)
 8008b38:	2300      	movs	r3, #0
 8008b3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b3e:	f000 f933 	bl	8008da8 <firTest>
		firTest(Rshifted, Rfiltered, DSP_BLOCK_SIZE, 1);
 8008b42:	4950      	ldr	r1, [pc, #320]	; (8008c84 <dspProc+0x29c>)
 8008b44:	484d      	ldr	r0, [pc, #308]	; (8008c7c <dspProc+0x294>)
 8008b46:	2301      	movs	r3, #1
 8008b48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b4c:	f000 f92c 	bl	8008da8 <firTest>
		genGetValue(sinArr, DSP_BLOCK_SIZE, GEN_F0, GEN_SIN);
 8008b50:	2300      	movs	r3, #0
 8008b52:	461a      	mov	r2, r3
 8008b54:	4668      	mov	r0, sp
 8008b56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008b5a:	f000 fb19 	bl	8009190 <genGetValue>
		genGetValue(cosArr, DSP_BLOCK_SIZE, GEN_F1, GEN_COS);
 8008b5e:	2301      	movs	r3, #1
 8008b60:	461a      	mov	r2, r3
 8008b62:	f50d 6000 	add.w	r0, sp, #2048	; 0x800
 8008b66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008b6a:	f000 fb11 	bl	8009190 <genGetValue>
		arm_mult_f32(sinArr, Lfiltered, mix2OutSin, DSP_BLOCK_SIZE);
 8008b6e:	4944      	ldr	r1, [pc, #272]	; (8008c80 <dspProc+0x298>)
 8008b70:	4668      	mov	r0, sp
 8008b72:	f50d 5280 	add.w	r2, sp, #4096	; 0x1000
 8008b76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b7a:	f001 f84b 	bl	8009c14 <arm_mult_f32>
		arm_mult_f32(cosArr, Rfiltered, mix2OutCos, DSP_BLOCK_SIZE);
 8008b7e:	4941      	ldr	r1, [pc, #260]	; (8008c84 <dspProc+0x29c>)
 8008b80:	f50d 6000 	add.w	r0, sp, #2048	; 0x800
 8008b84:	f50d 52c0 	add.w	r2, sp, #6144	; 0x1800
 8008b88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b8c:	f001 f842 	bl	8009c14 <arm_mult_f32>
		arm_add_f32(mix2OutSin, mix2OutCos, demodResultBuffer, DSP_BLOCK_SIZE);
 8008b90:	f50d 51c0 	add.w	r1, sp, #6144	; 0x1800
 8008b94:	f50d 5080 	add.w	r0, sp, #4096	; 0x1000
 8008b98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b9c:	f50d 5200 	add.w	r2, sp, #8192	; 0x2000
 8008ba0:	f001 f87e 	bl	8009ca0 <arm_add_f32>
		for (int i = 0; i < DSP_BLOCK_SIZE; i++){
 8008ba4:	4938      	ldr	r1, [pc, #224]	; (8008c88 <dspProc+0x2a0>)
 8008ba6:	4839      	ldr	r0, [pc, #228]	; (8008c8c <dspProc+0x2a4>)
 8008ba8:	f50d 5c00 	add.w	ip, sp, #8192	; 0x2000
 8008bac:	2300      	movs	r3, #0
				LbufferOUT[i] = demodResultBuffer[i];//*3.0;
 8008bae:	eb01 0983 	add.w	r9, r1, r3, lsl #2
				RbufferOUT[i] = demodResultBuffer[i];//*3.0;
 8008bb2:	eb00 0e83 	add.w	lr, r0, r3, lsl #2
		for (int i = 0; i < DSP_BLOCK_SIZE; i++){
 8008bb6:	3301      	adds	r3, #1
				LbufferOUT[i] = demodResultBuffer[i];//*3.0;
 8008bb8:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008bbc:	f8c9 2000 	str.w	r2, [r9]
		for (int i = 0; i < DSP_BLOCK_SIZE; i++){
 8008bc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
				RbufferOUT[i] = demodResultBuffer[i];//*3.0;
 8008bc4:	f8ce 2000 	str.w	r2, [lr]
		for (int i = 0; i < DSP_BLOCK_SIZE; i++){
 8008bc8:	d1f1      	bne.n	8008bae <dspProc+0x1c6>
		else 		 *(ptrToTxArray+i) =  (int16_t)(RbufferOUT[i/2] * (float)(1 << DSP_BIT));
 8008bca:	f8d8 e000 	ldr.w	lr, [r8]
	for (int i = 0; i < AUDIO_BUFFER_HALF; i++){
 8008bce:	2300      	movs	r3, #0
		if (i%2!=0)  *(ptrToTxArray+i) =  (int16_t)(LbufferOUT[i/2] * (float)(1 << DSP_BIT));
 8008bd0:	105a      	asrs	r2, r3, #1
 8008bd2:	f013 0f01 	tst.w	r3, #1
 8008bd6:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
		else 		 *(ptrToTxArray+i) =  (int16_t)(RbufferOUT[i/2] * (float)(1 << DSP_BIT));
 8008bda:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8008bde:	bf0c      	ite	eq
 8008be0:	edd2 7a00 	vldreq	s15, [r2]
		if (i%2!=0)  *(ptrToTxArray+i) =  (int16_t)(LbufferOUT[i/2] * (float)(1 << DSP_BIT));
 8008be4:	eddc 7a00 	vldrne	s15, [ip]
		else 		 *(ptrToTxArray+i) =  (int16_t)(RbufferOUT[i/2] * (float)(1 << DSP_BIT));
 8008be8:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8008bec:	ee17 2a90 	vmov	r2, s15
 8008bf0:	f82e 2013 	strh.w	r2, [lr, r3, lsl #1]
	for (int i = 0; i < AUDIO_BUFFER_HALF; i++){
 8008bf4:	3301      	adds	r3, #1
 8008bf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008bfa:	d1e9      	bne.n	8008bd0 <dspProc+0x1e8>
	for (int i = 0; i < AUDIO_BUFFER_HALF; i++){
 8008bfc:	2200      	movs	r2, #0
		LbufferOUT[i/2] = Lbuffer[i/2];
 8008bfe:	1053      	asrs	r3, r2, #1
 8008c00:	eb05 0c83 	add.w	ip, r5, r3, lsl #2
	for (int i = 0; i < AUDIO_BUFFER_HALF; i++){
 8008c04:	3201      	adds	r2, #1
		LbufferOUT[i/2] = Lbuffer[i/2];
 8008c06:	f8dc e000 	ldr.w	lr, [ip]
 8008c0a:	eb01 0c83 	add.w	ip, r1, r3, lsl #2
	for (int i = 0; i < AUDIO_BUFFER_HALF; i++){
 8008c0e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
		LbufferOUT[i/2] = Lbuffer[i/2];
 8008c12:	f8cc e000 	str.w	lr, [ip]
		RbufferOUT[i/2] = Rbuffer[i/2];
 8008c16:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
 8008c1a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8008c1e:	f8dc c000 	ldr.w	ip, [ip]
 8008c22:	f8c3 c000 	str.w	ip, [r3]
	for (int i = 0; i < AUDIO_BUFFER_HALF; i++){
 8008c26:	d1ea      	bne.n	8008bfe <dspProc+0x216>
		dspTotalTime = preciseTimerValue() - dspStartTime;
 8008c28:	f000 fc18 	bl	800945c <preciseTimerValue>
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	4a18      	ldr	r2, [pc, #96]	; (8008c90 <dspProc+0x2a8>)
 8008c30:	1ac0      	subs	r0, r0, r3
		dspProcDone = 1;
 8008c32:	2301      	movs	r3, #1
		dspTotalTime = preciseTimerValue() - dspStartTime;
 8008c34:	6010      	str	r0, [r2, #0]
		dspProcDone = 1;
 8008c36:	7033      	strb	r3, [r6, #0]
}
 8008c38:	f50d 5d20 	add.w	sp, sp, #10240	; 0x2800
 8008c3c:	b001      	add	sp, #4
 8008c3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c42:	bf00      	nop
 8008c44:	20006145 	.word	0x20006145
 8008c48:	40020000 	.word	0x40020000
 8008c4c:	20006144 	.word	0x20006144
 8008c50:	20006140 	.word	0x20006140
 8008c54:	20006148 	.word	0x20006148
 8008c58:	20004940 	.word	0x20004940
 8008c5c:	20005940 	.word	0x20005940
 8008c60:	37800000 	.word	0x37800000
 8008c64:	2000a2e8 	.word	0x2000a2e8
 8008c68:	2000b2e8 	.word	0x2000b2e8
 8008c6c:	2000aae8 	.word	0x2000aae8
 8008c70:	20001140 	.word	0x20001140
 8008c74:	20002940 	.word	0x20002940
 8008c78:	20002140 	.word	0x20002140
 8008c7c:	20003940 	.word	0x20003940
 8008c80:	20001940 	.word	0x20001940
 8008c84:	20003140 	.word	0x20003140
 8008c88:	2000b2ec 	.word	0x2000b2ec
 8008c8c:	20009ae4 	.word	0x20009ae4
 8008c90:	2000614c 	.word	0x2000614c
 8008c94:	2000a2e4 	.word	0x2000a2e4

08008c98 <getAudioLoadPossible>:

float getAudioLoad(void){
	static float audioLoad = 0;
	float thisBufMs = ((float)dspTotalTime/10.0f); // tim7 = 10kHz -> /10 = ms
 8008c98:	4b04      	ldr	r3, [pc, #16]	; (8008cac <getAudioLoadPossible+0x14>)
	//debugPrint("%.0f %.0f", thisBufMs, AUDIO_BUFFER_HALF_MS);
	return audioLoad;
}

float getAudioLoadPossible(void){
	return (getAudioLoad()*2);
 8008c9a:	eddf 7a05 	vldr	s15, [pc, #20]	; 8008cb0 <getAudioLoadPossible+0x18>
	float thisBufMs = ((float)dspTotalTime/10.0f); // tim7 = 10kHz -> /10 = ms
 8008c9e:	ed93 0a00 	vldr	s0, [r3]
 8008ca2:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
}
 8008ca6:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008caa:	4770      	bx	lr
 8008cac:	2000614c 	.word	0x2000614c
 8008cb0:	3f6f947c 	.word	0x3f6f947c

08008cb4 <HAL_I2SEx_TxRxCpltCallback>:


void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s){
	  dspRingHalf = HALF_LOWER;
 8008cb4:	4902      	ldr	r1, [pc, #8]	; (8008cc0 <HAL_I2SEx_TxRxCpltCallback+0xc>)
	  dspProcDone = 0;
 8008cb6:	4a03      	ldr	r2, [pc, #12]	; (8008cc4 <HAL_I2SEx_TxRxCpltCallback+0x10>)
	  dspRingHalf = HALF_LOWER;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	700b      	strb	r3, [r1, #0]
	  dspProcDone = 0;
 8008cbc:	7013      	strb	r3, [r2, #0]
}
 8008cbe:	4770      	bx	lr
 8008cc0:	20006145 	.word	0x20006145
 8008cc4:	20006144 	.word	0x20006144

08008cc8 <HAL_I2SEx_TxRxHalfCpltCallback>:

void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s){
	  dspRingHalf = HALF_UPPER;
 8008cc8:	4903      	ldr	r1, [pc, #12]	; (8008cd8 <HAL_I2SEx_TxRxHalfCpltCallback+0x10>)
	  dspProcDone = 0;
 8008cca:	4b04      	ldr	r3, [pc, #16]	; (8008cdc <HAL_I2SEx_TxRxHalfCpltCallback+0x14>)
	  dspRingHalf = HALF_UPPER;
 8008ccc:	2001      	movs	r0, #1
	  dspProcDone = 0;
 8008cce:	2200      	movs	r2, #0
	  dspRingHalf = HALF_UPPER;
 8008cd0:	7008      	strb	r0, [r1, #0]
	  dspProcDone = 0;
 8008cd2:	701a      	strb	r2, [r3, #0]
}
 8008cd4:	4770      	bx	lr
 8008cd6:	bf00      	nop
 8008cd8:	20006145 	.word	0x20006145
 8008cdc:	20006144 	.word	0x20006144

08008ce0 <encInputRoutine>:
		[ENC_LOWER].port = GPIOE,
		[ENC_UPPER].divider = 2,
};


void encInputRoutine(void){
 8008ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ce2:	4c1c      	ldr	r4, [pc, #112]	; (8008d54 <encInputRoutine+0x74>)
 8008ce4:	4f1c      	ldr	r7, [pc, #112]	; (8008d58 <encInputRoutine+0x78>)
 8008ce6:	f104 0638 	add.w	r6, r4, #56	; 0x38
	//bool result = GPIOA->regs->IDR & 0x0004;

	encoder_t* e;
	for (int i=0; i<ENC_NR; i++){
		e = &encoder[i];
		bool a = HAL_GPIO_ReadPin(e->port, e->pins[0]);
 8008cea:	89e1      	ldrh	r1, [r4, #14]
 8008cec:	6960      	ldr	r0, [r4, #20]
 8008cee:	f7f9 fd8f 	bl	8002810 <HAL_GPIO_ReadPin>
		bool b = HAL_GPIO_ReadPin(e->port, e->pins[1]);
 8008cf2:	8a21      	ldrh	r1, [r4, #16]
		bool a = HAL_GPIO_ReadPin(e->port, e->pins[0]);
 8008cf4:	4605      	mov	r5, r0
		bool b = HAL_GPIO_ReadPin(e->port, e->pins[1]);
 8008cf6:	6960      	ldr	r0, [r4, #20]
 8008cf8:	f7f9 fd8a 	bl	8002810 <HAL_GPIO_ReadPin>
		bool a = HAL_GPIO_ReadPin(e->port, e->pins[0]);
 8008cfc:	1e2a      	subs	r2, r5, #0
 8008cfe:	bf18      	it	ne
 8008d00:	2201      	movne	r2, #1
		bool b = HAL_GPIO_ReadPin(e->port, e->pins[1]);
 8008d02:	1e03      	subs	r3, r0, #0
 8008d04:	bf18      	it	ne
 8008d06:	2301      	movne	r3, #1

		e->phaseState = (a << 1) | (b);
		if (e->isReversed) 	e->deltaRaw -= graydecoder[e->phaseOldState][e->phaseState];
 8008d08:	7b20      	ldrb	r0, [r4, #12]
		e->phaseState = (a << 1) | (b);
 8008d0a:	ea43 0142 	orr.w	r1, r3, r2, lsl #1
 8008d0e:	7021      	strb	r1, [r4, #0]
		if (e->isReversed) 	e->deltaRaw -= graydecoder[e->phaseOldState][e->phaseState];
 8008d10:	7862      	ldrb	r2, [r4, #1]
		else 				e->deltaRaw += graydecoder[e->phaseOldState][e->phaseState];
		e->delta = e->deltaRaw / e->divider;
		e->phaseOldState = e->phaseState;
 8008d12:	7061      	strb	r1, [r4, #1]
		e->phaseState = (a << 1) | (b);
 8008d14:	460b      	mov	r3, r1
		if (e->isReversed) 	e->deltaRaw -= graydecoder[e->phaseOldState][e->phaseState];
 8008d16:	b170      	cbz	r0, 8008d36 <encInputRoutine+0x56>
 8008d18:	eb07 0182 	add.w	r1, r7, r2, lsl #2
 8008d1c:	6862      	ldr	r2, [r4, #4]
 8008d1e:	56cb      	ldrsb	r3, [r1, r3]
		e->delta = e->deltaRaw / e->divider;
 8008d20:	7e21      	ldrb	r1, [r4, #24]
		if (e->isReversed) 	e->deltaRaw -= graydecoder[e->phaseOldState][e->phaseState];
 8008d22:	1ad3      	subs	r3, r2, r3
 8008d24:	6063      	str	r3, [r4, #4]
		e->delta = e->deltaRaw / e->divider;
 8008d26:	341c      	adds	r4, #28
 8008d28:	fb93 f3f1 	sdiv	r3, r3, r1
 8008d2c:	f844 3c14 	str.w	r3, [r4, #-20]
	for (int i=0; i<ENC_NR; i++){
 8008d30:	42a6      	cmp	r6, r4
 8008d32:	d1da      	bne.n	8008cea <encInputRoutine+0xa>
	}
}
 8008d34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		else 				e->deltaRaw += graydecoder[e->phaseOldState][e->phaseState];
 8008d36:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 8008d3a:	6861      	ldr	r1, [r4, #4]
 8008d3c:	56d3      	ldrsb	r3, [r2, r3]
		e->delta = e->deltaRaw / e->divider;
 8008d3e:	7e22      	ldrb	r2, [r4, #24]
		else 				e->deltaRaw += graydecoder[e->phaseOldState][e->phaseState];
 8008d40:	440b      	add	r3, r1
 8008d42:	6063      	str	r3, [r4, #4]
		e->delta = e->deltaRaw / e->divider;
 8008d44:	341c      	adds	r4, #28
 8008d46:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d4a:	f844 3c14 	str.w	r3, [r4, #-20]
	for (int i=0; i<ENC_NR; i++){
 8008d4e:	42b4      	cmp	r4, r6
 8008d50:	d1cb      	bne.n	8008cea <encInputRoutine+0xa>
}
 8008d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d54:	200002ac 	.word	0x200002ac
 8008d58:	08010288 	.word	0x08010288

08008d5c <fftInit>:

arm_cfft_instance_f32 fftS;


void fftInit(void) {
	arm_cfft_radix4_init_f32(&fftS, FFT_LEN, 0, 0);
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	4802      	ldr	r0, [pc, #8]	; (8008d68 <fftInit+0xc>)
 8008d60:	461a      	mov	r2, r3
 8008d62:	2180      	movs	r1, #128	; 0x80
 8008d64:	f000 bbba 	b.w	80094dc <arm_cfft_radix4_init_f32>
 8008d68:	2000c2ec 	.word	0x2000c2ec

08008d6c <firInit>:
	arm_cfft_radix4_f32(&fftS, inputF32);
	arm_cmplx_mag_f32(inputF32, mags, FFT_LEN);
	//arm_max_f32(mags, FFT_LEN, &maxValue, &maxIndex);
}

void firInit(void) {
 8008d6c:	b510      	push	{r4, lr}
 8008d6e:	b082      	sub	sp, #8
  arm_fir_init_f32(&S1, NUM_TAPS, firCoeffs32, firState1, AUDIO_BUFFER_LEN/2);
 8008d70:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008d74:	4a07      	ldr	r2, [pc, #28]	; (8008d94 <firInit+0x28>)
 8008d76:	4b08      	ldr	r3, [pc, #32]	; (8008d98 <firInit+0x2c>)
 8008d78:	4808      	ldr	r0, [pc, #32]	; (8008d9c <firInit+0x30>)
 8008d7a:	9400      	str	r4, [sp, #0]
 8008d7c:	2160      	movs	r1, #96	; 0x60
 8008d7e:	f000 fc0f 	bl	80095a0 <arm_fir_init_f32>
  arm_fir_init_f32(&S2, NUM_TAPS, firCoeffs32, firState2, AUDIO_BUFFER_LEN/2);
 8008d82:	4a04      	ldr	r2, [pc, #16]	; (8008d94 <firInit+0x28>)
 8008d84:	4b06      	ldr	r3, [pc, #24]	; (8008da0 <firInit+0x34>)
 8008d86:	4807      	ldr	r0, [pc, #28]	; (8008da4 <firInit+0x38>)
 8008d88:	9400      	str	r4, [sp, #0]
 8008d8a:	2160      	movs	r1, #96	; 0x60
 8008d8c:	f000 fc08 	bl	80095a0 <arm_fir_init_f32>
  return 0;
}
 8008d90:	b002      	add	sp, #8
 8008d92:	bd10      	pop	{r4, pc}
 8008d94:	08010298 	.word	0x08010298
 8008d98:	20006150 	.word	0x20006150
 8008d9c:	2000c2fc 	.word	0x2000c2fc
 8008da0:	200072cc 	.word	0x200072cc
 8008da4:	2000c308 	.word	0x2000c308

08008da8 <firTest>:

UART_HandleTypeDef huart1;

void firTest(float32_t  *inputF32, float32_t *outputF32, int blockSize, int i) {
  if (i==0)
 8008da8:	b143      	cbz	r3, 8008dbc <firTest+0x14>
	  arm_fir_f32(&S1, inputF32, outputF32, blockSize);
	  //convolve(&firCoeffs32, NUM_TAPS, &inputF32, &outputF32);

  if (i==1)
 8008daa:	2b01      	cmp	r3, #1
 8008dac:	d000      	beq.n	8008db0 <firTest+0x8>
	  //convolve(&firCoeffs32, NUM_TAPS, &inputF32, &outputF32);
	 arm_fir_f32(&S2, inputF32, outputF32, blockSize);

  return 0;
}
 8008dae:	4770      	bx	lr
	 arm_fir_f32(&S2, inputF32, outputF32, blockSize);
 8008db0:	4613      	mov	r3, r2
 8008db2:	460a      	mov	r2, r1
 8008db4:	4601      	mov	r1, r0
 8008db6:	4804      	ldr	r0, [pc, #16]	; (8008dc8 <firTest+0x20>)
 8008db8:	f000 bc04 	b.w	80095c4 <arm_fir_f32>
	  arm_fir_f32(&S1, inputF32, outputF32, blockSize);
 8008dbc:	4613      	mov	r3, r2
 8008dbe:	460a      	mov	r2, r1
 8008dc0:	4601      	mov	r1, r0
 8008dc2:	4802      	ldr	r0, [pc, #8]	; (8008dcc <firTest+0x24>)
 8008dc4:	f000 bbfe 	b.w	80095c4 <arm_fir_f32>
 8008dc8:	2000c308 	.word	0x2000c308
 8008dcc:	2000c2fc 	.word	0x2000c2fc

08008dd0 <gfxLabelSet>:
		gfxItems[i].pendUpd = 1;


}

void gfxLabelSet(int itemID, const char *fmt, ...){
 8008dd0:	b40e      	push	{r1, r2, r3}
	//char txtBuf[128];
	if (gfxItems[itemID].type == G_TYPE_LABEL){
 8008dd2:	235c      	movs	r3, #92	; 0x5c
void gfxLabelSet(int itemID, const char *fmt, ...){
 8008dd4:	b530      	push	{r4, r5, lr}
	if (gfxItems[itemID].type == G_TYPE_LABEL){
 8008dd6:	fb03 f000 	mul.w	r0, r3, r0
 8008dda:	4c13      	ldr	r4, [pc, #76]	; (8008e28 <gfxLabelSet+0x58>)
 8008ddc:	5823      	ldr	r3, [r4, r0]
void gfxLabelSet(int itemID, const char *fmt, ...){
 8008dde:	b082      	sub	sp, #8
	if (gfxItems[itemID].type == G_TYPE_LABEL){
 8008de0:	1825      	adds	r5, r4, r0
 8008de2:	b123      	cbz	r3, 8008dee <gfxLabelSet+0x1e>
		va_end(args);
		char nlBuf[] = {"\r\n"};
		strcat(gfxItems[itemID].text, nlBuf);
		gfxItems[itemID].pendUpd = 1;
	}
}
 8008de4:	b002      	add	sp, #8
 8008de6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008dea:	b003      	add	sp, #12
 8008dec:	4770      	bx	lr
		int rc = vsnprintf(gfxItems[itemID].text, sizeof(gfxItems[itemID].text), fmt, args);
 8008dee:	3038      	adds	r0, #56	; 0x38
 8008df0:	4404      	add	r4, r0
		va_start(args, fmt);
 8008df2:	ab06      	add	r3, sp, #24
		int rc = vsnprintf(gfxItems[itemID].text, sizeof(gfxItems[itemID].text), fmt, args);
 8008df4:	9a05      	ldr	r2, [sp, #20]
		va_start(args, fmt);
 8008df6:	9301      	str	r3, [sp, #4]
		int rc = vsnprintf(gfxItems[itemID].text, sizeof(gfxItems[itemID].text), fmt, args);
 8008df8:	4620      	mov	r0, r4
 8008dfa:	2120      	movs	r1, #32
 8008dfc:	f001 fd6e 	bl	800a8dc <vsniprintf>
		char nlBuf[] = {"\r\n"};
 8008e00:	4b0a      	ldr	r3, [pc, #40]	; (8008e2c <gfxLabelSet+0x5c>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f8ad 3000 	strh.w	r3, [sp]
		strcat(gfxItems[itemID].text, nlBuf);
 8008e08:	4620      	mov	r0, r4
		char nlBuf[] = {"\r\n"};
 8008e0a:	0c1b      	lsrs	r3, r3, #16
		strcat(gfxItems[itemID].text, nlBuf);
 8008e0c:	4669      	mov	r1, sp
		char nlBuf[] = {"\r\n"};
 8008e0e:	f88d 3002 	strb.w	r3, [sp, #2]
		strcat(gfxItems[itemID].text, nlBuf);
 8008e12:	f001 fd28 	bl	800a866 <strcat>
		gfxItems[itemID].pendUpd = 1;
 8008e16:	2301      	movs	r3, #1
 8008e18:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
}
 8008e1c:	b002      	add	sp, #8
 8008e1e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e22:	b003      	add	sp, #12
 8008e24:	4770      	bx	lr
 8008e26:	bf00      	nop
 8008e28:	200002f4 	.word	0x200002f4
 8008e2c:	08010418 	.word	0x08010418

08008e30 <gfxItemsInit>:
void gfxItemsInit(void){
 8008e30:	b530      	push	{r4, r5, lr}
	testVFOfreq = 14.123456f;
 8008e32:	4a13      	ldr	r2, [pc, #76]	; (8008e80 <gfxItemsInit+0x50>)
 8008e34:	4813      	ldr	r0, [pc, #76]	; (8008e84 <gfxItemsInit+0x54>)
	freqInt = testVFOfreq*1000000;
 8008e36:	4b14      	ldr	r3, [pc, #80]	; (8008e88 <gfxItemsInit+0x58>)
	testVFOfreq = 14.123456f;
 8008e38:	6010      	str	r0, [r2, #0]
void gfxItemsInit(void){
 8008e3a:	b083      	sub	sp, #12
	freqkHz = freqInt/1000 - freqMHz*1000;
 8008e3c:	4913      	ldr	r1, [pc, #76]	; (8008e8c <gfxItemsInit+0x5c>)
	freqHz	= freqInt - freqkHz*1000 - freqMHz*1000000;
 8008e3e:	4c14      	ldr	r4, [pc, #80]	; (8008e90 <gfxItemsInit+0x60>)
	freqInt = testVFOfreq*1000000;
 8008e40:	4814      	ldr	r0, [pc, #80]	; (8008e94 <gfxItemsInit+0x64>)
 8008e42:	6018      	str	r0, [r3, #0]
	freqMHz = freqInt/1000000;
 8008e44:	4d14      	ldr	r5, [pc, #80]	; (8008e98 <gfxItemsInit+0x68>)
	freqkHz = freqInt/1000 - freqMHz*1000;
 8008e46:	237b      	movs	r3, #123	; 0x7b
	freqHz	= freqInt - freqkHz*1000 - freqMHz*1000000;
 8008e48:	f44f 70e4 	mov.w	r0, #456	; 0x1c8
	gfxLabelSet(G_VFO_VAL, "%u.%u.%u", 	freqMHz, freqkHz, freqHz);
 8008e4c:	9000      	str	r0, [sp, #0]
	freqMHz = freqInt/1000000;
 8008e4e:	220e      	movs	r2, #14
	freqkHz = freqInt/1000 - freqMHz*1000;
 8008e50:	600b      	str	r3, [r1, #0]
	freqHz	= freqInt - freqkHz*1000 - freqMHz*1000000;
 8008e52:	6020      	str	r0, [r4, #0]
	gfxLabelSet(G_VFO_VAL, "%u.%u.%u", 	freqMHz, freqkHz, freqHz);
 8008e54:	4911      	ldr	r1, [pc, #68]	; (8008e9c <gfxItemsInit+0x6c>)
	freqMHz = freqInt/1000000;
 8008e56:	602a      	str	r2, [r5, #0]
	gfxLabelSet(G_VFO_VAL, "%u.%u.%u", 	freqMHz, freqkHz, freqHz);
 8008e58:	2002      	movs	r0, #2
 8008e5a:	f7ff ffb9 	bl	8008dd0 <gfxLabelSet>
		gfxItems[i].pendUpd = 1;
 8008e5e:	4b10      	ldr	r3, [pc, #64]	; (8008ea0 <gfxItemsInit+0x70>)
 8008e60:	2201      	movs	r2, #1
 8008e62:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8008e66:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8008e6a:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
 8008e6e:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
 8008e72:	f883 2192 	strb.w	r2, [r3, #402]	; 0x192
 8008e76:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
}
 8008e7a:	b003      	add	sp, #12
 8008e7c:	bd30      	pop	{r4, r5, pc}
 8008e7e:	bf00      	nop
 8008e80:	200002f0 	.word	0x200002f0
 8008e84:	4161f9ad 	.word	0x4161f9ad
 8008e88:	2000c318 	.word	0x2000c318
 8008e8c:	2000c314 	.word	0x2000c314
 8008e90:	2000c32c 	.word	0x2000c32c
 8008e94:	00d781c0 	.word	0x00d781c0
 8008e98:	2000c328 	.word	0x2000c328
 8008e9c:	0801041c 	.word	0x0801041c
 8008ea0:	200002f4 	.word	0x200002f4

08008ea4 <gfxBarSet>:

void gfxBarSet(int itemID, float value){
	if (gfxItems[itemID].type == G_TYPE_PROGRESSBAR){
 8008ea4:	235c      	movs	r3, #92	; 0x5c
 8008ea6:	fb03 f000 	mul.w	r0, r3, r0
 8008eaa:	4b0c      	ldr	r3, [pc, #48]	; (8008edc <gfxBarSet+0x38>)
 8008eac:	581a      	ldr	r2, [r3, r0]
 8008eae:	2a01      	cmp	r2, #1
 8008eb0:	4418      	add	r0, r3
 8008eb2:	d000      	beq.n	8008eb6 <gfxBarSet+0x12>
		if ((value < gfxItems[itemID].max)&(value > gfxItems[itemID].min)){
			gfxItems[itemID].val = value;
			gfxItems[itemID].pendUpd = 1;
		}
	}
}
 8008eb4:	4770      	bx	lr
		if ((value < gfxItems[itemID].max)&(value > gfxItems[itemID].min)){
 8008eb6:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
 8008eba:	eef4 7a40 	vcmp.f32	s15, s0
 8008ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ec2:	ddf7      	ble.n	8008eb4 <gfxBarSet+0x10>
 8008ec4:	edd0 7a0b 	vldr	s15, [r0, #44]	; 0x2c
 8008ec8:	eef4 7a40 	vcmp.f32	s15, s0
 8008ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			gfxItems[itemID].val = value;
 8008ed0:	bf44      	itt	mi
 8008ed2:	ed80 0a0a 	vstrmi	s0, [r0, #40]	; 0x28
			gfxItems[itemID].pendUpd = 1;
 8008ed6:	f880 2022 	strbmi.w	r2, [r0, #34]	; 0x22
}
 8008eda:	4770      	bx	lr
 8008edc:	200002f4 	.word	0x200002f4

08008ee0 <btnTest1>:




void btnTest1(void){
 8008ee0:	b500      	push	{lr}
	ili9341_fill_rect(_screen, COLOR_CYAN, 200, 200, 20, 20);
 8008ee2:	4907      	ldr	r1, [pc, #28]	; (8008f00 <btnTest1+0x20>)
void btnTest1(void){
 8008ee4:	b083      	sub	sp, #12
	ili9341_fill_rect(_screen, COLOR_CYAN, 200, 200, 20, 20);
 8008ee6:	23c8      	movs	r3, #200	; 0xc8
 8008ee8:	2214      	movs	r2, #20
 8008eea:	6808      	ldr	r0, [r1, #0]
 8008eec:	e9cd 2200 	strd	r2, r2, [sp]
 8008ef0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008ef4:	461a      	mov	r2, r3
 8008ef6:	f7fe fbd5 	bl	80076a4 <ili9341_fill_rect>
}
 8008efa:	b003      	add	sp, #12
 8008efc:	f85d fb04 	ldr.w	pc, [sp], #4
 8008f00:	2000c330 	.word	0x2000c330

08008f04 <btnTest2>:
void btnTest2(void){
 8008f04:	b500      	push	{lr}
	ili9341_fill_rect(_screen, COLOR_MAROON, 200, 200, 20, 20);
 8008f06:	4907      	ldr	r1, [pc, #28]	; (8008f24 <btnTest2+0x20>)
void btnTest2(void){
 8008f08:	b083      	sub	sp, #12
	ili9341_fill_rect(_screen, COLOR_MAROON, 200, 200, 20, 20);
 8008f0a:	23c8      	movs	r3, #200	; 0xc8
 8008f0c:	2214      	movs	r2, #20
 8008f0e:	6808      	ldr	r0, [r1, #0]
 8008f10:	e9cd 2200 	strd	r2, r2, [sp]
 8008f14:	f44f 41f0 	mov.w	r1, #30720	; 0x7800
 8008f18:	461a      	mov	r2, r3
 8008f1a:	f7fe fbc3 	bl	80076a4 <ili9341_fill_rect>
}
 8008f1e:	b003      	add	sp, #12
 8008f20:	f85d fb04 	ldr.w	pc, [sp], #4
 8008f24:	2000c330 	.word	0x2000c330

08008f28 <gfxItemsRedraw>:
ili9341_text_attr_t thisTextAttr;

const ili9341_font_t *fontList[3] = {&ili9341_font_7x10, &ili9341_font_11x18, &ili9341_font_16x26};


void gfxItemsRedraw(void){
 8008f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f2c:	4c64      	ldr	r4, [pc, #400]	; (80090c0 <gfxItemsRedraw+0x198>)
 8008f2e:	4e65      	ldr	r6, [pc, #404]	; (80090c4 <gfxItemsRedraw+0x19c>)
				switch(i->type){
					case G_TYPE_LABEL: {
						int txtSize = i->size.X;
						if (txtSize > 2) txtSize = 2;
						thisTextAttr.bg_color = i->backColor;
						thisTextAttr.fg_color = i->color;
 8008f30:	f8df 8194 	ldr.w	r8, [pc, #404]	; 80090c8 <gfxItemsRedraw+0x1a0>
						thisTextAttr.font = fontList[txtSize];
 8008f34:	f8df a194 	ldr.w	sl, [pc, #404]	; 80090cc <gfxItemsRedraw+0x1a4>
						thisTextAttr.origin_x = i->pos.X;
						thisTextAttr.origin_y = i->pos.Y;
						ili9341_draw_string(_screen, thisTextAttr, i->text);
 8008f38:	f8df 9194 	ldr.w	r9, [pc, #404]	; 80090d0 <gfxItemsRedraw+0x1a8>
void gfxItemsRedraw(void){
 8008f3c:	b087      	sub	sp, #28
 8008f3e:	f504 750a 	add.w	r5, r4, #552	; 0x228
 8008f42:	e002      	b.n	8008f4a <gfxItemsRedraw+0x22>
	for (int itemID=0; itemID<GFX_ITEM_NR; itemID++){
 8008f44:	345c      	adds	r4, #92	; 0x5c
 8008f46:	42ac      	cmp	r4, r5
 8008f48:	d05d      	beq.n	8009006 <gfxItemsRedraw+0xde>
		if (i->screen == gfxCurrentScreen){
 8008f4a:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8008f4e:	6833      	ldr	r3, [r6, #0]
 8008f50:	429a      	cmp	r2, r3
 8008f52:	d1f7      	bne.n	8008f44 <gfxItemsRedraw+0x1c>
			if (i->pendUpd){
 8008f54:	7923      	ldrb	r3, [r4, #4]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d0f4      	beq.n	8008f44 <gfxItemsRedraw+0x1c>
				switch(i->type){
 8008f5a:	f854 3c1e 	ldr.w	r3, [r4, #-30]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d054      	beq.n	800900c <gfxItemsRedraw+0xe4>
 8008f62:	2b01      	cmp	r3, #1
 8008f64:	d14a      	bne.n	8008ffc <gfxItemsRedraw+0xd4>
						break;}

					case G_TYPE_PROGRESSBAR:{
						int	barLenPixels = (int)((i->val/i->max)*(float)i->size.X-2);
 8008f66:	f104 0312 	add.w	r3, r4, #18
 8008f6a:	f104 0b0a 	add.w	fp, r4, #10
 8008f6e:	eddb 7a00 	vldr	s15, [fp]
 8008f72:	edd3 6a00 	vldr	s13, [r3]
 8008f76:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008f7a:	ee87 6aa6 	vdiv.f32	s12, s15, s13
						if (barLenPixels < 0) barLenPixels = 0;
						if (barLenPixels > (i->size.X-2)) barLenPixels = i->size.X-2;
 8008f7e:	1e5a      	subs	r2, r3, #1
 8008f80:	4621      	mov	r1, r4

						int	oldbarLenPixels = (int)((i->oldVal/i->max)*(float)i->size.X-2);
 8008f82:	3116      	adds	r1, #22
 8008f84:	9104      	str	r1, [sp, #16]
						int	barLenPixels = (int)((i->val/i->max)*(float)i->size.X-2);
 8008f86:	ee07 3a90 	vmov	s15, r3
 8008f8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008f8e:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 8008f92:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008f96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008f9a:	ee17 7a90 	vmov	r7, s15
						if (barLenPixels < 0) barLenPixels = 0;
 8008f9e:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
						if (barLenPixels > (i->size.X-2)) barLenPixels = i->size.X-2;
 8008fa2:	4297      	cmp	r7, r2
 8008fa4:	bfa8      	it	ge
 8008fa6:	1e9f      	subge	r7, r3, #2
						int	oldbarLenPixels = (int)((i->oldVal/i->max)*(float)i->size.X-2);
 8008fa8:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
						if (barLenPixels < 0) barLenPixels = 0;
						if (barLenPixels > (i->size.X-2)) oldbarLenPixels = i->size.X-2;
 8008fac:	42ba      	cmp	r2, r7
						int	oldbarLenPixels = (int)((i->oldVal/i->max)*(float)i->size.X-2);
 8008fae:	edd1 7a00 	vldr	s15, [r1]
						if (barLenPixels > (i->size.X-2)) oldbarLenPixels = i->size.X-2;
 8008fb2:	dd4b      	ble.n	800904c <gfxItemsRedraw+0x124>
						int	oldbarLenPixels = (int)((i->oldVal/i->max)*(float)i->size.X-2);
 8008fb4:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8008fb8:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 8008fbc:	eee7 7a06 	vfma.f32	s15, s14, s12
 8008fc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008fc4:	edcd 7a03 	vstr	s15, [sp, #12]

						ili9341_draw_rect(_screen, COLOR_WHITE, i->pos.X, 	i->pos.Y,	i->size.X, 		i->size.Y);
 8008fc8:	f834 2c0e 	ldrh.w	r2, [r4, #-14]
 8008fcc:	f8d9 0000 	ldr.w	r0, [r9]
 8008fd0:	b29b      	uxth	r3, r3
 8008fd2:	e9cd 3200 	strd	r3, r2, [sp]
 8008fd6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008fda:	f934 3c16 	ldrsh.w	r3, [r4, #-22]
 8008fde:	f934 2c1a 	ldrsh.w	r2, [r4, #-26]
 8008fe2:	f7fe fcdb 	bl	800799c <ili9341_draw_rect>
						if (barLenPixels != oldbarLenPixels){
 8008fe6:	9b03      	ldr	r3, [sp, #12]
 8008fe8:	42bb      	cmp	r3, r7
 8008fea:	d003      	beq.n	8008ff4 <gfxItemsRedraw+0xcc>
							if (barLenPixels > oldbarLenPixels){
 8008fec:	db4a      	blt.n	8009084 <gfxItemsRedraw+0x15c>
															i->pos.X + 1 + oldbarLenPixels,
															i->pos.Y + 1,
															(barLenPixels - oldbarLenPixels),
															i->size.Y-2);
							}
							if (barLenPixels < oldbarLenPixels){
 8008fee:	9b03      	ldr	r3, [sp, #12]
 8008ff0:	42bb      	cmp	r3, r7
 8008ff2:	dc2e      	bgt.n	8009052 <gfxItemsRedraw+0x12a>
															(oldbarLenPixels - barLenPixels),
															i->size.Y-2);
							}
						}

						i->oldVal = i->val;
 8008ff4:	9a04      	ldr	r2, [sp, #16]
 8008ff6:	f8db 3000 	ldr.w	r3, [fp]
 8008ffa:	6013      	str	r3, [r2, #0]

						break;
					}
					default: break;
				}
				gfxItems[itemID].pendUpd = 0;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	7123      	strb	r3, [r4, #4]
	for (int itemID=0; itemID<GFX_ITEM_NR; itemID++){
 8009000:	345c      	adds	r4, #92	; 0x5c
 8009002:	42ac      	cmp	r4, r5
 8009004:	d1a1      	bne.n	8008f4a <gfxItemsRedraw+0x22>
			}
		}
	}
}
 8009006:	b007      	add	sp, #28
 8009008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						int txtSize = i->size.X;
 800900c:	f854 3c12 	ldr.w	r3, [r4, #-18]
						thisTextAttr.fg_color = i->color;
 8009010:	6820      	ldr	r0, [r4, #0]
						thisTextAttr.origin_x = i->pos.X;
 8009012:	f854 1c1a 	ldr.w	r1, [r4, #-26]
						thisTextAttr.origin_y = i->pos.Y;
 8009016:	f854 2c16 	ldr.w	r2, [r4, #-22]
						thisTextAttr.fg_color = i->color;
 800901a:	f8c8 0004 	str.w	r0, [r8, #4]
						thisTextAttr.font = fontList[txtSize];
 800901e:	2b02      	cmp	r3, #2
 8009020:	bfa8      	it	ge
 8009022:	2302      	movge	r3, #2
						thisTextAttr.origin_x = i->pos.X;
 8009024:	f8a8 1008 	strh.w	r1, [r8, #8]
						thisTextAttr.font = fontList[txtSize];
 8009028:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 800902c:	f8c8 3000 	str.w	r3, [r8]
						thisTextAttr.origin_y = i->pos.Y;
 8009030:	f8a8 200a 	strh.w	r2, [r8, #10]
						ili9341_draw_string(_screen, thisTextAttr, i->text);
 8009034:	f104 001a 	add.w	r0, r4, #26
 8009038:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 800903c:	9000      	str	r0, [sp, #0]
 800903e:	f8d9 0000 	ldr.w	r0, [r9]
 8009042:	f7fe fdc1 	bl	8007bc8 <ili9341_draw_string>
				gfxItems[itemID].pendUpd = 0;
 8009046:	2300      	movs	r3, #0
 8009048:	7123      	strb	r3, [r4, #4]
 800904a:	e7d9      	b.n	8009000 <gfxItemsRedraw+0xd8>
						if (barLenPixels > (i->size.X-2)) oldbarLenPixels = i->size.X-2;
 800904c:	1e9a      	subs	r2, r3, #2
 800904e:	9203      	str	r2, [sp, #12]
 8009050:	e7ba      	b.n	8008fc8 <gfxItemsRedraw+0xa0>
															i->pos.X + 1 + barLenPixels,
 8009052:	f854 1c1a 	ldr.w	r1, [r4, #-26]
															i->pos.Y + 1,
 8009056:	f854 2c16 	ldr.w	r2, [r4, #-22]
 800905a:	4618      	mov	r0, r3
								ili9341_fill_rect(_screen, 	COLOR_BLACK,
 800905c:	f854 3c0e 	ldr.w	r3, [r4, #-14]
															i->pos.X + 1 + barLenPixels,
 8009060:	b2bf      	uxth	r7, r7
								ili9341_fill_rect(_screen, 	COLOR_BLACK,
 8009062:	1bc0      	subs	r0, r0, r7
															i->pos.X + 1 + barLenPixels,
 8009064:	3101      	adds	r1, #1
								ili9341_fill_rect(_screen, 	COLOR_BLACK,
 8009066:	3b02      	subs	r3, #2
															i->pos.X + 1 + barLenPixels,
 8009068:	440f      	add	r7, r1
								ili9341_fill_rect(_screen, 	COLOR_BLACK,
 800906a:	b280      	uxth	r0, r0
															i->pos.Y + 1,
 800906c:	1c51      	adds	r1, r2, #1
								ili9341_fill_rect(_screen, 	COLOR_BLACK,
 800906e:	b29b      	uxth	r3, r3
 8009070:	9000      	str	r0, [sp, #0]
 8009072:	9301      	str	r3, [sp, #4]
 8009074:	f8d9 0000 	ldr.w	r0, [r9]
 8009078:	b20b      	sxth	r3, r1
 800907a:	b23a      	sxth	r2, r7
 800907c:	2100      	movs	r1, #0
 800907e:	f7fe fb11 	bl	80076a4 <ili9341_fill_rect>
 8009082:	e7b7      	b.n	8008ff4 <gfxItemsRedraw+0xcc>
								ili9341_fill_rect(_screen, 	i->color,
 8009084:	f854 2c0e 	ldr.w	r2, [r4, #-14]
 8009088:	9205      	str	r2, [sp, #20]
															i->pos.X + 1 + oldbarLenPixels,
 800908a:	f854 2c1a 	ldr.w	r2, [r4, #-26]
 800908e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
															i->pos.Y + 1,
 8009092:	f854 0c16 	ldr.w	r0, [r4, #-22]
								ili9341_fill_rect(_screen, 	i->color,
 8009096:	8821      	ldrh	r1, [r4, #0]
															i->pos.X + 1 + oldbarLenPixels,
 8009098:	f102 0c01 	add.w	ip, r2, #1
								ili9341_fill_rect(_screen, 	i->color,
 800909c:	9a05      	ldr	r2, [sp, #20]
															i->pos.X + 1 + oldbarLenPixels,
 800909e:	449c      	add	ip, r3
								ili9341_fill_rect(_screen, 	i->color,
 80090a0:	3a02      	subs	r2, #2
 80090a2:	1afb      	subs	r3, r7, r3
 80090a4:	fa1f fe82 	uxth.w	lr, r2
 80090a8:	b29b      	uxth	r3, r3
															i->pos.Y + 1,
 80090aa:	3001      	adds	r0, #1
								ili9341_fill_rect(_screen, 	i->color,
 80090ac:	e9cd 3e00 	strd	r3, lr, [sp]
 80090b0:	fa0f f28c 	sxth.w	r2, ip
 80090b4:	b203      	sxth	r3, r0
 80090b6:	f8d9 0000 	ldr.w	r0, [r9]
 80090ba:	f7fe faf3 	bl	80076a4 <ili9341_fill_rect>
 80090be:	e796      	b.n	8008fee <gfxItemsRedraw+0xc6>
 80090c0:	20000312 	.word	0x20000312
 80090c4:	20008448 	.word	0x20008448
 80090c8:	2000c31c 	.word	0x2000c31c
 80090cc:	200002e4 	.word	0x200002e4
 80090d0:	2000c330 	.word	0x2000c330

080090d4 <initHardware>:
#include "hw.h"




void initHardware(void){
 80090d4:	b508      	push	{r3, lr}
	LCDinit();
 80090d6:	f000 f805 	bl	80090e4 <LCDinit>
	AICinit();
}
 80090da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	AICinit();
 80090de:	f7ff b923 	b.w	8008328 <AICinit>
 80090e2:	bf00      	nop

080090e4 <LCDinit>:
#include "lcd.h"

ili9341_t *_screen;
ili9341_t *screen(void) {return _screen;}

void LCDinit(void){
 80090e4:	b530      	push	{r4, r5, lr}
  _screen = ili9341_new(
 80090e6:	4b0f      	ldr	r3, [pc, #60]	; (8009124 <LCDinit+0x40>)
void LCDinit(void){
 80090e8:	b08b      	sub	sp, #44	; 0x2c
  _screen = ili9341_new(
 80090ea:	2200      	movs	r2, #0
 80090ec:	2001      	movs	r0, #1
 80090ee:	2540      	movs	r5, #64	; 0x40
 80090f0:	f44f 7480 	mov.w	r4, #256	; 0x100
 80090f4:	e9cd 2207 	strd	r2, r2, [sp, #28]
 80090f8:	e9cd 2205 	strd	r2, r2, [sp, #20]
 80090fc:	9301      	str	r3, [sp, #4]
 80090fe:	4619      	mov	r1, r3
 8009100:	9009      	str	r0, [sp, #36]	; 0x24
 8009102:	9003      	str	r0, [sp, #12]
 8009104:	9204      	str	r2, [sp, #16]
 8009106:	9502      	str	r5, [sp, #8]
 8009108:	9400      	str	r4, [sp, #0]
 800910a:	2280      	movs	r2, #128	; 0x80
 800910c:	4806      	ldr	r0, [pc, #24]	; (8009128 <LCDinit+0x44>)
 800910e:	f7fd fdc5 	bl	8006c9c <ili9341_new>
	  0,  	0,
	  0, 	0,
	  itsNotSupported,
	  itnNormalized);

  ili9341_fill_screen(_screen, ILI9341_BLACK);
 8009112:	4a06      	ldr	r2, [pc, #24]	; (800912c <LCDinit+0x48>)
  _screen = ili9341_new(
 8009114:	4b06      	ldr	r3, [pc, #24]	; (8009130 <LCDinit+0x4c>)
  ili9341_fill_screen(_screen, ILI9341_BLACK);
 8009116:	8811      	ldrh	r1, [r2, #0]
  _screen = ili9341_new(
 8009118:	6018      	str	r0, [r3, #0]
}
 800911a:	b00b      	add	sp, #44	; 0x2c
 800911c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  ili9341_fill_screen(_screen, ILI9341_BLACK);
 8009120:	f7fe bc70 	b.w	8007a04 <ili9341_fill_screen>
 8009124:	40020400 	.word	0x40020400
 8009128:	200086c8 	.word	0x200086c8
 800912c:	0801027e 	.word	0x0801027e
 8009130:	2000c330 	.word	0x2000c330

08009134 <genInit>:
	double freq;
	double phase;
	double phaseInc;
} genData[GEN_NR];

void genInit(int genNumber){
 8009134:	b430      	push	{r4, r5}
	genData[genNumber].freq = 0;
 8009136:	4b07      	ldr	r3, [pc, #28]	; (8009154 <genInit+0x20>)
 8009138:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800913c:	2400      	movs	r4, #0
 800913e:	2500      	movs	r5, #0
 8009140:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8009144:	e9c0 4500 	strd	r4, r5, [r0]
	genData[genNumber].phase = 0;
 8009148:	e9c0 4502 	strd	r4, r5, [r0, #8]
	genData[genNumber].phaseInc = 0;
 800914c:	e9c0 4504 	strd	r4, r5, [r0, #16]
}
 8009150:	bc30      	pop	{r4, r5}
 8009152:	4770      	bx	lr
 8009154:	2000c338 	.word	0x2000c338

08009158 <genSetFreq>:

void genSetFreq(int genNumber, double freqHz){
 8009158:	b510      	push	{r4, lr}
	genData[genNumber].freq = freqHz;
 800915a:	4c0b      	ldr	r4, [pc, #44]	; (8009188 <genSetFreq+0x30>)
 800915c:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8009160:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8009164:	ed84 0b00 	vstr	d0, [r4]
	genData[genNumber].phaseInc = M_2PI * freqHz * 1.0/(double)AUDIO_FREQ;
 8009168:	a305      	add	r3, pc, #20	; (adr r3, 8009180 <genSetFreq+0x28>)
 800916a:	e9d3 2300 	ldrd	r2, r3, [r3]
void genSetFreq(int genNumber, double freqHz){
 800916e:	ec51 0b10 	vmov	r0, r1, d0
	genData[genNumber].phaseInc = M_2PI * freqHz * 1.0/(double)AUDIO_FREQ;
 8009172:	f7f7 fa41 	bl	80005f8 <__aeabi_dmul>
 8009176:	e9c4 0104 	strd	r0, r1, [r4, #16]
}
 800917a:	bd10      	pop	{r4, pc}
 800917c:	f3af 8000 	nop.w
 8009180:	fe31d42b 	.word	0xfe31d42b
 8009184:	3f212ff6 	.word	0x3f212ff6
 8009188:	2000c338 	.word	0x2000c338
 800918c:	00000000 	.word	0x00000000

08009190 <genGetValue>:

void genGetValue(float *outBuffer, int16_t blockSize, int genNumber, int signalType){
 8009190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009194:	b085      	sub	sp, #20
	//double thisPhase = 0;
	for(int i = 0; i < blockSize; i++){
 8009196:	2900      	cmp	r1, #0
void genGetValue(float *outBuffer, int16_t blockSize, int genNumber, int signalType){
 8009198:	9302      	str	r3, [sp, #8]
	for(int i = 0; i < blockSize; i++){
 800919a:	dd48      	ble.n	800922e <genGetValue+0x9e>
 800919c:	eb00 0381 	add.w	r3, r0, r1, lsl #2
		genData[genNumber].phase += genData[genNumber].phaseInc;
 80091a0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
		while (genData[genNumber].phase > M_2PI)
 80091a4:	a72b      	add	r7, pc, #172	; (adr r7, 8009254 <genGetValue+0xc4>)
 80091a6:	e9d7 6700 	ldrd	r6, r7, [r7]
 80091aa:	f20f 0bb0 	addw	fp, pc, #176	; 0xb0
 80091ae:	e9db ab00 	ldrd	sl, fp, [fp]
 80091b2:	9303      	str	r3, [sp, #12]
		genData[genNumber].phase += genData[genNumber].phaseInc;
 80091b4:	00d3      	lsls	r3, r2, #3
 80091b6:	9000      	str	r0, [sp, #0]
 80091b8:	9301      	str	r3, [sp, #4]
 80091ba:	4b25      	ldr	r3, [pc, #148]	; (8009250 <genGetValue+0xc0>)
 80091bc:	9a01      	ldr	r2, [sp, #4]
 80091be:	eb03 0802 	add.w	r8, r3, r2
 80091c2:	e9d8 2304 	ldrd	r2, r3, [r8, #16]
 80091c6:	e9d8 0102 	ldrd	r0, r1, [r8, #8]
 80091ca:	f7f7 f85f 	bl	800028c <__adddf3>
 80091ce:	4604      	mov	r4, r0
 80091d0:	460d      	mov	r5, r1
 80091d2:	e9c8 4502 	strd	r4, r5, [r8, #8]
		while (genData[genNumber].phase > M_2PI)
 80091d6:	4632      	mov	r2, r6
 80091d8:	463b      	mov	r3, r7
 80091da:	f7f7 fc9d 	bl	8000b18 <__aeabi_dcmpgt>
 80091de:	b1b0      	cbz	r0, 800920e <genGetValue+0x7e>
			genData[genNumber].phase -= M_2PI;
 80091e0:	4632      	mov	r2, r6
 80091e2:	463b      	mov	r3, r7
 80091e4:	4620      	mov	r0, r4
 80091e6:	4629      	mov	r1, r5
 80091e8:	f7f7 f84e 	bl	8000288 <__aeabi_dsub>
		while (genData[genNumber].phase > M_2PI)
 80091ec:	4652      	mov	r2, sl
			genData[genNumber].phase -= M_2PI;
 80091ee:	4680      	mov	r8, r0
 80091f0:	4689      	mov	r9, r1
		while (genData[genNumber].phase > M_2PI)
 80091f2:	4620      	mov	r0, r4
 80091f4:	4629      	mov	r1, r5
 80091f6:	465b      	mov	r3, fp
			genData[genNumber].phase -= M_2PI;
 80091f8:	4644      	mov	r4, r8
 80091fa:	464d      	mov	r5, r9
		while (genData[genNumber].phase > M_2PI)
 80091fc:	f7f7 fc8c 	bl	8000b18 <__aeabi_dcmpgt>
 8009200:	2800      	cmp	r0, #0
 8009202:	d1ed      	bne.n	80091e0 <genGetValue+0x50>
 8009204:	4b12      	ldr	r3, [pc, #72]	; (8009250 <genGetValue+0xc0>)
 8009206:	9a01      	ldr	r2, [sp, #4]
 8009208:	4413      	add	r3, r2
 800920a:	e9c3 4502 	strd	r4, r5, [r3, #8]


		float thisPhase = (float)genData[genNumber].phase;
 800920e:	4620      	mov	r0, r4
 8009210:	4629      	mov	r1, r5
 8009212:	f7f7 fcc9 	bl	8000ba8 <__aeabi_d2f>
		if 		(signalType == GEN_SIN) outBuffer[i] = arm_sin_f32((float)genData[genNumber].phase);
 8009216:	9b02      	ldr	r3, [sp, #8]
		float thisPhase = (float)genData[genNumber].phase;
 8009218:	ee00 0a10 	vmov	s0, r0
		if 		(signalType == GEN_SIN) outBuffer[i] = arm_sin_f32((float)genData[genNumber].phase);
 800921c:	b153      	cbz	r3, 8009234 <genGetValue+0xa4>
		else if (signalType == GEN_COS) outBuffer[i] = arm_cos_f32((float)genData[genNumber].phase);
 800921e:	2b01      	cmp	r3, #1
 8009220:	d00e      	beq.n	8009240 <genGetValue+0xb0>
	for(int i = 0; i < blockSize; i++){
 8009222:	9b00      	ldr	r3, [sp, #0]
 8009224:	9a03      	ldr	r2, [sp, #12]
 8009226:	3304      	adds	r3, #4
 8009228:	429a      	cmp	r2, r3
 800922a:	9300      	str	r3, [sp, #0]
 800922c:	d1c5      	bne.n	80091ba <genGetValue+0x2a>
	}
}
 800922e:	b005      	add	sp, #20
 8009230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if 		(signalType == GEN_SIN) outBuffer[i] = arm_sin_f32((float)genData[genNumber].phase);
 8009234:	f000 fc2a 	bl	8009a8c <arm_sin_f32>
 8009238:	9b00      	ldr	r3, [sp, #0]
 800923a:	ed83 0a00 	vstr	s0, [r3]
 800923e:	e7f0      	b.n	8009222 <genGetValue+0x92>
		else if (signalType == GEN_COS) outBuffer[i] = arm_cos_f32((float)genData[genNumber].phase);
 8009240:	f000 fc72 	bl	8009b28 <arm_cos_f32>
 8009244:	9b00      	ldr	r3, [sp, #0]
 8009246:	ed83 0a00 	vstr	s0, [r3]
 800924a:	e7ea      	b.n	8009222 <genGetValue+0x92>
 800924c:	f3af 8000 	nop.w
 8009250:	2000c338 	.word	0x2000c338
 8009254:	54442d18 	.word	0x54442d18
 8009258:	401921fb 	.word	0x401921fb
 800925c:	54442d18 	.word	0x54442d18
 8009260:	402921fb 	.word	0x402921fb

08009264 <debugPrint>:


}


void debugPrint(const char *fmt, ...){
 8009264:	b40f      	push	{r0, r1, r2, r3}
 8009266:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800926a:	b083      	sub	sp, #12
 800926c:	ac0a      	add	r4, sp, #40	; 0x28
	uint32_t timeNow = HAL_GetTick();
	
	static char timBuf[32];
	sprintf(timBuf, "+%u ms: ", timeNow - lastTime);
 800926e:	4e1d      	ldr	r6, [pc, #116]	; (80092e4 <debugPrint+0x80>)
void debugPrint(const char *fmt, ...){
 8009270:	f854 9b04 	ldr.w	r9, [r4], #4
	sprintf(timBuf, "+%u ms: ", timeNow - lastTime);
 8009274:	f8df 8084 	ldr.w	r8, [pc, #132]	; 80092fc <debugPrint+0x98>
	
	static char txtBuf[64];
    va_list args;
    va_start(args, fmt);
    int rc = vsnprintf(txtBuf, sizeof(txtBuf), fmt, args);
 8009278:	4f1b      	ldr	r7, [pc, #108]	; (80092e8 <debugPrint+0x84>)
	uint32_t timeNow = HAL_GetTick();
 800927a:	f7f8 fcb1 	bl	8001be0 <HAL_GetTick>
	sprintf(timBuf, "+%u ms: ", timeNow - lastTime);
 800927e:	6832      	ldr	r2, [r6, #0]
 8009280:	491a      	ldr	r1, [pc, #104]	; (80092ec <debugPrint+0x88>)
	uint32_t timeNow = HAL_GetTick();
 8009282:	4605      	mov	r5, r0
	sprintf(timBuf, "+%u ms: ", timeNow - lastTime);
 8009284:	1a82      	subs	r2, r0, r2
 8009286:	4640      	mov	r0, r8
 8009288:	f001 fac4 	bl	800a814 <siprintf>
    int rc = vsnprintf(txtBuf, sizeof(txtBuf), fmt, args);
 800928c:	464a      	mov	r2, r9
 800928e:	4623      	mov	r3, r4
 8009290:	4638      	mov	r0, r7
 8009292:	2140      	movs	r1, #64	; 0x40
    va_start(args, fmt);
 8009294:	9401      	str	r4, [sp, #4]
    int rc = vsnprintf(txtBuf, sizeof(txtBuf), fmt, args);
 8009296:	f001 fb21 	bl	800a8dc <vsniprintf>
    va_end(args);
	
    const char nlBuf[] = {"\r\n"};
 800929a:	4b15      	ldr	r3, [pc, #84]	; (80092f0 <debugPrint+0x8c>)

    static char output[70];
    *output = "";
 800929c:	4c15      	ldr	r4, [pc, #84]	; (80092f4 <debugPrint+0x90>)
    const char nlBuf[] = {"\r\n"};
 800929e:	681b      	ldr	r3, [r3, #0]
    *output = "";
 80092a0:	4a15      	ldr	r2, [pc, #84]	; (80092f8 <debugPrint+0x94>)
    const char nlBuf[] = {"\r\n"};
 80092a2:	f8ad 3000 	strh.w	r3, [sp]
	//output = malloc(strlen(timBuf) + strlen(txtBuf) + strlen(nlBuf) + 1); /* make space for the new string (should check the return value ...) */
	strcpy(output, timBuf);
 80092a6:	4641      	mov	r1, r8
    const char nlBuf[] = {"\r\n"};
 80092a8:	0c1b      	lsrs	r3, r3, #16
	strcpy(output, timBuf);
 80092aa:	4620      	mov	r0, r4
    const char nlBuf[] = {"\r\n"};
 80092ac:	f88d 3002 	strb.w	r3, [sp, #2]
    *output = "";
 80092b0:	7022      	strb	r2, [r4, #0]
	strcpy(output, timBuf);
 80092b2:	f001 facf 	bl	800a854 <stpcpy>
	strcat(output, txtBuf); 
 80092b6:	4639      	mov	r1, r7
 80092b8:	f001 facc 	bl	800a854 <stpcpy>
	strcat(output, nlBuf); 
 80092bc:	f8bd 2000 	ldrh.w	r2, [sp]
 80092c0:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80092c4:	8002      	strh	r2, [r0, #0]
 80092c6:	7083      	strb	r3, [r0, #2]
	do result = CDC_Transmit_FS((unsigned char*)output, strlen(output));
	while (result != USBD_OK);
#endif

#ifdef DBG_LCD
	gfxLabelSet(G_DEBUG_STRING, output);
 80092c8:	4621      	mov	r1, r4
 80092ca:	2000      	movs	r0, #0
	lastTime = timeNow;
 80092cc:	6035      	str	r5, [r6, #0]
	gfxLabelSet(G_DEBUG_STRING, output);
 80092ce:	f7ff fd7f 	bl	8008dd0 <gfxLabelSet>
#endif

	free(output);
 80092d2:	4620      	mov	r0, r4
 80092d4:	f000 fd5c 	bl	8009d90 <free>
}
 80092d8:	b003      	add	sp, #12
 80092da:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80092de:	b004      	add	sp, #16
 80092e0:	4770      	bx	lr
 80092e2:	bf00      	nop
 80092e4:	20008468 	.word	0x20008468
 80092e8:	200084d8 	.word	0x200084d8
 80092ec:	08010428 	.word	0x08010428
 80092f0:	08010418 	.word	0x08010418
 80092f4:	2000846c 	.word	0x2000846c
 80092f8:	08010430 	.word	0x08010430
 80092fc:	200084b8 	.word	0x200084b8

08009300 <debugPrintColor>:



void debugPrintColor(int color, const char *fmt, ...){
 8009300:	b40e      	push	{r1, r2, r3}
 8009302:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009306:	b092      	sub	sp, #72	; 0x48
 8009308:	ac19      	add	r4, sp, #100	; 0x64
	
	uint32_t timeNow = HAL_GetTick();
	
	char timBuf[32];
	sprintf(timBuf, "+%u ms: ", timeNow - lastTime);
 800930a:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 80093e0 <debugPrintColor+0xe0>
void debugPrintColor(int color, const char *fmt, ...){
 800930e:	f854 6b04 	ldr.w	r6, [r4], #4
 8009312:	4605      	mov	r5, r0
	uint32_t timeNow = HAL_GetTick();
 8009314:	f7f8 fc64 	bl	8001be0 <HAL_GetTick>
	sprintf(timBuf, "+%u ms: ", timeNow - lastTime);
 8009318:	f8d8 2000 	ldr.w	r2, [r8]
 800931c:	492b      	ldr	r1, [pc, #172]	; (80093cc <debugPrintColor+0xcc>)
 800931e:	1a82      	subs	r2, r0, r2
	uint32_t timeNow = HAL_GetTick();
 8009320:	4607      	mov	r7, r0
	sprintf(timBuf, "+%u ms: ", timeNow - lastTime);
 8009322:	a802      	add	r0, sp, #8
 8009324:	f001 fa76 	bl	800a814 <siprintf>
	
	char txtBuf[32];
    va_list args;
    va_start(args, fmt);
    int rc = vsnprintf(txtBuf, sizeof(txtBuf), fmt, args);
 8009328:	4632      	mov	r2, r6
 800932a:	2120      	movs	r1, #32
 800932c:	4623      	mov	r3, r4
 800932e:	a80a      	add	r0, sp, #40	; 0x28
    va_start(args, fmt);
 8009330:	9401      	str	r4, [sp, #4]
    int rc = vsnprintf(txtBuf, sizeof(txtBuf), fmt, args);
 8009332:	f001 fad3 	bl	800a8dc <vsniprintf>
    va_end(args);
	
	//CDC_Transmit_FS((unsigned char*)txtBuf, strlen(txtBuf));
	////HAL_Delay(100);
	char nlBuf[] = {"\r\n"};
 8009336:	4b26      	ldr	r3, [pc, #152]	; (80093d0 <debugPrintColor+0xd0>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f8ad 3000 	strh.w	r3, [sp]

	char* output;
	output = malloc(10 + strlen(timBuf) + strlen(txtBuf) + strlen(nlBuf) + 1); /* make space for the new string (should check the return value ...) */
 800933e:	a802      	add	r0, sp, #8
	char nlBuf[] = {"\r\n"};
 8009340:	0c1b      	lsrs	r3, r3, #16
 8009342:	f88d 3002 	strb.w	r3, [sp, #2]
	output = malloc(10 + strlen(timBuf) + strlen(txtBuf) + strlen(nlBuf) + 1); /* make space for the new string (should check the return value ...) */
 8009346:	f7f6 ff43 	bl	80001d0 <strlen>
 800934a:	4681      	mov	r9, r0
 800934c:	a80a      	add	r0, sp, #40	; 0x28
 800934e:	f7f6 ff3f 	bl	80001d0 <strlen>
 8009352:	4606      	mov	r6, r0
 8009354:	4448      	add	r0, r9
 8009356:	300d      	adds	r0, #13
 8009358:	f000 fd12 	bl	8009d80 <malloc>
		
	switch (color){
 800935c:	f5b5 6ffc 	cmp.w	r5, #2016	; 0x7e0
	output = malloc(10 + strlen(timBuf) + strlen(txtBuf) + strlen(nlBuf) + 1); /* make space for the new string (should check the return value ...) */
 8009360:	4604      	mov	r4, r0
	switch (color){
 8009362:	d020      	beq.n	80093a6 <debugPrintColor+0xa6>
 8009364:	f5b5 4f78 	cmp.w	r5, #63488	; 0xf800
 8009368:	d029      	beq.n	80093be <debugPrintColor+0xbe>
 800936a:	2d1f      	cmp	r5, #31
 800936c:	d021      	beq.n	80093b2 <debugPrintColor+0xb2>
		case COLOR_RED: {strcpy(output, "\033[0;31m"); break;}
		case COLOR_GREEN: {strcpy(output, "\033[0;32m"); break;}
		case COLOR_BLUE: {strcpy(output, "\033[1;34m"); break;}
	}
	
	strcat(output, timBuf);
 800936e:	4620      	mov	r0, r4
 8009370:	f7f6 ff2e 	bl	80001d0 <strlen>
 8009374:	a902      	add	r1, sp, #8
 8009376:	4420      	add	r0, r4
 8009378:	f001 fa6c 	bl	800a854 <stpcpy>
	strcat(output, txtBuf); 
 800937c:	a90a      	add	r1, sp, #40	; 0x28
	strcat(output, timBuf);
 800937e:	4605      	mov	r5, r0
	strcat(output, txtBuf); 
 8009380:	4632      	mov	r2, r6
 8009382:	f000 fd0d 	bl	8009da0 <memcpy>
	strcat(output, timBuf);
 8009386:	1b2b      	subs	r3, r5, r4
	strcat(output, nlBuf); 
 8009388:	4434      	add	r4, r6
 800938a:	f8bd 0000 	ldrh.w	r0, [sp]
 800938e:	f89d 1002 	ldrb.w	r1, [sp, #2]
	strcat(output, "\033[0m");
	
	
	//((USBD_CDC_HandleTypeDef*)(USBD_Device.pClassData))->TxState
	
	lastTime = timeNow;
 8009392:	f8c8 7000 	str.w	r7, [r8]
	strcat(output, nlBuf); 
 8009396:	18e2      	adds	r2, r4, r3
 8009398:	52e0      	strh	r0, [r4, r3]
 800939a:	7091      	strb	r1, [r2, #2]
		while (result != USBD_OK);
	#endif
	*/

	//free(output);
}
 800939c:	b012      	add	sp, #72	; 0x48
 800939e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80093a2:	b003      	add	sp, #12
 80093a4:	4770      	bx	lr
		case COLOR_GREEN: {strcpy(output, "\033[0;32m"); break;}
 80093a6:	4b0b      	ldr	r3, [pc, #44]	; (80093d4 <debugPrintColor+0xd4>)
 80093a8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80093ac:	e884 0003 	stmia.w	r4, {r0, r1}
 80093b0:	e7dd      	b.n	800936e <debugPrintColor+0x6e>
		case COLOR_BLUE: {strcpy(output, "\033[1;34m"); break;}
 80093b2:	4b09      	ldr	r3, [pc, #36]	; (80093d8 <debugPrintColor+0xd8>)
 80093b4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80093b8:	e884 0003 	stmia.w	r4, {r0, r1}
 80093bc:	e7d7      	b.n	800936e <debugPrintColor+0x6e>
		case COLOR_RED: {strcpy(output, "\033[0;31m"); break;}
 80093be:	4b07      	ldr	r3, [pc, #28]	; (80093dc <debugPrintColor+0xdc>)
 80093c0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80093c4:	e884 0003 	stmia.w	r4, {r0, r1}
 80093c8:	e7d1      	b.n	800936e <debugPrintColor+0x6e>
 80093ca:	bf00      	nop
 80093cc:	08010428 	.word	0x08010428
 80093d0:	08010418 	.word	0x08010418
 80093d4:	0801043c 	.word	0x0801043c
 80093d8:	08010444 	.word	0x08010444
 80093dc:	08010434 	.word	0x08010434
 80093e0:	20008468 	.word	0x20008468

080093e4 <debugInit>:

void debugPinSet(bool i){
	HAL_GPIO_WritePin(DEBUG_PIN_PORT, DEBUG_PIN, i); 
}

void debugInit(void){
 80093e4:	b500      	push	{lr}
	HAL_Delay(500);
 80093e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
void debugInit(void){
 80093ea:	b083      	sub	sp, #12
	HAL_Delay(500);
 80093ec:	f7f8 fbfe 	bl	8001bec <HAL_Delay>
	debugClearTerminal();
	HAL_Delay(500);
 80093f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80093f4:	f7f8 fbfa 	bl	8001bec <HAL_Delay>
	debugPrintColor(COLOR_GREEN, "hello!");
 80093f8:	4913      	ldr	r1, [pc, #76]	; (8009448 <debugInit+0x64>)
 80093fa:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 80093fe:	f7ff ff7f 	bl	8009300 <debugPrintColor>
	debugPrintColor(COLOR_BLUE, "", HAL_RCC_GetSysClockFreq());
 8009402:	f7fa fcc9 	bl	8003d98 <HAL_RCC_GetSysClockFreq>
 8009406:	4911      	ldr	r1, [pc, #68]	; (800944c <debugInit+0x68>)
 8009408:	4602      	mov	r2, r0
 800940a:	201f      	movs	r0, #31
 800940c:	f7ff ff78 	bl	8009300 <debugPrintColor>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8009410:	4b0f      	ldr	r3, [pc, #60]	; (8009450 <debugInit+0x6c>)
	GPIO_InitStruct_.Pin = DEBUG_PIN;
 8009412:	4910      	ldr	r1, [pc, #64]	; (8009454 <debugInit+0x70>)
  HAL_GPIO_Init(DEBUG_PIN_PORT, &GPIO_InitStruct_);
 8009414:	4810      	ldr	r0, [pc, #64]	; (8009458 <debugInit+0x74>)
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8009416:	2200      	movs	r2, #0
 8009418:	9201      	str	r2, [sp, #4]
 800941a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800941c:	f042 0204 	orr.w	r2, r2, #4
 8009420:	631a      	str	r2, [r3, #48]	; 0x30
 8009422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009424:	f003 0304 	and.w	r3, r3, #4
 8009428:	9301      	str	r3, [sp, #4]
 800942a:	9b01      	ldr	r3, [sp, #4]
	GPIO_InitStruct_.Pin = DEBUG_PIN;
 800942c:	2280      	movs	r2, #128	; 0x80
 800942e:	2301      	movs	r3, #1
 8009430:	e9c1 2300 	strd	r2, r3, [r1]
 8009434:	2200      	movs	r2, #0
 8009436:	2302      	movs	r3, #2
 8009438:	e9c1 2302 	strd	r2, r3, [r1, #8]
	debugPinInit();
}
 800943c:	b003      	add	sp, #12
 800943e:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_GPIO_Init(DEBUG_PIN_PORT, &GPIO_InitStruct_);
 8009442:	f7f9 b8d5 	b.w	80025f0 <HAL_GPIO_Init>
 8009446:	bf00      	nop
 8009448:	0801044c 	.word	0x0801044c
 800944c:	08010430 	.word	0x08010430
 8009450:	40023800 	.word	0x40023800
 8009454:	20008450 	.word	0x20008450
 8009458:	40020800 	.word	0x40020800

0800945c <preciseTimerValue>:

uint32_t preciseTimerCounter = 0;

uint32_t preciseTimerValue(){
	return preciseTimerCounter;
 800945c:	4b01      	ldr	r3, [pc, #4]	; (8009464 <preciseTimerValue+0x8>)
}
 800945e:	6818      	ldr	r0, [r3, #0]
 8009460:	4770      	bx	lr
 8009462:	bf00      	nop
 8009464:	200084b4 	.word	0x200084b4

08009468 <preciseTimerIncrease>:

void preciseTimerIncrease(){
	if (preciseTimerCounter == ((2 << 32) - 1))
 8009468:	4a03      	ldr	r2, [pc, #12]	; (8009478 <preciseTimerIncrease+0x10>)
 800946a:	6813      	ldr	r3, [r2, #0]
 800946c:	1c59      	adds	r1, r3, #1
		preciseTimerCounter = 0;
	else
		preciseTimerCounter++;
 800946e:	bf14      	ite	ne
 8009470:	3301      	addne	r3, #1
		preciseTimerCounter = 0;
 8009472:	2300      	moveq	r3, #0
 8009474:	6013      	str	r3, [r2, #0]
}
 8009476:	4770      	bx	lr
 8009478:	200084b4 	.word	0x200084b4

0800947c <arm_copy_f32>:
 800947c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009480:	ea5f 0892 	movs.w	r8, r2, lsr #2
 8009484:	d01e      	beq.n	80094c4 <arm_copy_f32+0x48>
 8009486:	f100 0410 	add.w	r4, r0, #16
 800948a:	f101 0310 	add.w	r3, r1, #16
 800948e:	4645      	mov	r5, r8
 8009490:	f854 cc10 	ldr.w	ip, [r4, #-16]
 8009494:	f854 ec0c 	ldr.w	lr, [r4, #-12]
 8009498:	f854 7c08 	ldr.w	r7, [r4, #-8]
 800949c:	f854 6c04 	ldr.w	r6, [r4, #-4]
 80094a0:	f843 6c04 	str.w	r6, [r3, #-4]
 80094a4:	3d01      	subs	r5, #1
 80094a6:	f843 cc10 	str.w	ip, [r3, #-16]
 80094aa:	f843 ec0c 	str.w	lr, [r3, #-12]
 80094ae:	f843 7c08 	str.w	r7, [r3, #-8]
 80094b2:	f104 0410 	add.w	r4, r4, #16
 80094b6:	f103 0310 	add.w	r3, r3, #16
 80094ba:	d1e9      	bne.n	8009490 <arm_copy_f32+0x14>
 80094bc:	ea4f 1808 	mov.w	r8, r8, lsl #4
 80094c0:	4440      	add	r0, r8
 80094c2:	4441      	add	r1, r8
 80094c4:	f012 0203 	ands.w	r2, r2, #3
 80094c8:	d005      	beq.n	80094d6 <arm_copy_f32+0x5a>
 80094ca:	f850 3b04 	ldr.w	r3, [r0], #4
 80094ce:	f841 3b04 	str.w	r3, [r1], #4
 80094d2:	3a01      	subs	r2, #1
 80094d4:	d1f9      	bne.n	80094ca <arm_copy_f32+0x4e>
 80094d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094da:	bf00      	nop

080094dc <arm_cfft_radix4_init_f32>:
 80094dc:	b410      	push	{r4}
 80094de:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80094e2:	4c29      	ldr	r4, [pc, #164]	; (8009588 <arm_cfft_radix4_init_f32+0xac>)
 80094e4:	7082      	strb	r2, [r0, #2]
 80094e6:	70c3      	strb	r3, [r0, #3]
 80094e8:	8001      	strh	r1, [r0, #0]
 80094ea:	6044      	str	r4, [r0, #4]
 80094ec:	d03f      	beq.n	800956e <arm_cfft_radix4_init_f32+0x92>
 80094ee:	d80e      	bhi.n	800950e <arm_cfft_radix4_init_f32+0x32>
 80094f0:	2910      	cmp	r1, #16
 80094f2:	d02f      	beq.n	8009554 <arm_cfft_radix4_init_f32+0x78>
 80094f4:	2940      	cmp	r1, #64	; 0x40
 80094f6:	d11c      	bne.n	8009532 <arm_cfft_radix4_init_f32+0x56>
 80094f8:	f04f 5272 	mov.w	r2, #1015021568	; 0x3c800000
 80094fc:	4b23      	ldr	r3, [pc, #140]	; (800958c <arm_cfft_radix4_init_f32+0xb0>)
 80094fe:	8181      	strh	r1, [r0, #12]
 8009500:	81c1      	strh	r1, [r0, #14]
 8009502:	6102      	str	r2, [r0, #16]
 8009504:	6083      	str	r3, [r0, #8]
 8009506:	f85d 4b04 	ldr.w	r4, [sp], #4
 800950a:	2000      	movs	r0, #0
 800950c:	4770      	bx	lr
 800950e:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009512:	d013      	beq.n	800953c <arm_cfft_radix4_init_f32+0x60>
 8009514:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8009518:	d10b      	bne.n	8009532 <arm_cfft_radix4_init_f32+0x56>
 800951a:	f04f 5366 	mov.w	r3, #964689920	; 0x39800000
 800951e:	6103      	str	r3, [r0, #16]
 8009520:	4a1b      	ldr	r2, [pc, #108]	; (8009590 <arm_cfft_radix4_init_f32+0xb4>)
 8009522:	6082      	str	r2, [r0, #8]
 8009524:	2301      	movs	r3, #1
 8009526:	8183      	strh	r3, [r0, #12]
 8009528:	81c3      	strh	r3, [r0, #14]
 800952a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800952e:	2000      	movs	r0, #0
 8009530:	4770      	bx	lr
 8009532:	f04f 30ff 	mov.w	r0, #4294967295
 8009536:	f85d 4b04 	ldr.w	r4, [sp], #4
 800953a:	4770      	bx	lr
 800953c:	f04f 536a 	mov.w	r3, #981467136	; 0x3a800000
 8009540:	6103      	str	r3, [r0, #16]
 8009542:	4a14      	ldr	r2, [pc, #80]	; (8009594 <arm_cfft_radix4_init_f32+0xb8>)
 8009544:	6082      	str	r2, [r0, #8]
 8009546:	2304      	movs	r3, #4
 8009548:	8183      	strh	r3, [r0, #12]
 800954a:	81c3      	strh	r3, [r0, #14]
 800954c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009550:	2000      	movs	r0, #0
 8009552:	4770      	bx	lr
 8009554:	f04f 5376 	mov.w	r3, #1031798784	; 0x3d800000
 8009558:	6103      	str	r3, [r0, #16]
 800955a:	4a0f      	ldr	r2, [pc, #60]	; (8009598 <arm_cfft_radix4_init_f32+0xbc>)
 800955c:	6082      	str	r2, [r0, #8]
 800955e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009562:	8183      	strh	r3, [r0, #12]
 8009564:	81c3      	strh	r3, [r0, #14]
 8009566:	f85d 4b04 	ldr.w	r4, [sp], #4
 800956a:	2000      	movs	r0, #0
 800956c:	4770      	bx	lr
 800956e:	f04f 536e 	mov.w	r3, #998244352	; 0x3b800000
 8009572:	6103      	str	r3, [r0, #16]
 8009574:	4a09      	ldr	r2, [pc, #36]	; (800959c <arm_cfft_radix4_init_f32+0xc0>)
 8009576:	6082      	str	r2, [r0, #8]
 8009578:	2310      	movs	r3, #16
 800957a:	8183      	strh	r3, [r0, #12]
 800957c:	81c3      	strh	r3, [r0, #14]
 800957e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009582:	2000      	movs	r0, #0
 8009584:	4770      	bx	lr
 8009586:	bf00      	nop
 8009588:	08011458 	.word	0x08011458
 800958c:	080104d2 	.word	0x080104d2
 8009590:	08010454 	.word	0x08010454
 8009594:	0801045a 	.word	0x0801045a
 8009598:	08010652 	.word	0x08010652
 800959c:	08010472 	.word	0x08010472

080095a0 <arm_fir_init_f32>:
 80095a0:	b570      	push	{r4, r5, r6, lr}
 80095a2:	9c04      	ldr	r4, [sp, #16]
 80095a4:	6082      	str	r2, [r0, #8]
 80095a6:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80095aa:	3c01      	subs	r4, #1
 80095ac:	4605      	mov	r5, r0
 80095ae:	440c      	add	r4, r1
 80095b0:	8001      	strh	r1, [r0, #0]
 80095b2:	461e      	mov	r6, r3
 80095b4:	00a2      	lsls	r2, r4, #2
 80095b6:	4618      	mov	r0, r3
 80095b8:	2100      	movs	r1, #0
 80095ba:	f000 fbff 	bl	8009dbc <memset>
 80095be:	606e      	str	r6, [r5, #4]
 80095c0:	bd70      	pop	{r4, r5, r6, pc}
 80095c2:	bf00      	nop

080095c4 <arm_fir_f32>:
 80095c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095c8:	ed2d 8b10 	vpush	{d8-d15}
 80095cc:	b089      	sub	sp, #36	; 0x24
 80095ce:	4605      	mov	r5, r0
 80095d0:	9003      	str	r0, [sp, #12]
 80095d2:	8800      	ldrh	r0, [r0, #0]
 80095d4:	9304      	str	r3, [sp, #16]
 80095d6:	461e      	mov	r6, r3
 80095d8:	f8d5 c004 	ldr.w	ip, [r5, #4]
 80095dc:	9001      	str	r0, [sp, #4]
 80095de:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 80095e2:	3b01      	subs	r3, #1
 80095e4:	eb0c 0483 	add.w	r4, ip, r3, lsl #2
 80095e8:	08f3      	lsrs	r3, r6, #3
 80095ea:	f8d5 8008 	ldr.w	r8, [r5, #8]
 80095ee:	9400      	str	r4, [sp, #0]
 80095f0:	9302      	str	r3, [sp, #8]
 80095f2:	f000 81ef 	beq.w	80099d4 <arm_fir_f32+0x410>
 80095f6:	ea4f 09d0 	mov.w	r9, r0, lsr #3
 80095fa:	469e      	mov	lr, r3
 80095fc:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8009600:	1f1e      	subs	r6, r3, #4
 8009602:	4625      	mov	r5, r4
 8009604:	9605      	str	r6, [sp, #20]
 8009606:	4604      	mov	r4, r0
 8009608:	eb08 0003 	add.w	r0, r8, r3
 800960c:	f004 0a07 	and.w	sl, r4, #7
 8009610:	4613      	mov	r3, r2
 8009612:	f10c 0420 	add.w	r4, ip, #32
 8009616:	f8cd c018 	str.w	ip, [sp, #24]
 800961a:	4684      	mov	ip, r0
 800961c:	4648      	mov	r0, r9
 800961e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8009622:	9107      	str	r1, [sp, #28]
 8009624:	f105 0720 	add.w	r7, r5, #32
 8009628:	f101 0620 	add.w	r6, r1, #32
 800962c:	f102 0520 	add.w	r5, r2, #32
 8009630:	4652      	mov	r2, sl
 8009632:	469a      	mov	sl, r3
 8009634:	f856 3c20 	ldr.w	r3, [r6, #-32]
 8009638:	f847 3c20 	str.w	r3, [r7, #-32]
 800963c:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 8009640:	f847 3c1c 	str.w	r3, [r7, #-28]
 8009644:	f856 3c18 	ldr.w	r3, [r6, #-24]
 8009648:	f847 3c18 	str.w	r3, [r7, #-24]
 800964c:	f856 3c14 	ldr.w	r3, [r6, #-20]
 8009650:	f847 3c14 	str.w	r3, [r7, #-20]
 8009654:	f856 3c10 	ldr.w	r3, [r6, #-16]
 8009658:	f847 3c10 	str.w	r3, [r7, #-16]
 800965c:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 8009660:	f847 3c0c 	str.w	r3, [r7, #-12]
 8009664:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8009668:	f847 3c08 	str.w	r3, [r7, #-8]
 800966c:	eddf 3af1 	vldr	s7, [pc, #964]	; 8009a34 <arm_fir_f32+0x470>
 8009670:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009674:	f847 3c04 	str.w	r3, [r7, #-4]
 8009678:	ed14 3a08 	vldr	s6, [r4, #-32]	; 0xffffffe0
 800967c:	ed54 2a07 	vldr	s5, [r4, #-28]	; 0xffffffe4
 8009680:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 8009684:	ed54 1a05 	vldr	s3, [r4, #-20]	; 0xffffffec
 8009688:	ed14 1a04 	vldr	s2, [r4, #-16]
 800968c:	ed54 0a03 	vldr	s1, [r4, #-12]
 8009690:	ed14 0a02 	vldr	s0, [r4, #-8]
 8009694:	1f21      	subs	r1, r4, #4
 8009696:	eef0 8a63 	vmov.f32	s17, s7
 800969a:	eef0 9a63 	vmov.f32	s19, s7
 800969e:	eef0 aa63 	vmov.f32	s21, s7
 80096a2:	eef0 ba63 	vmov.f32	s23, s7
 80096a6:	eeb0 ca63 	vmov.f32	s24, s7
 80096aa:	eef0 ca63 	vmov.f32	s25, s7
 80096ae:	eeb0 da63 	vmov.f32	s26, s7
 80096b2:	2800      	cmp	r0, #0
 80096b4:	f000 81e8 	beq.w	8009a88 <arm_fir_f32+0x4c4>
 80096b8:	f108 0120 	add.w	r1, r8, #32
 80096bc:	f104 031c 	add.w	r3, r4, #28
 80096c0:	4683      	mov	fp, r0
 80096c2:	ed11 4a08 	vldr	s8, [r1, #-32]	; 0xffffffe0
 80096c6:	ed13 8a08 	vldr	s16, [r3, #-32]	; 0xffffffe0
 80096ca:	ed51 4a07 	vldr	s9, [r1, #-28]	; 0xffffffe4
 80096ce:	ed11 5a06 	vldr	s10, [r1, #-24]	; 0xffffffe8
 80096d2:	ed51 5a05 	vldr	s11, [r1, #-20]	; 0xffffffec
 80096d6:	ed11 6a04 	vldr	s12, [r1, #-16]
 80096da:	ed51 6a03 	vldr	s13, [r1, #-12]
 80096de:	ed11 7a02 	vldr	s14, [r1, #-8]
 80096e2:	ed51 7a01 	vldr	s15, [r1, #-4]
 80096e6:	ee24 fa03 	vmul.f32	s30, s8, s6
 80096ea:	ee64 ea22 	vmul.f32	s29, s8, s5
 80096ee:	ed13 3a07 	vldr	s6, [r3, #-28]	; 0xffffffe4
 80096f2:	ee24 ea02 	vmul.f32	s28, s8, s4
 80096f6:	ee64 da21 	vmul.f32	s27, s8, s3
 80096fa:	ee24 ba01 	vmul.f32	s22, s8, s2
 80096fe:	ee24 aa20 	vmul.f32	s20, s8, s1
 8009702:	ee24 9a00 	vmul.f32	s18, s8, s0
 8009706:	ee24 4a08 	vmul.f32	s8, s8, s16
 800970a:	ee3f da0d 	vadd.f32	s26, s30, s26
 800970e:	ee74 3a23 	vadd.f32	s7, s8, s7
 8009712:	ee24 faa2 	vmul.f32	s30, s9, s5
 8009716:	ee7e caac 	vadd.f32	s25, s29, s25
 800971a:	ed53 2a06 	vldr	s5, [r3, #-24]	; 0xffffffe8
 800971e:	ee64 ea82 	vmul.f32	s29, s9, s4
 8009722:	ee3e ca0c 	vadd.f32	s24, s28, s24
 8009726:	ee7d baab 	vadd.f32	s23, s27, s23
 800972a:	ee24 eaa1 	vmul.f32	s28, s9, s3
 800972e:	ee64 da81 	vmul.f32	s27, s9, s2
 8009732:	ee7b aa2a 	vadd.f32	s21, s22, s21
 8009736:	ee7a 9a29 	vadd.f32	s19, s20, s19
 800973a:	ee24 baa0 	vmul.f32	s22, s9, s1
 800973e:	ee24 aa80 	vmul.f32	s20, s9, s0
 8009742:	ee79 8a28 	vadd.f32	s17, s18, s17
 8009746:	ee28 9a24 	vmul.f32	s18, s16, s9
 800974a:	ee64 4a83 	vmul.f32	s9, s9, s6
 800974e:	ee25 4a02 	vmul.f32	s8, s10, s4
 8009752:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8009756:	ed13 2a05 	vldr	s4, [r3, #-20]	; 0xffffffec
 800975a:	ee7e caac 	vadd.f32	s25, s29, s25
 800975e:	ee3e ca0c 	vadd.f32	s24, s28, s24
 8009762:	ee65 ea21 	vmul.f32	s29, s10, s3
 8009766:	ee25 ea01 	vmul.f32	s28, s10, s2
 800976a:	ee7d baab 	vadd.f32	s23, s27, s23
 800976e:	ee7b aa2a 	vadd.f32	s21, s22, s21
 8009772:	ee65 da20 	vmul.f32	s27, s10, s1
 8009776:	ee25 ba00 	vmul.f32	s22, s10, s0
 800977a:	ee7a 9a29 	vadd.f32	s19, s20, s19
 800977e:	ee79 8a28 	vadd.f32	s17, s18, s17
 8009782:	ee28 aa05 	vmul.f32	s20, s16, s10
 8009786:	ee23 9a05 	vmul.f32	s18, s6, s10
 800978a:	ee3d da0f 	vadd.f32	s26, s26, s30
 800978e:	ee25 5a22 	vmul.f32	s10, s10, s5
 8009792:	ee65 3aa1 	vmul.f32	s7, s11, s3
 8009796:	ee35 5a24 	vadd.f32	s10, s10, s9
 800979a:	ed53 1a04 	vldr	s3, [r3, #-16]
 800979e:	ee7e caac 	vadd.f32	s25, s29, s25
 80097a2:	ee3e ca0c 	vadd.f32	s24, s28, s24
 80097a6:	ee65 ea81 	vmul.f32	s29, s11, s2
 80097aa:	ee25 eaa0 	vmul.f32	s28, s11, s1
 80097ae:	ee7d baab 	vadd.f32	s23, s27, s23
 80097b2:	ee7b aa2a 	vadd.f32	s21, s22, s21
 80097b6:	ee65 da80 	vmul.f32	s27, s11, s0
 80097ba:	ee28 ba25 	vmul.f32	s22, s16, s11
 80097be:	ee7a 9a29 	vadd.f32	s19, s20, s19
 80097c2:	ee79 8a28 	vadd.f32	s17, s18, s17
 80097c6:	ee23 aa25 	vmul.f32	s20, s6, s11
 80097ca:	ee22 9aa5 	vmul.f32	s18, s5, s11
 80097ce:	ee3d da04 	vadd.f32	s26, s26, s8
 80097d2:	ee65 5a82 	vmul.f32	s11, s11, s4
 80097d6:	ee66 4a01 	vmul.f32	s9, s12, s2
 80097da:	ee7a 9a29 	vadd.f32	s19, s20, s19
 80097de:	ed13 1a03 	vldr	s2, [r3, #-12]
 80097e2:	ee75 5a85 	vadd.f32	s11, s11, s10
 80097e6:	ee3d da23 	vadd.f32	s26, s26, s7
 80097ea:	ee22 5a06 	vmul.f32	s10, s4, s12
 80097ee:	ee7e caac 	vadd.f32	s25, s29, s25
 80097f2:	ee3e ca0c 	vadd.f32	s24, s28, s24
 80097f6:	ee66 ea20 	vmul.f32	s29, s12, s1
 80097fa:	ee26 ea00 	vmul.f32	s28, s12, s0
 80097fe:	ee7d baab 	vadd.f32	s23, s27, s23
 8009802:	ee7b aa2a 	vadd.f32	s21, s22, s21
 8009806:	ee68 da06 	vmul.f32	s27, s16, s12
 800980a:	ee23 ba06 	vmul.f32	s22, s6, s12
 800980e:	ee22 aa86 	vmul.f32	s20, s5, s12
 8009812:	ee79 8a28 	vadd.f32	s17, s18, s17
 8009816:	ee26 6a21 	vmul.f32	s12, s12, s3
 800981a:	ee26 9aa0 	vmul.f32	s18, s13, s1
 800981e:	ee36 6a25 	vadd.f32	s12, s12, s11
 8009822:	ed53 0a02 	vldr	s1, [r3, #-8]
 8009826:	ee61 5aa6 	vmul.f32	s11, s3, s13
 800982a:	ee3d da24 	vadd.f32	s26, s26, s9
 800982e:	ee7e caac 	vadd.f32	s25, s29, s25
 8009832:	ee3e ca0c 	vadd.f32	s24, s28, s24
 8009836:	ee66 ea80 	vmul.f32	s29, s13, s0
 800983a:	ee28 ea26 	vmul.f32	s28, s16, s13
 800983e:	ee7d baab 	vadd.f32	s23, s27, s23
 8009842:	ee7b aa2a 	vadd.f32	s21, s22, s21
 8009846:	ee63 da26 	vmul.f32	s27, s6, s13
 800984a:	ee22 baa6 	vmul.f32	s22, s5, s13
 800984e:	ee3a aa29 	vadd.f32	s20, s20, s19
 8009852:	ee75 8a28 	vadd.f32	s17, s10, s17
 8009856:	ee62 9a26 	vmul.f32	s19, s4, s13
 800985a:	ee66 6a81 	vmul.f32	s13, s13, s2
 800985e:	ee27 5a00 	vmul.f32	s10, s14, s0
 8009862:	ee7b aa2a 	vadd.f32	s21, s22, s21
 8009866:	ee75 8aa8 	vadd.f32	s17, s11, s17
 800986a:	ee7e caac 	vadd.f32	s25, s29, s25
 800986e:	ee3e ca0c 	vadd.f32	s24, s28, s24
 8009872:	ee68 ea07 	vmul.f32	s29, s16, s14
 8009876:	ee23 ea07 	vmul.f32	s28, s6, s14
 800987a:	ee7d baab 	vadd.f32	s23, s27, s23
 800987e:	ee22 ba07 	vmul.f32	s22, s4, s14
 8009882:	ee62 da87 	vmul.f32	s27, s5, s14
 8009886:	ee39 aa8a 	vadd.f32	s20, s19, s20
 800988a:	ee76 6a86 	vadd.f32	s13, s13, s12
 800988e:	ee61 9a87 	vmul.f32	s19, s3, s14
 8009892:	ee67 3a20 	vmul.f32	s7, s14, s1
 8009896:	ed13 0a01 	vldr	s0, [r3, #-4]
 800989a:	ee3d da09 	vadd.f32	s26, s26, s18
 800989e:	ee21 6a07 	vmul.f32	s12, s2, s14
 80098a2:	ee3d da05 	vadd.f32	s26, s26, s10
 80098a6:	ee28 8a27 	vmul.f32	s16, s16, s15
 80098aa:	ee63 5a27 	vmul.f32	s11, s6, s15
 80098ae:	ee22 5aa7 	vmul.f32	s10, s5, s15
 80098b2:	ee62 4a27 	vmul.f32	s9, s4, s15
 80098b6:	ee3b ba2a 	vadd.f32	s22, s22, s21
 80098ba:	ee39 aa8a 	vadd.f32	s20, s19, s20
 80098be:	ee61 aaa7 	vmul.f32	s21, s3, s15
 80098c2:	ee61 9a27 	vmul.f32	s19, s2, s15
 80098c6:	ee36 7a28 	vadd.f32	s14, s12, s17
 80098ca:	ee7e caac 	vadd.f32	s25, s29, s25
 80098ce:	ee60 8aa7 	vmul.f32	s17, s1, s15
 80098d2:	ee3e ca0c 	vadd.f32	s24, s28, s24
 80098d6:	ee7d baab 	vadd.f32	s23, s27, s23
 80098da:	ee73 3aa6 	vadd.f32	s7, s7, s13
 80098de:	ee67 7a80 	vmul.f32	s15, s15, s0
 80098e2:	f1bb 0b01 	subs.w	fp, fp, #1
 80098e6:	f101 0120 	add.w	r1, r1, #32
 80098ea:	ee38 da0d 	vadd.f32	s26, s16, s26
 80098ee:	ee75 caac 	vadd.f32	s25, s11, s25
 80098f2:	ee35 ca0c 	vadd.f32	s24, s10, s24
 80098f6:	ee74 baab 	vadd.f32	s23, s9, s23
 80098fa:	ee7a aa8b 	vadd.f32	s21, s21, s22
 80098fe:	ee79 9a8a 	vadd.f32	s19, s19, s20
 8009902:	ee78 8a87 	vadd.f32	s17, s17, s14
 8009906:	ee77 3aa3 	vadd.f32	s7, s15, s7
 800990a:	f103 0320 	add.w	r3, r3, #32
 800990e:	f47f aed8 	bne.w	80096c2 <arm_fir_f32+0xfe>
 8009912:	eb09 0104 	add.w	r1, r9, r4
 8009916:	46e3      	mov	fp, ip
 8009918:	b3a2      	cbz	r2, 8009984 <arm_fir_f32+0x3c0>
 800991a:	4613      	mov	r3, r2
 800991c:	ecbb 6a01 	vldmia	fp!, {s12}
 8009920:	ecf1 7a01 	vldmia	r1!, {s15}
 8009924:	ee26 3a03 	vmul.f32	s6, s12, s6
 8009928:	ee26 4a22 	vmul.f32	s8, s12, s5
 800992c:	ee66 4a02 	vmul.f32	s9, s12, s4
 8009930:	ee26 5a21 	vmul.f32	s10, s12, s3
 8009934:	ee66 5a01 	vmul.f32	s11, s12, s2
 8009938:	ee66 6a20 	vmul.f32	s13, s12, s1
 800993c:	ee26 7a00 	vmul.f32	s14, s12, s0
 8009940:	ee26 6a27 	vmul.f32	s12, s12, s15
 8009944:	3b01      	subs	r3, #1
 8009946:	ee3d da03 	vadd.f32	s26, s26, s6
 800994a:	ee7c ca84 	vadd.f32	s25, s25, s8
 800994e:	eeb0 3a62 	vmov.f32	s6, s5
 8009952:	ee3c ca24 	vadd.f32	s24, s24, s9
 8009956:	eef0 2a42 	vmov.f32	s5, s4
 800995a:	ee7b ba85 	vadd.f32	s23, s23, s10
 800995e:	eeb0 2a61 	vmov.f32	s4, s3
 8009962:	ee7a aaa5 	vadd.f32	s21, s21, s11
 8009966:	eef0 1a41 	vmov.f32	s3, s2
 800996a:	ee79 9aa6 	vadd.f32	s19, s19, s13
 800996e:	eeb0 1a60 	vmov.f32	s2, s1
 8009972:	ee78 8a87 	vadd.f32	s17, s17, s14
 8009976:	eef0 0a40 	vmov.f32	s1, s0
 800997a:	ee73 3a86 	vadd.f32	s7, s7, s12
 800997e:	eeb0 0a67 	vmov.f32	s0, s15
 8009982:	d1cb      	bne.n	800991c <arm_fir_f32+0x358>
 8009984:	f1be 0e01 	subs.w	lr, lr, #1
 8009988:	ed05 da08 	vstr	s26, [r5, #-32]	; 0xffffffe0
 800998c:	ed45 ca07 	vstr	s25, [r5, #-28]	; 0xffffffe4
 8009990:	ed05 ca06 	vstr	s24, [r5, #-24]	; 0xffffffe8
 8009994:	ed45 ba05 	vstr	s23, [r5, #-20]	; 0xffffffec
 8009998:	ed45 aa04 	vstr	s21, [r5, #-16]
 800999c:	ed45 9a03 	vstr	s19, [r5, #-12]
 80099a0:	ed45 8a02 	vstr	s17, [r5, #-8]
 80099a4:	ed45 3a01 	vstr	s7, [r5, #-4]
 80099a8:	f107 0720 	add.w	r7, r7, #32
 80099ac:	f106 0620 	add.w	r6, r6, #32
 80099b0:	f104 0420 	add.w	r4, r4, #32
 80099b4:	f105 0520 	add.w	r5, r5, #32
 80099b8:	f47f ae3c 	bne.w	8009634 <arm_fir_f32+0x70>
 80099bc:	9b02      	ldr	r3, [sp, #8]
 80099be:	9800      	ldr	r0, [sp, #0]
 80099c0:	f8dd c018 	ldr.w	ip, [sp, #24]
 80099c4:	9907      	ldr	r1, [sp, #28]
 80099c6:	015b      	lsls	r3, r3, #5
 80099c8:	4652      	mov	r2, sl
 80099ca:	4418      	add	r0, r3
 80099cc:	9000      	str	r0, [sp, #0]
 80099ce:	4419      	add	r1, r3
 80099d0:	449c      	add	ip, r3
 80099d2:	441a      	add	r2, r3
 80099d4:	9b04      	ldr	r3, [sp, #16]
 80099d6:	f013 0e07 	ands.w	lr, r3, #7
 80099da:	d01f      	beq.n	8009a1c <arm_fir_f32+0x458>
 80099dc:	9f00      	ldr	r7, [sp, #0]
 80099de:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80099e2:	4676      	mov	r6, lr
 80099e4:	4665      	mov	r5, ip
 80099e6:	f851 3b04 	ldr.w	r3, [r1], #4
 80099ea:	eddf 6a12 	vldr	s13, [pc, #72]	; 8009a34 <arm_fir_f32+0x470>
 80099ee:	f847 3b04 	str.w	r3, [r7], #4
 80099f2:	4644      	mov	r4, r8
 80099f4:	464b      	mov	r3, r9
 80099f6:	4628      	mov	r0, r5
 80099f8:	ecb0 7a01 	vldmia	r0!, {s14}
 80099fc:	ecf4 7a01 	vldmia	r4!, {s15}
 8009a00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a04:	3b01      	subs	r3, #1
 8009a06:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8009a0a:	d1f5      	bne.n	80099f8 <arm_fir_f32+0x434>
 8009a0c:	3e01      	subs	r6, #1
 8009a0e:	ece2 6a01 	vstmia	r2!, {s13}
 8009a12:	f105 0504 	add.w	r5, r5, #4
 8009a16:	d1e6      	bne.n	80099e6 <arm_fir_f32+0x422>
 8009a18:	eb0c 0c8e 	add.w	ip, ip, lr, lsl #2
 8009a1c:	9b01      	ldr	r3, [sp, #4]
 8009a1e:	1e59      	subs	r1, r3, #1
 8009a20:	9b03      	ldr	r3, [sp, #12]
 8009a22:	088e      	lsrs	r6, r1, #2
 8009a24:	685c      	ldr	r4, [r3, #4]
 8009a26:	d020      	beq.n	8009a6a <arm_fir_f32+0x4a6>
 8009a28:	f104 0210 	add.w	r2, r4, #16
 8009a2c:	f10c 0310 	add.w	r3, ip, #16
 8009a30:	4630      	mov	r0, r6
 8009a32:	e001      	b.n	8009a38 <arm_fir_f32+0x474>
 8009a34:	00000000 	.word	0x00000000
 8009a38:	f853 5c10 	ldr.w	r5, [r3, #-16]
 8009a3c:	f842 5c10 	str.w	r5, [r2, #-16]
 8009a40:	f853 5c0c 	ldr.w	r5, [r3, #-12]
 8009a44:	f842 5c0c 	str.w	r5, [r2, #-12]
 8009a48:	f853 5c08 	ldr.w	r5, [r3, #-8]
 8009a4c:	f842 5c08 	str.w	r5, [r2, #-8]
 8009a50:	f853 5c04 	ldr.w	r5, [r3, #-4]
 8009a54:	f842 5c04 	str.w	r5, [r2, #-4]
 8009a58:	3801      	subs	r0, #1
 8009a5a:	f103 0310 	add.w	r3, r3, #16
 8009a5e:	f102 0210 	add.w	r2, r2, #16
 8009a62:	d1e9      	bne.n	8009a38 <arm_fir_f32+0x474>
 8009a64:	0133      	lsls	r3, r6, #4
 8009a66:	441c      	add	r4, r3
 8009a68:	449c      	add	ip, r3
 8009a6a:	f011 0303 	ands.w	r3, r1, #3
 8009a6e:	d006      	beq.n	8009a7e <arm_fir_f32+0x4ba>
 8009a70:	4622      	mov	r2, r4
 8009a72:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009a76:	f842 1b04 	str.w	r1, [r2], #4
 8009a7a:	3b01      	subs	r3, #1
 8009a7c:	d1f9      	bne.n	8009a72 <arm_fir_f32+0x4ae>
 8009a7e:	b009      	add	sp, #36	; 0x24
 8009a80:	ecbd 8b10 	vpop	{d8-d15}
 8009a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a88:	46c3      	mov	fp, r8
 8009a8a:	e745      	b.n	8009918 <arm_fir_f32+0x354>

08009a8c <arm_sin_f32>:
 8009a8c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a94:	d42c      	bmi.n	8009af0 <arm_sin_f32+0x64>
 8009a96:	eddf 7a20 	vldr	s15, [pc, #128]	; 8009b18 <arm_sin_f32+0x8c>
 8009a9a:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009a9e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8009aa2:	d432      	bmi.n	8009b0a <arm_sin_f32+0x7e>
 8009aa4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009aa8:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8009b1c <arm_sin_f32+0x90>
 8009aac:	4a1c      	ldr	r2, [pc, #112]	; (8009b20 <arm_sin_f32+0x94>)
 8009aae:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009ab2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009ab6:	ee20 0a26 	vmul.f32	s0, s0, s13
 8009aba:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8009abe:	ee17 3a90 	vmov	r3, s15
 8009ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ac6:	ee07 3a90 	vmov	s15, r3
 8009aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ace:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8009ad2:	ee70 7a67 	vsub.f32	s15, s0, s15
 8009ad6:	edd1 6a01 	vldr	s13, [r1, #4]
 8009ada:	ed91 0a00 	vldr	s0, [r1]
 8009ade:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009ae2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009ae6:	ee27 0a00 	vmul.f32	s0, s14, s0
 8009aea:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009aee:	4770      	bx	lr
 8009af0:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8009b24 <arm_sin_f32+0x98>
 8009af4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8009af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009afc:	da0b      	bge.n	8009b16 <arm_sin_f32+0x8a>
 8009afe:	eddf 7a06 	vldr	s15, [pc, #24]	; 8009b18 <arm_sin_f32+0x8c>
 8009b02:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009b06:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8009b0a:	ee17 3a90 	vmov	r3, s15
 8009b0e:	3b01      	subs	r3, #1
 8009b10:	ee07 3a90 	vmov	s15, r3
 8009b14:	e7c6      	b.n	8009aa4 <arm_sin_f32+0x18>
 8009b16:	4770      	bx	lr
 8009b18:	3e22f983 	.word	0x3e22f983
 8009b1c:	44000000 	.word	0x44000000
 8009b20:	08010c54 	.word	0x08010c54
 8009b24:	b44c02cd 	.word	0xb44c02cd

08009b28 <arm_cos_f32>:
 8009b28:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8009b9c <arm_cos_f32+0x74>
 8009b2c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009b30:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8009b34:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009b38:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b40:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8009b44:	d504      	bpl.n	8009b50 <arm_cos_f32+0x28>
 8009b46:	ee17 3a90 	vmov	r3, s15
 8009b4a:	3b01      	subs	r3, #1
 8009b4c:	ee07 3a90 	vmov	s15, r3
 8009b50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009b54:	eddf 6a12 	vldr	s13, [pc, #72]	; 8009ba0 <arm_cos_f32+0x78>
 8009b58:	4a12      	ldr	r2, [pc, #72]	; (8009ba4 <arm_cos_f32+0x7c>)
 8009b5a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009b5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009b62:	ee20 0a26 	vmul.f32	s0, s0, s13
 8009b66:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8009b6a:	ee17 3a90 	vmov	r3, s15
 8009b6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b72:	ee07 3a90 	vmov	s15, r3
 8009b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b7a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8009b7e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8009b82:	edd1 6a01 	vldr	s13, [r1, #4]
 8009b86:	ed91 0a00 	vldr	s0, [r1]
 8009b8a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009b8e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009b92:	ee27 0a00 	vmul.f32	s0, s14, s0
 8009b96:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009b9a:	4770      	bx	lr
 8009b9c:	3e22f983 	.word	0x3e22f983
 8009ba0:	44000000 	.word	0x44000000
 8009ba4:	08010c54 	.word	0x08010c54

08009ba8 <arm_scale_f32>:
 8009ba8:	b470      	push	{r4, r5, r6}
 8009baa:	0896      	lsrs	r6, r2, #2
 8009bac:	d025      	beq.n	8009bfa <arm_scale_f32+0x52>
 8009bae:	f100 0410 	add.w	r4, r0, #16
 8009bb2:	f101 0310 	add.w	r3, r1, #16
 8009bb6:	4635      	mov	r5, r6
 8009bb8:	ed14 6a04 	vldr	s12, [r4, #-16]
 8009bbc:	ed54 6a03 	vldr	s13, [r4, #-12]
 8009bc0:	ed14 7a02 	vldr	s14, [r4, #-8]
 8009bc4:	ed54 7a01 	vldr	s15, [r4, #-4]
 8009bc8:	ee26 6a00 	vmul.f32	s12, s12, s0
 8009bcc:	ee66 6a80 	vmul.f32	s13, s13, s0
 8009bd0:	ee20 7a07 	vmul.f32	s14, s0, s14
 8009bd4:	ee60 7a27 	vmul.f32	s15, s0, s15
 8009bd8:	3d01      	subs	r5, #1
 8009bda:	ed03 6a04 	vstr	s12, [r3, #-16]
 8009bde:	ed43 6a03 	vstr	s13, [r3, #-12]
 8009be2:	ed03 7a02 	vstr	s14, [r3, #-8]
 8009be6:	ed43 7a01 	vstr	s15, [r3, #-4]
 8009bea:	f104 0410 	add.w	r4, r4, #16
 8009bee:	f103 0310 	add.w	r3, r3, #16
 8009bf2:	d1e1      	bne.n	8009bb8 <arm_scale_f32+0x10>
 8009bf4:	0136      	lsls	r6, r6, #4
 8009bf6:	4430      	add	r0, r6
 8009bf8:	4431      	add	r1, r6
 8009bfa:	f012 0203 	ands.w	r2, r2, #3
 8009bfe:	d007      	beq.n	8009c10 <arm_scale_f32+0x68>
 8009c00:	ecf0 7a01 	vldmia	r0!, {s15}
 8009c04:	ee67 7a80 	vmul.f32	s15, s15, s0
 8009c08:	3a01      	subs	r2, #1
 8009c0a:	ece1 7a01 	vstmia	r1!, {s15}
 8009c0e:	d1f7      	bne.n	8009c00 <arm_scale_f32+0x58>
 8009c10:	bc70      	pop	{r4, r5, r6}
 8009c12:	4770      	bx	lr

08009c14 <arm_mult_f32>:
 8009c14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c16:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 8009c1a:	d033      	beq.n	8009c84 <arm_mult_f32+0x70>
 8009c1c:	f100 0610 	add.w	r6, r0, #16
 8009c20:	f101 0510 	add.w	r5, r1, #16
 8009c24:	f102 0410 	add.w	r4, r2, #16
 8009c28:	4677      	mov	r7, lr
 8009c2a:	ed16 6a04 	vldr	s12, [r6, #-16]
 8009c2e:	ed55 4a04 	vldr	s9, [r5, #-16]
 8009c32:	ed56 6a02 	vldr	s13, [r6, #-8]
 8009c36:	ed15 5a02 	vldr	s10, [r5, #-8]
 8009c3a:	ed16 7a03 	vldr	s14, [r6, #-12]
 8009c3e:	ed55 5a03 	vldr	s11, [r5, #-12]
 8009c42:	ed56 7a01 	vldr	s15, [r6, #-4]
 8009c46:	ee26 6a24 	vmul.f32	s12, s12, s9
 8009c4a:	ee66 6a85 	vmul.f32	s13, s13, s10
 8009c4e:	ed04 6a04 	vstr	s12, [r4, #-16]
 8009c52:	ed15 6a01 	vldr	s12, [r5, #-4]
 8009c56:	ed44 6a02 	vstr	s13, [r4, #-8]
 8009c5a:	ee27 7a25 	vmul.f32	s14, s14, s11
 8009c5e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8009c62:	3f01      	subs	r7, #1
 8009c64:	ed04 7a03 	vstr	s14, [r4, #-12]
 8009c68:	ed44 7a01 	vstr	s15, [r4, #-4]
 8009c6c:	f106 0610 	add.w	r6, r6, #16
 8009c70:	f105 0510 	add.w	r5, r5, #16
 8009c74:	f104 0410 	add.w	r4, r4, #16
 8009c78:	d1d7      	bne.n	8009c2a <arm_mult_f32+0x16>
 8009c7a:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8009c7e:	4420      	add	r0, r4
 8009c80:	4421      	add	r1, r4
 8009c82:	4422      	add	r2, r4
 8009c84:	f013 0303 	ands.w	r3, r3, #3
 8009c88:	d009      	beq.n	8009c9e <arm_mult_f32+0x8a>
 8009c8a:	ecf0 7a01 	vldmia	r0!, {s15}
 8009c8e:	ecb1 7a01 	vldmia	r1!, {s14}
 8009c92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009c96:	3b01      	subs	r3, #1
 8009c98:	ece2 7a01 	vstmia	r2!, {s15}
 8009c9c:	d1f5      	bne.n	8009c8a <arm_mult_f32+0x76>
 8009c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009ca0 <arm_add_f32>:
 8009ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ca2:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 8009ca6:	d033      	beq.n	8009d10 <arm_add_f32+0x70>
 8009ca8:	f100 0610 	add.w	r6, r0, #16
 8009cac:	f101 0510 	add.w	r5, r1, #16
 8009cb0:	f102 0410 	add.w	r4, r2, #16
 8009cb4:	4677      	mov	r7, lr
 8009cb6:	ed16 6a03 	vldr	s12, [r6, #-12]
 8009cba:	ed15 4a03 	vldr	s8, [r5, #-12]
 8009cbe:	ed56 6a02 	vldr	s13, [r6, #-8]
 8009cc2:	ed55 4a02 	vldr	s9, [r5, #-8]
 8009cc6:	ed16 7a01 	vldr	s14, [r6, #-4]
 8009cca:	ed15 5a01 	vldr	s10, [r5, #-4]
 8009cce:	ed56 7a04 	vldr	s15, [r6, #-16]
 8009cd2:	ed55 5a04 	vldr	s11, [r5, #-16]
 8009cd6:	ee36 6a04 	vadd.f32	s12, s12, s8
 8009cda:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8009cde:	ee37 7a05 	vadd.f32	s14, s14, s10
 8009ce2:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8009ce6:	3f01      	subs	r7, #1
 8009ce8:	ed04 6a03 	vstr	s12, [r4, #-12]
 8009cec:	ed44 6a02 	vstr	s13, [r4, #-8]
 8009cf0:	ed04 7a01 	vstr	s14, [r4, #-4]
 8009cf4:	ed44 7a04 	vstr	s15, [r4, #-16]
 8009cf8:	f106 0610 	add.w	r6, r6, #16
 8009cfc:	f105 0510 	add.w	r5, r5, #16
 8009d00:	f104 0410 	add.w	r4, r4, #16
 8009d04:	d1d7      	bne.n	8009cb6 <arm_add_f32+0x16>
 8009d06:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8009d0a:	4420      	add	r0, r4
 8009d0c:	4421      	add	r1, r4
 8009d0e:	4422      	add	r2, r4
 8009d10:	f013 0303 	ands.w	r3, r3, #3
 8009d14:	d009      	beq.n	8009d2a <arm_add_f32+0x8a>
 8009d16:	ecf0 7a01 	vldmia	r0!, {s15}
 8009d1a:	ecb1 7a01 	vldmia	r1!, {s14}
 8009d1e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009d22:	3b01      	subs	r3, #1
 8009d24:	ece2 7a01 	vstmia	r2!, {s15}
 8009d28:	d1f5      	bne.n	8009d16 <arm_add_f32+0x76>
 8009d2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009d2c <__errno>:
 8009d2c:	4b01      	ldr	r3, [pc, #4]	; (8009d34 <__errno+0x8>)
 8009d2e:	6818      	ldr	r0, [r3, #0]
 8009d30:	4770      	bx	lr
 8009d32:	bf00      	nop
 8009d34:	20000520 	.word	0x20000520

08009d38 <__libc_init_array>:
 8009d38:	b570      	push	{r4, r5, r6, lr}
 8009d3a:	4d0d      	ldr	r5, [pc, #52]	; (8009d70 <__libc_init_array+0x38>)
 8009d3c:	4c0d      	ldr	r4, [pc, #52]	; (8009d74 <__libc_init_array+0x3c>)
 8009d3e:	1b64      	subs	r4, r4, r5
 8009d40:	10a4      	asrs	r4, r4, #2
 8009d42:	2600      	movs	r6, #0
 8009d44:	42a6      	cmp	r6, r4
 8009d46:	d109      	bne.n	8009d5c <__libc_init_array+0x24>
 8009d48:	4d0b      	ldr	r5, [pc, #44]	; (8009d78 <__libc_init_array+0x40>)
 8009d4a:	4c0c      	ldr	r4, [pc, #48]	; (8009d7c <__libc_init_array+0x44>)
 8009d4c:	f003 fe28 	bl	800d9a0 <_init>
 8009d50:	1b64      	subs	r4, r4, r5
 8009d52:	10a4      	asrs	r4, r4, #2
 8009d54:	2600      	movs	r6, #0
 8009d56:	42a6      	cmp	r6, r4
 8009d58:	d105      	bne.n	8009d66 <__libc_init_array+0x2e>
 8009d5a:	bd70      	pop	{r4, r5, r6, pc}
 8009d5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d60:	4798      	blx	r3
 8009d62:	3601      	adds	r6, #1
 8009d64:	e7ee      	b.n	8009d44 <__libc_init_array+0xc>
 8009d66:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d6a:	4798      	blx	r3
 8009d6c:	3601      	adds	r6, #1
 8009d6e:	e7f2      	b.n	8009d56 <__libc_init_array+0x1e>
 8009d70:	0801987c 	.word	0x0801987c
 8009d74:	0801987c 	.word	0x0801987c
 8009d78:	0801987c 	.word	0x0801987c
 8009d7c:	08019880 	.word	0x08019880

08009d80 <malloc>:
 8009d80:	4b02      	ldr	r3, [pc, #8]	; (8009d8c <malloc+0xc>)
 8009d82:	4601      	mov	r1, r0
 8009d84:	6818      	ldr	r0, [r3, #0]
 8009d86:	f000 b871 	b.w	8009e6c <_malloc_r>
 8009d8a:	bf00      	nop
 8009d8c:	20000520 	.word	0x20000520

08009d90 <free>:
 8009d90:	4b02      	ldr	r3, [pc, #8]	; (8009d9c <free+0xc>)
 8009d92:	4601      	mov	r1, r0
 8009d94:	6818      	ldr	r0, [r3, #0]
 8009d96:	f000 b819 	b.w	8009dcc <_free_r>
 8009d9a:	bf00      	nop
 8009d9c:	20000520 	.word	0x20000520

08009da0 <memcpy>:
 8009da0:	440a      	add	r2, r1
 8009da2:	4291      	cmp	r1, r2
 8009da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8009da8:	d100      	bne.n	8009dac <memcpy+0xc>
 8009daa:	4770      	bx	lr
 8009dac:	b510      	push	{r4, lr}
 8009dae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009db2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009db6:	4291      	cmp	r1, r2
 8009db8:	d1f9      	bne.n	8009dae <memcpy+0xe>
 8009dba:	bd10      	pop	{r4, pc}

08009dbc <memset>:
 8009dbc:	4402      	add	r2, r0
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	4293      	cmp	r3, r2
 8009dc2:	d100      	bne.n	8009dc6 <memset+0xa>
 8009dc4:	4770      	bx	lr
 8009dc6:	f803 1b01 	strb.w	r1, [r3], #1
 8009dca:	e7f9      	b.n	8009dc0 <memset+0x4>

08009dcc <_free_r>:
 8009dcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009dce:	2900      	cmp	r1, #0
 8009dd0:	d048      	beq.n	8009e64 <_free_r+0x98>
 8009dd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009dd6:	9001      	str	r0, [sp, #4]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	f1a1 0404 	sub.w	r4, r1, #4
 8009dde:	bfb8      	it	lt
 8009de0:	18e4      	addlt	r4, r4, r3
 8009de2:	f001 fc37 	bl	800b654 <__malloc_lock>
 8009de6:	4a20      	ldr	r2, [pc, #128]	; (8009e68 <_free_r+0x9c>)
 8009de8:	9801      	ldr	r0, [sp, #4]
 8009dea:	6813      	ldr	r3, [r2, #0]
 8009dec:	4615      	mov	r5, r2
 8009dee:	b933      	cbnz	r3, 8009dfe <_free_r+0x32>
 8009df0:	6063      	str	r3, [r4, #4]
 8009df2:	6014      	str	r4, [r2, #0]
 8009df4:	b003      	add	sp, #12
 8009df6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009dfa:	f001 bc31 	b.w	800b660 <__malloc_unlock>
 8009dfe:	42a3      	cmp	r3, r4
 8009e00:	d90b      	bls.n	8009e1a <_free_r+0x4e>
 8009e02:	6821      	ldr	r1, [r4, #0]
 8009e04:	1862      	adds	r2, r4, r1
 8009e06:	4293      	cmp	r3, r2
 8009e08:	bf04      	itt	eq
 8009e0a:	681a      	ldreq	r2, [r3, #0]
 8009e0c:	685b      	ldreq	r3, [r3, #4]
 8009e0e:	6063      	str	r3, [r4, #4]
 8009e10:	bf04      	itt	eq
 8009e12:	1852      	addeq	r2, r2, r1
 8009e14:	6022      	streq	r2, [r4, #0]
 8009e16:	602c      	str	r4, [r5, #0]
 8009e18:	e7ec      	b.n	8009df4 <_free_r+0x28>
 8009e1a:	461a      	mov	r2, r3
 8009e1c:	685b      	ldr	r3, [r3, #4]
 8009e1e:	b10b      	cbz	r3, 8009e24 <_free_r+0x58>
 8009e20:	42a3      	cmp	r3, r4
 8009e22:	d9fa      	bls.n	8009e1a <_free_r+0x4e>
 8009e24:	6811      	ldr	r1, [r2, #0]
 8009e26:	1855      	adds	r5, r2, r1
 8009e28:	42a5      	cmp	r5, r4
 8009e2a:	d10b      	bne.n	8009e44 <_free_r+0x78>
 8009e2c:	6824      	ldr	r4, [r4, #0]
 8009e2e:	4421      	add	r1, r4
 8009e30:	1854      	adds	r4, r2, r1
 8009e32:	42a3      	cmp	r3, r4
 8009e34:	6011      	str	r1, [r2, #0]
 8009e36:	d1dd      	bne.n	8009df4 <_free_r+0x28>
 8009e38:	681c      	ldr	r4, [r3, #0]
 8009e3a:	685b      	ldr	r3, [r3, #4]
 8009e3c:	6053      	str	r3, [r2, #4]
 8009e3e:	4421      	add	r1, r4
 8009e40:	6011      	str	r1, [r2, #0]
 8009e42:	e7d7      	b.n	8009df4 <_free_r+0x28>
 8009e44:	d902      	bls.n	8009e4c <_free_r+0x80>
 8009e46:	230c      	movs	r3, #12
 8009e48:	6003      	str	r3, [r0, #0]
 8009e4a:	e7d3      	b.n	8009df4 <_free_r+0x28>
 8009e4c:	6825      	ldr	r5, [r4, #0]
 8009e4e:	1961      	adds	r1, r4, r5
 8009e50:	428b      	cmp	r3, r1
 8009e52:	bf04      	itt	eq
 8009e54:	6819      	ldreq	r1, [r3, #0]
 8009e56:	685b      	ldreq	r3, [r3, #4]
 8009e58:	6063      	str	r3, [r4, #4]
 8009e5a:	bf04      	itt	eq
 8009e5c:	1949      	addeq	r1, r1, r5
 8009e5e:	6021      	streq	r1, [r4, #0]
 8009e60:	6054      	str	r4, [r2, #4]
 8009e62:	e7c7      	b.n	8009df4 <_free_r+0x28>
 8009e64:	b003      	add	sp, #12
 8009e66:	bd30      	pop	{r4, r5, pc}
 8009e68:	20008518 	.word	0x20008518

08009e6c <_malloc_r>:
 8009e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e6e:	1ccd      	adds	r5, r1, #3
 8009e70:	f025 0503 	bic.w	r5, r5, #3
 8009e74:	3508      	adds	r5, #8
 8009e76:	2d0c      	cmp	r5, #12
 8009e78:	bf38      	it	cc
 8009e7a:	250c      	movcc	r5, #12
 8009e7c:	2d00      	cmp	r5, #0
 8009e7e:	4606      	mov	r6, r0
 8009e80:	db01      	blt.n	8009e86 <_malloc_r+0x1a>
 8009e82:	42a9      	cmp	r1, r5
 8009e84:	d903      	bls.n	8009e8e <_malloc_r+0x22>
 8009e86:	230c      	movs	r3, #12
 8009e88:	6033      	str	r3, [r6, #0]
 8009e8a:	2000      	movs	r0, #0
 8009e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e8e:	f001 fbe1 	bl	800b654 <__malloc_lock>
 8009e92:	4921      	ldr	r1, [pc, #132]	; (8009f18 <_malloc_r+0xac>)
 8009e94:	680a      	ldr	r2, [r1, #0]
 8009e96:	4614      	mov	r4, r2
 8009e98:	b99c      	cbnz	r4, 8009ec2 <_malloc_r+0x56>
 8009e9a:	4f20      	ldr	r7, [pc, #128]	; (8009f1c <_malloc_r+0xb0>)
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	b923      	cbnz	r3, 8009eaa <_malloc_r+0x3e>
 8009ea0:	4621      	mov	r1, r4
 8009ea2:	4630      	mov	r0, r6
 8009ea4:	f000 fca6 	bl	800a7f4 <_sbrk_r>
 8009ea8:	6038      	str	r0, [r7, #0]
 8009eaa:	4629      	mov	r1, r5
 8009eac:	4630      	mov	r0, r6
 8009eae:	f000 fca1 	bl	800a7f4 <_sbrk_r>
 8009eb2:	1c43      	adds	r3, r0, #1
 8009eb4:	d123      	bne.n	8009efe <_malloc_r+0x92>
 8009eb6:	230c      	movs	r3, #12
 8009eb8:	6033      	str	r3, [r6, #0]
 8009eba:	4630      	mov	r0, r6
 8009ebc:	f001 fbd0 	bl	800b660 <__malloc_unlock>
 8009ec0:	e7e3      	b.n	8009e8a <_malloc_r+0x1e>
 8009ec2:	6823      	ldr	r3, [r4, #0]
 8009ec4:	1b5b      	subs	r3, r3, r5
 8009ec6:	d417      	bmi.n	8009ef8 <_malloc_r+0x8c>
 8009ec8:	2b0b      	cmp	r3, #11
 8009eca:	d903      	bls.n	8009ed4 <_malloc_r+0x68>
 8009ecc:	6023      	str	r3, [r4, #0]
 8009ece:	441c      	add	r4, r3
 8009ed0:	6025      	str	r5, [r4, #0]
 8009ed2:	e004      	b.n	8009ede <_malloc_r+0x72>
 8009ed4:	6863      	ldr	r3, [r4, #4]
 8009ed6:	42a2      	cmp	r2, r4
 8009ed8:	bf0c      	ite	eq
 8009eda:	600b      	streq	r3, [r1, #0]
 8009edc:	6053      	strne	r3, [r2, #4]
 8009ede:	4630      	mov	r0, r6
 8009ee0:	f001 fbbe 	bl	800b660 <__malloc_unlock>
 8009ee4:	f104 000b 	add.w	r0, r4, #11
 8009ee8:	1d23      	adds	r3, r4, #4
 8009eea:	f020 0007 	bic.w	r0, r0, #7
 8009eee:	1ac2      	subs	r2, r0, r3
 8009ef0:	d0cc      	beq.n	8009e8c <_malloc_r+0x20>
 8009ef2:	1a1b      	subs	r3, r3, r0
 8009ef4:	50a3      	str	r3, [r4, r2]
 8009ef6:	e7c9      	b.n	8009e8c <_malloc_r+0x20>
 8009ef8:	4622      	mov	r2, r4
 8009efa:	6864      	ldr	r4, [r4, #4]
 8009efc:	e7cc      	b.n	8009e98 <_malloc_r+0x2c>
 8009efe:	1cc4      	adds	r4, r0, #3
 8009f00:	f024 0403 	bic.w	r4, r4, #3
 8009f04:	42a0      	cmp	r0, r4
 8009f06:	d0e3      	beq.n	8009ed0 <_malloc_r+0x64>
 8009f08:	1a21      	subs	r1, r4, r0
 8009f0a:	4630      	mov	r0, r6
 8009f0c:	f000 fc72 	bl	800a7f4 <_sbrk_r>
 8009f10:	3001      	adds	r0, #1
 8009f12:	d1dd      	bne.n	8009ed0 <_malloc_r+0x64>
 8009f14:	e7cf      	b.n	8009eb6 <_malloc_r+0x4a>
 8009f16:	bf00      	nop
 8009f18:	20008518 	.word	0x20008518
 8009f1c:	2000851c 	.word	0x2000851c

08009f20 <__cvt>:
 8009f20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f24:	ec55 4b10 	vmov	r4, r5, d0
 8009f28:	2d00      	cmp	r5, #0
 8009f2a:	460e      	mov	r6, r1
 8009f2c:	4619      	mov	r1, r3
 8009f2e:	462b      	mov	r3, r5
 8009f30:	bfbb      	ittet	lt
 8009f32:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009f36:	461d      	movlt	r5, r3
 8009f38:	2300      	movge	r3, #0
 8009f3a:	232d      	movlt	r3, #45	; 0x2d
 8009f3c:	700b      	strb	r3, [r1, #0]
 8009f3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f40:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009f44:	4691      	mov	r9, r2
 8009f46:	f023 0820 	bic.w	r8, r3, #32
 8009f4a:	bfbc      	itt	lt
 8009f4c:	4622      	movlt	r2, r4
 8009f4e:	4614      	movlt	r4, r2
 8009f50:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009f54:	d005      	beq.n	8009f62 <__cvt+0x42>
 8009f56:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009f5a:	d100      	bne.n	8009f5e <__cvt+0x3e>
 8009f5c:	3601      	adds	r6, #1
 8009f5e:	2102      	movs	r1, #2
 8009f60:	e000      	b.n	8009f64 <__cvt+0x44>
 8009f62:	2103      	movs	r1, #3
 8009f64:	ab03      	add	r3, sp, #12
 8009f66:	9301      	str	r3, [sp, #4]
 8009f68:	ab02      	add	r3, sp, #8
 8009f6a:	9300      	str	r3, [sp, #0]
 8009f6c:	ec45 4b10 	vmov	d0, r4, r5
 8009f70:	4653      	mov	r3, sl
 8009f72:	4632      	mov	r2, r6
 8009f74:	f000 fd6c 	bl	800aa50 <_dtoa_r>
 8009f78:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009f7c:	4607      	mov	r7, r0
 8009f7e:	d102      	bne.n	8009f86 <__cvt+0x66>
 8009f80:	f019 0f01 	tst.w	r9, #1
 8009f84:	d022      	beq.n	8009fcc <__cvt+0xac>
 8009f86:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009f8a:	eb07 0906 	add.w	r9, r7, r6
 8009f8e:	d110      	bne.n	8009fb2 <__cvt+0x92>
 8009f90:	783b      	ldrb	r3, [r7, #0]
 8009f92:	2b30      	cmp	r3, #48	; 0x30
 8009f94:	d10a      	bne.n	8009fac <__cvt+0x8c>
 8009f96:	2200      	movs	r2, #0
 8009f98:	2300      	movs	r3, #0
 8009f9a:	4620      	mov	r0, r4
 8009f9c:	4629      	mov	r1, r5
 8009f9e:	f7f6 fd93 	bl	8000ac8 <__aeabi_dcmpeq>
 8009fa2:	b918      	cbnz	r0, 8009fac <__cvt+0x8c>
 8009fa4:	f1c6 0601 	rsb	r6, r6, #1
 8009fa8:	f8ca 6000 	str.w	r6, [sl]
 8009fac:	f8da 3000 	ldr.w	r3, [sl]
 8009fb0:	4499      	add	r9, r3
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	4620      	mov	r0, r4
 8009fb8:	4629      	mov	r1, r5
 8009fba:	f7f6 fd85 	bl	8000ac8 <__aeabi_dcmpeq>
 8009fbe:	b108      	cbz	r0, 8009fc4 <__cvt+0xa4>
 8009fc0:	f8cd 900c 	str.w	r9, [sp, #12]
 8009fc4:	2230      	movs	r2, #48	; 0x30
 8009fc6:	9b03      	ldr	r3, [sp, #12]
 8009fc8:	454b      	cmp	r3, r9
 8009fca:	d307      	bcc.n	8009fdc <__cvt+0xbc>
 8009fcc:	9b03      	ldr	r3, [sp, #12]
 8009fce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009fd0:	1bdb      	subs	r3, r3, r7
 8009fd2:	4638      	mov	r0, r7
 8009fd4:	6013      	str	r3, [r2, #0]
 8009fd6:	b004      	add	sp, #16
 8009fd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fdc:	1c59      	adds	r1, r3, #1
 8009fde:	9103      	str	r1, [sp, #12]
 8009fe0:	701a      	strb	r2, [r3, #0]
 8009fe2:	e7f0      	b.n	8009fc6 <__cvt+0xa6>

08009fe4 <__exponent>:
 8009fe4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	2900      	cmp	r1, #0
 8009fea:	bfb8      	it	lt
 8009fec:	4249      	neglt	r1, r1
 8009fee:	f803 2b02 	strb.w	r2, [r3], #2
 8009ff2:	bfb4      	ite	lt
 8009ff4:	222d      	movlt	r2, #45	; 0x2d
 8009ff6:	222b      	movge	r2, #43	; 0x2b
 8009ff8:	2909      	cmp	r1, #9
 8009ffa:	7042      	strb	r2, [r0, #1]
 8009ffc:	dd2a      	ble.n	800a054 <__exponent+0x70>
 8009ffe:	f10d 0407 	add.w	r4, sp, #7
 800a002:	46a4      	mov	ip, r4
 800a004:	270a      	movs	r7, #10
 800a006:	46a6      	mov	lr, r4
 800a008:	460a      	mov	r2, r1
 800a00a:	fb91 f6f7 	sdiv	r6, r1, r7
 800a00e:	fb07 1516 	mls	r5, r7, r6, r1
 800a012:	3530      	adds	r5, #48	; 0x30
 800a014:	2a63      	cmp	r2, #99	; 0x63
 800a016:	f104 34ff 	add.w	r4, r4, #4294967295
 800a01a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a01e:	4631      	mov	r1, r6
 800a020:	dcf1      	bgt.n	800a006 <__exponent+0x22>
 800a022:	3130      	adds	r1, #48	; 0x30
 800a024:	f1ae 0502 	sub.w	r5, lr, #2
 800a028:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a02c:	1c44      	adds	r4, r0, #1
 800a02e:	4629      	mov	r1, r5
 800a030:	4561      	cmp	r1, ip
 800a032:	d30a      	bcc.n	800a04a <__exponent+0x66>
 800a034:	f10d 0209 	add.w	r2, sp, #9
 800a038:	eba2 020e 	sub.w	r2, r2, lr
 800a03c:	4565      	cmp	r5, ip
 800a03e:	bf88      	it	hi
 800a040:	2200      	movhi	r2, #0
 800a042:	4413      	add	r3, r2
 800a044:	1a18      	subs	r0, r3, r0
 800a046:	b003      	add	sp, #12
 800a048:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a04a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a04e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a052:	e7ed      	b.n	800a030 <__exponent+0x4c>
 800a054:	2330      	movs	r3, #48	; 0x30
 800a056:	3130      	adds	r1, #48	; 0x30
 800a058:	7083      	strb	r3, [r0, #2]
 800a05a:	70c1      	strb	r1, [r0, #3]
 800a05c:	1d03      	adds	r3, r0, #4
 800a05e:	e7f1      	b.n	800a044 <__exponent+0x60>

0800a060 <_printf_float>:
 800a060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a064:	ed2d 8b02 	vpush	{d8}
 800a068:	b08d      	sub	sp, #52	; 0x34
 800a06a:	460c      	mov	r4, r1
 800a06c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a070:	4616      	mov	r6, r2
 800a072:	461f      	mov	r7, r3
 800a074:	4605      	mov	r5, r0
 800a076:	f001 fae9 	bl	800b64c <_localeconv_r>
 800a07a:	f8d0 a000 	ldr.w	sl, [r0]
 800a07e:	4650      	mov	r0, sl
 800a080:	f7f6 f8a6 	bl	80001d0 <strlen>
 800a084:	2300      	movs	r3, #0
 800a086:	930a      	str	r3, [sp, #40]	; 0x28
 800a088:	6823      	ldr	r3, [r4, #0]
 800a08a:	9305      	str	r3, [sp, #20]
 800a08c:	f8d8 3000 	ldr.w	r3, [r8]
 800a090:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a094:	3307      	adds	r3, #7
 800a096:	f023 0307 	bic.w	r3, r3, #7
 800a09a:	f103 0208 	add.w	r2, r3, #8
 800a09e:	f8c8 2000 	str.w	r2, [r8]
 800a0a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0a6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a0aa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a0ae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a0b2:	9307      	str	r3, [sp, #28]
 800a0b4:	f8cd 8018 	str.w	r8, [sp, #24]
 800a0b8:	ee08 0a10 	vmov	s16, r0
 800a0bc:	4b9f      	ldr	r3, [pc, #636]	; (800a33c <_printf_float+0x2dc>)
 800a0be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a0c2:	f04f 32ff 	mov.w	r2, #4294967295
 800a0c6:	f7f6 fd31 	bl	8000b2c <__aeabi_dcmpun>
 800a0ca:	bb88      	cbnz	r0, 800a130 <_printf_float+0xd0>
 800a0cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a0d0:	4b9a      	ldr	r3, [pc, #616]	; (800a33c <_printf_float+0x2dc>)
 800a0d2:	f04f 32ff 	mov.w	r2, #4294967295
 800a0d6:	f7f6 fd0b 	bl	8000af0 <__aeabi_dcmple>
 800a0da:	bb48      	cbnz	r0, 800a130 <_printf_float+0xd0>
 800a0dc:	2200      	movs	r2, #0
 800a0de:	2300      	movs	r3, #0
 800a0e0:	4640      	mov	r0, r8
 800a0e2:	4649      	mov	r1, r9
 800a0e4:	f7f6 fcfa 	bl	8000adc <__aeabi_dcmplt>
 800a0e8:	b110      	cbz	r0, 800a0f0 <_printf_float+0x90>
 800a0ea:	232d      	movs	r3, #45	; 0x2d
 800a0ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a0f0:	4b93      	ldr	r3, [pc, #588]	; (800a340 <_printf_float+0x2e0>)
 800a0f2:	4894      	ldr	r0, [pc, #592]	; (800a344 <_printf_float+0x2e4>)
 800a0f4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a0f8:	bf94      	ite	ls
 800a0fa:	4698      	movls	r8, r3
 800a0fc:	4680      	movhi	r8, r0
 800a0fe:	2303      	movs	r3, #3
 800a100:	6123      	str	r3, [r4, #16]
 800a102:	9b05      	ldr	r3, [sp, #20]
 800a104:	f023 0204 	bic.w	r2, r3, #4
 800a108:	6022      	str	r2, [r4, #0]
 800a10a:	f04f 0900 	mov.w	r9, #0
 800a10e:	9700      	str	r7, [sp, #0]
 800a110:	4633      	mov	r3, r6
 800a112:	aa0b      	add	r2, sp, #44	; 0x2c
 800a114:	4621      	mov	r1, r4
 800a116:	4628      	mov	r0, r5
 800a118:	f000 f9d8 	bl	800a4cc <_printf_common>
 800a11c:	3001      	adds	r0, #1
 800a11e:	f040 8090 	bne.w	800a242 <_printf_float+0x1e2>
 800a122:	f04f 30ff 	mov.w	r0, #4294967295
 800a126:	b00d      	add	sp, #52	; 0x34
 800a128:	ecbd 8b02 	vpop	{d8}
 800a12c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a130:	4642      	mov	r2, r8
 800a132:	464b      	mov	r3, r9
 800a134:	4640      	mov	r0, r8
 800a136:	4649      	mov	r1, r9
 800a138:	f7f6 fcf8 	bl	8000b2c <__aeabi_dcmpun>
 800a13c:	b140      	cbz	r0, 800a150 <_printf_float+0xf0>
 800a13e:	464b      	mov	r3, r9
 800a140:	2b00      	cmp	r3, #0
 800a142:	bfbc      	itt	lt
 800a144:	232d      	movlt	r3, #45	; 0x2d
 800a146:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a14a:	487f      	ldr	r0, [pc, #508]	; (800a348 <_printf_float+0x2e8>)
 800a14c:	4b7f      	ldr	r3, [pc, #508]	; (800a34c <_printf_float+0x2ec>)
 800a14e:	e7d1      	b.n	800a0f4 <_printf_float+0x94>
 800a150:	6863      	ldr	r3, [r4, #4]
 800a152:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a156:	9206      	str	r2, [sp, #24]
 800a158:	1c5a      	adds	r2, r3, #1
 800a15a:	d13f      	bne.n	800a1dc <_printf_float+0x17c>
 800a15c:	2306      	movs	r3, #6
 800a15e:	6063      	str	r3, [r4, #4]
 800a160:	9b05      	ldr	r3, [sp, #20]
 800a162:	6861      	ldr	r1, [r4, #4]
 800a164:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a168:	2300      	movs	r3, #0
 800a16a:	9303      	str	r3, [sp, #12]
 800a16c:	ab0a      	add	r3, sp, #40	; 0x28
 800a16e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a172:	ab09      	add	r3, sp, #36	; 0x24
 800a174:	ec49 8b10 	vmov	d0, r8, r9
 800a178:	9300      	str	r3, [sp, #0]
 800a17a:	6022      	str	r2, [r4, #0]
 800a17c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a180:	4628      	mov	r0, r5
 800a182:	f7ff fecd 	bl	8009f20 <__cvt>
 800a186:	9b06      	ldr	r3, [sp, #24]
 800a188:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a18a:	2b47      	cmp	r3, #71	; 0x47
 800a18c:	4680      	mov	r8, r0
 800a18e:	d108      	bne.n	800a1a2 <_printf_float+0x142>
 800a190:	1cc8      	adds	r0, r1, #3
 800a192:	db02      	blt.n	800a19a <_printf_float+0x13a>
 800a194:	6863      	ldr	r3, [r4, #4]
 800a196:	4299      	cmp	r1, r3
 800a198:	dd41      	ble.n	800a21e <_printf_float+0x1be>
 800a19a:	f1ab 0b02 	sub.w	fp, fp, #2
 800a19e:	fa5f fb8b 	uxtb.w	fp, fp
 800a1a2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a1a6:	d820      	bhi.n	800a1ea <_printf_float+0x18a>
 800a1a8:	3901      	subs	r1, #1
 800a1aa:	465a      	mov	r2, fp
 800a1ac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a1b0:	9109      	str	r1, [sp, #36]	; 0x24
 800a1b2:	f7ff ff17 	bl	8009fe4 <__exponent>
 800a1b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a1b8:	1813      	adds	r3, r2, r0
 800a1ba:	2a01      	cmp	r2, #1
 800a1bc:	4681      	mov	r9, r0
 800a1be:	6123      	str	r3, [r4, #16]
 800a1c0:	dc02      	bgt.n	800a1c8 <_printf_float+0x168>
 800a1c2:	6822      	ldr	r2, [r4, #0]
 800a1c4:	07d2      	lsls	r2, r2, #31
 800a1c6:	d501      	bpl.n	800a1cc <_printf_float+0x16c>
 800a1c8:	3301      	adds	r3, #1
 800a1ca:	6123      	str	r3, [r4, #16]
 800a1cc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d09c      	beq.n	800a10e <_printf_float+0xae>
 800a1d4:	232d      	movs	r3, #45	; 0x2d
 800a1d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1da:	e798      	b.n	800a10e <_printf_float+0xae>
 800a1dc:	9a06      	ldr	r2, [sp, #24]
 800a1de:	2a47      	cmp	r2, #71	; 0x47
 800a1e0:	d1be      	bne.n	800a160 <_printf_float+0x100>
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d1bc      	bne.n	800a160 <_printf_float+0x100>
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	e7b9      	b.n	800a15e <_printf_float+0xfe>
 800a1ea:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a1ee:	d118      	bne.n	800a222 <_printf_float+0x1c2>
 800a1f0:	2900      	cmp	r1, #0
 800a1f2:	6863      	ldr	r3, [r4, #4]
 800a1f4:	dd0b      	ble.n	800a20e <_printf_float+0x1ae>
 800a1f6:	6121      	str	r1, [r4, #16]
 800a1f8:	b913      	cbnz	r3, 800a200 <_printf_float+0x1a0>
 800a1fa:	6822      	ldr	r2, [r4, #0]
 800a1fc:	07d0      	lsls	r0, r2, #31
 800a1fe:	d502      	bpl.n	800a206 <_printf_float+0x1a6>
 800a200:	3301      	adds	r3, #1
 800a202:	440b      	add	r3, r1
 800a204:	6123      	str	r3, [r4, #16]
 800a206:	65a1      	str	r1, [r4, #88]	; 0x58
 800a208:	f04f 0900 	mov.w	r9, #0
 800a20c:	e7de      	b.n	800a1cc <_printf_float+0x16c>
 800a20e:	b913      	cbnz	r3, 800a216 <_printf_float+0x1b6>
 800a210:	6822      	ldr	r2, [r4, #0]
 800a212:	07d2      	lsls	r2, r2, #31
 800a214:	d501      	bpl.n	800a21a <_printf_float+0x1ba>
 800a216:	3302      	adds	r3, #2
 800a218:	e7f4      	b.n	800a204 <_printf_float+0x1a4>
 800a21a:	2301      	movs	r3, #1
 800a21c:	e7f2      	b.n	800a204 <_printf_float+0x1a4>
 800a21e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a222:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a224:	4299      	cmp	r1, r3
 800a226:	db05      	blt.n	800a234 <_printf_float+0x1d4>
 800a228:	6823      	ldr	r3, [r4, #0]
 800a22a:	6121      	str	r1, [r4, #16]
 800a22c:	07d8      	lsls	r0, r3, #31
 800a22e:	d5ea      	bpl.n	800a206 <_printf_float+0x1a6>
 800a230:	1c4b      	adds	r3, r1, #1
 800a232:	e7e7      	b.n	800a204 <_printf_float+0x1a4>
 800a234:	2900      	cmp	r1, #0
 800a236:	bfd4      	ite	le
 800a238:	f1c1 0202 	rsble	r2, r1, #2
 800a23c:	2201      	movgt	r2, #1
 800a23e:	4413      	add	r3, r2
 800a240:	e7e0      	b.n	800a204 <_printf_float+0x1a4>
 800a242:	6823      	ldr	r3, [r4, #0]
 800a244:	055a      	lsls	r2, r3, #21
 800a246:	d407      	bmi.n	800a258 <_printf_float+0x1f8>
 800a248:	6923      	ldr	r3, [r4, #16]
 800a24a:	4642      	mov	r2, r8
 800a24c:	4631      	mov	r1, r6
 800a24e:	4628      	mov	r0, r5
 800a250:	47b8      	blx	r7
 800a252:	3001      	adds	r0, #1
 800a254:	d12c      	bne.n	800a2b0 <_printf_float+0x250>
 800a256:	e764      	b.n	800a122 <_printf_float+0xc2>
 800a258:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a25c:	f240 80e0 	bls.w	800a420 <_printf_float+0x3c0>
 800a260:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a264:	2200      	movs	r2, #0
 800a266:	2300      	movs	r3, #0
 800a268:	f7f6 fc2e 	bl	8000ac8 <__aeabi_dcmpeq>
 800a26c:	2800      	cmp	r0, #0
 800a26e:	d034      	beq.n	800a2da <_printf_float+0x27a>
 800a270:	4a37      	ldr	r2, [pc, #220]	; (800a350 <_printf_float+0x2f0>)
 800a272:	2301      	movs	r3, #1
 800a274:	4631      	mov	r1, r6
 800a276:	4628      	mov	r0, r5
 800a278:	47b8      	blx	r7
 800a27a:	3001      	adds	r0, #1
 800a27c:	f43f af51 	beq.w	800a122 <_printf_float+0xc2>
 800a280:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a284:	429a      	cmp	r2, r3
 800a286:	db02      	blt.n	800a28e <_printf_float+0x22e>
 800a288:	6823      	ldr	r3, [r4, #0]
 800a28a:	07d8      	lsls	r0, r3, #31
 800a28c:	d510      	bpl.n	800a2b0 <_printf_float+0x250>
 800a28e:	ee18 3a10 	vmov	r3, s16
 800a292:	4652      	mov	r2, sl
 800a294:	4631      	mov	r1, r6
 800a296:	4628      	mov	r0, r5
 800a298:	47b8      	blx	r7
 800a29a:	3001      	adds	r0, #1
 800a29c:	f43f af41 	beq.w	800a122 <_printf_float+0xc2>
 800a2a0:	f04f 0800 	mov.w	r8, #0
 800a2a4:	f104 091a 	add.w	r9, r4, #26
 800a2a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2aa:	3b01      	subs	r3, #1
 800a2ac:	4543      	cmp	r3, r8
 800a2ae:	dc09      	bgt.n	800a2c4 <_printf_float+0x264>
 800a2b0:	6823      	ldr	r3, [r4, #0]
 800a2b2:	079b      	lsls	r3, r3, #30
 800a2b4:	f100 8105 	bmi.w	800a4c2 <_printf_float+0x462>
 800a2b8:	68e0      	ldr	r0, [r4, #12]
 800a2ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2bc:	4298      	cmp	r0, r3
 800a2be:	bfb8      	it	lt
 800a2c0:	4618      	movlt	r0, r3
 800a2c2:	e730      	b.n	800a126 <_printf_float+0xc6>
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	464a      	mov	r2, r9
 800a2c8:	4631      	mov	r1, r6
 800a2ca:	4628      	mov	r0, r5
 800a2cc:	47b8      	blx	r7
 800a2ce:	3001      	adds	r0, #1
 800a2d0:	f43f af27 	beq.w	800a122 <_printf_float+0xc2>
 800a2d4:	f108 0801 	add.w	r8, r8, #1
 800a2d8:	e7e6      	b.n	800a2a8 <_printf_float+0x248>
 800a2da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	dc39      	bgt.n	800a354 <_printf_float+0x2f4>
 800a2e0:	4a1b      	ldr	r2, [pc, #108]	; (800a350 <_printf_float+0x2f0>)
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	4631      	mov	r1, r6
 800a2e6:	4628      	mov	r0, r5
 800a2e8:	47b8      	blx	r7
 800a2ea:	3001      	adds	r0, #1
 800a2ec:	f43f af19 	beq.w	800a122 <_printf_float+0xc2>
 800a2f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a2f4:	4313      	orrs	r3, r2
 800a2f6:	d102      	bne.n	800a2fe <_printf_float+0x29e>
 800a2f8:	6823      	ldr	r3, [r4, #0]
 800a2fa:	07d9      	lsls	r1, r3, #31
 800a2fc:	d5d8      	bpl.n	800a2b0 <_printf_float+0x250>
 800a2fe:	ee18 3a10 	vmov	r3, s16
 800a302:	4652      	mov	r2, sl
 800a304:	4631      	mov	r1, r6
 800a306:	4628      	mov	r0, r5
 800a308:	47b8      	blx	r7
 800a30a:	3001      	adds	r0, #1
 800a30c:	f43f af09 	beq.w	800a122 <_printf_float+0xc2>
 800a310:	f04f 0900 	mov.w	r9, #0
 800a314:	f104 0a1a 	add.w	sl, r4, #26
 800a318:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a31a:	425b      	negs	r3, r3
 800a31c:	454b      	cmp	r3, r9
 800a31e:	dc01      	bgt.n	800a324 <_printf_float+0x2c4>
 800a320:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a322:	e792      	b.n	800a24a <_printf_float+0x1ea>
 800a324:	2301      	movs	r3, #1
 800a326:	4652      	mov	r2, sl
 800a328:	4631      	mov	r1, r6
 800a32a:	4628      	mov	r0, r5
 800a32c:	47b8      	blx	r7
 800a32e:	3001      	adds	r0, #1
 800a330:	f43f aef7 	beq.w	800a122 <_printf_float+0xc2>
 800a334:	f109 0901 	add.w	r9, r9, #1
 800a338:	e7ee      	b.n	800a318 <_printf_float+0x2b8>
 800a33a:	bf00      	nop
 800a33c:	7fefffff 	.word	0x7fefffff
 800a340:	0801945c 	.word	0x0801945c
 800a344:	08019460 	.word	0x08019460
 800a348:	08019468 	.word	0x08019468
 800a34c:	08019464 	.word	0x08019464
 800a350:	0801946c 	.word	0x0801946c
 800a354:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a356:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a358:	429a      	cmp	r2, r3
 800a35a:	bfa8      	it	ge
 800a35c:	461a      	movge	r2, r3
 800a35e:	2a00      	cmp	r2, #0
 800a360:	4691      	mov	r9, r2
 800a362:	dc37      	bgt.n	800a3d4 <_printf_float+0x374>
 800a364:	f04f 0b00 	mov.w	fp, #0
 800a368:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a36c:	f104 021a 	add.w	r2, r4, #26
 800a370:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a372:	9305      	str	r3, [sp, #20]
 800a374:	eba3 0309 	sub.w	r3, r3, r9
 800a378:	455b      	cmp	r3, fp
 800a37a:	dc33      	bgt.n	800a3e4 <_printf_float+0x384>
 800a37c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a380:	429a      	cmp	r2, r3
 800a382:	db3b      	blt.n	800a3fc <_printf_float+0x39c>
 800a384:	6823      	ldr	r3, [r4, #0]
 800a386:	07da      	lsls	r2, r3, #31
 800a388:	d438      	bmi.n	800a3fc <_printf_float+0x39c>
 800a38a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a38c:	9b05      	ldr	r3, [sp, #20]
 800a38e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a390:	1ad3      	subs	r3, r2, r3
 800a392:	eba2 0901 	sub.w	r9, r2, r1
 800a396:	4599      	cmp	r9, r3
 800a398:	bfa8      	it	ge
 800a39a:	4699      	movge	r9, r3
 800a39c:	f1b9 0f00 	cmp.w	r9, #0
 800a3a0:	dc35      	bgt.n	800a40e <_printf_float+0x3ae>
 800a3a2:	f04f 0800 	mov.w	r8, #0
 800a3a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a3aa:	f104 0a1a 	add.w	sl, r4, #26
 800a3ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a3b2:	1a9b      	subs	r3, r3, r2
 800a3b4:	eba3 0309 	sub.w	r3, r3, r9
 800a3b8:	4543      	cmp	r3, r8
 800a3ba:	f77f af79 	ble.w	800a2b0 <_printf_float+0x250>
 800a3be:	2301      	movs	r3, #1
 800a3c0:	4652      	mov	r2, sl
 800a3c2:	4631      	mov	r1, r6
 800a3c4:	4628      	mov	r0, r5
 800a3c6:	47b8      	blx	r7
 800a3c8:	3001      	adds	r0, #1
 800a3ca:	f43f aeaa 	beq.w	800a122 <_printf_float+0xc2>
 800a3ce:	f108 0801 	add.w	r8, r8, #1
 800a3d2:	e7ec      	b.n	800a3ae <_printf_float+0x34e>
 800a3d4:	4613      	mov	r3, r2
 800a3d6:	4631      	mov	r1, r6
 800a3d8:	4642      	mov	r2, r8
 800a3da:	4628      	mov	r0, r5
 800a3dc:	47b8      	blx	r7
 800a3de:	3001      	adds	r0, #1
 800a3e0:	d1c0      	bne.n	800a364 <_printf_float+0x304>
 800a3e2:	e69e      	b.n	800a122 <_printf_float+0xc2>
 800a3e4:	2301      	movs	r3, #1
 800a3e6:	4631      	mov	r1, r6
 800a3e8:	4628      	mov	r0, r5
 800a3ea:	9205      	str	r2, [sp, #20]
 800a3ec:	47b8      	blx	r7
 800a3ee:	3001      	adds	r0, #1
 800a3f0:	f43f ae97 	beq.w	800a122 <_printf_float+0xc2>
 800a3f4:	9a05      	ldr	r2, [sp, #20]
 800a3f6:	f10b 0b01 	add.w	fp, fp, #1
 800a3fa:	e7b9      	b.n	800a370 <_printf_float+0x310>
 800a3fc:	ee18 3a10 	vmov	r3, s16
 800a400:	4652      	mov	r2, sl
 800a402:	4631      	mov	r1, r6
 800a404:	4628      	mov	r0, r5
 800a406:	47b8      	blx	r7
 800a408:	3001      	adds	r0, #1
 800a40a:	d1be      	bne.n	800a38a <_printf_float+0x32a>
 800a40c:	e689      	b.n	800a122 <_printf_float+0xc2>
 800a40e:	9a05      	ldr	r2, [sp, #20]
 800a410:	464b      	mov	r3, r9
 800a412:	4442      	add	r2, r8
 800a414:	4631      	mov	r1, r6
 800a416:	4628      	mov	r0, r5
 800a418:	47b8      	blx	r7
 800a41a:	3001      	adds	r0, #1
 800a41c:	d1c1      	bne.n	800a3a2 <_printf_float+0x342>
 800a41e:	e680      	b.n	800a122 <_printf_float+0xc2>
 800a420:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a422:	2a01      	cmp	r2, #1
 800a424:	dc01      	bgt.n	800a42a <_printf_float+0x3ca>
 800a426:	07db      	lsls	r3, r3, #31
 800a428:	d538      	bpl.n	800a49c <_printf_float+0x43c>
 800a42a:	2301      	movs	r3, #1
 800a42c:	4642      	mov	r2, r8
 800a42e:	4631      	mov	r1, r6
 800a430:	4628      	mov	r0, r5
 800a432:	47b8      	blx	r7
 800a434:	3001      	adds	r0, #1
 800a436:	f43f ae74 	beq.w	800a122 <_printf_float+0xc2>
 800a43a:	ee18 3a10 	vmov	r3, s16
 800a43e:	4652      	mov	r2, sl
 800a440:	4631      	mov	r1, r6
 800a442:	4628      	mov	r0, r5
 800a444:	47b8      	blx	r7
 800a446:	3001      	adds	r0, #1
 800a448:	f43f ae6b 	beq.w	800a122 <_printf_float+0xc2>
 800a44c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a450:	2200      	movs	r2, #0
 800a452:	2300      	movs	r3, #0
 800a454:	f7f6 fb38 	bl	8000ac8 <__aeabi_dcmpeq>
 800a458:	b9d8      	cbnz	r0, 800a492 <_printf_float+0x432>
 800a45a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a45c:	f108 0201 	add.w	r2, r8, #1
 800a460:	3b01      	subs	r3, #1
 800a462:	4631      	mov	r1, r6
 800a464:	4628      	mov	r0, r5
 800a466:	47b8      	blx	r7
 800a468:	3001      	adds	r0, #1
 800a46a:	d10e      	bne.n	800a48a <_printf_float+0x42a>
 800a46c:	e659      	b.n	800a122 <_printf_float+0xc2>
 800a46e:	2301      	movs	r3, #1
 800a470:	4652      	mov	r2, sl
 800a472:	4631      	mov	r1, r6
 800a474:	4628      	mov	r0, r5
 800a476:	47b8      	blx	r7
 800a478:	3001      	adds	r0, #1
 800a47a:	f43f ae52 	beq.w	800a122 <_printf_float+0xc2>
 800a47e:	f108 0801 	add.w	r8, r8, #1
 800a482:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a484:	3b01      	subs	r3, #1
 800a486:	4543      	cmp	r3, r8
 800a488:	dcf1      	bgt.n	800a46e <_printf_float+0x40e>
 800a48a:	464b      	mov	r3, r9
 800a48c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a490:	e6dc      	b.n	800a24c <_printf_float+0x1ec>
 800a492:	f04f 0800 	mov.w	r8, #0
 800a496:	f104 0a1a 	add.w	sl, r4, #26
 800a49a:	e7f2      	b.n	800a482 <_printf_float+0x422>
 800a49c:	2301      	movs	r3, #1
 800a49e:	4642      	mov	r2, r8
 800a4a0:	e7df      	b.n	800a462 <_printf_float+0x402>
 800a4a2:	2301      	movs	r3, #1
 800a4a4:	464a      	mov	r2, r9
 800a4a6:	4631      	mov	r1, r6
 800a4a8:	4628      	mov	r0, r5
 800a4aa:	47b8      	blx	r7
 800a4ac:	3001      	adds	r0, #1
 800a4ae:	f43f ae38 	beq.w	800a122 <_printf_float+0xc2>
 800a4b2:	f108 0801 	add.w	r8, r8, #1
 800a4b6:	68e3      	ldr	r3, [r4, #12]
 800a4b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a4ba:	1a5b      	subs	r3, r3, r1
 800a4bc:	4543      	cmp	r3, r8
 800a4be:	dcf0      	bgt.n	800a4a2 <_printf_float+0x442>
 800a4c0:	e6fa      	b.n	800a2b8 <_printf_float+0x258>
 800a4c2:	f04f 0800 	mov.w	r8, #0
 800a4c6:	f104 0919 	add.w	r9, r4, #25
 800a4ca:	e7f4      	b.n	800a4b6 <_printf_float+0x456>

0800a4cc <_printf_common>:
 800a4cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4d0:	4616      	mov	r6, r2
 800a4d2:	4699      	mov	r9, r3
 800a4d4:	688a      	ldr	r2, [r1, #8]
 800a4d6:	690b      	ldr	r3, [r1, #16]
 800a4d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a4dc:	4293      	cmp	r3, r2
 800a4de:	bfb8      	it	lt
 800a4e0:	4613      	movlt	r3, r2
 800a4e2:	6033      	str	r3, [r6, #0]
 800a4e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a4e8:	4607      	mov	r7, r0
 800a4ea:	460c      	mov	r4, r1
 800a4ec:	b10a      	cbz	r2, 800a4f2 <_printf_common+0x26>
 800a4ee:	3301      	adds	r3, #1
 800a4f0:	6033      	str	r3, [r6, #0]
 800a4f2:	6823      	ldr	r3, [r4, #0]
 800a4f4:	0699      	lsls	r1, r3, #26
 800a4f6:	bf42      	ittt	mi
 800a4f8:	6833      	ldrmi	r3, [r6, #0]
 800a4fa:	3302      	addmi	r3, #2
 800a4fc:	6033      	strmi	r3, [r6, #0]
 800a4fe:	6825      	ldr	r5, [r4, #0]
 800a500:	f015 0506 	ands.w	r5, r5, #6
 800a504:	d106      	bne.n	800a514 <_printf_common+0x48>
 800a506:	f104 0a19 	add.w	sl, r4, #25
 800a50a:	68e3      	ldr	r3, [r4, #12]
 800a50c:	6832      	ldr	r2, [r6, #0]
 800a50e:	1a9b      	subs	r3, r3, r2
 800a510:	42ab      	cmp	r3, r5
 800a512:	dc26      	bgt.n	800a562 <_printf_common+0x96>
 800a514:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a518:	1e13      	subs	r3, r2, #0
 800a51a:	6822      	ldr	r2, [r4, #0]
 800a51c:	bf18      	it	ne
 800a51e:	2301      	movne	r3, #1
 800a520:	0692      	lsls	r2, r2, #26
 800a522:	d42b      	bmi.n	800a57c <_printf_common+0xb0>
 800a524:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a528:	4649      	mov	r1, r9
 800a52a:	4638      	mov	r0, r7
 800a52c:	47c0      	blx	r8
 800a52e:	3001      	adds	r0, #1
 800a530:	d01e      	beq.n	800a570 <_printf_common+0xa4>
 800a532:	6823      	ldr	r3, [r4, #0]
 800a534:	68e5      	ldr	r5, [r4, #12]
 800a536:	6832      	ldr	r2, [r6, #0]
 800a538:	f003 0306 	and.w	r3, r3, #6
 800a53c:	2b04      	cmp	r3, #4
 800a53e:	bf08      	it	eq
 800a540:	1aad      	subeq	r5, r5, r2
 800a542:	68a3      	ldr	r3, [r4, #8]
 800a544:	6922      	ldr	r2, [r4, #16]
 800a546:	bf0c      	ite	eq
 800a548:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a54c:	2500      	movne	r5, #0
 800a54e:	4293      	cmp	r3, r2
 800a550:	bfc4      	itt	gt
 800a552:	1a9b      	subgt	r3, r3, r2
 800a554:	18ed      	addgt	r5, r5, r3
 800a556:	2600      	movs	r6, #0
 800a558:	341a      	adds	r4, #26
 800a55a:	42b5      	cmp	r5, r6
 800a55c:	d11a      	bne.n	800a594 <_printf_common+0xc8>
 800a55e:	2000      	movs	r0, #0
 800a560:	e008      	b.n	800a574 <_printf_common+0xa8>
 800a562:	2301      	movs	r3, #1
 800a564:	4652      	mov	r2, sl
 800a566:	4649      	mov	r1, r9
 800a568:	4638      	mov	r0, r7
 800a56a:	47c0      	blx	r8
 800a56c:	3001      	adds	r0, #1
 800a56e:	d103      	bne.n	800a578 <_printf_common+0xac>
 800a570:	f04f 30ff 	mov.w	r0, #4294967295
 800a574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a578:	3501      	adds	r5, #1
 800a57a:	e7c6      	b.n	800a50a <_printf_common+0x3e>
 800a57c:	18e1      	adds	r1, r4, r3
 800a57e:	1c5a      	adds	r2, r3, #1
 800a580:	2030      	movs	r0, #48	; 0x30
 800a582:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a586:	4422      	add	r2, r4
 800a588:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a58c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a590:	3302      	adds	r3, #2
 800a592:	e7c7      	b.n	800a524 <_printf_common+0x58>
 800a594:	2301      	movs	r3, #1
 800a596:	4622      	mov	r2, r4
 800a598:	4649      	mov	r1, r9
 800a59a:	4638      	mov	r0, r7
 800a59c:	47c0      	blx	r8
 800a59e:	3001      	adds	r0, #1
 800a5a0:	d0e6      	beq.n	800a570 <_printf_common+0xa4>
 800a5a2:	3601      	adds	r6, #1
 800a5a4:	e7d9      	b.n	800a55a <_printf_common+0x8e>
	...

0800a5a8 <_printf_i>:
 800a5a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a5ac:	460c      	mov	r4, r1
 800a5ae:	4691      	mov	r9, r2
 800a5b0:	7e27      	ldrb	r7, [r4, #24]
 800a5b2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a5b4:	2f78      	cmp	r7, #120	; 0x78
 800a5b6:	4680      	mov	r8, r0
 800a5b8:	469a      	mov	sl, r3
 800a5ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a5be:	d807      	bhi.n	800a5d0 <_printf_i+0x28>
 800a5c0:	2f62      	cmp	r7, #98	; 0x62
 800a5c2:	d80a      	bhi.n	800a5da <_printf_i+0x32>
 800a5c4:	2f00      	cmp	r7, #0
 800a5c6:	f000 80d8 	beq.w	800a77a <_printf_i+0x1d2>
 800a5ca:	2f58      	cmp	r7, #88	; 0x58
 800a5cc:	f000 80a3 	beq.w	800a716 <_printf_i+0x16e>
 800a5d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a5d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a5d8:	e03a      	b.n	800a650 <_printf_i+0xa8>
 800a5da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a5de:	2b15      	cmp	r3, #21
 800a5e0:	d8f6      	bhi.n	800a5d0 <_printf_i+0x28>
 800a5e2:	a001      	add	r0, pc, #4	; (adr r0, 800a5e8 <_printf_i+0x40>)
 800a5e4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a5e8:	0800a641 	.word	0x0800a641
 800a5ec:	0800a655 	.word	0x0800a655
 800a5f0:	0800a5d1 	.word	0x0800a5d1
 800a5f4:	0800a5d1 	.word	0x0800a5d1
 800a5f8:	0800a5d1 	.word	0x0800a5d1
 800a5fc:	0800a5d1 	.word	0x0800a5d1
 800a600:	0800a655 	.word	0x0800a655
 800a604:	0800a5d1 	.word	0x0800a5d1
 800a608:	0800a5d1 	.word	0x0800a5d1
 800a60c:	0800a5d1 	.word	0x0800a5d1
 800a610:	0800a5d1 	.word	0x0800a5d1
 800a614:	0800a761 	.word	0x0800a761
 800a618:	0800a685 	.word	0x0800a685
 800a61c:	0800a743 	.word	0x0800a743
 800a620:	0800a5d1 	.word	0x0800a5d1
 800a624:	0800a5d1 	.word	0x0800a5d1
 800a628:	0800a783 	.word	0x0800a783
 800a62c:	0800a5d1 	.word	0x0800a5d1
 800a630:	0800a685 	.word	0x0800a685
 800a634:	0800a5d1 	.word	0x0800a5d1
 800a638:	0800a5d1 	.word	0x0800a5d1
 800a63c:	0800a74b 	.word	0x0800a74b
 800a640:	680b      	ldr	r3, [r1, #0]
 800a642:	1d1a      	adds	r2, r3, #4
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	600a      	str	r2, [r1, #0]
 800a648:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a64c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a650:	2301      	movs	r3, #1
 800a652:	e0a3      	b.n	800a79c <_printf_i+0x1f4>
 800a654:	6825      	ldr	r5, [r4, #0]
 800a656:	6808      	ldr	r0, [r1, #0]
 800a658:	062e      	lsls	r6, r5, #24
 800a65a:	f100 0304 	add.w	r3, r0, #4
 800a65e:	d50a      	bpl.n	800a676 <_printf_i+0xce>
 800a660:	6805      	ldr	r5, [r0, #0]
 800a662:	600b      	str	r3, [r1, #0]
 800a664:	2d00      	cmp	r5, #0
 800a666:	da03      	bge.n	800a670 <_printf_i+0xc8>
 800a668:	232d      	movs	r3, #45	; 0x2d
 800a66a:	426d      	negs	r5, r5
 800a66c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a670:	485e      	ldr	r0, [pc, #376]	; (800a7ec <_printf_i+0x244>)
 800a672:	230a      	movs	r3, #10
 800a674:	e019      	b.n	800a6aa <_printf_i+0x102>
 800a676:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a67a:	6805      	ldr	r5, [r0, #0]
 800a67c:	600b      	str	r3, [r1, #0]
 800a67e:	bf18      	it	ne
 800a680:	b22d      	sxthne	r5, r5
 800a682:	e7ef      	b.n	800a664 <_printf_i+0xbc>
 800a684:	680b      	ldr	r3, [r1, #0]
 800a686:	6825      	ldr	r5, [r4, #0]
 800a688:	1d18      	adds	r0, r3, #4
 800a68a:	6008      	str	r0, [r1, #0]
 800a68c:	0628      	lsls	r0, r5, #24
 800a68e:	d501      	bpl.n	800a694 <_printf_i+0xec>
 800a690:	681d      	ldr	r5, [r3, #0]
 800a692:	e002      	b.n	800a69a <_printf_i+0xf2>
 800a694:	0669      	lsls	r1, r5, #25
 800a696:	d5fb      	bpl.n	800a690 <_printf_i+0xe8>
 800a698:	881d      	ldrh	r5, [r3, #0]
 800a69a:	4854      	ldr	r0, [pc, #336]	; (800a7ec <_printf_i+0x244>)
 800a69c:	2f6f      	cmp	r7, #111	; 0x6f
 800a69e:	bf0c      	ite	eq
 800a6a0:	2308      	moveq	r3, #8
 800a6a2:	230a      	movne	r3, #10
 800a6a4:	2100      	movs	r1, #0
 800a6a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a6aa:	6866      	ldr	r6, [r4, #4]
 800a6ac:	60a6      	str	r6, [r4, #8]
 800a6ae:	2e00      	cmp	r6, #0
 800a6b0:	bfa2      	ittt	ge
 800a6b2:	6821      	ldrge	r1, [r4, #0]
 800a6b4:	f021 0104 	bicge.w	r1, r1, #4
 800a6b8:	6021      	strge	r1, [r4, #0]
 800a6ba:	b90d      	cbnz	r5, 800a6c0 <_printf_i+0x118>
 800a6bc:	2e00      	cmp	r6, #0
 800a6be:	d04d      	beq.n	800a75c <_printf_i+0x1b4>
 800a6c0:	4616      	mov	r6, r2
 800a6c2:	fbb5 f1f3 	udiv	r1, r5, r3
 800a6c6:	fb03 5711 	mls	r7, r3, r1, r5
 800a6ca:	5dc7      	ldrb	r7, [r0, r7]
 800a6cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a6d0:	462f      	mov	r7, r5
 800a6d2:	42bb      	cmp	r3, r7
 800a6d4:	460d      	mov	r5, r1
 800a6d6:	d9f4      	bls.n	800a6c2 <_printf_i+0x11a>
 800a6d8:	2b08      	cmp	r3, #8
 800a6da:	d10b      	bne.n	800a6f4 <_printf_i+0x14c>
 800a6dc:	6823      	ldr	r3, [r4, #0]
 800a6de:	07df      	lsls	r7, r3, #31
 800a6e0:	d508      	bpl.n	800a6f4 <_printf_i+0x14c>
 800a6e2:	6923      	ldr	r3, [r4, #16]
 800a6e4:	6861      	ldr	r1, [r4, #4]
 800a6e6:	4299      	cmp	r1, r3
 800a6e8:	bfde      	ittt	le
 800a6ea:	2330      	movle	r3, #48	; 0x30
 800a6ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a6f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a6f4:	1b92      	subs	r2, r2, r6
 800a6f6:	6122      	str	r2, [r4, #16]
 800a6f8:	f8cd a000 	str.w	sl, [sp]
 800a6fc:	464b      	mov	r3, r9
 800a6fe:	aa03      	add	r2, sp, #12
 800a700:	4621      	mov	r1, r4
 800a702:	4640      	mov	r0, r8
 800a704:	f7ff fee2 	bl	800a4cc <_printf_common>
 800a708:	3001      	adds	r0, #1
 800a70a:	d14c      	bne.n	800a7a6 <_printf_i+0x1fe>
 800a70c:	f04f 30ff 	mov.w	r0, #4294967295
 800a710:	b004      	add	sp, #16
 800a712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a716:	4835      	ldr	r0, [pc, #212]	; (800a7ec <_printf_i+0x244>)
 800a718:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a71c:	6823      	ldr	r3, [r4, #0]
 800a71e:	680e      	ldr	r6, [r1, #0]
 800a720:	061f      	lsls	r7, r3, #24
 800a722:	f856 5b04 	ldr.w	r5, [r6], #4
 800a726:	600e      	str	r6, [r1, #0]
 800a728:	d514      	bpl.n	800a754 <_printf_i+0x1ac>
 800a72a:	07d9      	lsls	r1, r3, #31
 800a72c:	bf44      	itt	mi
 800a72e:	f043 0320 	orrmi.w	r3, r3, #32
 800a732:	6023      	strmi	r3, [r4, #0]
 800a734:	b91d      	cbnz	r5, 800a73e <_printf_i+0x196>
 800a736:	6823      	ldr	r3, [r4, #0]
 800a738:	f023 0320 	bic.w	r3, r3, #32
 800a73c:	6023      	str	r3, [r4, #0]
 800a73e:	2310      	movs	r3, #16
 800a740:	e7b0      	b.n	800a6a4 <_printf_i+0xfc>
 800a742:	6823      	ldr	r3, [r4, #0]
 800a744:	f043 0320 	orr.w	r3, r3, #32
 800a748:	6023      	str	r3, [r4, #0]
 800a74a:	2378      	movs	r3, #120	; 0x78
 800a74c:	4828      	ldr	r0, [pc, #160]	; (800a7f0 <_printf_i+0x248>)
 800a74e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a752:	e7e3      	b.n	800a71c <_printf_i+0x174>
 800a754:	065e      	lsls	r6, r3, #25
 800a756:	bf48      	it	mi
 800a758:	b2ad      	uxthmi	r5, r5
 800a75a:	e7e6      	b.n	800a72a <_printf_i+0x182>
 800a75c:	4616      	mov	r6, r2
 800a75e:	e7bb      	b.n	800a6d8 <_printf_i+0x130>
 800a760:	680b      	ldr	r3, [r1, #0]
 800a762:	6826      	ldr	r6, [r4, #0]
 800a764:	6960      	ldr	r0, [r4, #20]
 800a766:	1d1d      	adds	r5, r3, #4
 800a768:	600d      	str	r5, [r1, #0]
 800a76a:	0635      	lsls	r5, r6, #24
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	d501      	bpl.n	800a774 <_printf_i+0x1cc>
 800a770:	6018      	str	r0, [r3, #0]
 800a772:	e002      	b.n	800a77a <_printf_i+0x1d2>
 800a774:	0671      	lsls	r1, r6, #25
 800a776:	d5fb      	bpl.n	800a770 <_printf_i+0x1c8>
 800a778:	8018      	strh	r0, [r3, #0]
 800a77a:	2300      	movs	r3, #0
 800a77c:	6123      	str	r3, [r4, #16]
 800a77e:	4616      	mov	r6, r2
 800a780:	e7ba      	b.n	800a6f8 <_printf_i+0x150>
 800a782:	680b      	ldr	r3, [r1, #0]
 800a784:	1d1a      	adds	r2, r3, #4
 800a786:	600a      	str	r2, [r1, #0]
 800a788:	681e      	ldr	r6, [r3, #0]
 800a78a:	6862      	ldr	r2, [r4, #4]
 800a78c:	2100      	movs	r1, #0
 800a78e:	4630      	mov	r0, r6
 800a790:	f7f5 fd26 	bl	80001e0 <memchr>
 800a794:	b108      	cbz	r0, 800a79a <_printf_i+0x1f2>
 800a796:	1b80      	subs	r0, r0, r6
 800a798:	6060      	str	r0, [r4, #4]
 800a79a:	6863      	ldr	r3, [r4, #4]
 800a79c:	6123      	str	r3, [r4, #16]
 800a79e:	2300      	movs	r3, #0
 800a7a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a7a4:	e7a8      	b.n	800a6f8 <_printf_i+0x150>
 800a7a6:	6923      	ldr	r3, [r4, #16]
 800a7a8:	4632      	mov	r2, r6
 800a7aa:	4649      	mov	r1, r9
 800a7ac:	4640      	mov	r0, r8
 800a7ae:	47d0      	blx	sl
 800a7b0:	3001      	adds	r0, #1
 800a7b2:	d0ab      	beq.n	800a70c <_printf_i+0x164>
 800a7b4:	6823      	ldr	r3, [r4, #0]
 800a7b6:	079b      	lsls	r3, r3, #30
 800a7b8:	d413      	bmi.n	800a7e2 <_printf_i+0x23a>
 800a7ba:	68e0      	ldr	r0, [r4, #12]
 800a7bc:	9b03      	ldr	r3, [sp, #12]
 800a7be:	4298      	cmp	r0, r3
 800a7c0:	bfb8      	it	lt
 800a7c2:	4618      	movlt	r0, r3
 800a7c4:	e7a4      	b.n	800a710 <_printf_i+0x168>
 800a7c6:	2301      	movs	r3, #1
 800a7c8:	4632      	mov	r2, r6
 800a7ca:	4649      	mov	r1, r9
 800a7cc:	4640      	mov	r0, r8
 800a7ce:	47d0      	blx	sl
 800a7d0:	3001      	adds	r0, #1
 800a7d2:	d09b      	beq.n	800a70c <_printf_i+0x164>
 800a7d4:	3501      	adds	r5, #1
 800a7d6:	68e3      	ldr	r3, [r4, #12]
 800a7d8:	9903      	ldr	r1, [sp, #12]
 800a7da:	1a5b      	subs	r3, r3, r1
 800a7dc:	42ab      	cmp	r3, r5
 800a7de:	dcf2      	bgt.n	800a7c6 <_printf_i+0x21e>
 800a7e0:	e7eb      	b.n	800a7ba <_printf_i+0x212>
 800a7e2:	2500      	movs	r5, #0
 800a7e4:	f104 0619 	add.w	r6, r4, #25
 800a7e8:	e7f5      	b.n	800a7d6 <_printf_i+0x22e>
 800a7ea:	bf00      	nop
 800a7ec:	0801946e 	.word	0x0801946e
 800a7f0:	0801947f 	.word	0x0801947f

0800a7f4 <_sbrk_r>:
 800a7f4:	b538      	push	{r3, r4, r5, lr}
 800a7f6:	4d06      	ldr	r5, [pc, #24]	; (800a810 <_sbrk_r+0x1c>)
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	4604      	mov	r4, r0
 800a7fc:	4608      	mov	r0, r1
 800a7fe:	602b      	str	r3, [r5, #0]
 800a800:	f7f7 f94e 	bl	8001aa0 <_sbrk>
 800a804:	1c43      	adds	r3, r0, #1
 800a806:	d102      	bne.n	800a80e <_sbrk_r+0x1a>
 800a808:	682b      	ldr	r3, [r5, #0]
 800a80a:	b103      	cbz	r3, 800a80e <_sbrk_r+0x1a>
 800a80c:	6023      	str	r3, [r4, #0]
 800a80e:	bd38      	pop	{r3, r4, r5, pc}
 800a810:	2000c368 	.word	0x2000c368

0800a814 <siprintf>:
 800a814:	b40e      	push	{r1, r2, r3}
 800a816:	b500      	push	{lr}
 800a818:	b09c      	sub	sp, #112	; 0x70
 800a81a:	ab1d      	add	r3, sp, #116	; 0x74
 800a81c:	9002      	str	r0, [sp, #8]
 800a81e:	9006      	str	r0, [sp, #24]
 800a820:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a824:	4809      	ldr	r0, [pc, #36]	; (800a84c <siprintf+0x38>)
 800a826:	9107      	str	r1, [sp, #28]
 800a828:	9104      	str	r1, [sp, #16]
 800a82a:	4909      	ldr	r1, [pc, #36]	; (800a850 <siprintf+0x3c>)
 800a82c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a830:	9105      	str	r1, [sp, #20]
 800a832:	6800      	ldr	r0, [r0, #0]
 800a834:	9301      	str	r3, [sp, #4]
 800a836:	a902      	add	r1, sp, #8
 800a838:	f001 fb00 	bl	800be3c <_svfiprintf_r>
 800a83c:	9b02      	ldr	r3, [sp, #8]
 800a83e:	2200      	movs	r2, #0
 800a840:	701a      	strb	r2, [r3, #0]
 800a842:	b01c      	add	sp, #112	; 0x70
 800a844:	f85d eb04 	ldr.w	lr, [sp], #4
 800a848:	b003      	add	sp, #12
 800a84a:	4770      	bx	lr
 800a84c:	20000520 	.word	0x20000520
 800a850:	ffff0208 	.word	0xffff0208

0800a854 <stpcpy>:
 800a854:	4603      	mov	r3, r0
 800a856:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a85a:	4618      	mov	r0, r3
 800a85c:	f803 2b01 	strb.w	r2, [r3], #1
 800a860:	2a00      	cmp	r2, #0
 800a862:	d1f8      	bne.n	800a856 <stpcpy+0x2>
 800a864:	4770      	bx	lr

0800a866 <strcat>:
 800a866:	b510      	push	{r4, lr}
 800a868:	4602      	mov	r2, r0
 800a86a:	7814      	ldrb	r4, [r2, #0]
 800a86c:	4613      	mov	r3, r2
 800a86e:	3201      	adds	r2, #1
 800a870:	2c00      	cmp	r4, #0
 800a872:	d1fa      	bne.n	800a86a <strcat+0x4>
 800a874:	3b01      	subs	r3, #1
 800a876:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a87a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a87e:	2a00      	cmp	r2, #0
 800a880:	d1f9      	bne.n	800a876 <strcat+0x10>
 800a882:	bd10      	pop	{r4, pc}

0800a884 <_vsniprintf_r>:
 800a884:	b530      	push	{r4, r5, lr}
 800a886:	1e14      	subs	r4, r2, #0
 800a888:	4605      	mov	r5, r0
 800a88a:	b09b      	sub	sp, #108	; 0x6c
 800a88c:	4618      	mov	r0, r3
 800a88e:	da05      	bge.n	800a89c <_vsniprintf_r+0x18>
 800a890:	238b      	movs	r3, #139	; 0x8b
 800a892:	602b      	str	r3, [r5, #0]
 800a894:	f04f 30ff 	mov.w	r0, #4294967295
 800a898:	b01b      	add	sp, #108	; 0x6c
 800a89a:	bd30      	pop	{r4, r5, pc}
 800a89c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a8a0:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a8a4:	bf14      	ite	ne
 800a8a6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a8aa:	4623      	moveq	r3, r4
 800a8ac:	9302      	str	r3, [sp, #8]
 800a8ae:	9305      	str	r3, [sp, #20]
 800a8b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a8b4:	9100      	str	r1, [sp, #0]
 800a8b6:	9104      	str	r1, [sp, #16]
 800a8b8:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a8bc:	4602      	mov	r2, r0
 800a8be:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a8c0:	4669      	mov	r1, sp
 800a8c2:	4628      	mov	r0, r5
 800a8c4:	f001 faba 	bl	800be3c <_svfiprintf_r>
 800a8c8:	1c43      	adds	r3, r0, #1
 800a8ca:	bfbc      	itt	lt
 800a8cc:	238b      	movlt	r3, #139	; 0x8b
 800a8ce:	602b      	strlt	r3, [r5, #0]
 800a8d0:	2c00      	cmp	r4, #0
 800a8d2:	d0e1      	beq.n	800a898 <_vsniprintf_r+0x14>
 800a8d4:	9b00      	ldr	r3, [sp, #0]
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	701a      	strb	r2, [r3, #0]
 800a8da:	e7dd      	b.n	800a898 <_vsniprintf_r+0x14>

0800a8dc <vsniprintf>:
 800a8dc:	b507      	push	{r0, r1, r2, lr}
 800a8de:	9300      	str	r3, [sp, #0]
 800a8e0:	4613      	mov	r3, r2
 800a8e2:	460a      	mov	r2, r1
 800a8e4:	4601      	mov	r1, r0
 800a8e6:	4803      	ldr	r0, [pc, #12]	; (800a8f4 <vsniprintf+0x18>)
 800a8e8:	6800      	ldr	r0, [r0, #0]
 800a8ea:	f7ff ffcb 	bl	800a884 <_vsniprintf_r>
 800a8ee:	b003      	add	sp, #12
 800a8f0:	f85d fb04 	ldr.w	pc, [sp], #4
 800a8f4:	20000520 	.word	0x20000520

0800a8f8 <__assert_func>:
 800a8f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a8fa:	4614      	mov	r4, r2
 800a8fc:	461a      	mov	r2, r3
 800a8fe:	4b09      	ldr	r3, [pc, #36]	; (800a924 <__assert_func+0x2c>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	4605      	mov	r5, r0
 800a904:	68d8      	ldr	r0, [r3, #12]
 800a906:	b14c      	cbz	r4, 800a91c <__assert_func+0x24>
 800a908:	4b07      	ldr	r3, [pc, #28]	; (800a928 <__assert_func+0x30>)
 800a90a:	9100      	str	r1, [sp, #0]
 800a90c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a910:	4906      	ldr	r1, [pc, #24]	; (800a92c <__assert_func+0x34>)
 800a912:	462b      	mov	r3, r5
 800a914:	f000 fe88 	bl	800b628 <fiprintf>
 800a918:	f001 fdaa 	bl	800c470 <abort>
 800a91c:	4b04      	ldr	r3, [pc, #16]	; (800a930 <__assert_func+0x38>)
 800a91e:	461c      	mov	r4, r3
 800a920:	e7f3      	b.n	800a90a <__assert_func+0x12>
 800a922:	bf00      	nop
 800a924:	20000520 	.word	0x20000520
 800a928:	08019490 	.word	0x08019490
 800a92c:	0801949d 	.word	0x0801949d
 800a930:	080194cb 	.word	0x080194cb

0800a934 <quorem>:
 800a934:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a938:	6903      	ldr	r3, [r0, #16]
 800a93a:	690c      	ldr	r4, [r1, #16]
 800a93c:	42a3      	cmp	r3, r4
 800a93e:	4607      	mov	r7, r0
 800a940:	f2c0 8081 	blt.w	800aa46 <quorem+0x112>
 800a944:	3c01      	subs	r4, #1
 800a946:	f101 0814 	add.w	r8, r1, #20
 800a94a:	f100 0514 	add.w	r5, r0, #20
 800a94e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a952:	9301      	str	r3, [sp, #4]
 800a954:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a958:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a95c:	3301      	adds	r3, #1
 800a95e:	429a      	cmp	r2, r3
 800a960:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a964:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a968:	fbb2 f6f3 	udiv	r6, r2, r3
 800a96c:	d331      	bcc.n	800a9d2 <quorem+0x9e>
 800a96e:	f04f 0e00 	mov.w	lr, #0
 800a972:	4640      	mov	r0, r8
 800a974:	46ac      	mov	ip, r5
 800a976:	46f2      	mov	sl, lr
 800a978:	f850 2b04 	ldr.w	r2, [r0], #4
 800a97c:	b293      	uxth	r3, r2
 800a97e:	fb06 e303 	mla	r3, r6, r3, lr
 800a982:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a986:	b29b      	uxth	r3, r3
 800a988:	ebaa 0303 	sub.w	r3, sl, r3
 800a98c:	0c12      	lsrs	r2, r2, #16
 800a98e:	f8dc a000 	ldr.w	sl, [ip]
 800a992:	fb06 e202 	mla	r2, r6, r2, lr
 800a996:	fa13 f38a 	uxtah	r3, r3, sl
 800a99a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a99e:	fa1f fa82 	uxth.w	sl, r2
 800a9a2:	f8dc 2000 	ldr.w	r2, [ip]
 800a9a6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a9aa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a9ae:	b29b      	uxth	r3, r3
 800a9b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a9b4:	4581      	cmp	r9, r0
 800a9b6:	f84c 3b04 	str.w	r3, [ip], #4
 800a9ba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a9be:	d2db      	bcs.n	800a978 <quorem+0x44>
 800a9c0:	f855 300b 	ldr.w	r3, [r5, fp]
 800a9c4:	b92b      	cbnz	r3, 800a9d2 <quorem+0x9e>
 800a9c6:	9b01      	ldr	r3, [sp, #4]
 800a9c8:	3b04      	subs	r3, #4
 800a9ca:	429d      	cmp	r5, r3
 800a9cc:	461a      	mov	r2, r3
 800a9ce:	d32e      	bcc.n	800aa2e <quorem+0xfa>
 800a9d0:	613c      	str	r4, [r7, #16]
 800a9d2:	4638      	mov	r0, r7
 800a9d4:	f001 f8c8 	bl	800bb68 <__mcmp>
 800a9d8:	2800      	cmp	r0, #0
 800a9da:	db24      	blt.n	800aa26 <quorem+0xf2>
 800a9dc:	3601      	adds	r6, #1
 800a9de:	4628      	mov	r0, r5
 800a9e0:	f04f 0c00 	mov.w	ip, #0
 800a9e4:	f858 2b04 	ldr.w	r2, [r8], #4
 800a9e8:	f8d0 e000 	ldr.w	lr, [r0]
 800a9ec:	b293      	uxth	r3, r2
 800a9ee:	ebac 0303 	sub.w	r3, ip, r3
 800a9f2:	0c12      	lsrs	r2, r2, #16
 800a9f4:	fa13 f38e 	uxtah	r3, r3, lr
 800a9f8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a9fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800aa00:	b29b      	uxth	r3, r3
 800aa02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aa06:	45c1      	cmp	r9, r8
 800aa08:	f840 3b04 	str.w	r3, [r0], #4
 800aa0c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800aa10:	d2e8      	bcs.n	800a9e4 <quorem+0xb0>
 800aa12:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aa16:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aa1a:	b922      	cbnz	r2, 800aa26 <quorem+0xf2>
 800aa1c:	3b04      	subs	r3, #4
 800aa1e:	429d      	cmp	r5, r3
 800aa20:	461a      	mov	r2, r3
 800aa22:	d30a      	bcc.n	800aa3a <quorem+0x106>
 800aa24:	613c      	str	r4, [r7, #16]
 800aa26:	4630      	mov	r0, r6
 800aa28:	b003      	add	sp, #12
 800aa2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa2e:	6812      	ldr	r2, [r2, #0]
 800aa30:	3b04      	subs	r3, #4
 800aa32:	2a00      	cmp	r2, #0
 800aa34:	d1cc      	bne.n	800a9d0 <quorem+0x9c>
 800aa36:	3c01      	subs	r4, #1
 800aa38:	e7c7      	b.n	800a9ca <quorem+0x96>
 800aa3a:	6812      	ldr	r2, [r2, #0]
 800aa3c:	3b04      	subs	r3, #4
 800aa3e:	2a00      	cmp	r2, #0
 800aa40:	d1f0      	bne.n	800aa24 <quorem+0xf0>
 800aa42:	3c01      	subs	r4, #1
 800aa44:	e7eb      	b.n	800aa1e <quorem+0xea>
 800aa46:	2000      	movs	r0, #0
 800aa48:	e7ee      	b.n	800aa28 <quorem+0xf4>
 800aa4a:	0000      	movs	r0, r0
 800aa4c:	0000      	movs	r0, r0
	...

0800aa50 <_dtoa_r>:
 800aa50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa54:	ed2d 8b02 	vpush	{d8}
 800aa58:	ec57 6b10 	vmov	r6, r7, d0
 800aa5c:	b095      	sub	sp, #84	; 0x54
 800aa5e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800aa60:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800aa64:	9105      	str	r1, [sp, #20]
 800aa66:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800aa6a:	4604      	mov	r4, r0
 800aa6c:	9209      	str	r2, [sp, #36]	; 0x24
 800aa6e:	930f      	str	r3, [sp, #60]	; 0x3c
 800aa70:	b975      	cbnz	r5, 800aa90 <_dtoa_r+0x40>
 800aa72:	2010      	movs	r0, #16
 800aa74:	f7ff f984 	bl	8009d80 <malloc>
 800aa78:	4602      	mov	r2, r0
 800aa7a:	6260      	str	r0, [r4, #36]	; 0x24
 800aa7c:	b920      	cbnz	r0, 800aa88 <_dtoa_r+0x38>
 800aa7e:	4bb2      	ldr	r3, [pc, #712]	; (800ad48 <_dtoa_r+0x2f8>)
 800aa80:	21ea      	movs	r1, #234	; 0xea
 800aa82:	48b2      	ldr	r0, [pc, #712]	; (800ad4c <_dtoa_r+0x2fc>)
 800aa84:	f7ff ff38 	bl	800a8f8 <__assert_func>
 800aa88:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800aa8c:	6005      	str	r5, [r0, #0]
 800aa8e:	60c5      	str	r5, [r0, #12]
 800aa90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa92:	6819      	ldr	r1, [r3, #0]
 800aa94:	b151      	cbz	r1, 800aaac <_dtoa_r+0x5c>
 800aa96:	685a      	ldr	r2, [r3, #4]
 800aa98:	604a      	str	r2, [r1, #4]
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	4093      	lsls	r3, r2
 800aa9e:	608b      	str	r3, [r1, #8]
 800aaa0:	4620      	mov	r0, r4
 800aaa2:	f000 fe23 	bl	800b6ec <_Bfree>
 800aaa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	601a      	str	r2, [r3, #0]
 800aaac:	1e3b      	subs	r3, r7, #0
 800aaae:	bfb9      	ittee	lt
 800aab0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800aab4:	9303      	strlt	r3, [sp, #12]
 800aab6:	2300      	movge	r3, #0
 800aab8:	f8c8 3000 	strge.w	r3, [r8]
 800aabc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800aac0:	4ba3      	ldr	r3, [pc, #652]	; (800ad50 <_dtoa_r+0x300>)
 800aac2:	bfbc      	itt	lt
 800aac4:	2201      	movlt	r2, #1
 800aac6:	f8c8 2000 	strlt.w	r2, [r8]
 800aaca:	ea33 0309 	bics.w	r3, r3, r9
 800aace:	d11b      	bne.n	800ab08 <_dtoa_r+0xb8>
 800aad0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800aad2:	f242 730f 	movw	r3, #9999	; 0x270f
 800aad6:	6013      	str	r3, [r2, #0]
 800aad8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aadc:	4333      	orrs	r3, r6
 800aade:	f000 857a 	beq.w	800b5d6 <_dtoa_r+0xb86>
 800aae2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aae4:	b963      	cbnz	r3, 800ab00 <_dtoa_r+0xb0>
 800aae6:	4b9b      	ldr	r3, [pc, #620]	; (800ad54 <_dtoa_r+0x304>)
 800aae8:	e024      	b.n	800ab34 <_dtoa_r+0xe4>
 800aaea:	4b9b      	ldr	r3, [pc, #620]	; (800ad58 <_dtoa_r+0x308>)
 800aaec:	9300      	str	r3, [sp, #0]
 800aaee:	3308      	adds	r3, #8
 800aaf0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800aaf2:	6013      	str	r3, [r2, #0]
 800aaf4:	9800      	ldr	r0, [sp, #0]
 800aaf6:	b015      	add	sp, #84	; 0x54
 800aaf8:	ecbd 8b02 	vpop	{d8}
 800aafc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab00:	4b94      	ldr	r3, [pc, #592]	; (800ad54 <_dtoa_r+0x304>)
 800ab02:	9300      	str	r3, [sp, #0]
 800ab04:	3303      	adds	r3, #3
 800ab06:	e7f3      	b.n	800aaf0 <_dtoa_r+0xa0>
 800ab08:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	ec51 0b17 	vmov	r0, r1, d7
 800ab12:	2300      	movs	r3, #0
 800ab14:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800ab18:	f7f5 ffd6 	bl	8000ac8 <__aeabi_dcmpeq>
 800ab1c:	4680      	mov	r8, r0
 800ab1e:	b158      	cbz	r0, 800ab38 <_dtoa_r+0xe8>
 800ab20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ab22:	2301      	movs	r3, #1
 800ab24:	6013      	str	r3, [r2, #0]
 800ab26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	f000 8551 	beq.w	800b5d0 <_dtoa_r+0xb80>
 800ab2e:	488b      	ldr	r0, [pc, #556]	; (800ad5c <_dtoa_r+0x30c>)
 800ab30:	6018      	str	r0, [r3, #0]
 800ab32:	1e43      	subs	r3, r0, #1
 800ab34:	9300      	str	r3, [sp, #0]
 800ab36:	e7dd      	b.n	800aaf4 <_dtoa_r+0xa4>
 800ab38:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800ab3c:	aa12      	add	r2, sp, #72	; 0x48
 800ab3e:	a913      	add	r1, sp, #76	; 0x4c
 800ab40:	4620      	mov	r0, r4
 800ab42:	f001 f8b5 	bl	800bcb0 <__d2b>
 800ab46:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ab4a:	4683      	mov	fp, r0
 800ab4c:	2d00      	cmp	r5, #0
 800ab4e:	d07c      	beq.n	800ac4a <_dtoa_r+0x1fa>
 800ab50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab52:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800ab56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab5a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800ab5e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ab62:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ab66:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ab6a:	4b7d      	ldr	r3, [pc, #500]	; (800ad60 <_dtoa_r+0x310>)
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	4630      	mov	r0, r6
 800ab70:	4639      	mov	r1, r7
 800ab72:	f7f5 fb89 	bl	8000288 <__aeabi_dsub>
 800ab76:	a36e      	add	r3, pc, #440	; (adr r3, 800ad30 <_dtoa_r+0x2e0>)
 800ab78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab7c:	f7f5 fd3c 	bl	80005f8 <__aeabi_dmul>
 800ab80:	a36d      	add	r3, pc, #436	; (adr r3, 800ad38 <_dtoa_r+0x2e8>)
 800ab82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab86:	f7f5 fb81 	bl	800028c <__adddf3>
 800ab8a:	4606      	mov	r6, r0
 800ab8c:	4628      	mov	r0, r5
 800ab8e:	460f      	mov	r7, r1
 800ab90:	f7f5 fcc8 	bl	8000524 <__aeabi_i2d>
 800ab94:	a36a      	add	r3, pc, #424	; (adr r3, 800ad40 <_dtoa_r+0x2f0>)
 800ab96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab9a:	f7f5 fd2d 	bl	80005f8 <__aeabi_dmul>
 800ab9e:	4602      	mov	r2, r0
 800aba0:	460b      	mov	r3, r1
 800aba2:	4630      	mov	r0, r6
 800aba4:	4639      	mov	r1, r7
 800aba6:	f7f5 fb71 	bl	800028c <__adddf3>
 800abaa:	4606      	mov	r6, r0
 800abac:	460f      	mov	r7, r1
 800abae:	f7f5 ffd3 	bl	8000b58 <__aeabi_d2iz>
 800abb2:	2200      	movs	r2, #0
 800abb4:	4682      	mov	sl, r0
 800abb6:	2300      	movs	r3, #0
 800abb8:	4630      	mov	r0, r6
 800abba:	4639      	mov	r1, r7
 800abbc:	f7f5 ff8e 	bl	8000adc <__aeabi_dcmplt>
 800abc0:	b148      	cbz	r0, 800abd6 <_dtoa_r+0x186>
 800abc2:	4650      	mov	r0, sl
 800abc4:	f7f5 fcae 	bl	8000524 <__aeabi_i2d>
 800abc8:	4632      	mov	r2, r6
 800abca:	463b      	mov	r3, r7
 800abcc:	f7f5 ff7c 	bl	8000ac8 <__aeabi_dcmpeq>
 800abd0:	b908      	cbnz	r0, 800abd6 <_dtoa_r+0x186>
 800abd2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800abd6:	f1ba 0f16 	cmp.w	sl, #22
 800abda:	d854      	bhi.n	800ac86 <_dtoa_r+0x236>
 800abdc:	4b61      	ldr	r3, [pc, #388]	; (800ad64 <_dtoa_r+0x314>)
 800abde:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800abe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abe6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800abea:	f7f5 ff77 	bl	8000adc <__aeabi_dcmplt>
 800abee:	2800      	cmp	r0, #0
 800abf0:	d04b      	beq.n	800ac8a <_dtoa_r+0x23a>
 800abf2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800abf6:	2300      	movs	r3, #0
 800abf8:	930e      	str	r3, [sp, #56]	; 0x38
 800abfa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800abfc:	1b5d      	subs	r5, r3, r5
 800abfe:	1e6b      	subs	r3, r5, #1
 800ac00:	9304      	str	r3, [sp, #16]
 800ac02:	bf43      	ittte	mi
 800ac04:	2300      	movmi	r3, #0
 800ac06:	f1c5 0801 	rsbmi	r8, r5, #1
 800ac0a:	9304      	strmi	r3, [sp, #16]
 800ac0c:	f04f 0800 	movpl.w	r8, #0
 800ac10:	f1ba 0f00 	cmp.w	sl, #0
 800ac14:	db3b      	blt.n	800ac8e <_dtoa_r+0x23e>
 800ac16:	9b04      	ldr	r3, [sp, #16]
 800ac18:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800ac1c:	4453      	add	r3, sl
 800ac1e:	9304      	str	r3, [sp, #16]
 800ac20:	2300      	movs	r3, #0
 800ac22:	9306      	str	r3, [sp, #24]
 800ac24:	9b05      	ldr	r3, [sp, #20]
 800ac26:	2b09      	cmp	r3, #9
 800ac28:	d869      	bhi.n	800acfe <_dtoa_r+0x2ae>
 800ac2a:	2b05      	cmp	r3, #5
 800ac2c:	bfc4      	itt	gt
 800ac2e:	3b04      	subgt	r3, #4
 800ac30:	9305      	strgt	r3, [sp, #20]
 800ac32:	9b05      	ldr	r3, [sp, #20]
 800ac34:	f1a3 0302 	sub.w	r3, r3, #2
 800ac38:	bfcc      	ite	gt
 800ac3a:	2500      	movgt	r5, #0
 800ac3c:	2501      	movle	r5, #1
 800ac3e:	2b03      	cmp	r3, #3
 800ac40:	d869      	bhi.n	800ad16 <_dtoa_r+0x2c6>
 800ac42:	e8df f003 	tbb	[pc, r3]
 800ac46:	4e2c      	.short	0x4e2c
 800ac48:	5a4c      	.short	0x5a4c
 800ac4a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800ac4e:	441d      	add	r5, r3
 800ac50:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ac54:	2b20      	cmp	r3, #32
 800ac56:	bfc1      	itttt	gt
 800ac58:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ac5c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ac60:	fa09 f303 	lslgt.w	r3, r9, r3
 800ac64:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ac68:	bfda      	itte	le
 800ac6a:	f1c3 0320 	rsble	r3, r3, #32
 800ac6e:	fa06 f003 	lslle.w	r0, r6, r3
 800ac72:	4318      	orrgt	r0, r3
 800ac74:	f7f5 fc46 	bl	8000504 <__aeabi_ui2d>
 800ac78:	2301      	movs	r3, #1
 800ac7a:	4606      	mov	r6, r0
 800ac7c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ac80:	3d01      	subs	r5, #1
 800ac82:	9310      	str	r3, [sp, #64]	; 0x40
 800ac84:	e771      	b.n	800ab6a <_dtoa_r+0x11a>
 800ac86:	2301      	movs	r3, #1
 800ac88:	e7b6      	b.n	800abf8 <_dtoa_r+0x1a8>
 800ac8a:	900e      	str	r0, [sp, #56]	; 0x38
 800ac8c:	e7b5      	b.n	800abfa <_dtoa_r+0x1aa>
 800ac8e:	f1ca 0300 	rsb	r3, sl, #0
 800ac92:	9306      	str	r3, [sp, #24]
 800ac94:	2300      	movs	r3, #0
 800ac96:	eba8 080a 	sub.w	r8, r8, sl
 800ac9a:	930d      	str	r3, [sp, #52]	; 0x34
 800ac9c:	e7c2      	b.n	800ac24 <_dtoa_r+0x1d4>
 800ac9e:	2300      	movs	r3, #0
 800aca0:	9308      	str	r3, [sp, #32]
 800aca2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	dc39      	bgt.n	800ad1c <_dtoa_r+0x2cc>
 800aca8:	f04f 0901 	mov.w	r9, #1
 800acac:	f8cd 9004 	str.w	r9, [sp, #4]
 800acb0:	464b      	mov	r3, r9
 800acb2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800acb6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800acb8:	2200      	movs	r2, #0
 800acba:	6042      	str	r2, [r0, #4]
 800acbc:	2204      	movs	r2, #4
 800acbe:	f102 0614 	add.w	r6, r2, #20
 800acc2:	429e      	cmp	r6, r3
 800acc4:	6841      	ldr	r1, [r0, #4]
 800acc6:	d92f      	bls.n	800ad28 <_dtoa_r+0x2d8>
 800acc8:	4620      	mov	r0, r4
 800acca:	f000 fccf 	bl	800b66c <_Balloc>
 800acce:	9000      	str	r0, [sp, #0]
 800acd0:	2800      	cmp	r0, #0
 800acd2:	d14b      	bne.n	800ad6c <_dtoa_r+0x31c>
 800acd4:	4b24      	ldr	r3, [pc, #144]	; (800ad68 <_dtoa_r+0x318>)
 800acd6:	4602      	mov	r2, r0
 800acd8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800acdc:	e6d1      	b.n	800aa82 <_dtoa_r+0x32>
 800acde:	2301      	movs	r3, #1
 800ace0:	e7de      	b.n	800aca0 <_dtoa_r+0x250>
 800ace2:	2300      	movs	r3, #0
 800ace4:	9308      	str	r3, [sp, #32]
 800ace6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ace8:	eb0a 0903 	add.w	r9, sl, r3
 800acec:	f109 0301 	add.w	r3, r9, #1
 800acf0:	2b01      	cmp	r3, #1
 800acf2:	9301      	str	r3, [sp, #4]
 800acf4:	bfb8      	it	lt
 800acf6:	2301      	movlt	r3, #1
 800acf8:	e7dd      	b.n	800acb6 <_dtoa_r+0x266>
 800acfa:	2301      	movs	r3, #1
 800acfc:	e7f2      	b.n	800ace4 <_dtoa_r+0x294>
 800acfe:	2501      	movs	r5, #1
 800ad00:	2300      	movs	r3, #0
 800ad02:	9305      	str	r3, [sp, #20]
 800ad04:	9508      	str	r5, [sp, #32]
 800ad06:	f04f 39ff 	mov.w	r9, #4294967295
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	f8cd 9004 	str.w	r9, [sp, #4]
 800ad10:	2312      	movs	r3, #18
 800ad12:	9209      	str	r2, [sp, #36]	; 0x24
 800ad14:	e7cf      	b.n	800acb6 <_dtoa_r+0x266>
 800ad16:	2301      	movs	r3, #1
 800ad18:	9308      	str	r3, [sp, #32]
 800ad1a:	e7f4      	b.n	800ad06 <_dtoa_r+0x2b6>
 800ad1c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800ad20:	f8cd 9004 	str.w	r9, [sp, #4]
 800ad24:	464b      	mov	r3, r9
 800ad26:	e7c6      	b.n	800acb6 <_dtoa_r+0x266>
 800ad28:	3101      	adds	r1, #1
 800ad2a:	6041      	str	r1, [r0, #4]
 800ad2c:	0052      	lsls	r2, r2, #1
 800ad2e:	e7c6      	b.n	800acbe <_dtoa_r+0x26e>
 800ad30:	636f4361 	.word	0x636f4361
 800ad34:	3fd287a7 	.word	0x3fd287a7
 800ad38:	8b60c8b3 	.word	0x8b60c8b3
 800ad3c:	3fc68a28 	.word	0x3fc68a28
 800ad40:	509f79fb 	.word	0x509f79fb
 800ad44:	3fd34413 	.word	0x3fd34413
 800ad48:	080194d9 	.word	0x080194d9
 800ad4c:	080194f0 	.word	0x080194f0
 800ad50:	7ff00000 	.word	0x7ff00000
 800ad54:	080194d5 	.word	0x080194d5
 800ad58:	080194cc 	.word	0x080194cc
 800ad5c:	0801946d 	.word	0x0801946d
 800ad60:	3ff80000 	.word	0x3ff80000
 800ad64:	080195e8 	.word	0x080195e8
 800ad68:	0801954f 	.word	0x0801954f
 800ad6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ad6e:	9a00      	ldr	r2, [sp, #0]
 800ad70:	601a      	str	r2, [r3, #0]
 800ad72:	9b01      	ldr	r3, [sp, #4]
 800ad74:	2b0e      	cmp	r3, #14
 800ad76:	f200 80ad 	bhi.w	800aed4 <_dtoa_r+0x484>
 800ad7a:	2d00      	cmp	r5, #0
 800ad7c:	f000 80aa 	beq.w	800aed4 <_dtoa_r+0x484>
 800ad80:	f1ba 0f00 	cmp.w	sl, #0
 800ad84:	dd36      	ble.n	800adf4 <_dtoa_r+0x3a4>
 800ad86:	4ac3      	ldr	r2, [pc, #780]	; (800b094 <_dtoa_r+0x644>)
 800ad88:	f00a 030f 	and.w	r3, sl, #15
 800ad8c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ad90:	ed93 7b00 	vldr	d7, [r3]
 800ad94:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800ad98:	ea4f 172a 	mov.w	r7, sl, asr #4
 800ad9c:	eeb0 8a47 	vmov.f32	s16, s14
 800ada0:	eef0 8a67 	vmov.f32	s17, s15
 800ada4:	d016      	beq.n	800add4 <_dtoa_r+0x384>
 800ada6:	4bbc      	ldr	r3, [pc, #752]	; (800b098 <_dtoa_r+0x648>)
 800ada8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800adac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800adb0:	f7f5 fd4c 	bl	800084c <__aeabi_ddiv>
 800adb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800adb8:	f007 070f 	and.w	r7, r7, #15
 800adbc:	2503      	movs	r5, #3
 800adbe:	4eb6      	ldr	r6, [pc, #728]	; (800b098 <_dtoa_r+0x648>)
 800adc0:	b957      	cbnz	r7, 800add8 <_dtoa_r+0x388>
 800adc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800adc6:	ec53 2b18 	vmov	r2, r3, d8
 800adca:	f7f5 fd3f 	bl	800084c <__aeabi_ddiv>
 800adce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800add2:	e029      	b.n	800ae28 <_dtoa_r+0x3d8>
 800add4:	2502      	movs	r5, #2
 800add6:	e7f2      	b.n	800adbe <_dtoa_r+0x36e>
 800add8:	07f9      	lsls	r1, r7, #31
 800adda:	d508      	bpl.n	800adee <_dtoa_r+0x39e>
 800addc:	ec51 0b18 	vmov	r0, r1, d8
 800ade0:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ade4:	f7f5 fc08 	bl	80005f8 <__aeabi_dmul>
 800ade8:	ec41 0b18 	vmov	d8, r0, r1
 800adec:	3501      	adds	r5, #1
 800adee:	107f      	asrs	r7, r7, #1
 800adf0:	3608      	adds	r6, #8
 800adf2:	e7e5      	b.n	800adc0 <_dtoa_r+0x370>
 800adf4:	f000 80a6 	beq.w	800af44 <_dtoa_r+0x4f4>
 800adf8:	f1ca 0600 	rsb	r6, sl, #0
 800adfc:	4ba5      	ldr	r3, [pc, #660]	; (800b094 <_dtoa_r+0x644>)
 800adfe:	4fa6      	ldr	r7, [pc, #664]	; (800b098 <_dtoa_r+0x648>)
 800ae00:	f006 020f 	and.w	r2, r6, #15
 800ae04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ae08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae0c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ae10:	f7f5 fbf2 	bl	80005f8 <__aeabi_dmul>
 800ae14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ae18:	1136      	asrs	r6, r6, #4
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	2502      	movs	r5, #2
 800ae1e:	2e00      	cmp	r6, #0
 800ae20:	f040 8085 	bne.w	800af2e <_dtoa_r+0x4de>
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d1d2      	bne.n	800adce <_dtoa_r+0x37e>
 800ae28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	f000 808c 	beq.w	800af48 <_dtoa_r+0x4f8>
 800ae30:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ae34:	4b99      	ldr	r3, [pc, #612]	; (800b09c <_dtoa_r+0x64c>)
 800ae36:	2200      	movs	r2, #0
 800ae38:	4630      	mov	r0, r6
 800ae3a:	4639      	mov	r1, r7
 800ae3c:	f7f5 fe4e 	bl	8000adc <__aeabi_dcmplt>
 800ae40:	2800      	cmp	r0, #0
 800ae42:	f000 8081 	beq.w	800af48 <_dtoa_r+0x4f8>
 800ae46:	9b01      	ldr	r3, [sp, #4]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d07d      	beq.n	800af48 <_dtoa_r+0x4f8>
 800ae4c:	f1b9 0f00 	cmp.w	r9, #0
 800ae50:	dd3c      	ble.n	800aecc <_dtoa_r+0x47c>
 800ae52:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ae56:	9307      	str	r3, [sp, #28]
 800ae58:	2200      	movs	r2, #0
 800ae5a:	4b91      	ldr	r3, [pc, #580]	; (800b0a0 <_dtoa_r+0x650>)
 800ae5c:	4630      	mov	r0, r6
 800ae5e:	4639      	mov	r1, r7
 800ae60:	f7f5 fbca 	bl	80005f8 <__aeabi_dmul>
 800ae64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ae68:	3501      	adds	r5, #1
 800ae6a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800ae6e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ae72:	4628      	mov	r0, r5
 800ae74:	f7f5 fb56 	bl	8000524 <__aeabi_i2d>
 800ae78:	4632      	mov	r2, r6
 800ae7a:	463b      	mov	r3, r7
 800ae7c:	f7f5 fbbc 	bl	80005f8 <__aeabi_dmul>
 800ae80:	4b88      	ldr	r3, [pc, #544]	; (800b0a4 <_dtoa_r+0x654>)
 800ae82:	2200      	movs	r2, #0
 800ae84:	f7f5 fa02 	bl	800028c <__adddf3>
 800ae88:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ae8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ae90:	9303      	str	r3, [sp, #12]
 800ae92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d15c      	bne.n	800af52 <_dtoa_r+0x502>
 800ae98:	4b83      	ldr	r3, [pc, #524]	; (800b0a8 <_dtoa_r+0x658>)
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	4630      	mov	r0, r6
 800ae9e:	4639      	mov	r1, r7
 800aea0:	f7f5 f9f2 	bl	8000288 <__aeabi_dsub>
 800aea4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aea8:	4606      	mov	r6, r0
 800aeaa:	460f      	mov	r7, r1
 800aeac:	f7f5 fe34 	bl	8000b18 <__aeabi_dcmpgt>
 800aeb0:	2800      	cmp	r0, #0
 800aeb2:	f040 8296 	bne.w	800b3e2 <_dtoa_r+0x992>
 800aeb6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800aeba:	4630      	mov	r0, r6
 800aebc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aec0:	4639      	mov	r1, r7
 800aec2:	f7f5 fe0b 	bl	8000adc <__aeabi_dcmplt>
 800aec6:	2800      	cmp	r0, #0
 800aec8:	f040 8288 	bne.w	800b3dc <_dtoa_r+0x98c>
 800aecc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800aed0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aed4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	f2c0 8158 	blt.w	800b18c <_dtoa_r+0x73c>
 800aedc:	f1ba 0f0e 	cmp.w	sl, #14
 800aee0:	f300 8154 	bgt.w	800b18c <_dtoa_r+0x73c>
 800aee4:	4b6b      	ldr	r3, [pc, #428]	; (800b094 <_dtoa_r+0x644>)
 800aee6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800aeea:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aeee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	f280 80e3 	bge.w	800b0bc <_dtoa_r+0x66c>
 800aef6:	9b01      	ldr	r3, [sp, #4]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	f300 80df 	bgt.w	800b0bc <_dtoa_r+0x66c>
 800aefe:	f040 826d 	bne.w	800b3dc <_dtoa_r+0x98c>
 800af02:	4b69      	ldr	r3, [pc, #420]	; (800b0a8 <_dtoa_r+0x658>)
 800af04:	2200      	movs	r2, #0
 800af06:	4640      	mov	r0, r8
 800af08:	4649      	mov	r1, r9
 800af0a:	f7f5 fb75 	bl	80005f8 <__aeabi_dmul>
 800af0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800af12:	f7f5 fdf7 	bl	8000b04 <__aeabi_dcmpge>
 800af16:	9e01      	ldr	r6, [sp, #4]
 800af18:	4637      	mov	r7, r6
 800af1a:	2800      	cmp	r0, #0
 800af1c:	f040 8243 	bne.w	800b3a6 <_dtoa_r+0x956>
 800af20:	9d00      	ldr	r5, [sp, #0]
 800af22:	2331      	movs	r3, #49	; 0x31
 800af24:	f805 3b01 	strb.w	r3, [r5], #1
 800af28:	f10a 0a01 	add.w	sl, sl, #1
 800af2c:	e23f      	b.n	800b3ae <_dtoa_r+0x95e>
 800af2e:	07f2      	lsls	r2, r6, #31
 800af30:	d505      	bpl.n	800af3e <_dtoa_r+0x4ee>
 800af32:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af36:	f7f5 fb5f 	bl	80005f8 <__aeabi_dmul>
 800af3a:	3501      	adds	r5, #1
 800af3c:	2301      	movs	r3, #1
 800af3e:	1076      	asrs	r6, r6, #1
 800af40:	3708      	adds	r7, #8
 800af42:	e76c      	b.n	800ae1e <_dtoa_r+0x3ce>
 800af44:	2502      	movs	r5, #2
 800af46:	e76f      	b.n	800ae28 <_dtoa_r+0x3d8>
 800af48:	9b01      	ldr	r3, [sp, #4]
 800af4a:	f8cd a01c 	str.w	sl, [sp, #28]
 800af4e:	930c      	str	r3, [sp, #48]	; 0x30
 800af50:	e78d      	b.n	800ae6e <_dtoa_r+0x41e>
 800af52:	9900      	ldr	r1, [sp, #0]
 800af54:	980c      	ldr	r0, [sp, #48]	; 0x30
 800af56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800af58:	4b4e      	ldr	r3, [pc, #312]	; (800b094 <_dtoa_r+0x644>)
 800af5a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800af5e:	4401      	add	r1, r0
 800af60:	9102      	str	r1, [sp, #8]
 800af62:	9908      	ldr	r1, [sp, #32]
 800af64:	eeb0 8a47 	vmov.f32	s16, s14
 800af68:	eef0 8a67 	vmov.f32	s17, s15
 800af6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800af70:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800af74:	2900      	cmp	r1, #0
 800af76:	d045      	beq.n	800b004 <_dtoa_r+0x5b4>
 800af78:	494c      	ldr	r1, [pc, #304]	; (800b0ac <_dtoa_r+0x65c>)
 800af7a:	2000      	movs	r0, #0
 800af7c:	f7f5 fc66 	bl	800084c <__aeabi_ddiv>
 800af80:	ec53 2b18 	vmov	r2, r3, d8
 800af84:	f7f5 f980 	bl	8000288 <__aeabi_dsub>
 800af88:	9d00      	ldr	r5, [sp, #0]
 800af8a:	ec41 0b18 	vmov	d8, r0, r1
 800af8e:	4639      	mov	r1, r7
 800af90:	4630      	mov	r0, r6
 800af92:	f7f5 fde1 	bl	8000b58 <__aeabi_d2iz>
 800af96:	900c      	str	r0, [sp, #48]	; 0x30
 800af98:	f7f5 fac4 	bl	8000524 <__aeabi_i2d>
 800af9c:	4602      	mov	r2, r0
 800af9e:	460b      	mov	r3, r1
 800afa0:	4630      	mov	r0, r6
 800afa2:	4639      	mov	r1, r7
 800afa4:	f7f5 f970 	bl	8000288 <__aeabi_dsub>
 800afa8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800afaa:	3330      	adds	r3, #48	; 0x30
 800afac:	f805 3b01 	strb.w	r3, [r5], #1
 800afb0:	ec53 2b18 	vmov	r2, r3, d8
 800afb4:	4606      	mov	r6, r0
 800afb6:	460f      	mov	r7, r1
 800afb8:	f7f5 fd90 	bl	8000adc <__aeabi_dcmplt>
 800afbc:	2800      	cmp	r0, #0
 800afbe:	d165      	bne.n	800b08c <_dtoa_r+0x63c>
 800afc0:	4632      	mov	r2, r6
 800afc2:	463b      	mov	r3, r7
 800afc4:	4935      	ldr	r1, [pc, #212]	; (800b09c <_dtoa_r+0x64c>)
 800afc6:	2000      	movs	r0, #0
 800afc8:	f7f5 f95e 	bl	8000288 <__aeabi_dsub>
 800afcc:	ec53 2b18 	vmov	r2, r3, d8
 800afd0:	f7f5 fd84 	bl	8000adc <__aeabi_dcmplt>
 800afd4:	2800      	cmp	r0, #0
 800afd6:	f040 80b9 	bne.w	800b14c <_dtoa_r+0x6fc>
 800afda:	9b02      	ldr	r3, [sp, #8]
 800afdc:	429d      	cmp	r5, r3
 800afde:	f43f af75 	beq.w	800aecc <_dtoa_r+0x47c>
 800afe2:	4b2f      	ldr	r3, [pc, #188]	; (800b0a0 <_dtoa_r+0x650>)
 800afe4:	ec51 0b18 	vmov	r0, r1, d8
 800afe8:	2200      	movs	r2, #0
 800afea:	f7f5 fb05 	bl	80005f8 <__aeabi_dmul>
 800afee:	4b2c      	ldr	r3, [pc, #176]	; (800b0a0 <_dtoa_r+0x650>)
 800aff0:	ec41 0b18 	vmov	d8, r0, r1
 800aff4:	2200      	movs	r2, #0
 800aff6:	4630      	mov	r0, r6
 800aff8:	4639      	mov	r1, r7
 800affa:	f7f5 fafd 	bl	80005f8 <__aeabi_dmul>
 800affe:	4606      	mov	r6, r0
 800b000:	460f      	mov	r7, r1
 800b002:	e7c4      	b.n	800af8e <_dtoa_r+0x53e>
 800b004:	ec51 0b17 	vmov	r0, r1, d7
 800b008:	f7f5 faf6 	bl	80005f8 <__aeabi_dmul>
 800b00c:	9b02      	ldr	r3, [sp, #8]
 800b00e:	9d00      	ldr	r5, [sp, #0]
 800b010:	930c      	str	r3, [sp, #48]	; 0x30
 800b012:	ec41 0b18 	vmov	d8, r0, r1
 800b016:	4639      	mov	r1, r7
 800b018:	4630      	mov	r0, r6
 800b01a:	f7f5 fd9d 	bl	8000b58 <__aeabi_d2iz>
 800b01e:	9011      	str	r0, [sp, #68]	; 0x44
 800b020:	f7f5 fa80 	bl	8000524 <__aeabi_i2d>
 800b024:	4602      	mov	r2, r0
 800b026:	460b      	mov	r3, r1
 800b028:	4630      	mov	r0, r6
 800b02a:	4639      	mov	r1, r7
 800b02c:	f7f5 f92c 	bl	8000288 <__aeabi_dsub>
 800b030:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b032:	3330      	adds	r3, #48	; 0x30
 800b034:	f805 3b01 	strb.w	r3, [r5], #1
 800b038:	9b02      	ldr	r3, [sp, #8]
 800b03a:	429d      	cmp	r5, r3
 800b03c:	4606      	mov	r6, r0
 800b03e:	460f      	mov	r7, r1
 800b040:	f04f 0200 	mov.w	r2, #0
 800b044:	d134      	bne.n	800b0b0 <_dtoa_r+0x660>
 800b046:	4b19      	ldr	r3, [pc, #100]	; (800b0ac <_dtoa_r+0x65c>)
 800b048:	ec51 0b18 	vmov	r0, r1, d8
 800b04c:	f7f5 f91e 	bl	800028c <__adddf3>
 800b050:	4602      	mov	r2, r0
 800b052:	460b      	mov	r3, r1
 800b054:	4630      	mov	r0, r6
 800b056:	4639      	mov	r1, r7
 800b058:	f7f5 fd5e 	bl	8000b18 <__aeabi_dcmpgt>
 800b05c:	2800      	cmp	r0, #0
 800b05e:	d175      	bne.n	800b14c <_dtoa_r+0x6fc>
 800b060:	ec53 2b18 	vmov	r2, r3, d8
 800b064:	4911      	ldr	r1, [pc, #68]	; (800b0ac <_dtoa_r+0x65c>)
 800b066:	2000      	movs	r0, #0
 800b068:	f7f5 f90e 	bl	8000288 <__aeabi_dsub>
 800b06c:	4602      	mov	r2, r0
 800b06e:	460b      	mov	r3, r1
 800b070:	4630      	mov	r0, r6
 800b072:	4639      	mov	r1, r7
 800b074:	f7f5 fd32 	bl	8000adc <__aeabi_dcmplt>
 800b078:	2800      	cmp	r0, #0
 800b07a:	f43f af27 	beq.w	800aecc <_dtoa_r+0x47c>
 800b07e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b080:	1e6b      	subs	r3, r5, #1
 800b082:	930c      	str	r3, [sp, #48]	; 0x30
 800b084:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b088:	2b30      	cmp	r3, #48	; 0x30
 800b08a:	d0f8      	beq.n	800b07e <_dtoa_r+0x62e>
 800b08c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b090:	e04a      	b.n	800b128 <_dtoa_r+0x6d8>
 800b092:	bf00      	nop
 800b094:	080195e8 	.word	0x080195e8
 800b098:	080195c0 	.word	0x080195c0
 800b09c:	3ff00000 	.word	0x3ff00000
 800b0a0:	40240000 	.word	0x40240000
 800b0a4:	401c0000 	.word	0x401c0000
 800b0a8:	40140000 	.word	0x40140000
 800b0ac:	3fe00000 	.word	0x3fe00000
 800b0b0:	4baf      	ldr	r3, [pc, #700]	; (800b370 <_dtoa_r+0x920>)
 800b0b2:	f7f5 faa1 	bl	80005f8 <__aeabi_dmul>
 800b0b6:	4606      	mov	r6, r0
 800b0b8:	460f      	mov	r7, r1
 800b0ba:	e7ac      	b.n	800b016 <_dtoa_r+0x5c6>
 800b0bc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b0c0:	9d00      	ldr	r5, [sp, #0]
 800b0c2:	4642      	mov	r2, r8
 800b0c4:	464b      	mov	r3, r9
 800b0c6:	4630      	mov	r0, r6
 800b0c8:	4639      	mov	r1, r7
 800b0ca:	f7f5 fbbf 	bl	800084c <__aeabi_ddiv>
 800b0ce:	f7f5 fd43 	bl	8000b58 <__aeabi_d2iz>
 800b0d2:	9002      	str	r0, [sp, #8]
 800b0d4:	f7f5 fa26 	bl	8000524 <__aeabi_i2d>
 800b0d8:	4642      	mov	r2, r8
 800b0da:	464b      	mov	r3, r9
 800b0dc:	f7f5 fa8c 	bl	80005f8 <__aeabi_dmul>
 800b0e0:	4602      	mov	r2, r0
 800b0e2:	460b      	mov	r3, r1
 800b0e4:	4630      	mov	r0, r6
 800b0e6:	4639      	mov	r1, r7
 800b0e8:	f7f5 f8ce 	bl	8000288 <__aeabi_dsub>
 800b0ec:	9e02      	ldr	r6, [sp, #8]
 800b0ee:	9f01      	ldr	r7, [sp, #4]
 800b0f0:	3630      	adds	r6, #48	; 0x30
 800b0f2:	f805 6b01 	strb.w	r6, [r5], #1
 800b0f6:	9e00      	ldr	r6, [sp, #0]
 800b0f8:	1bae      	subs	r6, r5, r6
 800b0fa:	42b7      	cmp	r7, r6
 800b0fc:	4602      	mov	r2, r0
 800b0fe:	460b      	mov	r3, r1
 800b100:	d137      	bne.n	800b172 <_dtoa_r+0x722>
 800b102:	f7f5 f8c3 	bl	800028c <__adddf3>
 800b106:	4642      	mov	r2, r8
 800b108:	464b      	mov	r3, r9
 800b10a:	4606      	mov	r6, r0
 800b10c:	460f      	mov	r7, r1
 800b10e:	f7f5 fd03 	bl	8000b18 <__aeabi_dcmpgt>
 800b112:	b9c8      	cbnz	r0, 800b148 <_dtoa_r+0x6f8>
 800b114:	4642      	mov	r2, r8
 800b116:	464b      	mov	r3, r9
 800b118:	4630      	mov	r0, r6
 800b11a:	4639      	mov	r1, r7
 800b11c:	f7f5 fcd4 	bl	8000ac8 <__aeabi_dcmpeq>
 800b120:	b110      	cbz	r0, 800b128 <_dtoa_r+0x6d8>
 800b122:	9b02      	ldr	r3, [sp, #8]
 800b124:	07d9      	lsls	r1, r3, #31
 800b126:	d40f      	bmi.n	800b148 <_dtoa_r+0x6f8>
 800b128:	4620      	mov	r0, r4
 800b12a:	4659      	mov	r1, fp
 800b12c:	f000 fade 	bl	800b6ec <_Bfree>
 800b130:	2300      	movs	r3, #0
 800b132:	702b      	strb	r3, [r5, #0]
 800b134:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b136:	f10a 0001 	add.w	r0, sl, #1
 800b13a:	6018      	str	r0, [r3, #0]
 800b13c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b13e:	2b00      	cmp	r3, #0
 800b140:	f43f acd8 	beq.w	800aaf4 <_dtoa_r+0xa4>
 800b144:	601d      	str	r5, [r3, #0]
 800b146:	e4d5      	b.n	800aaf4 <_dtoa_r+0xa4>
 800b148:	f8cd a01c 	str.w	sl, [sp, #28]
 800b14c:	462b      	mov	r3, r5
 800b14e:	461d      	mov	r5, r3
 800b150:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b154:	2a39      	cmp	r2, #57	; 0x39
 800b156:	d108      	bne.n	800b16a <_dtoa_r+0x71a>
 800b158:	9a00      	ldr	r2, [sp, #0]
 800b15a:	429a      	cmp	r2, r3
 800b15c:	d1f7      	bne.n	800b14e <_dtoa_r+0x6fe>
 800b15e:	9a07      	ldr	r2, [sp, #28]
 800b160:	9900      	ldr	r1, [sp, #0]
 800b162:	3201      	adds	r2, #1
 800b164:	9207      	str	r2, [sp, #28]
 800b166:	2230      	movs	r2, #48	; 0x30
 800b168:	700a      	strb	r2, [r1, #0]
 800b16a:	781a      	ldrb	r2, [r3, #0]
 800b16c:	3201      	adds	r2, #1
 800b16e:	701a      	strb	r2, [r3, #0]
 800b170:	e78c      	b.n	800b08c <_dtoa_r+0x63c>
 800b172:	4b7f      	ldr	r3, [pc, #508]	; (800b370 <_dtoa_r+0x920>)
 800b174:	2200      	movs	r2, #0
 800b176:	f7f5 fa3f 	bl	80005f8 <__aeabi_dmul>
 800b17a:	2200      	movs	r2, #0
 800b17c:	2300      	movs	r3, #0
 800b17e:	4606      	mov	r6, r0
 800b180:	460f      	mov	r7, r1
 800b182:	f7f5 fca1 	bl	8000ac8 <__aeabi_dcmpeq>
 800b186:	2800      	cmp	r0, #0
 800b188:	d09b      	beq.n	800b0c2 <_dtoa_r+0x672>
 800b18a:	e7cd      	b.n	800b128 <_dtoa_r+0x6d8>
 800b18c:	9a08      	ldr	r2, [sp, #32]
 800b18e:	2a00      	cmp	r2, #0
 800b190:	f000 80c4 	beq.w	800b31c <_dtoa_r+0x8cc>
 800b194:	9a05      	ldr	r2, [sp, #20]
 800b196:	2a01      	cmp	r2, #1
 800b198:	f300 80a8 	bgt.w	800b2ec <_dtoa_r+0x89c>
 800b19c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b19e:	2a00      	cmp	r2, #0
 800b1a0:	f000 80a0 	beq.w	800b2e4 <_dtoa_r+0x894>
 800b1a4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b1a8:	9e06      	ldr	r6, [sp, #24]
 800b1aa:	4645      	mov	r5, r8
 800b1ac:	9a04      	ldr	r2, [sp, #16]
 800b1ae:	2101      	movs	r1, #1
 800b1b0:	441a      	add	r2, r3
 800b1b2:	4620      	mov	r0, r4
 800b1b4:	4498      	add	r8, r3
 800b1b6:	9204      	str	r2, [sp, #16]
 800b1b8:	f000 fb54 	bl	800b864 <__i2b>
 800b1bc:	4607      	mov	r7, r0
 800b1be:	2d00      	cmp	r5, #0
 800b1c0:	dd0b      	ble.n	800b1da <_dtoa_r+0x78a>
 800b1c2:	9b04      	ldr	r3, [sp, #16]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	dd08      	ble.n	800b1da <_dtoa_r+0x78a>
 800b1c8:	42ab      	cmp	r3, r5
 800b1ca:	9a04      	ldr	r2, [sp, #16]
 800b1cc:	bfa8      	it	ge
 800b1ce:	462b      	movge	r3, r5
 800b1d0:	eba8 0803 	sub.w	r8, r8, r3
 800b1d4:	1aed      	subs	r5, r5, r3
 800b1d6:	1ad3      	subs	r3, r2, r3
 800b1d8:	9304      	str	r3, [sp, #16]
 800b1da:	9b06      	ldr	r3, [sp, #24]
 800b1dc:	b1fb      	cbz	r3, 800b21e <_dtoa_r+0x7ce>
 800b1de:	9b08      	ldr	r3, [sp, #32]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	f000 809f 	beq.w	800b324 <_dtoa_r+0x8d4>
 800b1e6:	2e00      	cmp	r6, #0
 800b1e8:	dd11      	ble.n	800b20e <_dtoa_r+0x7be>
 800b1ea:	4639      	mov	r1, r7
 800b1ec:	4632      	mov	r2, r6
 800b1ee:	4620      	mov	r0, r4
 800b1f0:	f000 fbf4 	bl	800b9dc <__pow5mult>
 800b1f4:	465a      	mov	r2, fp
 800b1f6:	4601      	mov	r1, r0
 800b1f8:	4607      	mov	r7, r0
 800b1fa:	4620      	mov	r0, r4
 800b1fc:	f000 fb48 	bl	800b890 <__multiply>
 800b200:	4659      	mov	r1, fp
 800b202:	9007      	str	r0, [sp, #28]
 800b204:	4620      	mov	r0, r4
 800b206:	f000 fa71 	bl	800b6ec <_Bfree>
 800b20a:	9b07      	ldr	r3, [sp, #28]
 800b20c:	469b      	mov	fp, r3
 800b20e:	9b06      	ldr	r3, [sp, #24]
 800b210:	1b9a      	subs	r2, r3, r6
 800b212:	d004      	beq.n	800b21e <_dtoa_r+0x7ce>
 800b214:	4659      	mov	r1, fp
 800b216:	4620      	mov	r0, r4
 800b218:	f000 fbe0 	bl	800b9dc <__pow5mult>
 800b21c:	4683      	mov	fp, r0
 800b21e:	2101      	movs	r1, #1
 800b220:	4620      	mov	r0, r4
 800b222:	f000 fb1f 	bl	800b864 <__i2b>
 800b226:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b228:	2b00      	cmp	r3, #0
 800b22a:	4606      	mov	r6, r0
 800b22c:	dd7c      	ble.n	800b328 <_dtoa_r+0x8d8>
 800b22e:	461a      	mov	r2, r3
 800b230:	4601      	mov	r1, r0
 800b232:	4620      	mov	r0, r4
 800b234:	f000 fbd2 	bl	800b9dc <__pow5mult>
 800b238:	9b05      	ldr	r3, [sp, #20]
 800b23a:	2b01      	cmp	r3, #1
 800b23c:	4606      	mov	r6, r0
 800b23e:	dd76      	ble.n	800b32e <_dtoa_r+0x8de>
 800b240:	2300      	movs	r3, #0
 800b242:	9306      	str	r3, [sp, #24]
 800b244:	6933      	ldr	r3, [r6, #16]
 800b246:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b24a:	6918      	ldr	r0, [r3, #16]
 800b24c:	f000 faba 	bl	800b7c4 <__hi0bits>
 800b250:	f1c0 0020 	rsb	r0, r0, #32
 800b254:	9b04      	ldr	r3, [sp, #16]
 800b256:	4418      	add	r0, r3
 800b258:	f010 001f 	ands.w	r0, r0, #31
 800b25c:	f000 8086 	beq.w	800b36c <_dtoa_r+0x91c>
 800b260:	f1c0 0320 	rsb	r3, r0, #32
 800b264:	2b04      	cmp	r3, #4
 800b266:	dd7f      	ble.n	800b368 <_dtoa_r+0x918>
 800b268:	f1c0 001c 	rsb	r0, r0, #28
 800b26c:	9b04      	ldr	r3, [sp, #16]
 800b26e:	4403      	add	r3, r0
 800b270:	4480      	add	r8, r0
 800b272:	4405      	add	r5, r0
 800b274:	9304      	str	r3, [sp, #16]
 800b276:	f1b8 0f00 	cmp.w	r8, #0
 800b27a:	dd05      	ble.n	800b288 <_dtoa_r+0x838>
 800b27c:	4659      	mov	r1, fp
 800b27e:	4642      	mov	r2, r8
 800b280:	4620      	mov	r0, r4
 800b282:	f000 fc05 	bl	800ba90 <__lshift>
 800b286:	4683      	mov	fp, r0
 800b288:	9b04      	ldr	r3, [sp, #16]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	dd05      	ble.n	800b29a <_dtoa_r+0x84a>
 800b28e:	4631      	mov	r1, r6
 800b290:	461a      	mov	r2, r3
 800b292:	4620      	mov	r0, r4
 800b294:	f000 fbfc 	bl	800ba90 <__lshift>
 800b298:	4606      	mov	r6, r0
 800b29a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d069      	beq.n	800b374 <_dtoa_r+0x924>
 800b2a0:	4631      	mov	r1, r6
 800b2a2:	4658      	mov	r0, fp
 800b2a4:	f000 fc60 	bl	800bb68 <__mcmp>
 800b2a8:	2800      	cmp	r0, #0
 800b2aa:	da63      	bge.n	800b374 <_dtoa_r+0x924>
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	4659      	mov	r1, fp
 800b2b0:	220a      	movs	r2, #10
 800b2b2:	4620      	mov	r0, r4
 800b2b4:	f000 fa3c 	bl	800b730 <__multadd>
 800b2b8:	9b08      	ldr	r3, [sp, #32]
 800b2ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b2be:	4683      	mov	fp, r0
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	f000 818f 	beq.w	800b5e4 <_dtoa_r+0xb94>
 800b2c6:	4639      	mov	r1, r7
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	220a      	movs	r2, #10
 800b2cc:	4620      	mov	r0, r4
 800b2ce:	f000 fa2f 	bl	800b730 <__multadd>
 800b2d2:	f1b9 0f00 	cmp.w	r9, #0
 800b2d6:	4607      	mov	r7, r0
 800b2d8:	f300 808e 	bgt.w	800b3f8 <_dtoa_r+0x9a8>
 800b2dc:	9b05      	ldr	r3, [sp, #20]
 800b2de:	2b02      	cmp	r3, #2
 800b2e0:	dc50      	bgt.n	800b384 <_dtoa_r+0x934>
 800b2e2:	e089      	b.n	800b3f8 <_dtoa_r+0x9a8>
 800b2e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b2e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b2ea:	e75d      	b.n	800b1a8 <_dtoa_r+0x758>
 800b2ec:	9b01      	ldr	r3, [sp, #4]
 800b2ee:	1e5e      	subs	r6, r3, #1
 800b2f0:	9b06      	ldr	r3, [sp, #24]
 800b2f2:	42b3      	cmp	r3, r6
 800b2f4:	bfbf      	itttt	lt
 800b2f6:	9b06      	ldrlt	r3, [sp, #24]
 800b2f8:	9606      	strlt	r6, [sp, #24]
 800b2fa:	1af2      	sublt	r2, r6, r3
 800b2fc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800b2fe:	bfb6      	itet	lt
 800b300:	189b      	addlt	r3, r3, r2
 800b302:	1b9e      	subge	r6, r3, r6
 800b304:	930d      	strlt	r3, [sp, #52]	; 0x34
 800b306:	9b01      	ldr	r3, [sp, #4]
 800b308:	bfb8      	it	lt
 800b30a:	2600      	movlt	r6, #0
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	bfb5      	itete	lt
 800b310:	eba8 0503 	sublt.w	r5, r8, r3
 800b314:	9b01      	ldrge	r3, [sp, #4]
 800b316:	2300      	movlt	r3, #0
 800b318:	4645      	movge	r5, r8
 800b31a:	e747      	b.n	800b1ac <_dtoa_r+0x75c>
 800b31c:	9e06      	ldr	r6, [sp, #24]
 800b31e:	9f08      	ldr	r7, [sp, #32]
 800b320:	4645      	mov	r5, r8
 800b322:	e74c      	b.n	800b1be <_dtoa_r+0x76e>
 800b324:	9a06      	ldr	r2, [sp, #24]
 800b326:	e775      	b.n	800b214 <_dtoa_r+0x7c4>
 800b328:	9b05      	ldr	r3, [sp, #20]
 800b32a:	2b01      	cmp	r3, #1
 800b32c:	dc18      	bgt.n	800b360 <_dtoa_r+0x910>
 800b32e:	9b02      	ldr	r3, [sp, #8]
 800b330:	b9b3      	cbnz	r3, 800b360 <_dtoa_r+0x910>
 800b332:	9b03      	ldr	r3, [sp, #12]
 800b334:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b338:	b9a3      	cbnz	r3, 800b364 <_dtoa_r+0x914>
 800b33a:	9b03      	ldr	r3, [sp, #12]
 800b33c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b340:	0d1b      	lsrs	r3, r3, #20
 800b342:	051b      	lsls	r3, r3, #20
 800b344:	b12b      	cbz	r3, 800b352 <_dtoa_r+0x902>
 800b346:	9b04      	ldr	r3, [sp, #16]
 800b348:	3301      	adds	r3, #1
 800b34a:	9304      	str	r3, [sp, #16]
 800b34c:	f108 0801 	add.w	r8, r8, #1
 800b350:	2301      	movs	r3, #1
 800b352:	9306      	str	r3, [sp, #24]
 800b354:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b356:	2b00      	cmp	r3, #0
 800b358:	f47f af74 	bne.w	800b244 <_dtoa_r+0x7f4>
 800b35c:	2001      	movs	r0, #1
 800b35e:	e779      	b.n	800b254 <_dtoa_r+0x804>
 800b360:	2300      	movs	r3, #0
 800b362:	e7f6      	b.n	800b352 <_dtoa_r+0x902>
 800b364:	9b02      	ldr	r3, [sp, #8]
 800b366:	e7f4      	b.n	800b352 <_dtoa_r+0x902>
 800b368:	d085      	beq.n	800b276 <_dtoa_r+0x826>
 800b36a:	4618      	mov	r0, r3
 800b36c:	301c      	adds	r0, #28
 800b36e:	e77d      	b.n	800b26c <_dtoa_r+0x81c>
 800b370:	40240000 	.word	0x40240000
 800b374:	9b01      	ldr	r3, [sp, #4]
 800b376:	2b00      	cmp	r3, #0
 800b378:	dc38      	bgt.n	800b3ec <_dtoa_r+0x99c>
 800b37a:	9b05      	ldr	r3, [sp, #20]
 800b37c:	2b02      	cmp	r3, #2
 800b37e:	dd35      	ble.n	800b3ec <_dtoa_r+0x99c>
 800b380:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b384:	f1b9 0f00 	cmp.w	r9, #0
 800b388:	d10d      	bne.n	800b3a6 <_dtoa_r+0x956>
 800b38a:	4631      	mov	r1, r6
 800b38c:	464b      	mov	r3, r9
 800b38e:	2205      	movs	r2, #5
 800b390:	4620      	mov	r0, r4
 800b392:	f000 f9cd 	bl	800b730 <__multadd>
 800b396:	4601      	mov	r1, r0
 800b398:	4606      	mov	r6, r0
 800b39a:	4658      	mov	r0, fp
 800b39c:	f000 fbe4 	bl	800bb68 <__mcmp>
 800b3a0:	2800      	cmp	r0, #0
 800b3a2:	f73f adbd 	bgt.w	800af20 <_dtoa_r+0x4d0>
 800b3a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3a8:	9d00      	ldr	r5, [sp, #0]
 800b3aa:	ea6f 0a03 	mvn.w	sl, r3
 800b3ae:	f04f 0800 	mov.w	r8, #0
 800b3b2:	4631      	mov	r1, r6
 800b3b4:	4620      	mov	r0, r4
 800b3b6:	f000 f999 	bl	800b6ec <_Bfree>
 800b3ba:	2f00      	cmp	r7, #0
 800b3bc:	f43f aeb4 	beq.w	800b128 <_dtoa_r+0x6d8>
 800b3c0:	f1b8 0f00 	cmp.w	r8, #0
 800b3c4:	d005      	beq.n	800b3d2 <_dtoa_r+0x982>
 800b3c6:	45b8      	cmp	r8, r7
 800b3c8:	d003      	beq.n	800b3d2 <_dtoa_r+0x982>
 800b3ca:	4641      	mov	r1, r8
 800b3cc:	4620      	mov	r0, r4
 800b3ce:	f000 f98d 	bl	800b6ec <_Bfree>
 800b3d2:	4639      	mov	r1, r7
 800b3d4:	4620      	mov	r0, r4
 800b3d6:	f000 f989 	bl	800b6ec <_Bfree>
 800b3da:	e6a5      	b.n	800b128 <_dtoa_r+0x6d8>
 800b3dc:	2600      	movs	r6, #0
 800b3de:	4637      	mov	r7, r6
 800b3e0:	e7e1      	b.n	800b3a6 <_dtoa_r+0x956>
 800b3e2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b3e4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b3e8:	4637      	mov	r7, r6
 800b3ea:	e599      	b.n	800af20 <_dtoa_r+0x4d0>
 800b3ec:	9b08      	ldr	r3, [sp, #32]
 800b3ee:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	f000 80fd 	beq.w	800b5f2 <_dtoa_r+0xba2>
 800b3f8:	2d00      	cmp	r5, #0
 800b3fa:	dd05      	ble.n	800b408 <_dtoa_r+0x9b8>
 800b3fc:	4639      	mov	r1, r7
 800b3fe:	462a      	mov	r2, r5
 800b400:	4620      	mov	r0, r4
 800b402:	f000 fb45 	bl	800ba90 <__lshift>
 800b406:	4607      	mov	r7, r0
 800b408:	9b06      	ldr	r3, [sp, #24]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d05c      	beq.n	800b4c8 <_dtoa_r+0xa78>
 800b40e:	6879      	ldr	r1, [r7, #4]
 800b410:	4620      	mov	r0, r4
 800b412:	f000 f92b 	bl	800b66c <_Balloc>
 800b416:	4605      	mov	r5, r0
 800b418:	b928      	cbnz	r0, 800b426 <_dtoa_r+0x9d6>
 800b41a:	4b80      	ldr	r3, [pc, #512]	; (800b61c <_dtoa_r+0xbcc>)
 800b41c:	4602      	mov	r2, r0
 800b41e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b422:	f7ff bb2e 	b.w	800aa82 <_dtoa_r+0x32>
 800b426:	693a      	ldr	r2, [r7, #16]
 800b428:	3202      	adds	r2, #2
 800b42a:	0092      	lsls	r2, r2, #2
 800b42c:	f107 010c 	add.w	r1, r7, #12
 800b430:	300c      	adds	r0, #12
 800b432:	f7fe fcb5 	bl	8009da0 <memcpy>
 800b436:	2201      	movs	r2, #1
 800b438:	4629      	mov	r1, r5
 800b43a:	4620      	mov	r0, r4
 800b43c:	f000 fb28 	bl	800ba90 <__lshift>
 800b440:	9b00      	ldr	r3, [sp, #0]
 800b442:	3301      	adds	r3, #1
 800b444:	9301      	str	r3, [sp, #4]
 800b446:	9b00      	ldr	r3, [sp, #0]
 800b448:	444b      	add	r3, r9
 800b44a:	9307      	str	r3, [sp, #28]
 800b44c:	9b02      	ldr	r3, [sp, #8]
 800b44e:	f003 0301 	and.w	r3, r3, #1
 800b452:	46b8      	mov	r8, r7
 800b454:	9306      	str	r3, [sp, #24]
 800b456:	4607      	mov	r7, r0
 800b458:	9b01      	ldr	r3, [sp, #4]
 800b45a:	4631      	mov	r1, r6
 800b45c:	3b01      	subs	r3, #1
 800b45e:	4658      	mov	r0, fp
 800b460:	9302      	str	r3, [sp, #8]
 800b462:	f7ff fa67 	bl	800a934 <quorem>
 800b466:	4603      	mov	r3, r0
 800b468:	3330      	adds	r3, #48	; 0x30
 800b46a:	9004      	str	r0, [sp, #16]
 800b46c:	4641      	mov	r1, r8
 800b46e:	4658      	mov	r0, fp
 800b470:	9308      	str	r3, [sp, #32]
 800b472:	f000 fb79 	bl	800bb68 <__mcmp>
 800b476:	463a      	mov	r2, r7
 800b478:	4681      	mov	r9, r0
 800b47a:	4631      	mov	r1, r6
 800b47c:	4620      	mov	r0, r4
 800b47e:	f000 fb8f 	bl	800bba0 <__mdiff>
 800b482:	68c2      	ldr	r2, [r0, #12]
 800b484:	9b08      	ldr	r3, [sp, #32]
 800b486:	4605      	mov	r5, r0
 800b488:	bb02      	cbnz	r2, 800b4cc <_dtoa_r+0xa7c>
 800b48a:	4601      	mov	r1, r0
 800b48c:	4658      	mov	r0, fp
 800b48e:	f000 fb6b 	bl	800bb68 <__mcmp>
 800b492:	9b08      	ldr	r3, [sp, #32]
 800b494:	4602      	mov	r2, r0
 800b496:	4629      	mov	r1, r5
 800b498:	4620      	mov	r0, r4
 800b49a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800b49e:	f000 f925 	bl	800b6ec <_Bfree>
 800b4a2:	9b05      	ldr	r3, [sp, #20]
 800b4a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b4a6:	9d01      	ldr	r5, [sp, #4]
 800b4a8:	ea43 0102 	orr.w	r1, r3, r2
 800b4ac:	9b06      	ldr	r3, [sp, #24]
 800b4ae:	430b      	orrs	r3, r1
 800b4b0:	9b08      	ldr	r3, [sp, #32]
 800b4b2:	d10d      	bne.n	800b4d0 <_dtoa_r+0xa80>
 800b4b4:	2b39      	cmp	r3, #57	; 0x39
 800b4b6:	d029      	beq.n	800b50c <_dtoa_r+0xabc>
 800b4b8:	f1b9 0f00 	cmp.w	r9, #0
 800b4bc:	dd01      	ble.n	800b4c2 <_dtoa_r+0xa72>
 800b4be:	9b04      	ldr	r3, [sp, #16]
 800b4c0:	3331      	adds	r3, #49	; 0x31
 800b4c2:	9a02      	ldr	r2, [sp, #8]
 800b4c4:	7013      	strb	r3, [r2, #0]
 800b4c6:	e774      	b.n	800b3b2 <_dtoa_r+0x962>
 800b4c8:	4638      	mov	r0, r7
 800b4ca:	e7b9      	b.n	800b440 <_dtoa_r+0x9f0>
 800b4cc:	2201      	movs	r2, #1
 800b4ce:	e7e2      	b.n	800b496 <_dtoa_r+0xa46>
 800b4d0:	f1b9 0f00 	cmp.w	r9, #0
 800b4d4:	db06      	blt.n	800b4e4 <_dtoa_r+0xa94>
 800b4d6:	9905      	ldr	r1, [sp, #20]
 800b4d8:	ea41 0909 	orr.w	r9, r1, r9
 800b4dc:	9906      	ldr	r1, [sp, #24]
 800b4de:	ea59 0101 	orrs.w	r1, r9, r1
 800b4e2:	d120      	bne.n	800b526 <_dtoa_r+0xad6>
 800b4e4:	2a00      	cmp	r2, #0
 800b4e6:	ddec      	ble.n	800b4c2 <_dtoa_r+0xa72>
 800b4e8:	4659      	mov	r1, fp
 800b4ea:	2201      	movs	r2, #1
 800b4ec:	4620      	mov	r0, r4
 800b4ee:	9301      	str	r3, [sp, #4]
 800b4f0:	f000 face 	bl	800ba90 <__lshift>
 800b4f4:	4631      	mov	r1, r6
 800b4f6:	4683      	mov	fp, r0
 800b4f8:	f000 fb36 	bl	800bb68 <__mcmp>
 800b4fc:	2800      	cmp	r0, #0
 800b4fe:	9b01      	ldr	r3, [sp, #4]
 800b500:	dc02      	bgt.n	800b508 <_dtoa_r+0xab8>
 800b502:	d1de      	bne.n	800b4c2 <_dtoa_r+0xa72>
 800b504:	07da      	lsls	r2, r3, #31
 800b506:	d5dc      	bpl.n	800b4c2 <_dtoa_r+0xa72>
 800b508:	2b39      	cmp	r3, #57	; 0x39
 800b50a:	d1d8      	bne.n	800b4be <_dtoa_r+0xa6e>
 800b50c:	9a02      	ldr	r2, [sp, #8]
 800b50e:	2339      	movs	r3, #57	; 0x39
 800b510:	7013      	strb	r3, [r2, #0]
 800b512:	462b      	mov	r3, r5
 800b514:	461d      	mov	r5, r3
 800b516:	3b01      	subs	r3, #1
 800b518:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b51c:	2a39      	cmp	r2, #57	; 0x39
 800b51e:	d050      	beq.n	800b5c2 <_dtoa_r+0xb72>
 800b520:	3201      	adds	r2, #1
 800b522:	701a      	strb	r2, [r3, #0]
 800b524:	e745      	b.n	800b3b2 <_dtoa_r+0x962>
 800b526:	2a00      	cmp	r2, #0
 800b528:	dd03      	ble.n	800b532 <_dtoa_r+0xae2>
 800b52a:	2b39      	cmp	r3, #57	; 0x39
 800b52c:	d0ee      	beq.n	800b50c <_dtoa_r+0xabc>
 800b52e:	3301      	adds	r3, #1
 800b530:	e7c7      	b.n	800b4c2 <_dtoa_r+0xa72>
 800b532:	9a01      	ldr	r2, [sp, #4]
 800b534:	9907      	ldr	r1, [sp, #28]
 800b536:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b53a:	428a      	cmp	r2, r1
 800b53c:	d02a      	beq.n	800b594 <_dtoa_r+0xb44>
 800b53e:	4659      	mov	r1, fp
 800b540:	2300      	movs	r3, #0
 800b542:	220a      	movs	r2, #10
 800b544:	4620      	mov	r0, r4
 800b546:	f000 f8f3 	bl	800b730 <__multadd>
 800b54a:	45b8      	cmp	r8, r7
 800b54c:	4683      	mov	fp, r0
 800b54e:	f04f 0300 	mov.w	r3, #0
 800b552:	f04f 020a 	mov.w	r2, #10
 800b556:	4641      	mov	r1, r8
 800b558:	4620      	mov	r0, r4
 800b55a:	d107      	bne.n	800b56c <_dtoa_r+0xb1c>
 800b55c:	f000 f8e8 	bl	800b730 <__multadd>
 800b560:	4680      	mov	r8, r0
 800b562:	4607      	mov	r7, r0
 800b564:	9b01      	ldr	r3, [sp, #4]
 800b566:	3301      	adds	r3, #1
 800b568:	9301      	str	r3, [sp, #4]
 800b56a:	e775      	b.n	800b458 <_dtoa_r+0xa08>
 800b56c:	f000 f8e0 	bl	800b730 <__multadd>
 800b570:	4639      	mov	r1, r7
 800b572:	4680      	mov	r8, r0
 800b574:	2300      	movs	r3, #0
 800b576:	220a      	movs	r2, #10
 800b578:	4620      	mov	r0, r4
 800b57a:	f000 f8d9 	bl	800b730 <__multadd>
 800b57e:	4607      	mov	r7, r0
 800b580:	e7f0      	b.n	800b564 <_dtoa_r+0xb14>
 800b582:	f1b9 0f00 	cmp.w	r9, #0
 800b586:	9a00      	ldr	r2, [sp, #0]
 800b588:	bfcc      	ite	gt
 800b58a:	464d      	movgt	r5, r9
 800b58c:	2501      	movle	r5, #1
 800b58e:	4415      	add	r5, r2
 800b590:	f04f 0800 	mov.w	r8, #0
 800b594:	4659      	mov	r1, fp
 800b596:	2201      	movs	r2, #1
 800b598:	4620      	mov	r0, r4
 800b59a:	9301      	str	r3, [sp, #4]
 800b59c:	f000 fa78 	bl	800ba90 <__lshift>
 800b5a0:	4631      	mov	r1, r6
 800b5a2:	4683      	mov	fp, r0
 800b5a4:	f000 fae0 	bl	800bb68 <__mcmp>
 800b5a8:	2800      	cmp	r0, #0
 800b5aa:	dcb2      	bgt.n	800b512 <_dtoa_r+0xac2>
 800b5ac:	d102      	bne.n	800b5b4 <_dtoa_r+0xb64>
 800b5ae:	9b01      	ldr	r3, [sp, #4]
 800b5b0:	07db      	lsls	r3, r3, #31
 800b5b2:	d4ae      	bmi.n	800b512 <_dtoa_r+0xac2>
 800b5b4:	462b      	mov	r3, r5
 800b5b6:	461d      	mov	r5, r3
 800b5b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b5bc:	2a30      	cmp	r2, #48	; 0x30
 800b5be:	d0fa      	beq.n	800b5b6 <_dtoa_r+0xb66>
 800b5c0:	e6f7      	b.n	800b3b2 <_dtoa_r+0x962>
 800b5c2:	9a00      	ldr	r2, [sp, #0]
 800b5c4:	429a      	cmp	r2, r3
 800b5c6:	d1a5      	bne.n	800b514 <_dtoa_r+0xac4>
 800b5c8:	f10a 0a01 	add.w	sl, sl, #1
 800b5cc:	2331      	movs	r3, #49	; 0x31
 800b5ce:	e779      	b.n	800b4c4 <_dtoa_r+0xa74>
 800b5d0:	4b13      	ldr	r3, [pc, #76]	; (800b620 <_dtoa_r+0xbd0>)
 800b5d2:	f7ff baaf 	b.w	800ab34 <_dtoa_r+0xe4>
 800b5d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	f47f aa86 	bne.w	800aaea <_dtoa_r+0x9a>
 800b5de:	4b11      	ldr	r3, [pc, #68]	; (800b624 <_dtoa_r+0xbd4>)
 800b5e0:	f7ff baa8 	b.w	800ab34 <_dtoa_r+0xe4>
 800b5e4:	f1b9 0f00 	cmp.w	r9, #0
 800b5e8:	dc03      	bgt.n	800b5f2 <_dtoa_r+0xba2>
 800b5ea:	9b05      	ldr	r3, [sp, #20]
 800b5ec:	2b02      	cmp	r3, #2
 800b5ee:	f73f aec9 	bgt.w	800b384 <_dtoa_r+0x934>
 800b5f2:	9d00      	ldr	r5, [sp, #0]
 800b5f4:	4631      	mov	r1, r6
 800b5f6:	4658      	mov	r0, fp
 800b5f8:	f7ff f99c 	bl	800a934 <quorem>
 800b5fc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b600:	f805 3b01 	strb.w	r3, [r5], #1
 800b604:	9a00      	ldr	r2, [sp, #0]
 800b606:	1aaa      	subs	r2, r5, r2
 800b608:	4591      	cmp	r9, r2
 800b60a:	ddba      	ble.n	800b582 <_dtoa_r+0xb32>
 800b60c:	4659      	mov	r1, fp
 800b60e:	2300      	movs	r3, #0
 800b610:	220a      	movs	r2, #10
 800b612:	4620      	mov	r0, r4
 800b614:	f000 f88c 	bl	800b730 <__multadd>
 800b618:	4683      	mov	fp, r0
 800b61a:	e7eb      	b.n	800b5f4 <_dtoa_r+0xba4>
 800b61c:	0801954f 	.word	0x0801954f
 800b620:	0801946c 	.word	0x0801946c
 800b624:	080194cc 	.word	0x080194cc

0800b628 <fiprintf>:
 800b628:	b40e      	push	{r1, r2, r3}
 800b62a:	b503      	push	{r0, r1, lr}
 800b62c:	4601      	mov	r1, r0
 800b62e:	ab03      	add	r3, sp, #12
 800b630:	4805      	ldr	r0, [pc, #20]	; (800b648 <fiprintf+0x20>)
 800b632:	f853 2b04 	ldr.w	r2, [r3], #4
 800b636:	6800      	ldr	r0, [r0, #0]
 800b638:	9301      	str	r3, [sp, #4]
 800b63a:	f000 fd29 	bl	800c090 <_vfiprintf_r>
 800b63e:	b002      	add	sp, #8
 800b640:	f85d eb04 	ldr.w	lr, [sp], #4
 800b644:	b003      	add	sp, #12
 800b646:	4770      	bx	lr
 800b648:	20000520 	.word	0x20000520

0800b64c <_localeconv_r>:
 800b64c:	4800      	ldr	r0, [pc, #0]	; (800b650 <_localeconv_r+0x4>)
 800b64e:	4770      	bx	lr
 800b650:	20000674 	.word	0x20000674

0800b654 <__malloc_lock>:
 800b654:	4801      	ldr	r0, [pc, #4]	; (800b65c <__malloc_lock+0x8>)
 800b656:	f001 b8cb 	b.w	800c7f0 <__retarget_lock_acquire_recursive>
 800b65a:	bf00      	nop
 800b65c:	2000c370 	.word	0x2000c370

0800b660 <__malloc_unlock>:
 800b660:	4801      	ldr	r0, [pc, #4]	; (800b668 <__malloc_unlock+0x8>)
 800b662:	f001 b8c6 	b.w	800c7f2 <__retarget_lock_release_recursive>
 800b666:	bf00      	nop
 800b668:	2000c370 	.word	0x2000c370

0800b66c <_Balloc>:
 800b66c:	b570      	push	{r4, r5, r6, lr}
 800b66e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b670:	4604      	mov	r4, r0
 800b672:	460d      	mov	r5, r1
 800b674:	b976      	cbnz	r6, 800b694 <_Balloc+0x28>
 800b676:	2010      	movs	r0, #16
 800b678:	f7fe fb82 	bl	8009d80 <malloc>
 800b67c:	4602      	mov	r2, r0
 800b67e:	6260      	str	r0, [r4, #36]	; 0x24
 800b680:	b920      	cbnz	r0, 800b68c <_Balloc+0x20>
 800b682:	4b18      	ldr	r3, [pc, #96]	; (800b6e4 <_Balloc+0x78>)
 800b684:	4818      	ldr	r0, [pc, #96]	; (800b6e8 <_Balloc+0x7c>)
 800b686:	2166      	movs	r1, #102	; 0x66
 800b688:	f7ff f936 	bl	800a8f8 <__assert_func>
 800b68c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b690:	6006      	str	r6, [r0, #0]
 800b692:	60c6      	str	r6, [r0, #12]
 800b694:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b696:	68f3      	ldr	r3, [r6, #12]
 800b698:	b183      	cbz	r3, 800b6bc <_Balloc+0x50>
 800b69a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b69c:	68db      	ldr	r3, [r3, #12]
 800b69e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b6a2:	b9b8      	cbnz	r0, 800b6d4 <_Balloc+0x68>
 800b6a4:	2101      	movs	r1, #1
 800b6a6:	fa01 f605 	lsl.w	r6, r1, r5
 800b6aa:	1d72      	adds	r2, r6, #5
 800b6ac:	0092      	lsls	r2, r2, #2
 800b6ae:	4620      	mov	r0, r4
 800b6b0:	f000 fb5a 	bl	800bd68 <_calloc_r>
 800b6b4:	b160      	cbz	r0, 800b6d0 <_Balloc+0x64>
 800b6b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b6ba:	e00e      	b.n	800b6da <_Balloc+0x6e>
 800b6bc:	2221      	movs	r2, #33	; 0x21
 800b6be:	2104      	movs	r1, #4
 800b6c0:	4620      	mov	r0, r4
 800b6c2:	f000 fb51 	bl	800bd68 <_calloc_r>
 800b6c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b6c8:	60f0      	str	r0, [r6, #12]
 800b6ca:	68db      	ldr	r3, [r3, #12]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d1e4      	bne.n	800b69a <_Balloc+0x2e>
 800b6d0:	2000      	movs	r0, #0
 800b6d2:	bd70      	pop	{r4, r5, r6, pc}
 800b6d4:	6802      	ldr	r2, [r0, #0]
 800b6d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b6da:	2300      	movs	r3, #0
 800b6dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b6e0:	e7f7      	b.n	800b6d2 <_Balloc+0x66>
 800b6e2:	bf00      	nop
 800b6e4:	080194d9 	.word	0x080194d9
 800b6e8:	08019560 	.word	0x08019560

0800b6ec <_Bfree>:
 800b6ec:	b570      	push	{r4, r5, r6, lr}
 800b6ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b6f0:	4605      	mov	r5, r0
 800b6f2:	460c      	mov	r4, r1
 800b6f4:	b976      	cbnz	r6, 800b714 <_Bfree+0x28>
 800b6f6:	2010      	movs	r0, #16
 800b6f8:	f7fe fb42 	bl	8009d80 <malloc>
 800b6fc:	4602      	mov	r2, r0
 800b6fe:	6268      	str	r0, [r5, #36]	; 0x24
 800b700:	b920      	cbnz	r0, 800b70c <_Bfree+0x20>
 800b702:	4b09      	ldr	r3, [pc, #36]	; (800b728 <_Bfree+0x3c>)
 800b704:	4809      	ldr	r0, [pc, #36]	; (800b72c <_Bfree+0x40>)
 800b706:	218a      	movs	r1, #138	; 0x8a
 800b708:	f7ff f8f6 	bl	800a8f8 <__assert_func>
 800b70c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b710:	6006      	str	r6, [r0, #0]
 800b712:	60c6      	str	r6, [r0, #12]
 800b714:	b13c      	cbz	r4, 800b726 <_Bfree+0x3a>
 800b716:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b718:	6862      	ldr	r2, [r4, #4]
 800b71a:	68db      	ldr	r3, [r3, #12]
 800b71c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b720:	6021      	str	r1, [r4, #0]
 800b722:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b726:	bd70      	pop	{r4, r5, r6, pc}
 800b728:	080194d9 	.word	0x080194d9
 800b72c:	08019560 	.word	0x08019560

0800b730 <__multadd>:
 800b730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b734:	690e      	ldr	r6, [r1, #16]
 800b736:	4607      	mov	r7, r0
 800b738:	4698      	mov	r8, r3
 800b73a:	460c      	mov	r4, r1
 800b73c:	f101 0014 	add.w	r0, r1, #20
 800b740:	2300      	movs	r3, #0
 800b742:	6805      	ldr	r5, [r0, #0]
 800b744:	b2a9      	uxth	r1, r5
 800b746:	fb02 8101 	mla	r1, r2, r1, r8
 800b74a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b74e:	0c2d      	lsrs	r5, r5, #16
 800b750:	fb02 c505 	mla	r5, r2, r5, ip
 800b754:	b289      	uxth	r1, r1
 800b756:	3301      	adds	r3, #1
 800b758:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b75c:	429e      	cmp	r6, r3
 800b75e:	f840 1b04 	str.w	r1, [r0], #4
 800b762:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b766:	dcec      	bgt.n	800b742 <__multadd+0x12>
 800b768:	f1b8 0f00 	cmp.w	r8, #0
 800b76c:	d022      	beq.n	800b7b4 <__multadd+0x84>
 800b76e:	68a3      	ldr	r3, [r4, #8]
 800b770:	42b3      	cmp	r3, r6
 800b772:	dc19      	bgt.n	800b7a8 <__multadd+0x78>
 800b774:	6861      	ldr	r1, [r4, #4]
 800b776:	4638      	mov	r0, r7
 800b778:	3101      	adds	r1, #1
 800b77a:	f7ff ff77 	bl	800b66c <_Balloc>
 800b77e:	4605      	mov	r5, r0
 800b780:	b928      	cbnz	r0, 800b78e <__multadd+0x5e>
 800b782:	4602      	mov	r2, r0
 800b784:	4b0d      	ldr	r3, [pc, #52]	; (800b7bc <__multadd+0x8c>)
 800b786:	480e      	ldr	r0, [pc, #56]	; (800b7c0 <__multadd+0x90>)
 800b788:	21b5      	movs	r1, #181	; 0xb5
 800b78a:	f7ff f8b5 	bl	800a8f8 <__assert_func>
 800b78e:	6922      	ldr	r2, [r4, #16]
 800b790:	3202      	adds	r2, #2
 800b792:	f104 010c 	add.w	r1, r4, #12
 800b796:	0092      	lsls	r2, r2, #2
 800b798:	300c      	adds	r0, #12
 800b79a:	f7fe fb01 	bl	8009da0 <memcpy>
 800b79e:	4621      	mov	r1, r4
 800b7a0:	4638      	mov	r0, r7
 800b7a2:	f7ff ffa3 	bl	800b6ec <_Bfree>
 800b7a6:	462c      	mov	r4, r5
 800b7a8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b7ac:	3601      	adds	r6, #1
 800b7ae:	f8c3 8014 	str.w	r8, [r3, #20]
 800b7b2:	6126      	str	r6, [r4, #16]
 800b7b4:	4620      	mov	r0, r4
 800b7b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7ba:	bf00      	nop
 800b7bc:	0801954f 	.word	0x0801954f
 800b7c0:	08019560 	.word	0x08019560

0800b7c4 <__hi0bits>:
 800b7c4:	0c03      	lsrs	r3, r0, #16
 800b7c6:	041b      	lsls	r3, r3, #16
 800b7c8:	b9d3      	cbnz	r3, 800b800 <__hi0bits+0x3c>
 800b7ca:	0400      	lsls	r0, r0, #16
 800b7cc:	2310      	movs	r3, #16
 800b7ce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b7d2:	bf04      	itt	eq
 800b7d4:	0200      	lsleq	r0, r0, #8
 800b7d6:	3308      	addeq	r3, #8
 800b7d8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b7dc:	bf04      	itt	eq
 800b7de:	0100      	lsleq	r0, r0, #4
 800b7e0:	3304      	addeq	r3, #4
 800b7e2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b7e6:	bf04      	itt	eq
 800b7e8:	0080      	lsleq	r0, r0, #2
 800b7ea:	3302      	addeq	r3, #2
 800b7ec:	2800      	cmp	r0, #0
 800b7ee:	db05      	blt.n	800b7fc <__hi0bits+0x38>
 800b7f0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b7f4:	f103 0301 	add.w	r3, r3, #1
 800b7f8:	bf08      	it	eq
 800b7fa:	2320      	moveq	r3, #32
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	4770      	bx	lr
 800b800:	2300      	movs	r3, #0
 800b802:	e7e4      	b.n	800b7ce <__hi0bits+0xa>

0800b804 <__lo0bits>:
 800b804:	6803      	ldr	r3, [r0, #0]
 800b806:	f013 0207 	ands.w	r2, r3, #7
 800b80a:	4601      	mov	r1, r0
 800b80c:	d00b      	beq.n	800b826 <__lo0bits+0x22>
 800b80e:	07da      	lsls	r2, r3, #31
 800b810:	d424      	bmi.n	800b85c <__lo0bits+0x58>
 800b812:	0798      	lsls	r0, r3, #30
 800b814:	bf49      	itett	mi
 800b816:	085b      	lsrmi	r3, r3, #1
 800b818:	089b      	lsrpl	r3, r3, #2
 800b81a:	2001      	movmi	r0, #1
 800b81c:	600b      	strmi	r3, [r1, #0]
 800b81e:	bf5c      	itt	pl
 800b820:	600b      	strpl	r3, [r1, #0]
 800b822:	2002      	movpl	r0, #2
 800b824:	4770      	bx	lr
 800b826:	b298      	uxth	r0, r3
 800b828:	b9b0      	cbnz	r0, 800b858 <__lo0bits+0x54>
 800b82a:	0c1b      	lsrs	r3, r3, #16
 800b82c:	2010      	movs	r0, #16
 800b82e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b832:	bf04      	itt	eq
 800b834:	0a1b      	lsreq	r3, r3, #8
 800b836:	3008      	addeq	r0, #8
 800b838:	071a      	lsls	r2, r3, #28
 800b83a:	bf04      	itt	eq
 800b83c:	091b      	lsreq	r3, r3, #4
 800b83e:	3004      	addeq	r0, #4
 800b840:	079a      	lsls	r2, r3, #30
 800b842:	bf04      	itt	eq
 800b844:	089b      	lsreq	r3, r3, #2
 800b846:	3002      	addeq	r0, #2
 800b848:	07da      	lsls	r2, r3, #31
 800b84a:	d403      	bmi.n	800b854 <__lo0bits+0x50>
 800b84c:	085b      	lsrs	r3, r3, #1
 800b84e:	f100 0001 	add.w	r0, r0, #1
 800b852:	d005      	beq.n	800b860 <__lo0bits+0x5c>
 800b854:	600b      	str	r3, [r1, #0]
 800b856:	4770      	bx	lr
 800b858:	4610      	mov	r0, r2
 800b85a:	e7e8      	b.n	800b82e <__lo0bits+0x2a>
 800b85c:	2000      	movs	r0, #0
 800b85e:	4770      	bx	lr
 800b860:	2020      	movs	r0, #32
 800b862:	4770      	bx	lr

0800b864 <__i2b>:
 800b864:	b510      	push	{r4, lr}
 800b866:	460c      	mov	r4, r1
 800b868:	2101      	movs	r1, #1
 800b86a:	f7ff feff 	bl	800b66c <_Balloc>
 800b86e:	4602      	mov	r2, r0
 800b870:	b928      	cbnz	r0, 800b87e <__i2b+0x1a>
 800b872:	4b05      	ldr	r3, [pc, #20]	; (800b888 <__i2b+0x24>)
 800b874:	4805      	ldr	r0, [pc, #20]	; (800b88c <__i2b+0x28>)
 800b876:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b87a:	f7ff f83d 	bl	800a8f8 <__assert_func>
 800b87e:	2301      	movs	r3, #1
 800b880:	6144      	str	r4, [r0, #20]
 800b882:	6103      	str	r3, [r0, #16]
 800b884:	bd10      	pop	{r4, pc}
 800b886:	bf00      	nop
 800b888:	0801954f 	.word	0x0801954f
 800b88c:	08019560 	.word	0x08019560

0800b890 <__multiply>:
 800b890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b894:	4614      	mov	r4, r2
 800b896:	690a      	ldr	r2, [r1, #16]
 800b898:	6923      	ldr	r3, [r4, #16]
 800b89a:	429a      	cmp	r2, r3
 800b89c:	bfb8      	it	lt
 800b89e:	460b      	movlt	r3, r1
 800b8a0:	460d      	mov	r5, r1
 800b8a2:	bfbc      	itt	lt
 800b8a4:	4625      	movlt	r5, r4
 800b8a6:	461c      	movlt	r4, r3
 800b8a8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b8ac:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b8b0:	68ab      	ldr	r3, [r5, #8]
 800b8b2:	6869      	ldr	r1, [r5, #4]
 800b8b4:	eb0a 0709 	add.w	r7, sl, r9
 800b8b8:	42bb      	cmp	r3, r7
 800b8ba:	b085      	sub	sp, #20
 800b8bc:	bfb8      	it	lt
 800b8be:	3101      	addlt	r1, #1
 800b8c0:	f7ff fed4 	bl	800b66c <_Balloc>
 800b8c4:	b930      	cbnz	r0, 800b8d4 <__multiply+0x44>
 800b8c6:	4602      	mov	r2, r0
 800b8c8:	4b42      	ldr	r3, [pc, #264]	; (800b9d4 <__multiply+0x144>)
 800b8ca:	4843      	ldr	r0, [pc, #268]	; (800b9d8 <__multiply+0x148>)
 800b8cc:	f240 115d 	movw	r1, #349	; 0x15d
 800b8d0:	f7ff f812 	bl	800a8f8 <__assert_func>
 800b8d4:	f100 0614 	add.w	r6, r0, #20
 800b8d8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b8dc:	4633      	mov	r3, r6
 800b8de:	2200      	movs	r2, #0
 800b8e0:	4543      	cmp	r3, r8
 800b8e2:	d31e      	bcc.n	800b922 <__multiply+0x92>
 800b8e4:	f105 0c14 	add.w	ip, r5, #20
 800b8e8:	f104 0314 	add.w	r3, r4, #20
 800b8ec:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b8f0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b8f4:	9202      	str	r2, [sp, #8]
 800b8f6:	ebac 0205 	sub.w	r2, ip, r5
 800b8fa:	3a15      	subs	r2, #21
 800b8fc:	f022 0203 	bic.w	r2, r2, #3
 800b900:	3204      	adds	r2, #4
 800b902:	f105 0115 	add.w	r1, r5, #21
 800b906:	458c      	cmp	ip, r1
 800b908:	bf38      	it	cc
 800b90a:	2204      	movcc	r2, #4
 800b90c:	9201      	str	r2, [sp, #4]
 800b90e:	9a02      	ldr	r2, [sp, #8]
 800b910:	9303      	str	r3, [sp, #12]
 800b912:	429a      	cmp	r2, r3
 800b914:	d808      	bhi.n	800b928 <__multiply+0x98>
 800b916:	2f00      	cmp	r7, #0
 800b918:	dc55      	bgt.n	800b9c6 <__multiply+0x136>
 800b91a:	6107      	str	r7, [r0, #16]
 800b91c:	b005      	add	sp, #20
 800b91e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b922:	f843 2b04 	str.w	r2, [r3], #4
 800b926:	e7db      	b.n	800b8e0 <__multiply+0x50>
 800b928:	f8b3 a000 	ldrh.w	sl, [r3]
 800b92c:	f1ba 0f00 	cmp.w	sl, #0
 800b930:	d020      	beq.n	800b974 <__multiply+0xe4>
 800b932:	f105 0e14 	add.w	lr, r5, #20
 800b936:	46b1      	mov	r9, r6
 800b938:	2200      	movs	r2, #0
 800b93a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b93e:	f8d9 b000 	ldr.w	fp, [r9]
 800b942:	b2a1      	uxth	r1, r4
 800b944:	fa1f fb8b 	uxth.w	fp, fp
 800b948:	fb0a b101 	mla	r1, sl, r1, fp
 800b94c:	4411      	add	r1, r2
 800b94e:	f8d9 2000 	ldr.w	r2, [r9]
 800b952:	0c24      	lsrs	r4, r4, #16
 800b954:	0c12      	lsrs	r2, r2, #16
 800b956:	fb0a 2404 	mla	r4, sl, r4, r2
 800b95a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b95e:	b289      	uxth	r1, r1
 800b960:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b964:	45f4      	cmp	ip, lr
 800b966:	f849 1b04 	str.w	r1, [r9], #4
 800b96a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b96e:	d8e4      	bhi.n	800b93a <__multiply+0xaa>
 800b970:	9901      	ldr	r1, [sp, #4]
 800b972:	5072      	str	r2, [r6, r1]
 800b974:	9a03      	ldr	r2, [sp, #12]
 800b976:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b97a:	3304      	adds	r3, #4
 800b97c:	f1b9 0f00 	cmp.w	r9, #0
 800b980:	d01f      	beq.n	800b9c2 <__multiply+0x132>
 800b982:	6834      	ldr	r4, [r6, #0]
 800b984:	f105 0114 	add.w	r1, r5, #20
 800b988:	46b6      	mov	lr, r6
 800b98a:	f04f 0a00 	mov.w	sl, #0
 800b98e:	880a      	ldrh	r2, [r1, #0]
 800b990:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b994:	fb09 b202 	mla	r2, r9, r2, fp
 800b998:	4492      	add	sl, r2
 800b99a:	b2a4      	uxth	r4, r4
 800b99c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b9a0:	f84e 4b04 	str.w	r4, [lr], #4
 800b9a4:	f851 4b04 	ldr.w	r4, [r1], #4
 800b9a8:	f8be 2000 	ldrh.w	r2, [lr]
 800b9ac:	0c24      	lsrs	r4, r4, #16
 800b9ae:	fb09 2404 	mla	r4, r9, r4, r2
 800b9b2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b9b6:	458c      	cmp	ip, r1
 800b9b8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b9bc:	d8e7      	bhi.n	800b98e <__multiply+0xfe>
 800b9be:	9a01      	ldr	r2, [sp, #4]
 800b9c0:	50b4      	str	r4, [r6, r2]
 800b9c2:	3604      	adds	r6, #4
 800b9c4:	e7a3      	b.n	800b90e <__multiply+0x7e>
 800b9c6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d1a5      	bne.n	800b91a <__multiply+0x8a>
 800b9ce:	3f01      	subs	r7, #1
 800b9d0:	e7a1      	b.n	800b916 <__multiply+0x86>
 800b9d2:	bf00      	nop
 800b9d4:	0801954f 	.word	0x0801954f
 800b9d8:	08019560 	.word	0x08019560

0800b9dc <__pow5mult>:
 800b9dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9e0:	4615      	mov	r5, r2
 800b9e2:	f012 0203 	ands.w	r2, r2, #3
 800b9e6:	4606      	mov	r6, r0
 800b9e8:	460f      	mov	r7, r1
 800b9ea:	d007      	beq.n	800b9fc <__pow5mult+0x20>
 800b9ec:	4c25      	ldr	r4, [pc, #148]	; (800ba84 <__pow5mult+0xa8>)
 800b9ee:	3a01      	subs	r2, #1
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b9f6:	f7ff fe9b 	bl	800b730 <__multadd>
 800b9fa:	4607      	mov	r7, r0
 800b9fc:	10ad      	asrs	r5, r5, #2
 800b9fe:	d03d      	beq.n	800ba7c <__pow5mult+0xa0>
 800ba00:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ba02:	b97c      	cbnz	r4, 800ba24 <__pow5mult+0x48>
 800ba04:	2010      	movs	r0, #16
 800ba06:	f7fe f9bb 	bl	8009d80 <malloc>
 800ba0a:	4602      	mov	r2, r0
 800ba0c:	6270      	str	r0, [r6, #36]	; 0x24
 800ba0e:	b928      	cbnz	r0, 800ba1c <__pow5mult+0x40>
 800ba10:	4b1d      	ldr	r3, [pc, #116]	; (800ba88 <__pow5mult+0xac>)
 800ba12:	481e      	ldr	r0, [pc, #120]	; (800ba8c <__pow5mult+0xb0>)
 800ba14:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ba18:	f7fe ff6e 	bl	800a8f8 <__assert_func>
 800ba1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ba20:	6004      	str	r4, [r0, #0]
 800ba22:	60c4      	str	r4, [r0, #12]
 800ba24:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ba28:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ba2c:	b94c      	cbnz	r4, 800ba42 <__pow5mult+0x66>
 800ba2e:	f240 2171 	movw	r1, #625	; 0x271
 800ba32:	4630      	mov	r0, r6
 800ba34:	f7ff ff16 	bl	800b864 <__i2b>
 800ba38:	2300      	movs	r3, #0
 800ba3a:	f8c8 0008 	str.w	r0, [r8, #8]
 800ba3e:	4604      	mov	r4, r0
 800ba40:	6003      	str	r3, [r0, #0]
 800ba42:	f04f 0900 	mov.w	r9, #0
 800ba46:	07eb      	lsls	r3, r5, #31
 800ba48:	d50a      	bpl.n	800ba60 <__pow5mult+0x84>
 800ba4a:	4639      	mov	r1, r7
 800ba4c:	4622      	mov	r2, r4
 800ba4e:	4630      	mov	r0, r6
 800ba50:	f7ff ff1e 	bl	800b890 <__multiply>
 800ba54:	4639      	mov	r1, r7
 800ba56:	4680      	mov	r8, r0
 800ba58:	4630      	mov	r0, r6
 800ba5a:	f7ff fe47 	bl	800b6ec <_Bfree>
 800ba5e:	4647      	mov	r7, r8
 800ba60:	106d      	asrs	r5, r5, #1
 800ba62:	d00b      	beq.n	800ba7c <__pow5mult+0xa0>
 800ba64:	6820      	ldr	r0, [r4, #0]
 800ba66:	b938      	cbnz	r0, 800ba78 <__pow5mult+0x9c>
 800ba68:	4622      	mov	r2, r4
 800ba6a:	4621      	mov	r1, r4
 800ba6c:	4630      	mov	r0, r6
 800ba6e:	f7ff ff0f 	bl	800b890 <__multiply>
 800ba72:	6020      	str	r0, [r4, #0]
 800ba74:	f8c0 9000 	str.w	r9, [r0]
 800ba78:	4604      	mov	r4, r0
 800ba7a:	e7e4      	b.n	800ba46 <__pow5mult+0x6a>
 800ba7c:	4638      	mov	r0, r7
 800ba7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba82:	bf00      	nop
 800ba84:	080196b0 	.word	0x080196b0
 800ba88:	080194d9 	.word	0x080194d9
 800ba8c:	08019560 	.word	0x08019560

0800ba90 <__lshift>:
 800ba90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba94:	460c      	mov	r4, r1
 800ba96:	6849      	ldr	r1, [r1, #4]
 800ba98:	6923      	ldr	r3, [r4, #16]
 800ba9a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ba9e:	68a3      	ldr	r3, [r4, #8]
 800baa0:	4607      	mov	r7, r0
 800baa2:	4691      	mov	r9, r2
 800baa4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800baa8:	f108 0601 	add.w	r6, r8, #1
 800baac:	42b3      	cmp	r3, r6
 800baae:	db0b      	blt.n	800bac8 <__lshift+0x38>
 800bab0:	4638      	mov	r0, r7
 800bab2:	f7ff fddb 	bl	800b66c <_Balloc>
 800bab6:	4605      	mov	r5, r0
 800bab8:	b948      	cbnz	r0, 800bace <__lshift+0x3e>
 800baba:	4602      	mov	r2, r0
 800babc:	4b28      	ldr	r3, [pc, #160]	; (800bb60 <__lshift+0xd0>)
 800babe:	4829      	ldr	r0, [pc, #164]	; (800bb64 <__lshift+0xd4>)
 800bac0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bac4:	f7fe ff18 	bl	800a8f8 <__assert_func>
 800bac8:	3101      	adds	r1, #1
 800baca:	005b      	lsls	r3, r3, #1
 800bacc:	e7ee      	b.n	800baac <__lshift+0x1c>
 800bace:	2300      	movs	r3, #0
 800bad0:	f100 0114 	add.w	r1, r0, #20
 800bad4:	f100 0210 	add.w	r2, r0, #16
 800bad8:	4618      	mov	r0, r3
 800bada:	4553      	cmp	r3, sl
 800badc:	db33      	blt.n	800bb46 <__lshift+0xb6>
 800bade:	6920      	ldr	r0, [r4, #16]
 800bae0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bae4:	f104 0314 	add.w	r3, r4, #20
 800bae8:	f019 091f 	ands.w	r9, r9, #31
 800baec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800baf0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800baf4:	d02b      	beq.n	800bb4e <__lshift+0xbe>
 800baf6:	f1c9 0e20 	rsb	lr, r9, #32
 800bafa:	468a      	mov	sl, r1
 800bafc:	2200      	movs	r2, #0
 800bafe:	6818      	ldr	r0, [r3, #0]
 800bb00:	fa00 f009 	lsl.w	r0, r0, r9
 800bb04:	4302      	orrs	r2, r0
 800bb06:	f84a 2b04 	str.w	r2, [sl], #4
 800bb0a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb0e:	459c      	cmp	ip, r3
 800bb10:	fa22 f20e 	lsr.w	r2, r2, lr
 800bb14:	d8f3      	bhi.n	800bafe <__lshift+0x6e>
 800bb16:	ebac 0304 	sub.w	r3, ip, r4
 800bb1a:	3b15      	subs	r3, #21
 800bb1c:	f023 0303 	bic.w	r3, r3, #3
 800bb20:	3304      	adds	r3, #4
 800bb22:	f104 0015 	add.w	r0, r4, #21
 800bb26:	4584      	cmp	ip, r0
 800bb28:	bf38      	it	cc
 800bb2a:	2304      	movcc	r3, #4
 800bb2c:	50ca      	str	r2, [r1, r3]
 800bb2e:	b10a      	cbz	r2, 800bb34 <__lshift+0xa4>
 800bb30:	f108 0602 	add.w	r6, r8, #2
 800bb34:	3e01      	subs	r6, #1
 800bb36:	4638      	mov	r0, r7
 800bb38:	612e      	str	r6, [r5, #16]
 800bb3a:	4621      	mov	r1, r4
 800bb3c:	f7ff fdd6 	bl	800b6ec <_Bfree>
 800bb40:	4628      	mov	r0, r5
 800bb42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb46:	f842 0f04 	str.w	r0, [r2, #4]!
 800bb4a:	3301      	adds	r3, #1
 800bb4c:	e7c5      	b.n	800bada <__lshift+0x4a>
 800bb4e:	3904      	subs	r1, #4
 800bb50:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb54:	f841 2f04 	str.w	r2, [r1, #4]!
 800bb58:	459c      	cmp	ip, r3
 800bb5a:	d8f9      	bhi.n	800bb50 <__lshift+0xc0>
 800bb5c:	e7ea      	b.n	800bb34 <__lshift+0xa4>
 800bb5e:	bf00      	nop
 800bb60:	0801954f 	.word	0x0801954f
 800bb64:	08019560 	.word	0x08019560

0800bb68 <__mcmp>:
 800bb68:	b530      	push	{r4, r5, lr}
 800bb6a:	6902      	ldr	r2, [r0, #16]
 800bb6c:	690c      	ldr	r4, [r1, #16]
 800bb6e:	1b12      	subs	r2, r2, r4
 800bb70:	d10e      	bne.n	800bb90 <__mcmp+0x28>
 800bb72:	f100 0314 	add.w	r3, r0, #20
 800bb76:	3114      	adds	r1, #20
 800bb78:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bb7c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bb80:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bb84:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bb88:	42a5      	cmp	r5, r4
 800bb8a:	d003      	beq.n	800bb94 <__mcmp+0x2c>
 800bb8c:	d305      	bcc.n	800bb9a <__mcmp+0x32>
 800bb8e:	2201      	movs	r2, #1
 800bb90:	4610      	mov	r0, r2
 800bb92:	bd30      	pop	{r4, r5, pc}
 800bb94:	4283      	cmp	r3, r0
 800bb96:	d3f3      	bcc.n	800bb80 <__mcmp+0x18>
 800bb98:	e7fa      	b.n	800bb90 <__mcmp+0x28>
 800bb9a:	f04f 32ff 	mov.w	r2, #4294967295
 800bb9e:	e7f7      	b.n	800bb90 <__mcmp+0x28>

0800bba0 <__mdiff>:
 800bba0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bba4:	460c      	mov	r4, r1
 800bba6:	4606      	mov	r6, r0
 800bba8:	4611      	mov	r1, r2
 800bbaa:	4620      	mov	r0, r4
 800bbac:	4617      	mov	r7, r2
 800bbae:	f7ff ffdb 	bl	800bb68 <__mcmp>
 800bbb2:	1e05      	subs	r5, r0, #0
 800bbb4:	d110      	bne.n	800bbd8 <__mdiff+0x38>
 800bbb6:	4629      	mov	r1, r5
 800bbb8:	4630      	mov	r0, r6
 800bbba:	f7ff fd57 	bl	800b66c <_Balloc>
 800bbbe:	b930      	cbnz	r0, 800bbce <__mdiff+0x2e>
 800bbc0:	4b39      	ldr	r3, [pc, #228]	; (800bca8 <__mdiff+0x108>)
 800bbc2:	4602      	mov	r2, r0
 800bbc4:	f240 2132 	movw	r1, #562	; 0x232
 800bbc8:	4838      	ldr	r0, [pc, #224]	; (800bcac <__mdiff+0x10c>)
 800bbca:	f7fe fe95 	bl	800a8f8 <__assert_func>
 800bbce:	2301      	movs	r3, #1
 800bbd0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bbd4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbd8:	bfa4      	itt	ge
 800bbda:	463b      	movge	r3, r7
 800bbdc:	4627      	movge	r7, r4
 800bbde:	4630      	mov	r0, r6
 800bbe0:	6879      	ldr	r1, [r7, #4]
 800bbe2:	bfa6      	itte	ge
 800bbe4:	461c      	movge	r4, r3
 800bbe6:	2500      	movge	r5, #0
 800bbe8:	2501      	movlt	r5, #1
 800bbea:	f7ff fd3f 	bl	800b66c <_Balloc>
 800bbee:	b920      	cbnz	r0, 800bbfa <__mdiff+0x5a>
 800bbf0:	4b2d      	ldr	r3, [pc, #180]	; (800bca8 <__mdiff+0x108>)
 800bbf2:	4602      	mov	r2, r0
 800bbf4:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bbf8:	e7e6      	b.n	800bbc8 <__mdiff+0x28>
 800bbfa:	693e      	ldr	r6, [r7, #16]
 800bbfc:	60c5      	str	r5, [r0, #12]
 800bbfe:	6925      	ldr	r5, [r4, #16]
 800bc00:	f107 0114 	add.w	r1, r7, #20
 800bc04:	f104 0914 	add.w	r9, r4, #20
 800bc08:	f100 0e14 	add.w	lr, r0, #20
 800bc0c:	f107 0210 	add.w	r2, r7, #16
 800bc10:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800bc14:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800bc18:	46f2      	mov	sl, lr
 800bc1a:	2700      	movs	r7, #0
 800bc1c:	f859 3b04 	ldr.w	r3, [r9], #4
 800bc20:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bc24:	fa1f f883 	uxth.w	r8, r3
 800bc28:	fa17 f78b 	uxtah	r7, r7, fp
 800bc2c:	0c1b      	lsrs	r3, r3, #16
 800bc2e:	eba7 0808 	sub.w	r8, r7, r8
 800bc32:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bc36:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bc3a:	fa1f f888 	uxth.w	r8, r8
 800bc3e:	141f      	asrs	r7, r3, #16
 800bc40:	454d      	cmp	r5, r9
 800bc42:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bc46:	f84a 3b04 	str.w	r3, [sl], #4
 800bc4a:	d8e7      	bhi.n	800bc1c <__mdiff+0x7c>
 800bc4c:	1b2b      	subs	r3, r5, r4
 800bc4e:	3b15      	subs	r3, #21
 800bc50:	f023 0303 	bic.w	r3, r3, #3
 800bc54:	3304      	adds	r3, #4
 800bc56:	3415      	adds	r4, #21
 800bc58:	42a5      	cmp	r5, r4
 800bc5a:	bf38      	it	cc
 800bc5c:	2304      	movcc	r3, #4
 800bc5e:	4419      	add	r1, r3
 800bc60:	4473      	add	r3, lr
 800bc62:	469e      	mov	lr, r3
 800bc64:	460d      	mov	r5, r1
 800bc66:	4565      	cmp	r5, ip
 800bc68:	d30e      	bcc.n	800bc88 <__mdiff+0xe8>
 800bc6a:	f10c 0203 	add.w	r2, ip, #3
 800bc6e:	1a52      	subs	r2, r2, r1
 800bc70:	f022 0203 	bic.w	r2, r2, #3
 800bc74:	3903      	subs	r1, #3
 800bc76:	458c      	cmp	ip, r1
 800bc78:	bf38      	it	cc
 800bc7a:	2200      	movcc	r2, #0
 800bc7c:	441a      	add	r2, r3
 800bc7e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800bc82:	b17b      	cbz	r3, 800bca4 <__mdiff+0x104>
 800bc84:	6106      	str	r6, [r0, #16]
 800bc86:	e7a5      	b.n	800bbd4 <__mdiff+0x34>
 800bc88:	f855 8b04 	ldr.w	r8, [r5], #4
 800bc8c:	fa17 f488 	uxtah	r4, r7, r8
 800bc90:	1422      	asrs	r2, r4, #16
 800bc92:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800bc96:	b2a4      	uxth	r4, r4
 800bc98:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800bc9c:	f84e 4b04 	str.w	r4, [lr], #4
 800bca0:	1417      	asrs	r7, r2, #16
 800bca2:	e7e0      	b.n	800bc66 <__mdiff+0xc6>
 800bca4:	3e01      	subs	r6, #1
 800bca6:	e7ea      	b.n	800bc7e <__mdiff+0xde>
 800bca8:	0801954f 	.word	0x0801954f
 800bcac:	08019560 	.word	0x08019560

0800bcb0 <__d2b>:
 800bcb0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bcb4:	4689      	mov	r9, r1
 800bcb6:	2101      	movs	r1, #1
 800bcb8:	ec57 6b10 	vmov	r6, r7, d0
 800bcbc:	4690      	mov	r8, r2
 800bcbe:	f7ff fcd5 	bl	800b66c <_Balloc>
 800bcc2:	4604      	mov	r4, r0
 800bcc4:	b930      	cbnz	r0, 800bcd4 <__d2b+0x24>
 800bcc6:	4602      	mov	r2, r0
 800bcc8:	4b25      	ldr	r3, [pc, #148]	; (800bd60 <__d2b+0xb0>)
 800bcca:	4826      	ldr	r0, [pc, #152]	; (800bd64 <__d2b+0xb4>)
 800bccc:	f240 310a 	movw	r1, #778	; 0x30a
 800bcd0:	f7fe fe12 	bl	800a8f8 <__assert_func>
 800bcd4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800bcd8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bcdc:	bb35      	cbnz	r5, 800bd2c <__d2b+0x7c>
 800bcde:	2e00      	cmp	r6, #0
 800bce0:	9301      	str	r3, [sp, #4]
 800bce2:	d028      	beq.n	800bd36 <__d2b+0x86>
 800bce4:	4668      	mov	r0, sp
 800bce6:	9600      	str	r6, [sp, #0]
 800bce8:	f7ff fd8c 	bl	800b804 <__lo0bits>
 800bcec:	9900      	ldr	r1, [sp, #0]
 800bcee:	b300      	cbz	r0, 800bd32 <__d2b+0x82>
 800bcf0:	9a01      	ldr	r2, [sp, #4]
 800bcf2:	f1c0 0320 	rsb	r3, r0, #32
 800bcf6:	fa02 f303 	lsl.w	r3, r2, r3
 800bcfa:	430b      	orrs	r3, r1
 800bcfc:	40c2      	lsrs	r2, r0
 800bcfe:	6163      	str	r3, [r4, #20]
 800bd00:	9201      	str	r2, [sp, #4]
 800bd02:	9b01      	ldr	r3, [sp, #4]
 800bd04:	61a3      	str	r3, [r4, #24]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	bf14      	ite	ne
 800bd0a:	2202      	movne	r2, #2
 800bd0c:	2201      	moveq	r2, #1
 800bd0e:	6122      	str	r2, [r4, #16]
 800bd10:	b1d5      	cbz	r5, 800bd48 <__d2b+0x98>
 800bd12:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bd16:	4405      	add	r5, r0
 800bd18:	f8c9 5000 	str.w	r5, [r9]
 800bd1c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bd20:	f8c8 0000 	str.w	r0, [r8]
 800bd24:	4620      	mov	r0, r4
 800bd26:	b003      	add	sp, #12
 800bd28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bd2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bd30:	e7d5      	b.n	800bcde <__d2b+0x2e>
 800bd32:	6161      	str	r1, [r4, #20]
 800bd34:	e7e5      	b.n	800bd02 <__d2b+0x52>
 800bd36:	a801      	add	r0, sp, #4
 800bd38:	f7ff fd64 	bl	800b804 <__lo0bits>
 800bd3c:	9b01      	ldr	r3, [sp, #4]
 800bd3e:	6163      	str	r3, [r4, #20]
 800bd40:	2201      	movs	r2, #1
 800bd42:	6122      	str	r2, [r4, #16]
 800bd44:	3020      	adds	r0, #32
 800bd46:	e7e3      	b.n	800bd10 <__d2b+0x60>
 800bd48:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bd4c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bd50:	f8c9 0000 	str.w	r0, [r9]
 800bd54:	6918      	ldr	r0, [r3, #16]
 800bd56:	f7ff fd35 	bl	800b7c4 <__hi0bits>
 800bd5a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bd5e:	e7df      	b.n	800bd20 <__d2b+0x70>
 800bd60:	0801954f 	.word	0x0801954f
 800bd64:	08019560 	.word	0x08019560

0800bd68 <_calloc_r>:
 800bd68:	b513      	push	{r0, r1, r4, lr}
 800bd6a:	434a      	muls	r2, r1
 800bd6c:	4611      	mov	r1, r2
 800bd6e:	9201      	str	r2, [sp, #4]
 800bd70:	f7fe f87c 	bl	8009e6c <_malloc_r>
 800bd74:	4604      	mov	r4, r0
 800bd76:	b118      	cbz	r0, 800bd80 <_calloc_r+0x18>
 800bd78:	9a01      	ldr	r2, [sp, #4]
 800bd7a:	2100      	movs	r1, #0
 800bd7c:	f7fe f81e 	bl	8009dbc <memset>
 800bd80:	4620      	mov	r0, r4
 800bd82:	b002      	add	sp, #8
 800bd84:	bd10      	pop	{r4, pc}

0800bd86 <__ssputs_r>:
 800bd86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd8a:	688e      	ldr	r6, [r1, #8]
 800bd8c:	429e      	cmp	r6, r3
 800bd8e:	4682      	mov	sl, r0
 800bd90:	460c      	mov	r4, r1
 800bd92:	4690      	mov	r8, r2
 800bd94:	461f      	mov	r7, r3
 800bd96:	d838      	bhi.n	800be0a <__ssputs_r+0x84>
 800bd98:	898a      	ldrh	r2, [r1, #12]
 800bd9a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bd9e:	d032      	beq.n	800be06 <__ssputs_r+0x80>
 800bda0:	6825      	ldr	r5, [r4, #0]
 800bda2:	6909      	ldr	r1, [r1, #16]
 800bda4:	eba5 0901 	sub.w	r9, r5, r1
 800bda8:	6965      	ldr	r5, [r4, #20]
 800bdaa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bdae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bdb2:	3301      	adds	r3, #1
 800bdb4:	444b      	add	r3, r9
 800bdb6:	106d      	asrs	r5, r5, #1
 800bdb8:	429d      	cmp	r5, r3
 800bdba:	bf38      	it	cc
 800bdbc:	461d      	movcc	r5, r3
 800bdbe:	0553      	lsls	r3, r2, #21
 800bdc0:	d531      	bpl.n	800be26 <__ssputs_r+0xa0>
 800bdc2:	4629      	mov	r1, r5
 800bdc4:	f7fe f852 	bl	8009e6c <_malloc_r>
 800bdc8:	4606      	mov	r6, r0
 800bdca:	b950      	cbnz	r0, 800bde2 <__ssputs_r+0x5c>
 800bdcc:	230c      	movs	r3, #12
 800bdce:	f8ca 3000 	str.w	r3, [sl]
 800bdd2:	89a3      	ldrh	r3, [r4, #12]
 800bdd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bdd8:	81a3      	strh	r3, [r4, #12]
 800bdda:	f04f 30ff 	mov.w	r0, #4294967295
 800bdde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bde2:	6921      	ldr	r1, [r4, #16]
 800bde4:	464a      	mov	r2, r9
 800bde6:	f7fd ffdb 	bl	8009da0 <memcpy>
 800bdea:	89a3      	ldrh	r3, [r4, #12]
 800bdec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bdf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bdf4:	81a3      	strh	r3, [r4, #12]
 800bdf6:	6126      	str	r6, [r4, #16]
 800bdf8:	6165      	str	r5, [r4, #20]
 800bdfa:	444e      	add	r6, r9
 800bdfc:	eba5 0509 	sub.w	r5, r5, r9
 800be00:	6026      	str	r6, [r4, #0]
 800be02:	60a5      	str	r5, [r4, #8]
 800be04:	463e      	mov	r6, r7
 800be06:	42be      	cmp	r6, r7
 800be08:	d900      	bls.n	800be0c <__ssputs_r+0x86>
 800be0a:	463e      	mov	r6, r7
 800be0c:	4632      	mov	r2, r6
 800be0e:	6820      	ldr	r0, [r4, #0]
 800be10:	4641      	mov	r1, r8
 800be12:	f000 fd65 	bl	800c8e0 <memmove>
 800be16:	68a3      	ldr	r3, [r4, #8]
 800be18:	6822      	ldr	r2, [r4, #0]
 800be1a:	1b9b      	subs	r3, r3, r6
 800be1c:	4432      	add	r2, r6
 800be1e:	60a3      	str	r3, [r4, #8]
 800be20:	6022      	str	r2, [r4, #0]
 800be22:	2000      	movs	r0, #0
 800be24:	e7db      	b.n	800bdde <__ssputs_r+0x58>
 800be26:	462a      	mov	r2, r5
 800be28:	f000 fd74 	bl	800c914 <_realloc_r>
 800be2c:	4606      	mov	r6, r0
 800be2e:	2800      	cmp	r0, #0
 800be30:	d1e1      	bne.n	800bdf6 <__ssputs_r+0x70>
 800be32:	6921      	ldr	r1, [r4, #16]
 800be34:	4650      	mov	r0, sl
 800be36:	f7fd ffc9 	bl	8009dcc <_free_r>
 800be3a:	e7c7      	b.n	800bdcc <__ssputs_r+0x46>

0800be3c <_svfiprintf_r>:
 800be3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be40:	4698      	mov	r8, r3
 800be42:	898b      	ldrh	r3, [r1, #12]
 800be44:	061b      	lsls	r3, r3, #24
 800be46:	b09d      	sub	sp, #116	; 0x74
 800be48:	4607      	mov	r7, r0
 800be4a:	460d      	mov	r5, r1
 800be4c:	4614      	mov	r4, r2
 800be4e:	d50e      	bpl.n	800be6e <_svfiprintf_r+0x32>
 800be50:	690b      	ldr	r3, [r1, #16]
 800be52:	b963      	cbnz	r3, 800be6e <_svfiprintf_r+0x32>
 800be54:	2140      	movs	r1, #64	; 0x40
 800be56:	f7fe f809 	bl	8009e6c <_malloc_r>
 800be5a:	6028      	str	r0, [r5, #0]
 800be5c:	6128      	str	r0, [r5, #16]
 800be5e:	b920      	cbnz	r0, 800be6a <_svfiprintf_r+0x2e>
 800be60:	230c      	movs	r3, #12
 800be62:	603b      	str	r3, [r7, #0]
 800be64:	f04f 30ff 	mov.w	r0, #4294967295
 800be68:	e0d1      	b.n	800c00e <_svfiprintf_r+0x1d2>
 800be6a:	2340      	movs	r3, #64	; 0x40
 800be6c:	616b      	str	r3, [r5, #20]
 800be6e:	2300      	movs	r3, #0
 800be70:	9309      	str	r3, [sp, #36]	; 0x24
 800be72:	2320      	movs	r3, #32
 800be74:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800be78:	f8cd 800c 	str.w	r8, [sp, #12]
 800be7c:	2330      	movs	r3, #48	; 0x30
 800be7e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c028 <_svfiprintf_r+0x1ec>
 800be82:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800be86:	f04f 0901 	mov.w	r9, #1
 800be8a:	4623      	mov	r3, r4
 800be8c:	469a      	mov	sl, r3
 800be8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be92:	b10a      	cbz	r2, 800be98 <_svfiprintf_r+0x5c>
 800be94:	2a25      	cmp	r2, #37	; 0x25
 800be96:	d1f9      	bne.n	800be8c <_svfiprintf_r+0x50>
 800be98:	ebba 0b04 	subs.w	fp, sl, r4
 800be9c:	d00b      	beq.n	800beb6 <_svfiprintf_r+0x7a>
 800be9e:	465b      	mov	r3, fp
 800bea0:	4622      	mov	r2, r4
 800bea2:	4629      	mov	r1, r5
 800bea4:	4638      	mov	r0, r7
 800bea6:	f7ff ff6e 	bl	800bd86 <__ssputs_r>
 800beaa:	3001      	adds	r0, #1
 800beac:	f000 80aa 	beq.w	800c004 <_svfiprintf_r+0x1c8>
 800beb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800beb2:	445a      	add	r2, fp
 800beb4:	9209      	str	r2, [sp, #36]	; 0x24
 800beb6:	f89a 3000 	ldrb.w	r3, [sl]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	f000 80a2 	beq.w	800c004 <_svfiprintf_r+0x1c8>
 800bec0:	2300      	movs	r3, #0
 800bec2:	f04f 32ff 	mov.w	r2, #4294967295
 800bec6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800beca:	f10a 0a01 	add.w	sl, sl, #1
 800bece:	9304      	str	r3, [sp, #16]
 800bed0:	9307      	str	r3, [sp, #28]
 800bed2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bed6:	931a      	str	r3, [sp, #104]	; 0x68
 800bed8:	4654      	mov	r4, sl
 800beda:	2205      	movs	r2, #5
 800bedc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bee0:	4851      	ldr	r0, [pc, #324]	; (800c028 <_svfiprintf_r+0x1ec>)
 800bee2:	f7f4 f97d 	bl	80001e0 <memchr>
 800bee6:	9a04      	ldr	r2, [sp, #16]
 800bee8:	b9d8      	cbnz	r0, 800bf22 <_svfiprintf_r+0xe6>
 800beea:	06d0      	lsls	r0, r2, #27
 800beec:	bf44      	itt	mi
 800beee:	2320      	movmi	r3, #32
 800bef0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bef4:	0711      	lsls	r1, r2, #28
 800bef6:	bf44      	itt	mi
 800bef8:	232b      	movmi	r3, #43	; 0x2b
 800befa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800befe:	f89a 3000 	ldrb.w	r3, [sl]
 800bf02:	2b2a      	cmp	r3, #42	; 0x2a
 800bf04:	d015      	beq.n	800bf32 <_svfiprintf_r+0xf6>
 800bf06:	9a07      	ldr	r2, [sp, #28]
 800bf08:	4654      	mov	r4, sl
 800bf0a:	2000      	movs	r0, #0
 800bf0c:	f04f 0c0a 	mov.w	ip, #10
 800bf10:	4621      	mov	r1, r4
 800bf12:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf16:	3b30      	subs	r3, #48	; 0x30
 800bf18:	2b09      	cmp	r3, #9
 800bf1a:	d94e      	bls.n	800bfba <_svfiprintf_r+0x17e>
 800bf1c:	b1b0      	cbz	r0, 800bf4c <_svfiprintf_r+0x110>
 800bf1e:	9207      	str	r2, [sp, #28]
 800bf20:	e014      	b.n	800bf4c <_svfiprintf_r+0x110>
 800bf22:	eba0 0308 	sub.w	r3, r0, r8
 800bf26:	fa09 f303 	lsl.w	r3, r9, r3
 800bf2a:	4313      	orrs	r3, r2
 800bf2c:	9304      	str	r3, [sp, #16]
 800bf2e:	46a2      	mov	sl, r4
 800bf30:	e7d2      	b.n	800bed8 <_svfiprintf_r+0x9c>
 800bf32:	9b03      	ldr	r3, [sp, #12]
 800bf34:	1d19      	adds	r1, r3, #4
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	9103      	str	r1, [sp, #12]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	bfbb      	ittet	lt
 800bf3e:	425b      	neglt	r3, r3
 800bf40:	f042 0202 	orrlt.w	r2, r2, #2
 800bf44:	9307      	strge	r3, [sp, #28]
 800bf46:	9307      	strlt	r3, [sp, #28]
 800bf48:	bfb8      	it	lt
 800bf4a:	9204      	strlt	r2, [sp, #16]
 800bf4c:	7823      	ldrb	r3, [r4, #0]
 800bf4e:	2b2e      	cmp	r3, #46	; 0x2e
 800bf50:	d10c      	bne.n	800bf6c <_svfiprintf_r+0x130>
 800bf52:	7863      	ldrb	r3, [r4, #1]
 800bf54:	2b2a      	cmp	r3, #42	; 0x2a
 800bf56:	d135      	bne.n	800bfc4 <_svfiprintf_r+0x188>
 800bf58:	9b03      	ldr	r3, [sp, #12]
 800bf5a:	1d1a      	adds	r2, r3, #4
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	9203      	str	r2, [sp, #12]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	bfb8      	it	lt
 800bf64:	f04f 33ff 	movlt.w	r3, #4294967295
 800bf68:	3402      	adds	r4, #2
 800bf6a:	9305      	str	r3, [sp, #20]
 800bf6c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c038 <_svfiprintf_r+0x1fc>
 800bf70:	7821      	ldrb	r1, [r4, #0]
 800bf72:	2203      	movs	r2, #3
 800bf74:	4650      	mov	r0, sl
 800bf76:	f7f4 f933 	bl	80001e0 <memchr>
 800bf7a:	b140      	cbz	r0, 800bf8e <_svfiprintf_r+0x152>
 800bf7c:	2340      	movs	r3, #64	; 0x40
 800bf7e:	eba0 000a 	sub.w	r0, r0, sl
 800bf82:	fa03 f000 	lsl.w	r0, r3, r0
 800bf86:	9b04      	ldr	r3, [sp, #16]
 800bf88:	4303      	orrs	r3, r0
 800bf8a:	3401      	adds	r4, #1
 800bf8c:	9304      	str	r3, [sp, #16]
 800bf8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf92:	4826      	ldr	r0, [pc, #152]	; (800c02c <_svfiprintf_r+0x1f0>)
 800bf94:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bf98:	2206      	movs	r2, #6
 800bf9a:	f7f4 f921 	bl	80001e0 <memchr>
 800bf9e:	2800      	cmp	r0, #0
 800bfa0:	d038      	beq.n	800c014 <_svfiprintf_r+0x1d8>
 800bfa2:	4b23      	ldr	r3, [pc, #140]	; (800c030 <_svfiprintf_r+0x1f4>)
 800bfa4:	bb1b      	cbnz	r3, 800bfee <_svfiprintf_r+0x1b2>
 800bfa6:	9b03      	ldr	r3, [sp, #12]
 800bfa8:	3307      	adds	r3, #7
 800bfaa:	f023 0307 	bic.w	r3, r3, #7
 800bfae:	3308      	adds	r3, #8
 800bfb0:	9303      	str	r3, [sp, #12]
 800bfb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfb4:	4433      	add	r3, r6
 800bfb6:	9309      	str	r3, [sp, #36]	; 0x24
 800bfb8:	e767      	b.n	800be8a <_svfiprintf_r+0x4e>
 800bfba:	fb0c 3202 	mla	r2, ip, r2, r3
 800bfbe:	460c      	mov	r4, r1
 800bfc0:	2001      	movs	r0, #1
 800bfc2:	e7a5      	b.n	800bf10 <_svfiprintf_r+0xd4>
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	3401      	adds	r4, #1
 800bfc8:	9305      	str	r3, [sp, #20]
 800bfca:	4619      	mov	r1, r3
 800bfcc:	f04f 0c0a 	mov.w	ip, #10
 800bfd0:	4620      	mov	r0, r4
 800bfd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bfd6:	3a30      	subs	r2, #48	; 0x30
 800bfd8:	2a09      	cmp	r2, #9
 800bfda:	d903      	bls.n	800bfe4 <_svfiprintf_r+0x1a8>
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d0c5      	beq.n	800bf6c <_svfiprintf_r+0x130>
 800bfe0:	9105      	str	r1, [sp, #20]
 800bfe2:	e7c3      	b.n	800bf6c <_svfiprintf_r+0x130>
 800bfe4:	fb0c 2101 	mla	r1, ip, r1, r2
 800bfe8:	4604      	mov	r4, r0
 800bfea:	2301      	movs	r3, #1
 800bfec:	e7f0      	b.n	800bfd0 <_svfiprintf_r+0x194>
 800bfee:	ab03      	add	r3, sp, #12
 800bff0:	9300      	str	r3, [sp, #0]
 800bff2:	462a      	mov	r2, r5
 800bff4:	4b0f      	ldr	r3, [pc, #60]	; (800c034 <_svfiprintf_r+0x1f8>)
 800bff6:	a904      	add	r1, sp, #16
 800bff8:	4638      	mov	r0, r7
 800bffa:	f7fe f831 	bl	800a060 <_printf_float>
 800bffe:	1c42      	adds	r2, r0, #1
 800c000:	4606      	mov	r6, r0
 800c002:	d1d6      	bne.n	800bfb2 <_svfiprintf_r+0x176>
 800c004:	89ab      	ldrh	r3, [r5, #12]
 800c006:	065b      	lsls	r3, r3, #25
 800c008:	f53f af2c 	bmi.w	800be64 <_svfiprintf_r+0x28>
 800c00c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c00e:	b01d      	add	sp, #116	; 0x74
 800c010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c014:	ab03      	add	r3, sp, #12
 800c016:	9300      	str	r3, [sp, #0]
 800c018:	462a      	mov	r2, r5
 800c01a:	4b06      	ldr	r3, [pc, #24]	; (800c034 <_svfiprintf_r+0x1f8>)
 800c01c:	a904      	add	r1, sp, #16
 800c01e:	4638      	mov	r0, r7
 800c020:	f7fe fac2 	bl	800a5a8 <_printf_i>
 800c024:	e7eb      	b.n	800bffe <_svfiprintf_r+0x1c2>
 800c026:	bf00      	nop
 800c028:	080196bc 	.word	0x080196bc
 800c02c:	080196c6 	.word	0x080196c6
 800c030:	0800a061 	.word	0x0800a061
 800c034:	0800bd87 	.word	0x0800bd87
 800c038:	080196c2 	.word	0x080196c2

0800c03c <__sfputc_r>:
 800c03c:	6893      	ldr	r3, [r2, #8]
 800c03e:	3b01      	subs	r3, #1
 800c040:	2b00      	cmp	r3, #0
 800c042:	b410      	push	{r4}
 800c044:	6093      	str	r3, [r2, #8]
 800c046:	da08      	bge.n	800c05a <__sfputc_r+0x1e>
 800c048:	6994      	ldr	r4, [r2, #24]
 800c04a:	42a3      	cmp	r3, r4
 800c04c:	db01      	blt.n	800c052 <__sfputc_r+0x16>
 800c04e:	290a      	cmp	r1, #10
 800c050:	d103      	bne.n	800c05a <__sfputc_r+0x1e>
 800c052:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c056:	f000 b94b 	b.w	800c2f0 <__swbuf_r>
 800c05a:	6813      	ldr	r3, [r2, #0]
 800c05c:	1c58      	adds	r0, r3, #1
 800c05e:	6010      	str	r0, [r2, #0]
 800c060:	7019      	strb	r1, [r3, #0]
 800c062:	4608      	mov	r0, r1
 800c064:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c068:	4770      	bx	lr

0800c06a <__sfputs_r>:
 800c06a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c06c:	4606      	mov	r6, r0
 800c06e:	460f      	mov	r7, r1
 800c070:	4614      	mov	r4, r2
 800c072:	18d5      	adds	r5, r2, r3
 800c074:	42ac      	cmp	r4, r5
 800c076:	d101      	bne.n	800c07c <__sfputs_r+0x12>
 800c078:	2000      	movs	r0, #0
 800c07a:	e007      	b.n	800c08c <__sfputs_r+0x22>
 800c07c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c080:	463a      	mov	r2, r7
 800c082:	4630      	mov	r0, r6
 800c084:	f7ff ffda 	bl	800c03c <__sfputc_r>
 800c088:	1c43      	adds	r3, r0, #1
 800c08a:	d1f3      	bne.n	800c074 <__sfputs_r+0xa>
 800c08c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c090 <_vfiprintf_r>:
 800c090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c094:	460d      	mov	r5, r1
 800c096:	b09d      	sub	sp, #116	; 0x74
 800c098:	4614      	mov	r4, r2
 800c09a:	4698      	mov	r8, r3
 800c09c:	4606      	mov	r6, r0
 800c09e:	b118      	cbz	r0, 800c0a8 <_vfiprintf_r+0x18>
 800c0a0:	6983      	ldr	r3, [r0, #24]
 800c0a2:	b90b      	cbnz	r3, 800c0a8 <_vfiprintf_r+0x18>
 800c0a4:	f000 fb06 	bl	800c6b4 <__sinit>
 800c0a8:	4b89      	ldr	r3, [pc, #548]	; (800c2d0 <_vfiprintf_r+0x240>)
 800c0aa:	429d      	cmp	r5, r3
 800c0ac:	d11b      	bne.n	800c0e6 <_vfiprintf_r+0x56>
 800c0ae:	6875      	ldr	r5, [r6, #4]
 800c0b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c0b2:	07d9      	lsls	r1, r3, #31
 800c0b4:	d405      	bmi.n	800c0c2 <_vfiprintf_r+0x32>
 800c0b6:	89ab      	ldrh	r3, [r5, #12]
 800c0b8:	059a      	lsls	r2, r3, #22
 800c0ba:	d402      	bmi.n	800c0c2 <_vfiprintf_r+0x32>
 800c0bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c0be:	f000 fb97 	bl	800c7f0 <__retarget_lock_acquire_recursive>
 800c0c2:	89ab      	ldrh	r3, [r5, #12]
 800c0c4:	071b      	lsls	r3, r3, #28
 800c0c6:	d501      	bpl.n	800c0cc <_vfiprintf_r+0x3c>
 800c0c8:	692b      	ldr	r3, [r5, #16]
 800c0ca:	b9eb      	cbnz	r3, 800c108 <_vfiprintf_r+0x78>
 800c0cc:	4629      	mov	r1, r5
 800c0ce:	4630      	mov	r0, r6
 800c0d0:	f000 f960 	bl	800c394 <__swsetup_r>
 800c0d4:	b1c0      	cbz	r0, 800c108 <_vfiprintf_r+0x78>
 800c0d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c0d8:	07dc      	lsls	r4, r3, #31
 800c0da:	d50e      	bpl.n	800c0fa <_vfiprintf_r+0x6a>
 800c0dc:	f04f 30ff 	mov.w	r0, #4294967295
 800c0e0:	b01d      	add	sp, #116	; 0x74
 800c0e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0e6:	4b7b      	ldr	r3, [pc, #492]	; (800c2d4 <_vfiprintf_r+0x244>)
 800c0e8:	429d      	cmp	r5, r3
 800c0ea:	d101      	bne.n	800c0f0 <_vfiprintf_r+0x60>
 800c0ec:	68b5      	ldr	r5, [r6, #8]
 800c0ee:	e7df      	b.n	800c0b0 <_vfiprintf_r+0x20>
 800c0f0:	4b79      	ldr	r3, [pc, #484]	; (800c2d8 <_vfiprintf_r+0x248>)
 800c0f2:	429d      	cmp	r5, r3
 800c0f4:	bf08      	it	eq
 800c0f6:	68f5      	ldreq	r5, [r6, #12]
 800c0f8:	e7da      	b.n	800c0b0 <_vfiprintf_r+0x20>
 800c0fa:	89ab      	ldrh	r3, [r5, #12]
 800c0fc:	0598      	lsls	r0, r3, #22
 800c0fe:	d4ed      	bmi.n	800c0dc <_vfiprintf_r+0x4c>
 800c100:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c102:	f000 fb76 	bl	800c7f2 <__retarget_lock_release_recursive>
 800c106:	e7e9      	b.n	800c0dc <_vfiprintf_r+0x4c>
 800c108:	2300      	movs	r3, #0
 800c10a:	9309      	str	r3, [sp, #36]	; 0x24
 800c10c:	2320      	movs	r3, #32
 800c10e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c112:	f8cd 800c 	str.w	r8, [sp, #12]
 800c116:	2330      	movs	r3, #48	; 0x30
 800c118:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c2dc <_vfiprintf_r+0x24c>
 800c11c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c120:	f04f 0901 	mov.w	r9, #1
 800c124:	4623      	mov	r3, r4
 800c126:	469a      	mov	sl, r3
 800c128:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c12c:	b10a      	cbz	r2, 800c132 <_vfiprintf_r+0xa2>
 800c12e:	2a25      	cmp	r2, #37	; 0x25
 800c130:	d1f9      	bne.n	800c126 <_vfiprintf_r+0x96>
 800c132:	ebba 0b04 	subs.w	fp, sl, r4
 800c136:	d00b      	beq.n	800c150 <_vfiprintf_r+0xc0>
 800c138:	465b      	mov	r3, fp
 800c13a:	4622      	mov	r2, r4
 800c13c:	4629      	mov	r1, r5
 800c13e:	4630      	mov	r0, r6
 800c140:	f7ff ff93 	bl	800c06a <__sfputs_r>
 800c144:	3001      	adds	r0, #1
 800c146:	f000 80aa 	beq.w	800c29e <_vfiprintf_r+0x20e>
 800c14a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c14c:	445a      	add	r2, fp
 800c14e:	9209      	str	r2, [sp, #36]	; 0x24
 800c150:	f89a 3000 	ldrb.w	r3, [sl]
 800c154:	2b00      	cmp	r3, #0
 800c156:	f000 80a2 	beq.w	800c29e <_vfiprintf_r+0x20e>
 800c15a:	2300      	movs	r3, #0
 800c15c:	f04f 32ff 	mov.w	r2, #4294967295
 800c160:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c164:	f10a 0a01 	add.w	sl, sl, #1
 800c168:	9304      	str	r3, [sp, #16]
 800c16a:	9307      	str	r3, [sp, #28]
 800c16c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c170:	931a      	str	r3, [sp, #104]	; 0x68
 800c172:	4654      	mov	r4, sl
 800c174:	2205      	movs	r2, #5
 800c176:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c17a:	4858      	ldr	r0, [pc, #352]	; (800c2dc <_vfiprintf_r+0x24c>)
 800c17c:	f7f4 f830 	bl	80001e0 <memchr>
 800c180:	9a04      	ldr	r2, [sp, #16]
 800c182:	b9d8      	cbnz	r0, 800c1bc <_vfiprintf_r+0x12c>
 800c184:	06d1      	lsls	r1, r2, #27
 800c186:	bf44      	itt	mi
 800c188:	2320      	movmi	r3, #32
 800c18a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c18e:	0713      	lsls	r3, r2, #28
 800c190:	bf44      	itt	mi
 800c192:	232b      	movmi	r3, #43	; 0x2b
 800c194:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c198:	f89a 3000 	ldrb.w	r3, [sl]
 800c19c:	2b2a      	cmp	r3, #42	; 0x2a
 800c19e:	d015      	beq.n	800c1cc <_vfiprintf_r+0x13c>
 800c1a0:	9a07      	ldr	r2, [sp, #28]
 800c1a2:	4654      	mov	r4, sl
 800c1a4:	2000      	movs	r0, #0
 800c1a6:	f04f 0c0a 	mov.w	ip, #10
 800c1aa:	4621      	mov	r1, r4
 800c1ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c1b0:	3b30      	subs	r3, #48	; 0x30
 800c1b2:	2b09      	cmp	r3, #9
 800c1b4:	d94e      	bls.n	800c254 <_vfiprintf_r+0x1c4>
 800c1b6:	b1b0      	cbz	r0, 800c1e6 <_vfiprintf_r+0x156>
 800c1b8:	9207      	str	r2, [sp, #28]
 800c1ba:	e014      	b.n	800c1e6 <_vfiprintf_r+0x156>
 800c1bc:	eba0 0308 	sub.w	r3, r0, r8
 800c1c0:	fa09 f303 	lsl.w	r3, r9, r3
 800c1c4:	4313      	orrs	r3, r2
 800c1c6:	9304      	str	r3, [sp, #16]
 800c1c8:	46a2      	mov	sl, r4
 800c1ca:	e7d2      	b.n	800c172 <_vfiprintf_r+0xe2>
 800c1cc:	9b03      	ldr	r3, [sp, #12]
 800c1ce:	1d19      	adds	r1, r3, #4
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	9103      	str	r1, [sp, #12]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	bfbb      	ittet	lt
 800c1d8:	425b      	neglt	r3, r3
 800c1da:	f042 0202 	orrlt.w	r2, r2, #2
 800c1de:	9307      	strge	r3, [sp, #28]
 800c1e0:	9307      	strlt	r3, [sp, #28]
 800c1e2:	bfb8      	it	lt
 800c1e4:	9204      	strlt	r2, [sp, #16]
 800c1e6:	7823      	ldrb	r3, [r4, #0]
 800c1e8:	2b2e      	cmp	r3, #46	; 0x2e
 800c1ea:	d10c      	bne.n	800c206 <_vfiprintf_r+0x176>
 800c1ec:	7863      	ldrb	r3, [r4, #1]
 800c1ee:	2b2a      	cmp	r3, #42	; 0x2a
 800c1f0:	d135      	bne.n	800c25e <_vfiprintf_r+0x1ce>
 800c1f2:	9b03      	ldr	r3, [sp, #12]
 800c1f4:	1d1a      	adds	r2, r3, #4
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	9203      	str	r2, [sp, #12]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	bfb8      	it	lt
 800c1fe:	f04f 33ff 	movlt.w	r3, #4294967295
 800c202:	3402      	adds	r4, #2
 800c204:	9305      	str	r3, [sp, #20]
 800c206:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c2ec <_vfiprintf_r+0x25c>
 800c20a:	7821      	ldrb	r1, [r4, #0]
 800c20c:	2203      	movs	r2, #3
 800c20e:	4650      	mov	r0, sl
 800c210:	f7f3 ffe6 	bl	80001e0 <memchr>
 800c214:	b140      	cbz	r0, 800c228 <_vfiprintf_r+0x198>
 800c216:	2340      	movs	r3, #64	; 0x40
 800c218:	eba0 000a 	sub.w	r0, r0, sl
 800c21c:	fa03 f000 	lsl.w	r0, r3, r0
 800c220:	9b04      	ldr	r3, [sp, #16]
 800c222:	4303      	orrs	r3, r0
 800c224:	3401      	adds	r4, #1
 800c226:	9304      	str	r3, [sp, #16]
 800c228:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c22c:	482c      	ldr	r0, [pc, #176]	; (800c2e0 <_vfiprintf_r+0x250>)
 800c22e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c232:	2206      	movs	r2, #6
 800c234:	f7f3 ffd4 	bl	80001e0 <memchr>
 800c238:	2800      	cmp	r0, #0
 800c23a:	d03f      	beq.n	800c2bc <_vfiprintf_r+0x22c>
 800c23c:	4b29      	ldr	r3, [pc, #164]	; (800c2e4 <_vfiprintf_r+0x254>)
 800c23e:	bb1b      	cbnz	r3, 800c288 <_vfiprintf_r+0x1f8>
 800c240:	9b03      	ldr	r3, [sp, #12]
 800c242:	3307      	adds	r3, #7
 800c244:	f023 0307 	bic.w	r3, r3, #7
 800c248:	3308      	adds	r3, #8
 800c24a:	9303      	str	r3, [sp, #12]
 800c24c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c24e:	443b      	add	r3, r7
 800c250:	9309      	str	r3, [sp, #36]	; 0x24
 800c252:	e767      	b.n	800c124 <_vfiprintf_r+0x94>
 800c254:	fb0c 3202 	mla	r2, ip, r2, r3
 800c258:	460c      	mov	r4, r1
 800c25a:	2001      	movs	r0, #1
 800c25c:	e7a5      	b.n	800c1aa <_vfiprintf_r+0x11a>
 800c25e:	2300      	movs	r3, #0
 800c260:	3401      	adds	r4, #1
 800c262:	9305      	str	r3, [sp, #20]
 800c264:	4619      	mov	r1, r3
 800c266:	f04f 0c0a 	mov.w	ip, #10
 800c26a:	4620      	mov	r0, r4
 800c26c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c270:	3a30      	subs	r2, #48	; 0x30
 800c272:	2a09      	cmp	r2, #9
 800c274:	d903      	bls.n	800c27e <_vfiprintf_r+0x1ee>
 800c276:	2b00      	cmp	r3, #0
 800c278:	d0c5      	beq.n	800c206 <_vfiprintf_r+0x176>
 800c27a:	9105      	str	r1, [sp, #20]
 800c27c:	e7c3      	b.n	800c206 <_vfiprintf_r+0x176>
 800c27e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c282:	4604      	mov	r4, r0
 800c284:	2301      	movs	r3, #1
 800c286:	e7f0      	b.n	800c26a <_vfiprintf_r+0x1da>
 800c288:	ab03      	add	r3, sp, #12
 800c28a:	9300      	str	r3, [sp, #0]
 800c28c:	462a      	mov	r2, r5
 800c28e:	4b16      	ldr	r3, [pc, #88]	; (800c2e8 <_vfiprintf_r+0x258>)
 800c290:	a904      	add	r1, sp, #16
 800c292:	4630      	mov	r0, r6
 800c294:	f7fd fee4 	bl	800a060 <_printf_float>
 800c298:	4607      	mov	r7, r0
 800c29a:	1c78      	adds	r0, r7, #1
 800c29c:	d1d6      	bne.n	800c24c <_vfiprintf_r+0x1bc>
 800c29e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c2a0:	07d9      	lsls	r1, r3, #31
 800c2a2:	d405      	bmi.n	800c2b0 <_vfiprintf_r+0x220>
 800c2a4:	89ab      	ldrh	r3, [r5, #12]
 800c2a6:	059a      	lsls	r2, r3, #22
 800c2a8:	d402      	bmi.n	800c2b0 <_vfiprintf_r+0x220>
 800c2aa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c2ac:	f000 faa1 	bl	800c7f2 <__retarget_lock_release_recursive>
 800c2b0:	89ab      	ldrh	r3, [r5, #12]
 800c2b2:	065b      	lsls	r3, r3, #25
 800c2b4:	f53f af12 	bmi.w	800c0dc <_vfiprintf_r+0x4c>
 800c2b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c2ba:	e711      	b.n	800c0e0 <_vfiprintf_r+0x50>
 800c2bc:	ab03      	add	r3, sp, #12
 800c2be:	9300      	str	r3, [sp, #0]
 800c2c0:	462a      	mov	r2, r5
 800c2c2:	4b09      	ldr	r3, [pc, #36]	; (800c2e8 <_vfiprintf_r+0x258>)
 800c2c4:	a904      	add	r1, sp, #16
 800c2c6:	4630      	mov	r0, r6
 800c2c8:	f7fe f96e 	bl	800a5a8 <_printf_i>
 800c2cc:	e7e4      	b.n	800c298 <_vfiprintf_r+0x208>
 800c2ce:	bf00      	nop
 800c2d0:	080196f0 	.word	0x080196f0
 800c2d4:	08019710 	.word	0x08019710
 800c2d8:	080196d0 	.word	0x080196d0
 800c2dc:	080196bc 	.word	0x080196bc
 800c2e0:	080196c6 	.word	0x080196c6
 800c2e4:	0800a061 	.word	0x0800a061
 800c2e8:	0800c06b 	.word	0x0800c06b
 800c2ec:	080196c2 	.word	0x080196c2

0800c2f0 <__swbuf_r>:
 800c2f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2f2:	460e      	mov	r6, r1
 800c2f4:	4614      	mov	r4, r2
 800c2f6:	4605      	mov	r5, r0
 800c2f8:	b118      	cbz	r0, 800c302 <__swbuf_r+0x12>
 800c2fa:	6983      	ldr	r3, [r0, #24]
 800c2fc:	b90b      	cbnz	r3, 800c302 <__swbuf_r+0x12>
 800c2fe:	f000 f9d9 	bl	800c6b4 <__sinit>
 800c302:	4b21      	ldr	r3, [pc, #132]	; (800c388 <__swbuf_r+0x98>)
 800c304:	429c      	cmp	r4, r3
 800c306:	d12b      	bne.n	800c360 <__swbuf_r+0x70>
 800c308:	686c      	ldr	r4, [r5, #4]
 800c30a:	69a3      	ldr	r3, [r4, #24]
 800c30c:	60a3      	str	r3, [r4, #8]
 800c30e:	89a3      	ldrh	r3, [r4, #12]
 800c310:	071a      	lsls	r2, r3, #28
 800c312:	d52f      	bpl.n	800c374 <__swbuf_r+0x84>
 800c314:	6923      	ldr	r3, [r4, #16]
 800c316:	b36b      	cbz	r3, 800c374 <__swbuf_r+0x84>
 800c318:	6923      	ldr	r3, [r4, #16]
 800c31a:	6820      	ldr	r0, [r4, #0]
 800c31c:	1ac0      	subs	r0, r0, r3
 800c31e:	6963      	ldr	r3, [r4, #20]
 800c320:	b2f6      	uxtb	r6, r6
 800c322:	4283      	cmp	r3, r0
 800c324:	4637      	mov	r7, r6
 800c326:	dc04      	bgt.n	800c332 <__swbuf_r+0x42>
 800c328:	4621      	mov	r1, r4
 800c32a:	4628      	mov	r0, r5
 800c32c:	f000 f92e 	bl	800c58c <_fflush_r>
 800c330:	bb30      	cbnz	r0, 800c380 <__swbuf_r+0x90>
 800c332:	68a3      	ldr	r3, [r4, #8]
 800c334:	3b01      	subs	r3, #1
 800c336:	60a3      	str	r3, [r4, #8]
 800c338:	6823      	ldr	r3, [r4, #0]
 800c33a:	1c5a      	adds	r2, r3, #1
 800c33c:	6022      	str	r2, [r4, #0]
 800c33e:	701e      	strb	r6, [r3, #0]
 800c340:	6963      	ldr	r3, [r4, #20]
 800c342:	3001      	adds	r0, #1
 800c344:	4283      	cmp	r3, r0
 800c346:	d004      	beq.n	800c352 <__swbuf_r+0x62>
 800c348:	89a3      	ldrh	r3, [r4, #12]
 800c34a:	07db      	lsls	r3, r3, #31
 800c34c:	d506      	bpl.n	800c35c <__swbuf_r+0x6c>
 800c34e:	2e0a      	cmp	r6, #10
 800c350:	d104      	bne.n	800c35c <__swbuf_r+0x6c>
 800c352:	4621      	mov	r1, r4
 800c354:	4628      	mov	r0, r5
 800c356:	f000 f919 	bl	800c58c <_fflush_r>
 800c35a:	b988      	cbnz	r0, 800c380 <__swbuf_r+0x90>
 800c35c:	4638      	mov	r0, r7
 800c35e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c360:	4b0a      	ldr	r3, [pc, #40]	; (800c38c <__swbuf_r+0x9c>)
 800c362:	429c      	cmp	r4, r3
 800c364:	d101      	bne.n	800c36a <__swbuf_r+0x7a>
 800c366:	68ac      	ldr	r4, [r5, #8]
 800c368:	e7cf      	b.n	800c30a <__swbuf_r+0x1a>
 800c36a:	4b09      	ldr	r3, [pc, #36]	; (800c390 <__swbuf_r+0xa0>)
 800c36c:	429c      	cmp	r4, r3
 800c36e:	bf08      	it	eq
 800c370:	68ec      	ldreq	r4, [r5, #12]
 800c372:	e7ca      	b.n	800c30a <__swbuf_r+0x1a>
 800c374:	4621      	mov	r1, r4
 800c376:	4628      	mov	r0, r5
 800c378:	f000 f80c 	bl	800c394 <__swsetup_r>
 800c37c:	2800      	cmp	r0, #0
 800c37e:	d0cb      	beq.n	800c318 <__swbuf_r+0x28>
 800c380:	f04f 37ff 	mov.w	r7, #4294967295
 800c384:	e7ea      	b.n	800c35c <__swbuf_r+0x6c>
 800c386:	bf00      	nop
 800c388:	080196f0 	.word	0x080196f0
 800c38c:	08019710 	.word	0x08019710
 800c390:	080196d0 	.word	0x080196d0

0800c394 <__swsetup_r>:
 800c394:	4b32      	ldr	r3, [pc, #200]	; (800c460 <__swsetup_r+0xcc>)
 800c396:	b570      	push	{r4, r5, r6, lr}
 800c398:	681d      	ldr	r5, [r3, #0]
 800c39a:	4606      	mov	r6, r0
 800c39c:	460c      	mov	r4, r1
 800c39e:	b125      	cbz	r5, 800c3aa <__swsetup_r+0x16>
 800c3a0:	69ab      	ldr	r3, [r5, #24]
 800c3a2:	b913      	cbnz	r3, 800c3aa <__swsetup_r+0x16>
 800c3a4:	4628      	mov	r0, r5
 800c3a6:	f000 f985 	bl	800c6b4 <__sinit>
 800c3aa:	4b2e      	ldr	r3, [pc, #184]	; (800c464 <__swsetup_r+0xd0>)
 800c3ac:	429c      	cmp	r4, r3
 800c3ae:	d10f      	bne.n	800c3d0 <__swsetup_r+0x3c>
 800c3b0:	686c      	ldr	r4, [r5, #4]
 800c3b2:	89a3      	ldrh	r3, [r4, #12]
 800c3b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c3b8:	0719      	lsls	r1, r3, #28
 800c3ba:	d42c      	bmi.n	800c416 <__swsetup_r+0x82>
 800c3bc:	06dd      	lsls	r5, r3, #27
 800c3be:	d411      	bmi.n	800c3e4 <__swsetup_r+0x50>
 800c3c0:	2309      	movs	r3, #9
 800c3c2:	6033      	str	r3, [r6, #0]
 800c3c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c3c8:	81a3      	strh	r3, [r4, #12]
 800c3ca:	f04f 30ff 	mov.w	r0, #4294967295
 800c3ce:	e03e      	b.n	800c44e <__swsetup_r+0xba>
 800c3d0:	4b25      	ldr	r3, [pc, #148]	; (800c468 <__swsetup_r+0xd4>)
 800c3d2:	429c      	cmp	r4, r3
 800c3d4:	d101      	bne.n	800c3da <__swsetup_r+0x46>
 800c3d6:	68ac      	ldr	r4, [r5, #8]
 800c3d8:	e7eb      	b.n	800c3b2 <__swsetup_r+0x1e>
 800c3da:	4b24      	ldr	r3, [pc, #144]	; (800c46c <__swsetup_r+0xd8>)
 800c3dc:	429c      	cmp	r4, r3
 800c3de:	bf08      	it	eq
 800c3e0:	68ec      	ldreq	r4, [r5, #12]
 800c3e2:	e7e6      	b.n	800c3b2 <__swsetup_r+0x1e>
 800c3e4:	0758      	lsls	r0, r3, #29
 800c3e6:	d512      	bpl.n	800c40e <__swsetup_r+0x7a>
 800c3e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c3ea:	b141      	cbz	r1, 800c3fe <__swsetup_r+0x6a>
 800c3ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c3f0:	4299      	cmp	r1, r3
 800c3f2:	d002      	beq.n	800c3fa <__swsetup_r+0x66>
 800c3f4:	4630      	mov	r0, r6
 800c3f6:	f7fd fce9 	bl	8009dcc <_free_r>
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	6363      	str	r3, [r4, #52]	; 0x34
 800c3fe:	89a3      	ldrh	r3, [r4, #12]
 800c400:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c404:	81a3      	strh	r3, [r4, #12]
 800c406:	2300      	movs	r3, #0
 800c408:	6063      	str	r3, [r4, #4]
 800c40a:	6923      	ldr	r3, [r4, #16]
 800c40c:	6023      	str	r3, [r4, #0]
 800c40e:	89a3      	ldrh	r3, [r4, #12]
 800c410:	f043 0308 	orr.w	r3, r3, #8
 800c414:	81a3      	strh	r3, [r4, #12]
 800c416:	6923      	ldr	r3, [r4, #16]
 800c418:	b94b      	cbnz	r3, 800c42e <__swsetup_r+0x9a>
 800c41a:	89a3      	ldrh	r3, [r4, #12]
 800c41c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c420:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c424:	d003      	beq.n	800c42e <__swsetup_r+0x9a>
 800c426:	4621      	mov	r1, r4
 800c428:	4630      	mov	r0, r6
 800c42a:	f000 fa07 	bl	800c83c <__smakebuf_r>
 800c42e:	89a0      	ldrh	r0, [r4, #12]
 800c430:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c434:	f010 0301 	ands.w	r3, r0, #1
 800c438:	d00a      	beq.n	800c450 <__swsetup_r+0xbc>
 800c43a:	2300      	movs	r3, #0
 800c43c:	60a3      	str	r3, [r4, #8]
 800c43e:	6963      	ldr	r3, [r4, #20]
 800c440:	425b      	negs	r3, r3
 800c442:	61a3      	str	r3, [r4, #24]
 800c444:	6923      	ldr	r3, [r4, #16]
 800c446:	b943      	cbnz	r3, 800c45a <__swsetup_r+0xc6>
 800c448:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c44c:	d1ba      	bne.n	800c3c4 <__swsetup_r+0x30>
 800c44e:	bd70      	pop	{r4, r5, r6, pc}
 800c450:	0781      	lsls	r1, r0, #30
 800c452:	bf58      	it	pl
 800c454:	6963      	ldrpl	r3, [r4, #20]
 800c456:	60a3      	str	r3, [r4, #8]
 800c458:	e7f4      	b.n	800c444 <__swsetup_r+0xb0>
 800c45a:	2000      	movs	r0, #0
 800c45c:	e7f7      	b.n	800c44e <__swsetup_r+0xba>
 800c45e:	bf00      	nop
 800c460:	20000520 	.word	0x20000520
 800c464:	080196f0 	.word	0x080196f0
 800c468:	08019710 	.word	0x08019710
 800c46c:	080196d0 	.word	0x080196d0

0800c470 <abort>:
 800c470:	b508      	push	{r3, lr}
 800c472:	2006      	movs	r0, #6
 800c474:	f000 fa9c 	bl	800c9b0 <raise>
 800c478:	2001      	movs	r0, #1
 800c47a:	f7f5 fae1 	bl	8001a40 <_exit>
	...

0800c480 <__sflush_r>:
 800c480:	898a      	ldrh	r2, [r1, #12]
 800c482:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c486:	4605      	mov	r5, r0
 800c488:	0710      	lsls	r0, r2, #28
 800c48a:	460c      	mov	r4, r1
 800c48c:	d458      	bmi.n	800c540 <__sflush_r+0xc0>
 800c48e:	684b      	ldr	r3, [r1, #4]
 800c490:	2b00      	cmp	r3, #0
 800c492:	dc05      	bgt.n	800c4a0 <__sflush_r+0x20>
 800c494:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c496:	2b00      	cmp	r3, #0
 800c498:	dc02      	bgt.n	800c4a0 <__sflush_r+0x20>
 800c49a:	2000      	movs	r0, #0
 800c49c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c4a2:	2e00      	cmp	r6, #0
 800c4a4:	d0f9      	beq.n	800c49a <__sflush_r+0x1a>
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c4ac:	682f      	ldr	r7, [r5, #0]
 800c4ae:	602b      	str	r3, [r5, #0]
 800c4b0:	d032      	beq.n	800c518 <__sflush_r+0x98>
 800c4b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c4b4:	89a3      	ldrh	r3, [r4, #12]
 800c4b6:	075a      	lsls	r2, r3, #29
 800c4b8:	d505      	bpl.n	800c4c6 <__sflush_r+0x46>
 800c4ba:	6863      	ldr	r3, [r4, #4]
 800c4bc:	1ac0      	subs	r0, r0, r3
 800c4be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c4c0:	b10b      	cbz	r3, 800c4c6 <__sflush_r+0x46>
 800c4c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c4c4:	1ac0      	subs	r0, r0, r3
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	4602      	mov	r2, r0
 800c4ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c4cc:	6a21      	ldr	r1, [r4, #32]
 800c4ce:	4628      	mov	r0, r5
 800c4d0:	47b0      	blx	r6
 800c4d2:	1c43      	adds	r3, r0, #1
 800c4d4:	89a3      	ldrh	r3, [r4, #12]
 800c4d6:	d106      	bne.n	800c4e6 <__sflush_r+0x66>
 800c4d8:	6829      	ldr	r1, [r5, #0]
 800c4da:	291d      	cmp	r1, #29
 800c4dc:	d82c      	bhi.n	800c538 <__sflush_r+0xb8>
 800c4de:	4a2a      	ldr	r2, [pc, #168]	; (800c588 <__sflush_r+0x108>)
 800c4e0:	40ca      	lsrs	r2, r1
 800c4e2:	07d6      	lsls	r6, r2, #31
 800c4e4:	d528      	bpl.n	800c538 <__sflush_r+0xb8>
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	6062      	str	r2, [r4, #4]
 800c4ea:	04d9      	lsls	r1, r3, #19
 800c4ec:	6922      	ldr	r2, [r4, #16]
 800c4ee:	6022      	str	r2, [r4, #0]
 800c4f0:	d504      	bpl.n	800c4fc <__sflush_r+0x7c>
 800c4f2:	1c42      	adds	r2, r0, #1
 800c4f4:	d101      	bne.n	800c4fa <__sflush_r+0x7a>
 800c4f6:	682b      	ldr	r3, [r5, #0]
 800c4f8:	b903      	cbnz	r3, 800c4fc <__sflush_r+0x7c>
 800c4fa:	6560      	str	r0, [r4, #84]	; 0x54
 800c4fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c4fe:	602f      	str	r7, [r5, #0]
 800c500:	2900      	cmp	r1, #0
 800c502:	d0ca      	beq.n	800c49a <__sflush_r+0x1a>
 800c504:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c508:	4299      	cmp	r1, r3
 800c50a:	d002      	beq.n	800c512 <__sflush_r+0x92>
 800c50c:	4628      	mov	r0, r5
 800c50e:	f7fd fc5d 	bl	8009dcc <_free_r>
 800c512:	2000      	movs	r0, #0
 800c514:	6360      	str	r0, [r4, #52]	; 0x34
 800c516:	e7c1      	b.n	800c49c <__sflush_r+0x1c>
 800c518:	6a21      	ldr	r1, [r4, #32]
 800c51a:	2301      	movs	r3, #1
 800c51c:	4628      	mov	r0, r5
 800c51e:	47b0      	blx	r6
 800c520:	1c41      	adds	r1, r0, #1
 800c522:	d1c7      	bne.n	800c4b4 <__sflush_r+0x34>
 800c524:	682b      	ldr	r3, [r5, #0]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d0c4      	beq.n	800c4b4 <__sflush_r+0x34>
 800c52a:	2b1d      	cmp	r3, #29
 800c52c:	d001      	beq.n	800c532 <__sflush_r+0xb2>
 800c52e:	2b16      	cmp	r3, #22
 800c530:	d101      	bne.n	800c536 <__sflush_r+0xb6>
 800c532:	602f      	str	r7, [r5, #0]
 800c534:	e7b1      	b.n	800c49a <__sflush_r+0x1a>
 800c536:	89a3      	ldrh	r3, [r4, #12]
 800c538:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c53c:	81a3      	strh	r3, [r4, #12]
 800c53e:	e7ad      	b.n	800c49c <__sflush_r+0x1c>
 800c540:	690f      	ldr	r7, [r1, #16]
 800c542:	2f00      	cmp	r7, #0
 800c544:	d0a9      	beq.n	800c49a <__sflush_r+0x1a>
 800c546:	0793      	lsls	r3, r2, #30
 800c548:	680e      	ldr	r6, [r1, #0]
 800c54a:	bf08      	it	eq
 800c54c:	694b      	ldreq	r3, [r1, #20]
 800c54e:	600f      	str	r7, [r1, #0]
 800c550:	bf18      	it	ne
 800c552:	2300      	movne	r3, #0
 800c554:	eba6 0807 	sub.w	r8, r6, r7
 800c558:	608b      	str	r3, [r1, #8]
 800c55a:	f1b8 0f00 	cmp.w	r8, #0
 800c55e:	dd9c      	ble.n	800c49a <__sflush_r+0x1a>
 800c560:	6a21      	ldr	r1, [r4, #32]
 800c562:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c564:	4643      	mov	r3, r8
 800c566:	463a      	mov	r2, r7
 800c568:	4628      	mov	r0, r5
 800c56a:	47b0      	blx	r6
 800c56c:	2800      	cmp	r0, #0
 800c56e:	dc06      	bgt.n	800c57e <__sflush_r+0xfe>
 800c570:	89a3      	ldrh	r3, [r4, #12]
 800c572:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c576:	81a3      	strh	r3, [r4, #12]
 800c578:	f04f 30ff 	mov.w	r0, #4294967295
 800c57c:	e78e      	b.n	800c49c <__sflush_r+0x1c>
 800c57e:	4407      	add	r7, r0
 800c580:	eba8 0800 	sub.w	r8, r8, r0
 800c584:	e7e9      	b.n	800c55a <__sflush_r+0xda>
 800c586:	bf00      	nop
 800c588:	20400001 	.word	0x20400001

0800c58c <_fflush_r>:
 800c58c:	b538      	push	{r3, r4, r5, lr}
 800c58e:	690b      	ldr	r3, [r1, #16]
 800c590:	4605      	mov	r5, r0
 800c592:	460c      	mov	r4, r1
 800c594:	b913      	cbnz	r3, 800c59c <_fflush_r+0x10>
 800c596:	2500      	movs	r5, #0
 800c598:	4628      	mov	r0, r5
 800c59a:	bd38      	pop	{r3, r4, r5, pc}
 800c59c:	b118      	cbz	r0, 800c5a6 <_fflush_r+0x1a>
 800c59e:	6983      	ldr	r3, [r0, #24]
 800c5a0:	b90b      	cbnz	r3, 800c5a6 <_fflush_r+0x1a>
 800c5a2:	f000 f887 	bl	800c6b4 <__sinit>
 800c5a6:	4b14      	ldr	r3, [pc, #80]	; (800c5f8 <_fflush_r+0x6c>)
 800c5a8:	429c      	cmp	r4, r3
 800c5aa:	d11b      	bne.n	800c5e4 <_fflush_r+0x58>
 800c5ac:	686c      	ldr	r4, [r5, #4]
 800c5ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d0ef      	beq.n	800c596 <_fflush_r+0xa>
 800c5b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c5b8:	07d0      	lsls	r0, r2, #31
 800c5ba:	d404      	bmi.n	800c5c6 <_fflush_r+0x3a>
 800c5bc:	0599      	lsls	r1, r3, #22
 800c5be:	d402      	bmi.n	800c5c6 <_fflush_r+0x3a>
 800c5c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c5c2:	f000 f915 	bl	800c7f0 <__retarget_lock_acquire_recursive>
 800c5c6:	4628      	mov	r0, r5
 800c5c8:	4621      	mov	r1, r4
 800c5ca:	f7ff ff59 	bl	800c480 <__sflush_r>
 800c5ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c5d0:	07da      	lsls	r2, r3, #31
 800c5d2:	4605      	mov	r5, r0
 800c5d4:	d4e0      	bmi.n	800c598 <_fflush_r+0xc>
 800c5d6:	89a3      	ldrh	r3, [r4, #12]
 800c5d8:	059b      	lsls	r3, r3, #22
 800c5da:	d4dd      	bmi.n	800c598 <_fflush_r+0xc>
 800c5dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c5de:	f000 f908 	bl	800c7f2 <__retarget_lock_release_recursive>
 800c5e2:	e7d9      	b.n	800c598 <_fflush_r+0xc>
 800c5e4:	4b05      	ldr	r3, [pc, #20]	; (800c5fc <_fflush_r+0x70>)
 800c5e6:	429c      	cmp	r4, r3
 800c5e8:	d101      	bne.n	800c5ee <_fflush_r+0x62>
 800c5ea:	68ac      	ldr	r4, [r5, #8]
 800c5ec:	e7df      	b.n	800c5ae <_fflush_r+0x22>
 800c5ee:	4b04      	ldr	r3, [pc, #16]	; (800c600 <_fflush_r+0x74>)
 800c5f0:	429c      	cmp	r4, r3
 800c5f2:	bf08      	it	eq
 800c5f4:	68ec      	ldreq	r4, [r5, #12]
 800c5f6:	e7da      	b.n	800c5ae <_fflush_r+0x22>
 800c5f8:	080196f0 	.word	0x080196f0
 800c5fc:	08019710 	.word	0x08019710
 800c600:	080196d0 	.word	0x080196d0

0800c604 <std>:
 800c604:	2300      	movs	r3, #0
 800c606:	b510      	push	{r4, lr}
 800c608:	4604      	mov	r4, r0
 800c60a:	e9c0 3300 	strd	r3, r3, [r0]
 800c60e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c612:	6083      	str	r3, [r0, #8]
 800c614:	8181      	strh	r1, [r0, #12]
 800c616:	6643      	str	r3, [r0, #100]	; 0x64
 800c618:	81c2      	strh	r2, [r0, #14]
 800c61a:	6183      	str	r3, [r0, #24]
 800c61c:	4619      	mov	r1, r3
 800c61e:	2208      	movs	r2, #8
 800c620:	305c      	adds	r0, #92	; 0x5c
 800c622:	f7fd fbcb 	bl	8009dbc <memset>
 800c626:	4b05      	ldr	r3, [pc, #20]	; (800c63c <std+0x38>)
 800c628:	6263      	str	r3, [r4, #36]	; 0x24
 800c62a:	4b05      	ldr	r3, [pc, #20]	; (800c640 <std+0x3c>)
 800c62c:	62a3      	str	r3, [r4, #40]	; 0x28
 800c62e:	4b05      	ldr	r3, [pc, #20]	; (800c644 <std+0x40>)
 800c630:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c632:	4b05      	ldr	r3, [pc, #20]	; (800c648 <std+0x44>)
 800c634:	6224      	str	r4, [r4, #32]
 800c636:	6323      	str	r3, [r4, #48]	; 0x30
 800c638:	bd10      	pop	{r4, pc}
 800c63a:	bf00      	nop
 800c63c:	0800c9e9 	.word	0x0800c9e9
 800c640:	0800ca0b 	.word	0x0800ca0b
 800c644:	0800ca43 	.word	0x0800ca43
 800c648:	0800ca67 	.word	0x0800ca67

0800c64c <_cleanup_r>:
 800c64c:	4901      	ldr	r1, [pc, #4]	; (800c654 <_cleanup_r+0x8>)
 800c64e:	f000 b8af 	b.w	800c7b0 <_fwalk_reent>
 800c652:	bf00      	nop
 800c654:	0800c58d 	.word	0x0800c58d

0800c658 <__sfmoreglue>:
 800c658:	b570      	push	{r4, r5, r6, lr}
 800c65a:	1e4a      	subs	r2, r1, #1
 800c65c:	2568      	movs	r5, #104	; 0x68
 800c65e:	4355      	muls	r5, r2
 800c660:	460e      	mov	r6, r1
 800c662:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c666:	f7fd fc01 	bl	8009e6c <_malloc_r>
 800c66a:	4604      	mov	r4, r0
 800c66c:	b140      	cbz	r0, 800c680 <__sfmoreglue+0x28>
 800c66e:	2100      	movs	r1, #0
 800c670:	e9c0 1600 	strd	r1, r6, [r0]
 800c674:	300c      	adds	r0, #12
 800c676:	60a0      	str	r0, [r4, #8]
 800c678:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c67c:	f7fd fb9e 	bl	8009dbc <memset>
 800c680:	4620      	mov	r0, r4
 800c682:	bd70      	pop	{r4, r5, r6, pc}

0800c684 <__sfp_lock_acquire>:
 800c684:	4801      	ldr	r0, [pc, #4]	; (800c68c <__sfp_lock_acquire+0x8>)
 800c686:	f000 b8b3 	b.w	800c7f0 <__retarget_lock_acquire_recursive>
 800c68a:	bf00      	nop
 800c68c:	2000c374 	.word	0x2000c374

0800c690 <__sfp_lock_release>:
 800c690:	4801      	ldr	r0, [pc, #4]	; (800c698 <__sfp_lock_release+0x8>)
 800c692:	f000 b8ae 	b.w	800c7f2 <__retarget_lock_release_recursive>
 800c696:	bf00      	nop
 800c698:	2000c374 	.word	0x2000c374

0800c69c <__sinit_lock_acquire>:
 800c69c:	4801      	ldr	r0, [pc, #4]	; (800c6a4 <__sinit_lock_acquire+0x8>)
 800c69e:	f000 b8a7 	b.w	800c7f0 <__retarget_lock_acquire_recursive>
 800c6a2:	bf00      	nop
 800c6a4:	2000c36f 	.word	0x2000c36f

0800c6a8 <__sinit_lock_release>:
 800c6a8:	4801      	ldr	r0, [pc, #4]	; (800c6b0 <__sinit_lock_release+0x8>)
 800c6aa:	f000 b8a2 	b.w	800c7f2 <__retarget_lock_release_recursive>
 800c6ae:	bf00      	nop
 800c6b0:	2000c36f 	.word	0x2000c36f

0800c6b4 <__sinit>:
 800c6b4:	b510      	push	{r4, lr}
 800c6b6:	4604      	mov	r4, r0
 800c6b8:	f7ff fff0 	bl	800c69c <__sinit_lock_acquire>
 800c6bc:	69a3      	ldr	r3, [r4, #24]
 800c6be:	b11b      	cbz	r3, 800c6c8 <__sinit+0x14>
 800c6c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c6c4:	f7ff bff0 	b.w	800c6a8 <__sinit_lock_release>
 800c6c8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c6cc:	6523      	str	r3, [r4, #80]	; 0x50
 800c6ce:	4b13      	ldr	r3, [pc, #76]	; (800c71c <__sinit+0x68>)
 800c6d0:	4a13      	ldr	r2, [pc, #76]	; (800c720 <__sinit+0x6c>)
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	62a2      	str	r2, [r4, #40]	; 0x28
 800c6d6:	42a3      	cmp	r3, r4
 800c6d8:	bf04      	itt	eq
 800c6da:	2301      	moveq	r3, #1
 800c6dc:	61a3      	streq	r3, [r4, #24]
 800c6de:	4620      	mov	r0, r4
 800c6e0:	f000 f820 	bl	800c724 <__sfp>
 800c6e4:	6060      	str	r0, [r4, #4]
 800c6e6:	4620      	mov	r0, r4
 800c6e8:	f000 f81c 	bl	800c724 <__sfp>
 800c6ec:	60a0      	str	r0, [r4, #8]
 800c6ee:	4620      	mov	r0, r4
 800c6f0:	f000 f818 	bl	800c724 <__sfp>
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	60e0      	str	r0, [r4, #12]
 800c6f8:	2104      	movs	r1, #4
 800c6fa:	6860      	ldr	r0, [r4, #4]
 800c6fc:	f7ff ff82 	bl	800c604 <std>
 800c700:	68a0      	ldr	r0, [r4, #8]
 800c702:	2201      	movs	r2, #1
 800c704:	2109      	movs	r1, #9
 800c706:	f7ff ff7d 	bl	800c604 <std>
 800c70a:	68e0      	ldr	r0, [r4, #12]
 800c70c:	2202      	movs	r2, #2
 800c70e:	2112      	movs	r1, #18
 800c710:	f7ff ff78 	bl	800c604 <std>
 800c714:	2301      	movs	r3, #1
 800c716:	61a3      	str	r3, [r4, #24]
 800c718:	e7d2      	b.n	800c6c0 <__sinit+0xc>
 800c71a:	bf00      	nop
 800c71c:	08019458 	.word	0x08019458
 800c720:	0800c64d 	.word	0x0800c64d

0800c724 <__sfp>:
 800c724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c726:	4607      	mov	r7, r0
 800c728:	f7ff ffac 	bl	800c684 <__sfp_lock_acquire>
 800c72c:	4b1e      	ldr	r3, [pc, #120]	; (800c7a8 <__sfp+0x84>)
 800c72e:	681e      	ldr	r6, [r3, #0]
 800c730:	69b3      	ldr	r3, [r6, #24]
 800c732:	b913      	cbnz	r3, 800c73a <__sfp+0x16>
 800c734:	4630      	mov	r0, r6
 800c736:	f7ff ffbd 	bl	800c6b4 <__sinit>
 800c73a:	3648      	adds	r6, #72	; 0x48
 800c73c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c740:	3b01      	subs	r3, #1
 800c742:	d503      	bpl.n	800c74c <__sfp+0x28>
 800c744:	6833      	ldr	r3, [r6, #0]
 800c746:	b30b      	cbz	r3, 800c78c <__sfp+0x68>
 800c748:	6836      	ldr	r6, [r6, #0]
 800c74a:	e7f7      	b.n	800c73c <__sfp+0x18>
 800c74c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c750:	b9d5      	cbnz	r5, 800c788 <__sfp+0x64>
 800c752:	4b16      	ldr	r3, [pc, #88]	; (800c7ac <__sfp+0x88>)
 800c754:	60e3      	str	r3, [r4, #12]
 800c756:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c75a:	6665      	str	r5, [r4, #100]	; 0x64
 800c75c:	f000 f847 	bl	800c7ee <__retarget_lock_init_recursive>
 800c760:	f7ff ff96 	bl	800c690 <__sfp_lock_release>
 800c764:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c768:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c76c:	6025      	str	r5, [r4, #0]
 800c76e:	61a5      	str	r5, [r4, #24]
 800c770:	2208      	movs	r2, #8
 800c772:	4629      	mov	r1, r5
 800c774:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c778:	f7fd fb20 	bl	8009dbc <memset>
 800c77c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c780:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c784:	4620      	mov	r0, r4
 800c786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c788:	3468      	adds	r4, #104	; 0x68
 800c78a:	e7d9      	b.n	800c740 <__sfp+0x1c>
 800c78c:	2104      	movs	r1, #4
 800c78e:	4638      	mov	r0, r7
 800c790:	f7ff ff62 	bl	800c658 <__sfmoreglue>
 800c794:	4604      	mov	r4, r0
 800c796:	6030      	str	r0, [r6, #0]
 800c798:	2800      	cmp	r0, #0
 800c79a:	d1d5      	bne.n	800c748 <__sfp+0x24>
 800c79c:	f7ff ff78 	bl	800c690 <__sfp_lock_release>
 800c7a0:	230c      	movs	r3, #12
 800c7a2:	603b      	str	r3, [r7, #0]
 800c7a4:	e7ee      	b.n	800c784 <__sfp+0x60>
 800c7a6:	bf00      	nop
 800c7a8:	08019458 	.word	0x08019458
 800c7ac:	ffff0001 	.word	0xffff0001

0800c7b0 <_fwalk_reent>:
 800c7b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c7b4:	4606      	mov	r6, r0
 800c7b6:	4688      	mov	r8, r1
 800c7b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c7bc:	2700      	movs	r7, #0
 800c7be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c7c2:	f1b9 0901 	subs.w	r9, r9, #1
 800c7c6:	d505      	bpl.n	800c7d4 <_fwalk_reent+0x24>
 800c7c8:	6824      	ldr	r4, [r4, #0]
 800c7ca:	2c00      	cmp	r4, #0
 800c7cc:	d1f7      	bne.n	800c7be <_fwalk_reent+0xe>
 800c7ce:	4638      	mov	r0, r7
 800c7d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7d4:	89ab      	ldrh	r3, [r5, #12]
 800c7d6:	2b01      	cmp	r3, #1
 800c7d8:	d907      	bls.n	800c7ea <_fwalk_reent+0x3a>
 800c7da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c7de:	3301      	adds	r3, #1
 800c7e0:	d003      	beq.n	800c7ea <_fwalk_reent+0x3a>
 800c7e2:	4629      	mov	r1, r5
 800c7e4:	4630      	mov	r0, r6
 800c7e6:	47c0      	blx	r8
 800c7e8:	4307      	orrs	r7, r0
 800c7ea:	3568      	adds	r5, #104	; 0x68
 800c7ec:	e7e9      	b.n	800c7c2 <_fwalk_reent+0x12>

0800c7ee <__retarget_lock_init_recursive>:
 800c7ee:	4770      	bx	lr

0800c7f0 <__retarget_lock_acquire_recursive>:
 800c7f0:	4770      	bx	lr

0800c7f2 <__retarget_lock_release_recursive>:
 800c7f2:	4770      	bx	lr

0800c7f4 <__swhatbuf_r>:
 800c7f4:	b570      	push	{r4, r5, r6, lr}
 800c7f6:	460e      	mov	r6, r1
 800c7f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7fc:	2900      	cmp	r1, #0
 800c7fe:	b096      	sub	sp, #88	; 0x58
 800c800:	4614      	mov	r4, r2
 800c802:	461d      	mov	r5, r3
 800c804:	da07      	bge.n	800c816 <__swhatbuf_r+0x22>
 800c806:	2300      	movs	r3, #0
 800c808:	602b      	str	r3, [r5, #0]
 800c80a:	89b3      	ldrh	r3, [r6, #12]
 800c80c:	061a      	lsls	r2, r3, #24
 800c80e:	d410      	bmi.n	800c832 <__swhatbuf_r+0x3e>
 800c810:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c814:	e00e      	b.n	800c834 <__swhatbuf_r+0x40>
 800c816:	466a      	mov	r2, sp
 800c818:	f000 f958 	bl	800cacc <_fstat_r>
 800c81c:	2800      	cmp	r0, #0
 800c81e:	dbf2      	blt.n	800c806 <__swhatbuf_r+0x12>
 800c820:	9a01      	ldr	r2, [sp, #4]
 800c822:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c826:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c82a:	425a      	negs	r2, r3
 800c82c:	415a      	adcs	r2, r3
 800c82e:	602a      	str	r2, [r5, #0]
 800c830:	e7ee      	b.n	800c810 <__swhatbuf_r+0x1c>
 800c832:	2340      	movs	r3, #64	; 0x40
 800c834:	2000      	movs	r0, #0
 800c836:	6023      	str	r3, [r4, #0]
 800c838:	b016      	add	sp, #88	; 0x58
 800c83a:	bd70      	pop	{r4, r5, r6, pc}

0800c83c <__smakebuf_r>:
 800c83c:	898b      	ldrh	r3, [r1, #12]
 800c83e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c840:	079d      	lsls	r5, r3, #30
 800c842:	4606      	mov	r6, r0
 800c844:	460c      	mov	r4, r1
 800c846:	d507      	bpl.n	800c858 <__smakebuf_r+0x1c>
 800c848:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c84c:	6023      	str	r3, [r4, #0]
 800c84e:	6123      	str	r3, [r4, #16]
 800c850:	2301      	movs	r3, #1
 800c852:	6163      	str	r3, [r4, #20]
 800c854:	b002      	add	sp, #8
 800c856:	bd70      	pop	{r4, r5, r6, pc}
 800c858:	ab01      	add	r3, sp, #4
 800c85a:	466a      	mov	r2, sp
 800c85c:	f7ff ffca 	bl	800c7f4 <__swhatbuf_r>
 800c860:	9900      	ldr	r1, [sp, #0]
 800c862:	4605      	mov	r5, r0
 800c864:	4630      	mov	r0, r6
 800c866:	f7fd fb01 	bl	8009e6c <_malloc_r>
 800c86a:	b948      	cbnz	r0, 800c880 <__smakebuf_r+0x44>
 800c86c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c870:	059a      	lsls	r2, r3, #22
 800c872:	d4ef      	bmi.n	800c854 <__smakebuf_r+0x18>
 800c874:	f023 0303 	bic.w	r3, r3, #3
 800c878:	f043 0302 	orr.w	r3, r3, #2
 800c87c:	81a3      	strh	r3, [r4, #12]
 800c87e:	e7e3      	b.n	800c848 <__smakebuf_r+0xc>
 800c880:	4b0d      	ldr	r3, [pc, #52]	; (800c8b8 <__smakebuf_r+0x7c>)
 800c882:	62b3      	str	r3, [r6, #40]	; 0x28
 800c884:	89a3      	ldrh	r3, [r4, #12]
 800c886:	6020      	str	r0, [r4, #0]
 800c888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c88c:	81a3      	strh	r3, [r4, #12]
 800c88e:	9b00      	ldr	r3, [sp, #0]
 800c890:	6163      	str	r3, [r4, #20]
 800c892:	9b01      	ldr	r3, [sp, #4]
 800c894:	6120      	str	r0, [r4, #16]
 800c896:	b15b      	cbz	r3, 800c8b0 <__smakebuf_r+0x74>
 800c898:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c89c:	4630      	mov	r0, r6
 800c89e:	f000 f927 	bl	800caf0 <_isatty_r>
 800c8a2:	b128      	cbz	r0, 800c8b0 <__smakebuf_r+0x74>
 800c8a4:	89a3      	ldrh	r3, [r4, #12]
 800c8a6:	f023 0303 	bic.w	r3, r3, #3
 800c8aa:	f043 0301 	orr.w	r3, r3, #1
 800c8ae:	81a3      	strh	r3, [r4, #12]
 800c8b0:	89a0      	ldrh	r0, [r4, #12]
 800c8b2:	4305      	orrs	r5, r0
 800c8b4:	81a5      	strh	r5, [r4, #12]
 800c8b6:	e7cd      	b.n	800c854 <__smakebuf_r+0x18>
 800c8b8:	0800c64d 	.word	0x0800c64d

0800c8bc <__ascii_mbtowc>:
 800c8bc:	b082      	sub	sp, #8
 800c8be:	b901      	cbnz	r1, 800c8c2 <__ascii_mbtowc+0x6>
 800c8c0:	a901      	add	r1, sp, #4
 800c8c2:	b142      	cbz	r2, 800c8d6 <__ascii_mbtowc+0x1a>
 800c8c4:	b14b      	cbz	r3, 800c8da <__ascii_mbtowc+0x1e>
 800c8c6:	7813      	ldrb	r3, [r2, #0]
 800c8c8:	600b      	str	r3, [r1, #0]
 800c8ca:	7812      	ldrb	r2, [r2, #0]
 800c8cc:	1e10      	subs	r0, r2, #0
 800c8ce:	bf18      	it	ne
 800c8d0:	2001      	movne	r0, #1
 800c8d2:	b002      	add	sp, #8
 800c8d4:	4770      	bx	lr
 800c8d6:	4610      	mov	r0, r2
 800c8d8:	e7fb      	b.n	800c8d2 <__ascii_mbtowc+0x16>
 800c8da:	f06f 0001 	mvn.w	r0, #1
 800c8de:	e7f8      	b.n	800c8d2 <__ascii_mbtowc+0x16>

0800c8e0 <memmove>:
 800c8e0:	4288      	cmp	r0, r1
 800c8e2:	b510      	push	{r4, lr}
 800c8e4:	eb01 0402 	add.w	r4, r1, r2
 800c8e8:	d902      	bls.n	800c8f0 <memmove+0x10>
 800c8ea:	4284      	cmp	r4, r0
 800c8ec:	4623      	mov	r3, r4
 800c8ee:	d807      	bhi.n	800c900 <memmove+0x20>
 800c8f0:	1e43      	subs	r3, r0, #1
 800c8f2:	42a1      	cmp	r1, r4
 800c8f4:	d008      	beq.n	800c908 <memmove+0x28>
 800c8f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c8fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c8fe:	e7f8      	b.n	800c8f2 <memmove+0x12>
 800c900:	4402      	add	r2, r0
 800c902:	4601      	mov	r1, r0
 800c904:	428a      	cmp	r2, r1
 800c906:	d100      	bne.n	800c90a <memmove+0x2a>
 800c908:	bd10      	pop	{r4, pc}
 800c90a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c90e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c912:	e7f7      	b.n	800c904 <memmove+0x24>

0800c914 <_realloc_r>:
 800c914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c916:	4607      	mov	r7, r0
 800c918:	4614      	mov	r4, r2
 800c91a:	460e      	mov	r6, r1
 800c91c:	b921      	cbnz	r1, 800c928 <_realloc_r+0x14>
 800c91e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c922:	4611      	mov	r1, r2
 800c924:	f7fd baa2 	b.w	8009e6c <_malloc_r>
 800c928:	b922      	cbnz	r2, 800c934 <_realloc_r+0x20>
 800c92a:	f7fd fa4f 	bl	8009dcc <_free_r>
 800c92e:	4625      	mov	r5, r4
 800c930:	4628      	mov	r0, r5
 800c932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c934:	f000 f8fe 	bl	800cb34 <_malloc_usable_size_r>
 800c938:	42a0      	cmp	r0, r4
 800c93a:	d20f      	bcs.n	800c95c <_realloc_r+0x48>
 800c93c:	4621      	mov	r1, r4
 800c93e:	4638      	mov	r0, r7
 800c940:	f7fd fa94 	bl	8009e6c <_malloc_r>
 800c944:	4605      	mov	r5, r0
 800c946:	2800      	cmp	r0, #0
 800c948:	d0f2      	beq.n	800c930 <_realloc_r+0x1c>
 800c94a:	4631      	mov	r1, r6
 800c94c:	4622      	mov	r2, r4
 800c94e:	f7fd fa27 	bl	8009da0 <memcpy>
 800c952:	4631      	mov	r1, r6
 800c954:	4638      	mov	r0, r7
 800c956:	f7fd fa39 	bl	8009dcc <_free_r>
 800c95a:	e7e9      	b.n	800c930 <_realloc_r+0x1c>
 800c95c:	4635      	mov	r5, r6
 800c95e:	e7e7      	b.n	800c930 <_realloc_r+0x1c>

0800c960 <_raise_r>:
 800c960:	291f      	cmp	r1, #31
 800c962:	b538      	push	{r3, r4, r5, lr}
 800c964:	4604      	mov	r4, r0
 800c966:	460d      	mov	r5, r1
 800c968:	d904      	bls.n	800c974 <_raise_r+0x14>
 800c96a:	2316      	movs	r3, #22
 800c96c:	6003      	str	r3, [r0, #0]
 800c96e:	f04f 30ff 	mov.w	r0, #4294967295
 800c972:	bd38      	pop	{r3, r4, r5, pc}
 800c974:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c976:	b112      	cbz	r2, 800c97e <_raise_r+0x1e>
 800c978:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c97c:	b94b      	cbnz	r3, 800c992 <_raise_r+0x32>
 800c97e:	4620      	mov	r0, r4
 800c980:	f000 f830 	bl	800c9e4 <_getpid_r>
 800c984:	462a      	mov	r2, r5
 800c986:	4601      	mov	r1, r0
 800c988:	4620      	mov	r0, r4
 800c98a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c98e:	f000 b817 	b.w	800c9c0 <_kill_r>
 800c992:	2b01      	cmp	r3, #1
 800c994:	d00a      	beq.n	800c9ac <_raise_r+0x4c>
 800c996:	1c59      	adds	r1, r3, #1
 800c998:	d103      	bne.n	800c9a2 <_raise_r+0x42>
 800c99a:	2316      	movs	r3, #22
 800c99c:	6003      	str	r3, [r0, #0]
 800c99e:	2001      	movs	r0, #1
 800c9a0:	e7e7      	b.n	800c972 <_raise_r+0x12>
 800c9a2:	2400      	movs	r4, #0
 800c9a4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c9a8:	4628      	mov	r0, r5
 800c9aa:	4798      	blx	r3
 800c9ac:	2000      	movs	r0, #0
 800c9ae:	e7e0      	b.n	800c972 <_raise_r+0x12>

0800c9b0 <raise>:
 800c9b0:	4b02      	ldr	r3, [pc, #8]	; (800c9bc <raise+0xc>)
 800c9b2:	4601      	mov	r1, r0
 800c9b4:	6818      	ldr	r0, [r3, #0]
 800c9b6:	f7ff bfd3 	b.w	800c960 <_raise_r>
 800c9ba:	bf00      	nop
 800c9bc:	20000520 	.word	0x20000520

0800c9c0 <_kill_r>:
 800c9c0:	b538      	push	{r3, r4, r5, lr}
 800c9c2:	4d07      	ldr	r5, [pc, #28]	; (800c9e0 <_kill_r+0x20>)
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	4604      	mov	r4, r0
 800c9c8:	4608      	mov	r0, r1
 800c9ca:	4611      	mov	r1, r2
 800c9cc:	602b      	str	r3, [r5, #0]
 800c9ce:	f7f5 f82f 	bl	8001a30 <_kill>
 800c9d2:	1c43      	adds	r3, r0, #1
 800c9d4:	d102      	bne.n	800c9dc <_kill_r+0x1c>
 800c9d6:	682b      	ldr	r3, [r5, #0]
 800c9d8:	b103      	cbz	r3, 800c9dc <_kill_r+0x1c>
 800c9da:	6023      	str	r3, [r4, #0]
 800c9dc:	bd38      	pop	{r3, r4, r5, pc}
 800c9de:	bf00      	nop
 800c9e0:	2000c368 	.word	0x2000c368

0800c9e4 <_getpid_r>:
 800c9e4:	f7f5 b822 	b.w	8001a2c <_getpid>

0800c9e8 <__sread>:
 800c9e8:	b510      	push	{r4, lr}
 800c9ea:	460c      	mov	r4, r1
 800c9ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9f0:	f000 f8a8 	bl	800cb44 <_read_r>
 800c9f4:	2800      	cmp	r0, #0
 800c9f6:	bfab      	itete	ge
 800c9f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c9fa:	89a3      	ldrhlt	r3, [r4, #12]
 800c9fc:	181b      	addge	r3, r3, r0
 800c9fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ca02:	bfac      	ite	ge
 800ca04:	6563      	strge	r3, [r4, #84]	; 0x54
 800ca06:	81a3      	strhlt	r3, [r4, #12]
 800ca08:	bd10      	pop	{r4, pc}

0800ca0a <__swrite>:
 800ca0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca0e:	461f      	mov	r7, r3
 800ca10:	898b      	ldrh	r3, [r1, #12]
 800ca12:	05db      	lsls	r3, r3, #23
 800ca14:	4605      	mov	r5, r0
 800ca16:	460c      	mov	r4, r1
 800ca18:	4616      	mov	r6, r2
 800ca1a:	d505      	bpl.n	800ca28 <__swrite+0x1e>
 800ca1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca20:	2302      	movs	r3, #2
 800ca22:	2200      	movs	r2, #0
 800ca24:	f000 f874 	bl	800cb10 <_lseek_r>
 800ca28:	89a3      	ldrh	r3, [r4, #12]
 800ca2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ca32:	81a3      	strh	r3, [r4, #12]
 800ca34:	4632      	mov	r2, r6
 800ca36:	463b      	mov	r3, r7
 800ca38:	4628      	mov	r0, r5
 800ca3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca3e:	f000 b823 	b.w	800ca88 <_write_r>

0800ca42 <__sseek>:
 800ca42:	b510      	push	{r4, lr}
 800ca44:	460c      	mov	r4, r1
 800ca46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca4a:	f000 f861 	bl	800cb10 <_lseek_r>
 800ca4e:	1c43      	adds	r3, r0, #1
 800ca50:	89a3      	ldrh	r3, [r4, #12]
 800ca52:	bf15      	itete	ne
 800ca54:	6560      	strne	r0, [r4, #84]	; 0x54
 800ca56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ca5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ca5e:	81a3      	strheq	r3, [r4, #12]
 800ca60:	bf18      	it	ne
 800ca62:	81a3      	strhne	r3, [r4, #12]
 800ca64:	bd10      	pop	{r4, pc}

0800ca66 <__sclose>:
 800ca66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca6a:	f000 b81f 	b.w	800caac <_close_r>

0800ca6e <__ascii_wctomb>:
 800ca6e:	b149      	cbz	r1, 800ca84 <__ascii_wctomb+0x16>
 800ca70:	2aff      	cmp	r2, #255	; 0xff
 800ca72:	bf85      	ittet	hi
 800ca74:	238a      	movhi	r3, #138	; 0x8a
 800ca76:	6003      	strhi	r3, [r0, #0]
 800ca78:	700a      	strbls	r2, [r1, #0]
 800ca7a:	f04f 30ff 	movhi.w	r0, #4294967295
 800ca7e:	bf98      	it	ls
 800ca80:	2001      	movls	r0, #1
 800ca82:	4770      	bx	lr
 800ca84:	4608      	mov	r0, r1
 800ca86:	4770      	bx	lr

0800ca88 <_write_r>:
 800ca88:	b538      	push	{r3, r4, r5, lr}
 800ca8a:	4d07      	ldr	r5, [pc, #28]	; (800caa8 <_write_r+0x20>)
 800ca8c:	4604      	mov	r4, r0
 800ca8e:	4608      	mov	r0, r1
 800ca90:	4611      	mov	r1, r2
 800ca92:	2200      	movs	r2, #0
 800ca94:	602a      	str	r2, [r5, #0]
 800ca96:	461a      	mov	r2, r3
 800ca98:	f7f4 ffe6 	bl	8001a68 <_write>
 800ca9c:	1c43      	adds	r3, r0, #1
 800ca9e:	d102      	bne.n	800caa6 <_write_r+0x1e>
 800caa0:	682b      	ldr	r3, [r5, #0]
 800caa2:	b103      	cbz	r3, 800caa6 <_write_r+0x1e>
 800caa4:	6023      	str	r3, [r4, #0]
 800caa6:	bd38      	pop	{r3, r4, r5, pc}
 800caa8:	2000c368 	.word	0x2000c368

0800caac <_close_r>:
 800caac:	b538      	push	{r3, r4, r5, lr}
 800caae:	4d06      	ldr	r5, [pc, #24]	; (800cac8 <_close_r+0x1c>)
 800cab0:	2300      	movs	r3, #0
 800cab2:	4604      	mov	r4, r0
 800cab4:	4608      	mov	r0, r1
 800cab6:	602b      	str	r3, [r5, #0]
 800cab8:	f7f4 ffe4 	bl	8001a84 <_close>
 800cabc:	1c43      	adds	r3, r0, #1
 800cabe:	d102      	bne.n	800cac6 <_close_r+0x1a>
 800cac0:	682b      	ldr	r3, [r5, #0]
 800cac2:	b103      	cbz	r3, 800cac6 <_close_r+0x1a>
 800cac4:	6023      	str	r3, [r4, #0]
 800cac6:	bd38      	pop	{r3, r4, r5, pc}
 800cac8:	2000c368 	.word	0x2000c368

0800cacc <_fstat_r>:
 800cacc:	b538      	push	{r3, r4, r5, lr}
 800cace:	4d07      	ldr	r5, [pc, #28]	; (800caec <_fstat_r+0x20>)
 800cad0:	2300      	movs	r3, #0
 800cad2:	4604      	mov	r4, r0
 800cad4:	4608      	mov	r0, r1
 800cad6:	4611      	mov	r1, r2
 800cad8:	602b      	str	r3, [r5, #0]
 800cada:	f7f4 ffd7 	bl	8001a8c <_fstat>
 800cade:	1c43      	adds	r3, r0, #1
 800cae0:	d102      	bne.n	800cae8 <_fstat_r+0x1c>
 800cae2:	682b      	ldr	r3, [r5, #0]
 800cae4:	b103      	cbz	r3, 800cae8 <_fstat_r+0x1c>
 800cae6:	6023      	str	r3, [r4, #0]
 800cae8:	bd38      	pop	{r3, r4, r5, pc}
 800caea:	bf00      	nop
 800caec:	2000c368 	.word	0x2000c368

0800caf0 <_isatty_r>:
 800caf0:	b538      	push	{r3, r4, r5, lr}
 800caf2:	4d06      	ldr	r5, [pc, #24]	; (800cb0c <_isatty_r+0x1c>)
 800caf4:	2300      	movs	r3, #0
 800caf6:	4604      	mov	r4, r0
 800caf8:	4608      	mov	r0, r1
 800cafa:	602b      	str	r3, [r5, #0]
 800cafc:	f7f4 ffcc 	bl	8001a98 <_isatty>
 800cb00:	1c43      	adds	r3, r0, #1
 800cb02:	d102      	bne.n	800cb0a <_isatty_r+0x1a>
 800cb04:	682b      	ldr	r3, [r5, #0]
 800cb06:	b103      	cbz	r3, 800cb0a <_isatty_r+0x1a>
 800cb08:	6023      	str	r3, [r4, #0]
 800cb0a:	bd38      	pop	{r3, r4, r5, pc}
 800cb0c:	2000c368 	.word	0x2000c368

0800cb10 <_lseek_r>:
 800cb10:	b538      	push	{r3, r4, r5, lr}
 800cb12:	4d07      	ldr	r5, [pc, #28]	; (800cb30 <_lseek_r+0x20>)
 800cb14:	4604      	mov	r4, r0
 800cb16:	4608      	mov	r0, r1
 800cb18:	4611      	mov	r1, r2
 800cb1a:	2200      	movs	r2, #0
 800cb1c:	602a      	str	r2, [r5, #0]
 800cb1e:	461a      	mov	r2, r3
 800cb20:	f7f4 ffbc 	bl	8001a9c <_lseek>
 800cb24:	1c43      	adds	r3, r0, #1
 800cb26:	d102      	bne.n	800cb2e <_lseek_r+0x1e>
 800cb28:	682b      	ldr	r3, [r5, #0]
 800cb2a:	b103      	cbz	r3, 800cb2e <_lseek_r+0x1e>
 800cb2c:	6023      	str	r3, [r4, #0]
 800cb2e:	bd38      	pop	{r3, r4, r5, pc}
 800cb30:	2000c368 	.word	0x2000c368

0800cb34 <_malloc_usable_size_r>:
 800cb34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb38:	1f18      	subs	r0, r3, #4
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	bfbc      	itt	lt
 800cb3e:	580b      	ldrlt	r3, [r1, r0]
 800cb40:	18c0      	addlt	r0, r0, r3
 800cb42:	4770      	bx	lr

0800cb44 <_read_r>:
 800cb44:	b538      	push	{r3, r4, r5, lr}
 800cb46:	4d07      	ldr	r5, [pc, #28]	; (800cb64 <_read_r+0x20>)
 800cb48:	4604      	mov	r4, r0
 800cb4a:	4608      	mov	r0, r1
 800cb4c:	4611      	mov	r1, r2
 800cb4e:	2200      	movs	r2, #0
 800cb50:	602a      	str	r2, [r5, #0]
 800cb52:	461a      	mov	r2, r3
 800cb54:	f7f4 ff7a 	bl	8001a4c <_read>
 800cb58:	1c43      	adds	r3, r0, #1
 800cb5a:	d102      	bne.n	800cb62 <_read_r+0x1e>
 800cb5c:	682b      	ldr	r3, [r5, #0]
 800cb5e:	b103      	cbz	r3, 800cb62 <_read_r+0x1e>
 800cb60:	6023      	str	r3, [r4, #0]
 800cb62:	bd38      	pop	{r3, r4, r5, pc}
 800cb64:	2000c368 	.word	0x2000c368

0800cb68 <ceilf>:
 800cb68:	ee10 3a10 	vmov	r3, s0
 800cb6c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800cb70:	3a7f      	subs	r2, #127	; 0x7f
 800cb72:	2a16      	cmp	r2, #22
 800cb74:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800cb78:	dc2a      	bgt.n	800cbd0 <ceilf+0x68>
 800cb7a:	2a00      	cmp	r2, #0
 800cb7c:	da11      	bge.n	800cba2 <ceilf+0x3a>
 800cb7e:	eddf 7a19 	vldr	s15, [pc, #100]	; 800cbe4 <ceilf+0x7c>
 800cb82:	ee30 0a27 	vadd.f32	s0, s0, s15
 800cb86:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800cb8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb8e:	dd05      	ble.n	800cb9c <ceilf+0x34>
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	db23      	blt.n	800cbdc <ceilf+0x74>
 800cb94:	2900      	cmp	r1, #0
 800cb96:	bf18      	it	ne
 800cb98:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 800cb9c:	ee00 3a10 	vmov	s0, r3
 800cba0:	4770      	bx	lr
 800cba2:	4911      	ldr	r1, [pc, #68]	; (800cbe8 <ceilf+0x80>)
 800cba4:	4111      	asrs	r1, r2
 800cba6:	420b      	tst	r3, r1
 800cba8:	d0fa      	beq.n	800cba0 <ceilf+0x38>
 800cbaa:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800cbe4 <ceilf+0x7c>
 800cbae:	ee30 0a27 	vadd.f32	s0, s0, s15
 800cbb2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800cbb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbba:	ddef      	ble.n	800cb9c <ceilf+0x34>
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	bfc2      	ittt	gt
 800cbc0:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 800cbc4:	fa40 f202 	asrgt.w	r2, r0, r2
 800cbc8:	189b      	addgt	r3, r3, r2
 800cbca:	ea23 0301 	bic.w	r3, r3, r1
 800cbce:	e7e5      	b.n	800cb9c <ceilf+0x34>
 800cbd0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800cbd4:	d3e4      	bcc.n	800cba0 <ceilf+0x38>
 800cbd6:	ee30 0a00 	vadd.f32	s0, s0, s0
 800cbda:	4770      	bx	lr
 800cbdc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cbe0:	e7dc      	b.n	800cb9c <ceilf+0x34>
 800cbe2:	bf00      	nop
 800cbe4:	7149f2ca 	.word	0x7149f2ca
 800cbe8:	007fffff 	.word	0x007fffff

0800cbec <pow10f>:
 800cbec:	eef0 0a40 	vmov.f32	s1, s0
 800cbf0:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800cbf4:	f000 b874 	b.w	800cce0 <powf>

0800cbf8 <expf>:
 800cbf8:	b508      	push	{r3, lr}
 800cbfa:	ed2d 8b02 	vpush	{d8}
 800cbfe:	eef0 8a40 	vmov.f32	s17, s0
 800cc02:	f000 f905 	bl	800ce10 <__ieee754_expf>
 800cc06:	4b16      	ldr	r3, [pc, #88]	; (800cc60 <expf+0x68>)
 800cc08:	f993 3000 	ldrsb.w	r3, [r3]
 800cc0c:	3301      	adds	r3, #1
 800cc0e:	eeb0 8a40 	vmov.f32	s16, s0
 800cc12:	d011      	beq.n	800cc38 <expf+0x40>
 800cc14:	eeb0 0a68 	vmov.f32	s0, s17
 800cc18:	f000 fcf0 	bl	800d5fc <finitef>
 800cc1c:	b160      	cbz	r0, 800cc38 <expf+0x40>
 800cc1e:	eddf 7a11 	vldr	s15, [pc, #68]	; 800cc64 <expf+0x6c>
 800cc22:	eef4 8ae7 	vcmpe.f32	s17, s15
 800cc26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc2a:	dd0a      	ble.n	800cc42 <expf+0x4a>
 800cc2c:	f7fd f87e 	bl	8009d2c <__errno>
 800cc30:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 800cc68 <expf+0x70>
 800cc34:	2322      	movs	r3, #34	; 0x22
 800cc36:	6003      	str	r3, [r0, #0]
 800cc38:	eeb0 0a48 	vmov.f32	s0, s16
 800cc3c:	ecbd 8b02 	vpop	{d8}
 800cc40:	bd08      	pop	{r3, pc}
 800cc42:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800cc6c <expf+0x74>
 800cc46:	eef4 8ae7 	vcmpe.f32	s17, s15
 800cc4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc4e:	d5f3      	bpl.n	800cc38 <expf+0x40>
 800cc50:	f7fd f86c 	bl	8009d2c <__errno>
 800cc54:	2322      	movs	r3, #34	; 0x22
 800cc56:	ed9f 8a06 	vldr	s16, [pc, #24]	; 800cc70 <expf+0x78>
 800cc5a:	6003      	str	r3, [r0, #0]
 800cc5c:	e7ec      	b.n	800cc38 <expf+0x40>
 800cc5e:	bf00      	nop
 800cc60:	200006f0 	.word	0x200006f0
 800cc64:	42b17180 	.word	0x42b17180
 800cc68:	7f800000 	.word	0x7f800000
 800cc6c:	c2cff1b5 	.word	0xc2cff1b5
 800cc70:	00000000 	.word	0x00000000

0800cc74 <log10f>:
 800cc74:	b508      	push	{r3, lr}
 800cc76:	ed2d 8b02 	vpush	{d8}
 800cc7a:	eeb0 8a40 	vmov.f32	s16, s0
 800cc7e:	f000 f99b 	bl	800cfb8 <__ieee754_log10f>
 800cc82:	4b14      	ldr	r3, [pc, #80]	; (800ccd4 <log10f+0x60>)
 800cc84:	f993 3000 	ldrsb.w	r3, [r3]
 800cc88:	3301      	adds	r3, #1
 800cc8a:	d014      	beq.n	800ccb6 <log10f+0x42>
 800cc8c:	eeb4 8a48 	vcmp.f32	s16, s16
 800cc90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc94:	d60f      	bvs.n	800ccb6 <log10f+0x42>
 800cc96:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800cc9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc9e:	d80a      	bhi.n	800ccb6 <log10f+0x42>
 800cca0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800cca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cca8:	d108      	bne.n	800ccbc <log10f+0x48>
 800ccaa:	f7fd f83f 	bl	8009d2c <__errno>
 800ccae:	2322      	movs	r3, #34	; 0x22
 800ccb0:	ed9f 0a09 	vldr	s0, [pc, #36]	; 800ccd8 <log10f+0x64>
 800ccb4:	6003      	str	r3, [r0, #0]
 800ccb6:	ecbd 8b02 	vpop	{d8}
 800ccba:	bd08      	pop	{r3, pc}
 800ccbc:	f7fd f836 	bl	8009d2c <__errno>
 800ccc0:	ecbd 8b02 	vpop	{d8}
 800ccc4:	2321      	movs	r3, #33	; 0x21
 800ccc6:	6003      	str	r3, [r0, #0]
 800ccc8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800cccc:	4803      	ldr	r0, [pc, #12]	; (800ccdc <log10f+0x68>)
 800ccce:	f000 bca3 	b.w	800d618 <nanf>
 800ccd2:	bf00      	nop
 800ccd4:	200006f0 	.word	0x200006f0
 800ccd8:	ff800000 	.word	0xff800000
 800ccdc:	080194cb 	.word	0x080194cb

0800cce0 <powf>:
 800cce0:	b508      	push	{r3, lr}
 800cce2:	ed2d 8b04 	vpush	{d8-d9}
 800cce6:	eeb0 9a40 	vmov.f32	s18, s0
 800ccea:	eef0 8a60 	vmov.f32	s17, s1
 800ccee:	f000 f9bb 	bl	800d068 <__ieee754_powf>
 800ccf2:	4b43      	ldr	r3, [pc, #268]	; (800ce00 <powf+0x120>)
 800ccf4:	f993 3000 	ldrsb.w	r3, [r3]
 800ccf8:	3301      	adds	r3, #1
 800ccfa:	eeb0 8a40 	vmov.f32	s16, s0
 800ccfe:	d012      	beq.n	800cd26 <powf+0x46>
 800cd00:	eef4 8a68 	vcmp.f32	s17, s17
 800cd04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd08:	d60d      	bvs.n	800cd26 <powf+0x46>
 800cd0a:	eeb4 9a49 	vcmp.f32	s18, s18
 800cd0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd12:	d70d      	bvc.n	800cd30 <powf+0x50>
 800cd14:	eef5 8a40 	vcmp.f32	s17, #0.0
 800cd18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd1c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800cd20:	bf08      	it	eq
 800cd22:	eeb0 8a67 	vmoveq.f32	s16, s15
 800cd26:	eeb0 0a48 	vmov.f32	s0, s16
 800cd2a:	ecbd 8b04 	vpop	{d8-d9}
 800cd2e:	bd08      	pop	{r3, pc}
 800cd30:	eddf 9a34 	vldr	s19, [pc, #208]	; 800ce04 <powf+0x124>
 800cd34:	eeb4 9a69 	vcmp.f32	s18, s19
 800cd38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd3c:	d116      	bne.n	800cd6c <powf+0x8c>
 800cd3e:	eef4 8a69 	vcmp.f32	s17, s19
 800cd42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd46:	d057      	beq.n	800cdf8 <powf+0x118>
 800cd48:	eeb0 0a68 	vmov.f32	s0, s17
 800cd4c:	f000 fc56 	bl	800d5fc <finitef>
 800cd50:	2800      	cmp	r0, #0
 800cd52:	d0e8      	beq.n	800cd26 <powf+0x46>
 800cd54:	eef4 8ae9 	vcmpe.f32	s17, s19
 800cd58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd5c:	d5e3      	bpl.n	800cd26 <powf+0x46>
 800cd5e:	f7fc ffe5 	bl	8009d2c <__errno>
 800cd62:	2321      	movs	r3, #33	; 0x21
 800cd64:	6003      	str	r3, [r0, #0]
 800cd66:	ed9f 8a28 	vldr	s16, [pc, #160]	; 800ce08 <powf+0x128>
 800cd6a:	e7dc      	b.n	800cd26 <powf+0x46>
 800cd6c:	f000 fc46 	bl	800d5fc <finitef>
 800cd70:	bb50      	cbnz	r0, 800cdc8 <powf+0xe8>
 800cd72:	eeb0 0a49 	vmov.f32	s0, s18
 800cd76:	f000 fc41 	bl	800d5fc <finitef>
 800cd7a:	b328      	cbz	r0, 800cdc8 <powf+0xe8>
 800cd7c:	eeb0 0a68 	vmov.f32	s0, s17
 800cd80:	f000 fc3c 	bl	800d5fc <finitef>
 800cd84:	b300      	cbz	r0, 800cdc8 <powf+0xe8>
 800cd86:	eeb4 8a48 	vcmp.f32	s16, s16
 800cd8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd8e:	d706      	bvc.n	800cd9e <powf+0xbe>
 800cd90:	f7fc ffcc 	bl	8009d2c <__errno>
 800cd94:	2321      	movs	r3, #33	; 0x21
 800cd96:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 800cd9a:	6003      	str	r3, [r0, #0]
 800cd9c:	e7c3      	b.n	800cd26 <powf+0x46>
 800cd9e:	f7fc ffc5 	bl	8009d2c <__errno>
 800cda2:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 800cda6:	2322      	movs	r3, #34	; 0x22
 800cda8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdac:	6003      	str	r3, [r0, #0]
 800cdae:	d508      	bpl.n	800cdc2 <powf+0xe2>
 800cdb0:	eeb0 0a68 	vmov.f32	s0, s17
 800cdb4:	f000 fc36 	bl	800d624 <rintf>
 800cdb8:	eeb4 0a68 	vcmp.f32	s0, s17
 800cdbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdc0:	d1d1      	bne.n	800cd66 <powf+0x86>
 800cdc2:	ed9f 8a12 	vldr	s16, [pc, #72]	; 800ce0c <powf+0x12c>
 800cdc6:	e7ae      	b.n	800cd26 <powf+0x46>
 800cdc8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800cdcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdd0:	d1a9      	bne.n	800cd26 <powf+0x46>
 800cdd2:	eeb0 0a49 	vmov.f32	s0, s18
 800cdd6:	f000 fc11 	bl	800d5fc <finitef>
 800cdda:	2800      	cmp	r0, #0
 800cddc:	d0a3      	beq.n	800cd26 <powf+0x46>
 800cdde:	eeb0 0a68 	vmov.f32	s0, s17
 800cde2:	f000 fc0b 	bl	800d5fc <finitef>
 800cde6:	2800      	cmp	r0, #0
 800cde8:	d09d      	beq.n	800cd26 <powf+0x46>
 800cdea:	f7fc ff9f 	bl	8009d2c <__errno>
 800cdee:	2322      	movs	r3, #34	; 0x22
 800cdf0:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800ce04 <powf+0x124>
 800cdf4:	6003      	str	r3, [r0, #0]
 800cdf6:	e796      	b.n	800cd26 <powf+0x46>
 800cdf8:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800cdfc:	e793      	b.n	800cd26 <powf+0x46>
 800cdfe:	bf00      	nop
 800ce00:	200006f0 	.word	0x200006f0
 800ce04:	00000000 	.word	0x00000000
 800ce08:	ff800000 	.word	0xff800000
 800ce0c:	7f800000 	.word	0x7f800000

0800ce10 <__ieee754_expf>:
 800ce10:	ee10 2a10 	vmov	r2, s0
 800ce14:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800ce18:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800ce1c:	d902      	bls.n	800ce24 <__ieee754_expf+0x14>
 800ce1e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ce22:	4770      	bx	lr
 800ce24:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 800ce28:	d106      	bne.n	800ce38 <__ieee754_expf+0x28>
 800ce2a:	eddf 7a51 	vldr	s15, [pc, #324]	; 800cf70 <__ieee754_expf+0x160>
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	bf18      	it	ne
 800ce32:	eeb0 0a67 	vmovne.f32	s0, s15
 800ce36:	4770      	bx	lr
 800ce38:	484e      	ldr	r0, [pc, #312]	; (800cf74 <__ieee754_expf+0x164>)
 800ce3a:	4282      	cmp	r2, r0
 800ce3c:	dd04      	ble.n	800ce48 <__ieee754_expf+0x38>
 800ce3e:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 800cf78 <__ieee754_expf+0x168>
 800ce42:	ee20 0a00 	vmul.f32	s0, s0, s0
 800ce46:	4770      	bx	lr
 800ce48:	2a00      	cmp	r2, #0
 800ce4a:	da03      	bge.n	800ce54 <__ieee754_expf+0x44>
 800ce4c:	4a4b      	ldr	r2, [pc, #300]	; (800cf7c <__ieee754_expf+0x16c>)
 800ce4e:	4291      	cmp	r1, r2
 800ce50:	f200 808a 	bhi.w	800cf68 <__ieee754_expf+0x158>
 800ce54:	4a4a      	ldr	r2, [pc, #296]	; (800cf80 <__ieee754_expf+0x170>)
 800ce56:	4291      	cmp	r1, r2
 800ce58:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800ce5c:	d954      	bls.n	800cf08 <__ieee754_expf+0xf8>
 800ce5e:	4a49      	ldr	r2, [pc, #292]	; (800cf84 <__ieee754_expf+0x174>)
 800ce60:	4291      	cmp	r1, r2
 800ce62:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800ce66:	d836      	bhi.n	800ced6 <__ieee754_expf+0xc6>
 800ce68:	4947      	ldr	r1, [pc, #284]	; (800cf88 <__ieee754_expf+0x178>)
 800ce6a:	4411      	add	r1, r2
 800ce6c:	ed91 7a00 	vldr	s14, [r1]
 800ce70:	4946      	ldr	r1, [pc, #280]	; (800cf8c <__ieee754_expf+0x17c>)
 800ce72:	440a      	add	r2, r1
 800ce74:	edd2 7a00 	vldr	s15, [r2]
 800ce78:	ee30 7a47 	vsub.f32	s14, s0, s14
 800ce7c:	f1c3 0201 	rsb	r2, r3, #1
 800ce80:	1ad2      	subs	r2, r2, r3
 800ce82:	ee37 0a67 	vsub.f32	s0, s14, s15
 800ce86:	ee60 6a00 	vmul.f32	s13, s0, s0
 800ce8a:	eddf 5a41 	vldr	s11, [pc, #260]	; 800cf90 <__ieee754_expf+0x180>
 800ce8e:	ed9f 5a41 	vldr	s10, [pc, #260]	; 800cf94 <__ieee754_expf+0x184>
 800ce92:	eea6 5aa5 	vfma.f32	s10, s13, s11
 800ce96:	eddf 5a40 	vldr	s11, [pc, #256]	; 800cf98 <__ieee754_expf+0x188>
 800ce9a:	eee5 5a26 	vfma.f32	s11, s10, s13
 800ce9e:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 800cf9c <__ieee754_expf+0x18c>
 800cea2:	eea5 5aa6 	vfma.f32	s10, s11, s13
 800cea6:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800cfa0 <__ieee754_expf+0x190>
 800ceaa:	eee5 5a26 	vfma.f32	s11, s10, s13
 800ceae:	eeb0 5a40 	vmov.f32	s10, s0
 800ceb2:	eea5 5ae6 	vfms.f32	s10, s11, s13
 800ceb6:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800ceba:	eef0 6a45 	vmov.f32	s13, s10
 800cebe:	ee20 5a05 	vmul.f32	s10, s0, s10
 800cec2:	bb92      	cbnz	r2, 800cf2a <__ieee754_expf+0x11a>
 800cec4:	ee76 6ae5 	vsub.f32	s13, s13, s11
 800cec8:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800cecc:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800ced0:	ee36 0a40 	vsub.f32	s0, s12, s0
 800ced4:	4770      	bx	lr
 800ced6:	4b33      	ldr	r3, [pc, #204]	; (800cfa4 <__ieee754_expf+0x194>)
 800ced8:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800cfa8 <__ieee754_expf+0x198>
 800cedc:	4413      	add	r3, r2
 800cede:	edd3 7a00 	vldr	s15, [r3]
 800cee2:	eee0 7a07 	vfma.f32	s15, s0, s14
 800cee6:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800cfac <__ieee754_expf+0x19c>
 800ceea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ceee:	ee17 2a90 	vmov	r2, s15
 800cef2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cef6:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800cefa:	eeb0 7a40 	vmov.f32	s14, s0
 800cefe:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800cfb0 <__ieee754_expf+0x1a0>
 800cf02:	ee67 7a80 	vmul.f32	s15, s15, s0
 800cf06:	e7bc      	b.n	800ce82 <__ieee754_expf+0x72>
 800cf08:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 800cf0c:	d20b      	bcs.n	800cf26 <__ieee754_expf+0x116>
 800cf0e:	eddf 6a1a 	vldr	s13, [pc, #104]	; 800cf78 <__ieee754_expf+0x168>
 800cf12:	ee70 6a26 	vadd.f32	s13, s0, s13
 800cf16:	eef4 6ac6 	vcmpe.f32	s13, s12
 800cf1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf1e:	dd02      	ble.n	800cf26 <__ieee754_expf+0x116>
 800cf20:	ee30 0a06 	vadd.f32	s0, s0, s12
 800cf24:	4770      	bx	lr
 800cf26:	2200      	movs	r2, #0
 800cf28:	e7ad      	b.n	800ce86 <__ieee754_expf+0x76>
 800cf2a:	ee75 6ae6 	vsub.f32	s13, s11, s13
 800cf2e:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800cf32:	ee85 0a26 	vdiv.f32	s0, s10, s13
 800cf36:	bfb8      	it	lt
 800cf38:	3264      	addlt	r2, #100	; 0x64
 800cf3a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800cf3e:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800cf42:	ee76 7a40 	vsub.f32	s15, s12, s0
 800cf46:	ee17 3a90 	vmov	r3, s15
 800cf4a:	bfab      	itete	ge
 800cf4c:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800cf50:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800cf54:	ee00 3a10 	vmovge	s0, r3
 800cf58:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 800cfb4 <__ieee754_expf+0x1a4>
 800cf5c:	bfbc      	itt	lt
 800cf5e:	ee00 3a10 	vmovlt	s0, r3
 800cf62:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800cf66:	4770      	bx	lr
 800cf68:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800cf70 <__ieee754_expf+0x160>
 800cf6c:	4770      	bx	lr
 800cf6e:	bf00      	nop
 800cf70:	00000000 	.word	0x00000000
 800cf74:	42b17217 	.word	0x42b17217
 800cf78:	7149f2ca 	.word	0x7149f2ca
 800cf7c:	42cff1b5 	.word	0x42cff1b5
 800cf80:	3eb17218 	.word	0x3eb17218
 800cf84:	3f851591 	.word	0x3f851591
 800cf88:	08019844 	.word	0x08019844
 800cf8c:	0801984c 	.word	0x0801984c
 800cf90:	3331bb4c 	.word	0x3331bb4c
 800cf94:	b5ddea0e 	.word	0xb5ddea0e
 800cf98:	388ab355 	.word	0x388ab355
 800cf9c:	bb360b61 	.word	0xbb360b61
 800cfa0:	3e2aaaab 	.word	0x3e2aaaab
 800cfa4:	0801983c 	.word	0x0801983c
 800cfa8:	3fb8aa3b 	.word	0x3fb8aa3b
 800cfac:	3f317180 	.word	0x3f317180
 800cfb0:	3717f7d1 	.word	0x3717f7d1
 800cfb4:	0d800000 	.word	0x0d800000

0800cfb8 <__ieee754_log10f>:
 800cfb8:	b508      	push	{r3, lr}
 800cfba:	ee10 2a10 	vmov	r2, s0
 800cfbe:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800cfc2:	ed2d 8b02 	vpush	{d8}
 800cfc6:	d108      	bne.n	800cfda <__ieee754_log10f+0x22>
 800cfc8:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800d050 <__ieee754_log10f+0x98>
 800cfcc:	eddf 7a21 	vldr	s15, [pc, #132]	; 800d054 <__ieee754_log10f+0x9c>
 800cfd0:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800cfd4:	ecbd 8b02 	vpop	{d8}
 800cfd8:	bd08      	pop	{r3, pc}
 800cfda:	2a00      	cmp	r2, #0
 800cfdc:	da02      	bge.n	800cfe4 <__ieee754_log10f+0x2c>
 800cfde:	ee30 7a40 	vsub.f32	s14, s0, s0
 800cfe2:	e7f3      	b.n	800cfcc <__ieee754_log10f+0x14>
 800cfe4:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800cfe8:	db02      	blt.n	800cff0 <__ieee754_log10f+0x38>
 800cfea:	ee30 0a00 	vadd.f32	s0, s0, s0
 800cfee:	e7f1      	b.n	800cfd4 <__ieee754_log10f+0x1c>
 800cff0:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800cff4:	bfbf      	itttt	lt
 800cff6:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 800d058 <__ieee754_log10f+0xa0>
 800cffa:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800cffe:	f06f 0118 	mvnlt.w	r1, #24
 800d002:	ee17 2a90 	vmovlt	r2, s15
 800d006:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800d00a:	bfa8      	it	ge
 800d00c:	2100      	movge	r1, #0
 800d00e:	3b7f      	subs	r3, #127	; 0x7f
 800d010:	440b      	add	r3, r1
 800d012:	0fd9      	lsrs	r1, r3, #31
 800d014:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800d018:	ee07 3a90 	vmov	s15, r3
 800d01c:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800d020:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 800d024:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800d028:	ee00 3a10 	vmov	s0, r3
 800d02c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800d030:	f000 fbc6 	bl	800d7c0 <__ieee754_logf>
 800d034:	eddf 7a09 	vldr	s15, [pc, #36]	; 800d05c <__ieee754_log10f+0xa4>
 800d038:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d03c:	eddf 7a08 	vldr	s15, [pc, #32]	; 800d060 <__ieee754_log10f+0xa8>
 800d040:	eea8 0a27 	vfma.f32	s0, s16, s15
 800d044:	eddf 7a07 	vldr	s15, [pc, #28]	; 800d064 <__ieee754_log10f+0xac>
 800d048:	eea8 0a27 	vfma.f32	s0, s16, s15
 800d04c:	e7c2      	b.n	800cfd4 <__ieee754_log10f+0x1c>
 800d04e:	bf00      	nop
 800d050:	cc000000 	.word	0xcc000000
 800d054:	00000000 	.word	0x00000000
 800d058:	4c000000 	.word	0x4c000000
 800d05c:	3ede5bd9 	.word	0x3ede5bd9
 800d060:	355427db 	.word	0x355427db
 800d064:	3e9a2080 	.word	0x3e9a2080

0800d068 <__ieee754_powf>:
 800d068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d06c:	ee10 5a90 	vmov	r5, s1
 800d070:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 800d074:	ed2d 8b02 	vpush	{d8}
 800d078:	eeb0 8a40 	vmov.f32	s16, s0
 800d07c:	eef0 8a60 	vmov.f32	s17, s1
 800d080:	f000 8291 	beq.w	800d5a6 <__ieee754_powf+0x53e>
 800d084:	ee10 8a10 	vmov	r8, s0
 800d088:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 800d08c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800d090:	dc06      	bgt.n	800d0a0 <__ieee754_powf+0x38>
 800d092:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800d096:	dd0a      	ble.n	800d0ae <__ieee754_powf+0x46>
 800d098:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800d09c:	f000 8283 	beq.w	800d5a6 <__ieee754_powf+0x53e>
 800d0a0:	ecbd 8b02 	vpop	{d8}
 800d0a4:	48d8      	ldr	r0, [pc, #864]	; (800d408 <__ieee754_powf+0x3a0>)
 800d0a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d0aa:	f000 bab5 	b.w	800d618 <nanf>
 800d0ae:	f1b8 0f00 	cmp.w	r8, #0
 800d0b2:	da1f      	bge.n	800d0f4 <__ieee754_powf+0x8c>
 800d0b4:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 800d0b8:	da2e      	bge.n	800d118 <__ieee754_powf+0xb0>
 800d0ba:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800d0be:	f2c0 827b 	blt.w	800d5b8 <__ieee754_powf+0x550>
 800d0c2:	15fb      	asrs	r3, r7, #23
 800d0c4:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800d0c8:	fa47 f603 	asr.w	r6, r7, r3
 800d0cc:	fa06 f303 	lsl.w	r3, r6, r3
 800d0d0:	42bb      	cmp	r3, r7
 800d0d2:	f040 8271 	bne.w	800d5b8 <__ieee754_powf+0x550>
 800d0d6:	f006 0601 	and.w	r6, r6, #1
 800d0da:	f1c6 0602 	rsb	r6, r6, #2
 800d0de:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800d0e2:	d120      	bne.n	800d126 <__ieee754_powf+0xbe>
 800d0e4:	2d00      	cmp	r5, #0
 800d0e6:	f280 8264 	bge.w	800d5b2 <__ieee754_powf+0x54a>
 800d0ea:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d0ee:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800d0f2:	e00d      	b.n	800d110 <__ieee754_powf+0xa8>
 800d0f4:	2600      	movs	r6, #0
 800d0f6:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800d0fa:	d1f0      	bne.n	800d0de <__ieee754_powf+0x76>
 800d0fc:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800d100:	f000 8251 	beq.w	800d5a6 <__ieee754_powf+0x53e>
 800d104:	dd0a      	ble.n	800d11c <__ieee754_powf+0xb4>
 800d106:	2d00      	cmp	r5, #0
 800d108:	f280 8250 	bge.w	800d5ac <__ieee754_powf+0x544>
 800d10c:	ed9f 0abf 	vldr	s0, [pc, #764]	; 800d40c <__ieee754_powf+0x3a4>
 800d110:	ecbd 8b02 	vpop	{d8}
 800d114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d118:	2602      	movs	r6, #2
 800d11a:	e7ec      	b.n	800d0f6 <__ieee754_powf+0x8e>
 800d11c:	2d00      	cmp	r5, #0
 800d11e:	daf5      	bge.n	800d10c <__ieee754_powf+0xa4>
 800d120:	eeb1 0a68 	vneg.f32	s0, s17
 800d124:	e7f4      	b.n	800d110 <__ieee754_powf+0xa8>
 800d126:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 800d12a:	d102      	bne.n	800d132 <__ieee754_powf+0xca>
 800d12c:	ee28 0a08 	vmul.f32	s0, s16, s16
 800d130:	e7ee      	b.n	800d110 <__ieee754_powf+0xa8>
 800d132:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 800d136:	eeb0 0a48 	vmov.f32	s0, s16
 800d13a:	d108      	bne.n	800d14e <__ieee754_powf+0xe6>
 800d13c:	f1b8 0f00 	cmp.w	r8, #0
 800d140:	db05      	blt.n	800d14e <__ieee754_powf+0xe6>
 800d142:	ecbd 8b02 	vpop	{d8}
 800d146:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d14a:	f000 ba4d 	b.w	800d5e8 <__ieee754_sqrtf>
 800d14e:	f000 fa4e 	bl	800d5ee <fabsf>
 800d152:	b124      	cbz	r4, 800d15e <__ieee754_powf+0xf6>
 800d154:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 800d158:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800d15c:	d117      	bne.n	800d18e <__ieee754_powf+0x126>
 800d15e:	2d00      	cmp	r5, #0
 800d160:	bfbc      	itt	lt
 800d162:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800d166:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800d16a:	f1b8 0f00 	cmp.w	r8, #0
 800d16e:	dacf      	bge.n	800d110 <__ieee754_powf+0xa8>
 800d170:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 800d174:	ea54 0306 	orrs.w	r3, r4, r6
 800d178:	d104      	bne.n	800d184 <__ieee754_powf+0x11c>
 800d17a:	ee70 7a40 	vsub.f32	s15, s0, s0
 800d17e:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800d182:	e7c5      	b.n	800d110 <__ieee754_powf+0xa8>
 800d184:	2e01      	cmp	r6, #1
 800d186:	d1c3      	bne.n	800d110 <__ieee754_powf+0xa8>
 800d188:	eeb1 0a40 	vneg.f32	s0, s0
 800d18c:	e7c0      	b.n	800d110 <__ieee754_powf+0xa8>
 800d18e:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 800d192:	3801      	subs	r0, #1
 800d194:	ea56 0300 	orrs.w	r3, r6, r0
 800d198:	d104      	bne.n	800d1a4 <__ieee754_powf+0x13c>
 800d19a:	ee38 8a48 	vsub.f32	s16, s16, s16
 800d19e:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800d1a2:	e7b5      	b.n	800d110 <__ieee754_powf+0xa8>
 800d1a4:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 800d1a8:	dd6b      	ble.n	800d282 <__ieee754_powf+0x21a>
 800d1aa:	4b99      	ldr	r3, [pc, #612]	; (800d410 <__ieee754_powf+0x3a8>)
 800d1ac:	429c      	cmp	r4, r3
 800d1ae:	dc06      	bgt.n	800d1be <__ieee754_powf+0x156>
 800d1b0:	2d00      	cmp	r5, #0
 800d1b2:	daab      	bge.n	800d10c <__ieee754_powf+0xa4>
 800d1b4:	ed9f 0a97 	vldr	s0, [pc, #604]	; 800d414 <__ieee754_powf+0x3ac>
 800d1b8:	ee20 0a00 	vmul.f32	s0, s0, s0
 800d1bc:	e7a8      	b.n	800d110 <__ieee754_powf+0xa8>
 800d1be:	4b96      	ldr	r3, [pc, #600]	; (800d418 <__ieee754_powf+0x3b0>)
 800d1c0:	429c      	cmp	r4, r3
 800d1c2:	dd02      	ble.n	800d1ca <__ieee754_powf+0x162>
 800d1c4:	2d00      	cmp	r5, #0
 800d1c6:	dcf5      	bgt.n	800d1b4 <__ieee754_powf+0x14c>
 800d1c8:	e7a0      	b.n	800d10c <__ieee754_powf+0xa4>
 800d1ca:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d1ce:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d1d2:	eddf 6a92 	vldr	s13, [pc, #584]	; 800d41c <__ieee754_powf+0x3b4>
 800d1d6:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800d1da:	eee0 6a67 	vfms.f32	s13, s0, s15
 800d1de:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d1e2:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800d1e6:	ee20 7a00 	vmul.f32	s14, s0, s0
 800d1ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1ee:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 800d420 <__ieee754_powf+0x3b8>
 800d1f2:	ee67 7a67 	vnmul.f32	s15, s14, s15
 800d1f6:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 800d424 <__ieee754_powf+0x3bc>
 800d1fa:	eee0 7a07 	vfma.f32	s15, s0, s14
 800d1fe:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800d428 <__ieee754_powf+0x3c0>
 800d202:	eef0 6a67 	vmov.f32	s13, s15
 800d206:	eee0 6a07 	vfma.f32	s13, s0, s14
 800d20a:	ee16 3a90 	vmov	r3, s13
 800d20e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800d212:	f023 030f 	bic.w	r3, r3, #15
 800d216:	ee00 3a90 	vmov	s1, r3
 800d21a:	eee0 0a47 	vfms.f32	s1, s0, s14
 800d21e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800d222:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 800d226:	f025 050f 	bic.w	r5, r5, #15
 800d22a:	ee07 5a10 	vmov	s14, r5
 800d22e:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800d232:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800d236:	ee07 3a90 	vmov	s15, r3
 800d23a:	eee7 0a27 	vfma.f32	s1, s14, s15
 800d23e:	3e01      	subs	r6, #1
 800d240:	ea56 0200 	orrs.w	r2, r6, r0
 800d244:	ee07 5a10 	vmov	s14, r5
 800d248:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d24c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800d250:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800d254:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800d258:	ee17 4a10 	vmov	r4, s14
 800d25c:	bf08      	it	eq
 800d25e:	eeb0 8a40 	vmoveq.f32	s16, s0
 800d262:	2c00      	cmp	r4, #0
 800d264:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800d268:	f340 8184 	ble.w	800d574 <__ieee754_powf+0x50c>
 800d26c:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800d270:	f340 80fc 	ble.w	800d46c <__ieee754_powf+0x404>
 800d274:	eddf 7a67 	vldr	s15, [pc, #412]	; 800d414 <__ieee754_powf+0x3ac>
 800d278:	ee28 0a27 	vmul.f32	s0, s16, s15
 800d27c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d280:	e746      	b.n	800d110 <__ieee754_powf+0xa8>
 800d282:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 800d286:	bf01      	itttt	eq
 800d288:	eddf 7a68 	vldreq	s15, [pc, #416]	; 800d42c <__ieee754_powf+0x3c4>
 800d28c:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800d290:	f06f 0217 	mvneq.w	r2, #23
 800d294:	ee17 4a90 	vmoveq	r4, s15
 800d298:	ea4f 53e4 	mov.w	r3, r4, asr #23
 800d29c:	bf18      	it	ne
 800d29e:	2200      	movne	r2, #0
 800d2a0:	3b7f      	subs	r3, #127	; 0x7f
 800d2a2:	4413      	add	r3, r2
 800d2a4:	4a62      	ldr	r2, [pc, #392]	; (800d430 <__ieee754_powf+0x3c8>)
 800d2a6:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800d2aa:	4294      	cmp	r4, r2
 800d2ac:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 800d2b0:	dd06      	ble.n	800d2c0 <__ieee754_powf+0x258>
 800d2b2:	4a60      	ldr	r2, [pc, #384]	; (800d434 <__ieee754_powf+0x3cc>)
 800d2b4:	4294      	cmp	r4, r2
 800d2b6:	f340 80a4 	ble.w	800d402 <__ieee754_powf+0x39a>
 800d2ba:	3301      	adds	r3, #1
 800d2bc:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800d2c0:	2400      	movs	r4, #0
 800d2c2:	4a5d      	ldr	r2, [pc, #372]	; (800d438 <__ieee754_powf+0x3d0>)
 800d2c4:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800d2c8:	ee07 1a90 	vmov	s15, r1
 800d2cc:	ed92 7a00 	vldr	s14, [r2]
 800d2d0:	4a5a      	ldr	r2, [pc, #360]	; (800d43c <__ieee754_powf+0x3d4>)
 800d2d2:	ee37 6a27 	vadd.f32	s12, s14, s15
 800d2d6:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800d2da:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800d2de:	1049      	asrs	r1, r1, #1
 800d2e0:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800d2e4:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800d2e8:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 800d2ec:	ee37 5ac7 	vsub.f32	s10, s15, s14
 800d2f0:	ee06 1a10 	vmov	s12, r1
 800d2f4:	ee65 4a26 	vmul.f32	s9, s10, s13
 800d2f8:	ee36 7a47 	vsub.f32	s14, s12, s14
 800d2fc:	ee14 7a90 	vmov	r7, s9
 800d300:	4017      	ands	r7, r2
 800d302:	ee05 7a90 	vmov	s11, r7
 800d306:	eea5 5ac6 	vfms.f32	s10, s11, s12
 800d30a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d30e:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800d440 <__ieee754_powf+0x3d8>
 800d312:	eea5 5ae7 	vfms.f32	s10, s11, s15
 800d316:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800d31a:	ee25 6a26 	vmul.f32	s12, s10, s13
 800d31e:	eddf 6a49 	vldr	s13, [pc, #292]	; 800d444 <__ieee754_powf+0x3dc>
 800d322:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800d326:	eddf 6a48 	vldr	s13, [pc, #288]	; 800d448 <__ieee754_powf+0x3e0>
 800d32a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800d32e:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800d41c <__ieee754_powf+0x3b4>
 800d332:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d336:	eddf 6a45 	vldr	s13, [pc, #276]	; 800d44c <__ieee754_powf+0x3e4>
 800d33a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800d33e:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800d450 <__ieee754_powf+0x3e8>
 800d342:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d346:	ee74 6aa5 	vadd.f32	s13, s9, s11
 800d34a:	ee27 5aa7 	vmul.f32	s10, s15, s15
 800d34e:	ee66 6a86 	vmul.f32	s13, s13, s12
 800d352:	eee5 6a07 	vfma.f32	s13, s10, s14
 800d356:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 800d35a:	eef0 7a45 	vmov.f32	s15, s10
 800d35e:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800d362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d366:	ee17 1a90 	vmov	r1, s15
 800d36a:	4011      	ands	r1, r2
 800d36c:	ee07 1a90 	vmov	s15, r1
 800d370:	ee37 7ac5 	vsub.f32	s14, s15, s10
 800d374:	eea5 7ae5 	vfms.f32	s14, s11, s11
 800d378:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800d37c:	ee27 7a24 	vmul.f32	s14, s14, s9
 800d380:	eea6 7a27 	vfma.f32	s14, s12, s15
 800d384:	eeb0 6a47 	vmov.f32	s12, s14
 800d388:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800d38c:	ee16 1a10 	vmov	r1, s12
 800d390:	4011      	ands	r1, r2
 800d392:	ee06 1a90 	vmov	s13, r1
 800d396:	eee5 6ae7 	vfms.f32	s13, s11, s15
 800d39a:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800d454 <__ieee754_powf+0x3ec>
 800d39e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800d458 <__ieee754_powf+0x3f0>
 800d3a2:	ee37 7a66 	vsub.f32	s14, s14, s13
 800d3a6:	ee06 1a10 	vmov	s12, r1
 800d3aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d3ae:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800d45c <__ieee754_powf+0x3f4>
 800d3b2:	492b      	ldr	r1, [pc, #172]	; (800d460 <__ieee754_powf+0x3f8>)
 800d3b4:	eea6 7a27 	vfma.f32	s14, s12, s15
 800d3b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d3bc:	edd1 7a00 	vldr	s15, [r1]
 800d3c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d3c4:	ee07 3a90 	vmov	s15, r3
 800d3c8:	4b26      	ldr	r3, [pc, #152]	; (800d464 <__ieee754_powf+0x3fc>)
 800d3ca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800d3ce:	eef0 7a47 	vmov.f32	s15, s14
 800d3d2:	eee6 7a25 	vfma.f32	s15, s12, s11
 800d3d6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d3da:	edd4 0a00 	vldr	s1, [r4]
 800d3de:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800d3e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d3e6:	ee17 3a90 	vmov	r3, s15
 800d3ea:	4013      	ands	r3, r2
 800d3ec:	ee07 3a90 	vmov	s15, r3
 800d3f0:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800d3f4:	ee76 6ae0 	vsub.f32	s13, s13, s1
 800d3f8:	eee6 6a65 	vfms.f32	s13, s12, s11
 800d3fc:	ee77 7a66 	vsub.f32	s15, s14, s13
 800d400:	e70f      	b.n	800d222 <__ieee754_powf+0x1ba>
 800d402:	2401      	movs	r4, #1
 800d404:	e75d      	b.n	800d2c2 <__ieee754_powf+0x25a>
 800d406:	bf00      	nop
 800d408:	080194cb 	.word	0x080194cb
 800d40c:	00000000 	.word	0x00000000
 800d410:	3f7ffff7 	.word	0x3f7ffff7
 800d414:	7149f2ca 	.word	0x7149f2ca
 800d418:	3f800007 	.word	0x3f800007
 800d41c:	3eaaaaab 	.word	0x3eaaaaab
 800d420:	3fb8aa3b 	.word	0x3fb8aa3b
 800d424:	36eca570 	.word	0x36eca570
 800d428:	3fb8aa00 	.word	0x3fb8aa00
 800d42c:	4b800000 	.word	0x4b800000
 800d430:	001cc471 	.word	0x001cc471
 800d434:	005db3d6 	.word	0x005db3d6
 800d438:	08019854 	.word	0x08019854
 800d43c:	fffff000 	.word	0xfffff000
 800d440:	3e6c3255 	.word	0x3e6c3255
 800d444:	3e53f142 	.word	0x3e53f142
 800d448:	3e8ba305 	.word	0x3e8ba305
 800d44c:	3edb6db7 	.word	0x3edb6db7
 800d450:	3f19999a 	.word	0x3f19999a
 800d454:	3f76384f 	.word	0x3f76384f
 800d458:	3f763800 	.word	0x3f763800
 800d45c:	369dc3a0 	.word	0x369dc3a0
 800d460:	08019864 	.word	0x08019864
 800d464:	0801985c 	.word	0x0801985c
 800d468:	3338aa3c 	.word	0x3338aa3c
 800d46c:	f040 8092 	bne.w	800d594 <__ieee754_powf+0x52c>
 800d470:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800d468 <__ieee754_powf+0x400>
 800d474:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d478:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800d47c:	eef4 6ac7 	vcmpe.f32	s13, s14
 800d480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d484:	f73f aef6 	bgt.w	800d274 <__ieee754_powf+0x20c>
 800d488:	15db      	asrs	r3, r3, #23
 800d48a:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800d48e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d492:	4103      	asrs	r3, r0
 800d494:	4423      	add	r3, r4
 800d496:	4949      	ldr	r1, [pc, #292]	; (800d5bc <__ieee754_powf+0x554>)
 800d498:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d49c:	3a7f      	subs	r2, #127	; 0x7f
 800d49e:	4111      	asrs	r1, r2
 800d4a0:	ea23 0101 	bic.w	r1, r3, r1
 800d4a4:	ee07 1a10 	vmov	s14, r1
 800d4a8:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800d4ac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800d4b0:	f1c2 0217 	rsb	r2, r2, #23
 800d4b4:	4110      	asrs	r0, r2
 800d4b6:	2c00      	cmp	r4, #0
 800d4b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d4bc:	bfb8      	it	lt
 800d4be:	4240      	neglt	r0, r0
 800d4c0:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800d4c4:	eddf 6a3e 	vldr	s13, [pc, #248]	; 800d5c0 <__ieee754_powf+0x558>
 800d4c8:	ee17 3a10 	vmov	r3, s14
 800d4cc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800d4d0:	f023 030f 	bic.w	r3, r3, #15
 800d4d4:	ee07 3a10 	vmov	s14, r3
 800d4d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d4dc:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800d4e0:	eddf 7a38 	vldr	s15, [pc, #224]	; 800d5c4 <__ieee754_powf+0x55c>
 800d4e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d4e8:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800d4ec:	eddf 6a36 	vldr	s13, [pc, #216]	; 800d5c8 <__ieee754_powf+0x560>
 800d4f0:	eeb0 0a67 	vmov.f32	s0, s15
 800d4f4:	eea7 0a26 	vfma.f32	s0, s14, s13
 800d4f8:	eeb0 6a40 	vmov.f32	s12, s0
 800d4fc:	eea7 6a66 	vfms.f32	s12, s14, s13
 800d500:	ee20 7a00 	vmul.f32	s14, s0, s0
 800d504:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800d508:	eddf 6a30 	vldr	s13, [pc, #192]	; 800d5cc <__ieee754_powf+0x564>
 800d50c:	ed9f 6a30 	vldr	s12, [pc, #192]	; 800d5d0 <__ieee754_powf+0x568>
 800d510:	eea7 6a26 	vfma.f32	s12, s14, s13
 800d514:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800d5d4 <__ieee754_powf+0x56c>
 800d518:	eee6 6a07 	vfma.f32	s13, s12, s14
 800d51c:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 800d5d8 <__ieee754_powf+0x570>
 800d520:	eea6 6a87 	vfma.f32	s12, s13, s14
 800d524:	eddf 6a2d 	vldr	s13, [pc, #180]	; 800d5dc <__ieee754_powf+0x574>
 800d528:	eee6 6a07 	vfma.f32	s13, s12, s14
 800d52c:	eeb0 6a40 	vmov.f32	s12, s0
 800d530:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800d534:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800d538:	eeb0 7a46 	vmov.f32	s14, s12
 800d53c:	ee77 6a66 	vsub.f32	s13, s14, s13
 800d540:	ee20 6a06 	vmul.f32	s12, s0, s12
 800d544:	eee0 7a27 	vfma.f32	s15, s0, s15
 800d548:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800d54c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d550:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800d554:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d558:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800d55c:	ee10 3a10 	vmov	r3, s0
 800d560:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800d564:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d568:	da1a      	bge.n	800d5a0 <__ieee754_powf+0x538>
 800d56a:	f000 f8b7 	bl	800d6dc <scalbnf>
 800d56e:	ee20 0a08 	vmul.f32	s0, s0, s16
 800d572:	e5cd      	b.n	800d110 <__ieee754_powf+0xa8>
 800d574:	4a1a      	ldr	r2, [pc, #104]	; (800d5e0 <__ieee754_powf+0x578>)
 800d576:	4293      	cmp	r3, r2
 800d578:	dd02      	ble.n	800d580 <__ieee754_powf+0x518>
 800d57a:	eddf 7a1a 	vldr	s15, [pc, #104]	; 800d5e4 <__ieee754_powf+0x57c>
 800d57e:	e67b      	b.n	800d278 <__ieee754_powf+0x210>
 800d580:	d108      	bne.n	800d594 <__ieee754_powf+0x52c>
 800d582:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d586:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800d58a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d58e:	f6ff af7b 	blt.w	800d488 <__ieee754_powf+0x420>
 800d592:	e7f2      	b.n	800d57a <__ieee754_powf+0x512>
 800d594:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800d598:	f73f af76 	bgt.w	800d488 <__ieee754_powf+0x420>
 800d59c:	2000      	movs	r0, #0
 800d59e:	e78f      	b.n	800d4c0 <__ieee754_powf+0x458>
 800d5a0:	ee00 3a10 	vmov	s0, r3
 800d5a4:	e7e3      	b.n	800d56e <__ieee754_powf+0x506>
 800d5a6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d5aa:	e5b1      	b.n	800d110 <__ieee754_powf+0xa8>
 800d5ac:	eeb0 0a68 	vmov.f32	s0, s17
 800d5b0:	e5ae      	b.n	800d110 <__ieee754_powf+0xa8>
 800d5b2:	eeb0 0a48 	vmov.f32	s0, s16
 800d5b6:	e5ab      	b.n	800d110 <__ieee754_powf+0xa8>
 800d5b8:	2600      	movs	r6, #0
 800d5ba:	e590      	b.n	800d0de <__ieee754_powf+0x76>
 800d5bc:	007fffff 	.word	0x007fffff
 800d5c0:	3f317218 	.word	0x3f317218
 800d5c4:	35bfbe8c 	.word	0x35bfbe8c
 800d5c8:	3f317200 	.word	0x3f317200
 800d5cc:	3331bb4c 	.word	0x3331bb4c
 800d5d0:	b5ddea0e 	.word	0xb5ddea0e
 800d5d4:	388ab355 	.word	0x388ab355
 800d5d8:	bb360b61 	.word	0xbb360b61
 800d5dc:	3e2aaaab 	.word	0x3e2aaaab
 800d5e0:	43160000 	.word	0x43160000
 800d5e4:	0da24260 	.word	0x0da24260

0800d5e8 <__ieee754_sqrtf>:
 800d5e8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800d5ec:	4770      	bx	lr

0800d5ee <fabsf>:
 800d5ee:	ee10 3a10 	vmov	r3, s0
 800d5f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d5f6:	ee00 3a10 	vmov	s0, r3
 800d5fa:	4770      	bx	lr

0800d5fc <finitef>:
 800d5fc:	b082      	sub	sp, #8
 800d5fe:	ed8d 0a01 	vstr	s0, [sp, #4]
 800d602:	9801      	ldr	r0, [sp, #4]
 800d604:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800d608:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800d60c:	bfac      	ite	ge
 800d60e:	2000      	movge	r0, #0
 800d610:	2001      	movlt	r0, #1
 800d612:	b002      	add	sp, #8
 800d614:	4770      	bx	lr
	...

0800d618 <nanf>:
 800d618:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d620 <nanf+0x8>
 800d61c:	4770      	bx	lr
 800d61e:	bf00      	nop
 800d620:	7fc00000 	.word	0x7fc00000

0800d624 <rintf>:
 800d624:	ee10 2a10 	vmov	r2, s0
 800d628:	b513      	push	{r0, r1, r4, lr}
 800d62a:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800d62e:	397f      	subs	r1, #127	; 0x7f
 800d630:	2916      	cmp	r1, #22
 800d632:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800d636:	dc47      	bgt.n	800d6c8 <rintf+0xa4>
 800d638:	b32b      	cbz	r3, 800d686 <rintf+0x62>
 800d63a:	2900      	cmp	r1, #0
 800d63c:	ee10 3a10 	vmov	r3, s0
 800d640:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 800d644:	da21      	bge.n	800d68a <rintf+0x66>
 800d646:	f3c2 0316 	ubfx	r3, r2, #0, #23
 800d64a:	425b      	negs	r3, r3
 800d64c:	4921      	ldr	r1, [pc, #132]	; (800d6d4 <rintf+0xb0>)
 800d64e:	0a5b      	lsrs	r3, r3, #9
 800d650:	0d12      	lsrs	r2, r2, #20
 800d652:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d656:	0512      	lsls	r2, r2, #20
 800d658:	4313      	orrs	r3, r2
 800d65a:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800d65e:	ee07 3a90 	vmov	s15, r3
 800d662:	edd1 6a00 	vldr	s13, [r1]
 800d666:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800d66a:	ed8d 7a01 	vstr	s14, [sp, #4]
 800d66e:	eddd 7a01 	vldr	s15, [sp, #4]
 800d672:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d676:	ee17 3a90 	vmov	r3, s15
 800d67a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d67e:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 800d682:	ee00 3a10 	vmov	s0, r3
 800d686:	b002      	add	sp, #8
 800d688:	bd10      	pop	{r4, pc}
 800d68a:	4a13      	ldr	r2, [pc, #76]	; (800d6d8 <rintf+0xb4>)
 800d68c:	410a      	asrs	r2, r1
 800d68e:	4213      	tst	r3, r2
 800d690:	d0f9      	beq.n	800d686 <rintf+0x62>
 800d692:	0854      	lsrs	r4, r2, #1
 800d694:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 800d698:	d006      	beq.n	800d6a8 <rintf+0x84>
 800d69a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800d69e:	ea23 0304 	bic.w	r3, r3, r4
 800d6a2:	fa42 f101 	asr.w	r1, r2, r1
 800d6a6:	430b      	orrs	r3, r1
 800d6a8:	4a0a      	ldr	r2, [pc, #40]	; (800d6d4 <rintf+0xb0>)
 800d6aa:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800d6ae:	ed90 7a00 	vldr	s14, [r0]
 800d6b2:	ee07 3a90 	vmov	s15, r3
 800d6b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d6ba:	edcd 7a01 	vstr	s15, [sp, #4]
 800d6be:	ed9d 0a01 	vldr	s0, [sp, #4]
 800d6c2:	ee30 0a47 	vsub.f32	s0, s0, s14
 800d6c6:	e7de      	b.n	800d686 <rintf+0x62>
 800d6c8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d6cc:	d3db      	bcc.n	800d686 <rintf+0x62>
 800d6ce:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d6d2:	e7d8      	b.n	800d686 <rintf+0x62>
 800d6d4:	0801986c 	.word	0x0801986c
 800d6d8:	007fffff 	.word	0x007fffff

0800d6dc <scalbnf>:
 800d6dc:	ee10 3a10 	vmov	r3, s0
 800d6e0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800d6e4:	d025      	beq.n	800d732 <scalbnf+0x56>
 800d6e6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800d6ea:	d302      	bcc.n	800d6f2 <scalbnf+0x16>
 800d6ec:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d6f0:	4770      	bx	lr
 800d6f2:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800d6f6:	d122      	bne.n	800d73e <scalbnf+0x62>
 800d6f8:	4b2a      	ldr	r3, [pc, #168]	; (800d7a4 <scalbnf+0xc8>)
 800d6fa:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800d7a8 <scalbnf+0xcc>
 800d6fe:	4298      	cmp	r0, r3
 800d700:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d704:	db16      	blt.n	800d734 <scalbnf+0x58>
 800d706:	ee10 3a10 	vmov	r3, s0
 800d70a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d70e:	3a19      	subs	r2, #25
 800d710:	4402      	add	r2, r0
 800d712:	2afe      	cmp	r2, #254	; 0xfe
 800d714:	dd15      	ble.n	800d742 <scalbnf+0x66>
 800d716:	ee10 3a10 	vmov	r3, s0
 800d71a:	eddf 7a24 	vldr	s15, [pc, #144]	; 800d7ac <scalbnf+0xd0>
 800d71e:	eddf 6a24 	vldr	s13, [pc, #144]	; 800d7b0 <scalbnf+0xd4>
 800d722:	2b00      	cmp	r3, #0
 800d724:	eeb0 7a67 	vmov.f32	s14, s15
 800d728:	bfb8      	it	lt
 800d72a:	eef0 7a66 	vmovlt.f32	s15, s13
 800d72e:	ee27 0a27 	vmul.f32	s0, s14, s15
 800d732:	4770      	bx	lr
 800d734:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800d7b4 <scalbnf+0xd8>
 800d738:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d73c:	4770      	bx	lr
 800d73e:	0dd2      	lsrs	r2, r2, #23
 800d740:	e7e6      	b.n	800d710 <scalbnf+0x34>
 800d742:	2a00      	cmp	r2, #0
 800d744:	dd06      	ble.n	800d754 <scalbnf+0x78>
 800d746:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d74a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800d74e:	ee00 3a10 	vmov	s0, r3
 800d752:	4770      	bx	lr
 800d754:	f112 0f16 	cmn.w	r2, #22
 800d758:	da1a      	bge.n	800d790 <scalbnf+0xb4>
 800d75a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d75e:	4298      	cmp	r0, r3
 800d760:	ee10 3a10 	vmov	r3, s0
 800d764:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d768:	dd0a      	ble.n	800d780 <scalbnf+0xa4>
 800d76a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800d7ac <scalbnf+0xd0>
 800d76e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800d7b0 <scalbnf+0xd4>
 800d772:	eef0 7a40 	vmov.f32	s15, s0
 800d776:	2b00      	cmp	r3, #0
 800d778:	bf18      	it	ne
 800d77a:	eeb0 0a47 	vmovne.f32	s0, s14
 800d77e:	e7db      	b.n	800d738 <scalbnf+0x5c>
 800d780:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800d7b4 <scalbnf+0xd8>
 800d784:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800d7b8 <scalbnf+0xdc>
 800d788:	eef0 7a40 	vmov.f32	s15, s0
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	e7f3      	b.n	800d778 <scalbnf+0x9c>
 800d790:	3219      	adds	r2, #25
 800d792:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d796:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800d79a:	eddf 7a08 	vldr	s15, [pc, #32]	; 800d7bc <scalbnf+0xe0>
 800d79e:	ee07 3a10 	vmov	s14, r3
 800d7a2:	e7c4      	b.n	800d72e <scalbnf+0x52>
 800d7a4:	ffff3cb0 	.word	0xffff3cb0
 800d7a8:	4c000000 	.word	0x4c000000
 800d7ac:	7149f2ca 	.word	0x7149f2ca
 800d7b0:	f149f2ca 	.word	0xf149f2ca
 800d7b4:	0da24260 	.word	0x0da24260
 800d7b8:	8da24260 	.word	0x8da24260
 800d7bc:	33000000 	.word	0x33000000

0800d7c0 <__ieee754_logf>:
 800d7c0:	ee10 3a10 	vmov	r3, s0
 800d7c4:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800d7c8:	d106      	bne.n	800d7d8 <__ieee754_logf+0x18>
 800d7ca:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800d960 <__ieee754_logf+0x1a0>
 800d7ce:	eddf 7a65 	vldr	s15, [pc, #404]	; 800d964 <__ieee754_logf+0x1a4>
 800d7d2:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800d7d6:	4770      	bx	lr
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	da02      	bge.n	800d7e2 <__ieee754_logf+0x22>
 800d7dc:	ee30 7a40 	vsub.f32	s14, s0, s0
 800d7e0:	e7f5      	b.n	800d7ce <__ieee754_logf+0xe>
 800d7e2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d7e6:	db02      	blt.n	800d7ee <__ieee754_logf+0x2e>
 800d7e8:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d7ec:	4770      	bx	lr
 800d7ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d7f2:	bfb8      	it	lt
 800d7f4:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 800d968 <__ieee754_logf+0x1a8>
 800d7f8:	485c      	ldr	r0, [pc, #368]	; (800d96c <__ieee754_logf+0x1ac>)
 800d7fa:	bfbe      	ittt	lt
 800d7fc:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800d800:	f06f 0118 	mvnlt.w	r1, #24
 800d804:	ee17 3a90 	vmovlt	r3, s15
 800d808:	ea4f 52e3 	mov.w	r2, r3, asr #23
 800d80c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d810:	4418      	add	r0, r3
 800d812:	bfa8      	it	ge
 800d814:	2100      	movge	r1, #0
 800d816:	3a7f      	subs	r2, #127	; 0x7f
 800d818:	440a      	add	r2, r1
 800d81a:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 800d81e:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 800d822:	4319      	orrs	r1, r3
 800d824:	ee00 1a10 	vmov	s0, r1
 800d828:	4951      	ldr	r1, [pc, #324]	; (800d970 <__ieee754_logf+0x1b0>)
 800d82a:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 800d82e:	f103 000f 	add.w	r0, r3, #15
 800d832:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d836:	4001      	ands	r1, r0
 800d838:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d83c:	bb89      	cbnz	r1, 800d8a2 <__ieee754_logf+0xe2>
 800d83e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800d842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d846:	d10f      	bne.n	800d868 <__ieee754_logf+0xa8>
 800d848:	2a00      	cmp	r2, #0
 800d84a:	f000 8085 	beq.w	800d958 <__ieee754_logf+0x198>
 800d84e:	ee07 2a90 	vmov	s15, r2
 800d852:	ed9f 0a48 	vldr	s0, [pc, #288]	; 800d974 <__ieee754_logf+0x1b4>
 800d856:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800d978 <__ieee754_logf+0x1b8>
 800d85a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d85e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800d862:	eea7 0a87 	vfma.f32	s0, s15, s14
 800d866:	4770      	bx	lr
 800d868:	eddf 6a44 	vldr	s13, [pc, #272]	; 800d97c <__ieee754_logf+0x1bc>
 800d86c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d870:	eee0 7a66 	vfms.f32	s15, s0, s13
 800d874:	ee20 7a00 	vmul.f32	s14, s0, s0
 800d878:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d87c:	b912      	cbnz	r2, 800d884 <__ieee754_logf+0xc4>
 800d87e:	ee30 0a47 	vsub.f32	s0, s0, s14
 800d882:	4770      	bx	lr
 800d884:	ee07 2a90 	vmov	s15, r2
 800d888:	eddf 6a3a 	vldr	s13, [pc, #232]	; 800d974 <__ieee754_logf+0x1b4>
 800d88c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d890:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800d894:	ee37 0a40 	vsub.f32	s0, s14, s0
 800d898:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800d978 <__ieee754_logf+0x1b8>
 800d89c:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800d8a0:	4770      	bx	lr
 800d8a2:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800d8a6:	ee70 7a27 	vadd.f32	s15, s0, s15
 800d8aa:	eddf 5a35 	vldr	s11, [pc, #212]	; 800d980 <__ieee754_logf+0x1c0>
 800d8ae:	eddf 4a35 	vldr	s9, [pc, #212]	; 800d984 <__ieee754_logf+0x1c4>
 800d8b2:	4935      	ldr	r1, [pc, #212]	; (800d988 <__ieee754_logf+0x1c8>)
 800d8b4:	ee80 6a27 	vdiv.f32	s12, s0, s15
 800d8b8:	4419      	add	r1, r3
 800d8ba:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 800d8be:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800d8c2:	430b      	orrs	r3, r1
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	ee07 2a90 	vmov	s15, r2
 800d8ca:	ee26 5a06 	vmul.f32	s10, s12, s12
 800d8ce:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800d8d2:	ee25 7a05 	vmul.f32	s14, s10, s10
 800d8d6:	eddf 7a2d 	vldr	s15, [pc, #180]	; 800d98c <__ieee754_logf+0x1cc>
 800d8da:	eee7 7a25 	vfma.f32	s15, s14, s11
 800d8de:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800d990 <__ieee754_logf+0x1d0>
 800d8e2:	eee7 5a87 	vfma.f32	s11, s15, s14
 800d8e6:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800d994 <__ieee754_logf+0x1d4>
 800d8ea:	eee7 7a24 	vfma.f32	s15, s14, s9
 800d8ee:	eddf 4a2a 	vldr	s9, [pc, #168]	; 800d998 <__ieee754_logf+0x1d8>
 800d8f2:	eee7 4a87 	vfma.f32	s9, s15, s14
 800d8f6:	eddf 7a29 	vldr	s15, [pc, #164]	; 800d99c <__ieee754_logf+0x1dc>
 800d8fa:	eee4 7a87 	vfma.f32	s15, s9, s14
 800d8fe:	ee67 7a85 	vmul.f32	s15, s15, s10
 800d902:	eee5 7a87 	vfma.f32	s15, s11, s14
 800d906:	dd1c      	ble.n	800d942 <__ieee754_logf+0x182>
 800d908:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800d90c:	ee20 7a07 	vmul.f32	s14, s0, s14
 800d910:	ee27 7a00 	vmul.f32	s14, s14, s0
 800d914:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d918:	ee67 7a86 	vmul.f32	s15, s15, s12
 800d91c:	b922      	cbnz	r2, 800d928 <__ieee754_logf+0x168>
 800d91e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d922:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d926:	4770      	bx	lr
 800d928:	ed9f 6a12 	vldr	s12, [pc, #72]	; 800d974 <__ieee754_logf+0x1b4>
 800d92c:	eee6 7a86 	vfma.f32	s15, s13, s12
 800d930:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d934:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800d938:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800d978 <__ieee754_logf+0x1b8>
 800d93c:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800d940:	4770      	bx	lr
 800d942:	ee70 7a67 	vsub.f32	s15, s0, s15
 800d946:	ee67 7a86 	vmul.f32	s15, s15, s12
 800d94a:	2a00      	cmp	r2, #0
 800d94c:	d0e9      	beq.n	800d922 <__ieee754_logf+0x162>
 800d94e:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800d974 <__ieee754_logf+0x1b4>
 800d952:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d956:	e7ed      	b.n	800d934 <__ieee754_logf+0x174>
 800d958:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800d964 <__ieee754_logf+0x1a4>
 800d95c:	4770      	bx	lr
 800d95e:	bf00      	nop
 800d960:	cc000000 	.word	0xcc000000
 800d964:	00000000 	.word	0x00000000
 800d968:	4c000000 	.word	0x4c000000
 800d96c:	004afb20 	.word	0x004afb20
 800d970:	007ffff0 	.word	0x007ffff0
 800d974:	3717f7d1 	.word	0x3717f7d1
 800d978:	3f317180 	.word	0x3f317180
 800d97c:	3eaaaaab 	.word	0x3eaaaaab
 800d980:	3e1cd04f 	.word	0x3e1cd04f
 800d984:	3e178897 	.word	0x3e178897
 800d988:	ffcf5c30 	.word	0xffcf5c30
 800d98c:	3e638e29 	.word	0x3e638e29
 800d990:	3ecccccd 	.word	0x3ecccccd
 800d994:	3e3a3325 	.word	0x3e3a3325
 800d998:	3e924925 	.word	0x3e924925
 800d99c:	3f2aaaab 	.word	0x3f2aaaab

0800d9a0 <_init>:
 800d9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9a2:	bf00      	nop
 800d9a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9a6:	bc08      	pop	{r3}
 800d9a8:	469e      	mov	lr, r3
 800d9aa:	4770      	bx	lr

0800d9ac <_fini>:
 800d9ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9ae:	bf00      	nop
 800d9b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9b2:	bc08      	pop	{r3}
 800d9b4:	469e      	mov	lr, r3
 800d9b6:	4770      	bx	lr
